<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-01-20T13:56:17+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用node-xlsx进行excel文件的读写]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/"/>
    <updated>2016-03-04T14:54:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module</id>
    <content type="html"><![CDATA[<h3>解析excel文件</h3>

<p>在我的应用中需要对excel文件内容进行搜索，所以需要一个解析excel文件的插件。</p>

<p><a href="https://www.npmjs.com/package/node-xlsx">node-xlsx</a>插件可以让我们解析、修改、新建excel文件。</p>

<!-- more -->


<p>安装到所在文件夹：</p>

<pre><code>npm install excel node-xlsx
</code></pre>

<p>或者安装为全局应用：</p>

<pre><code>npm install -g excel node-xlsx
</code></pre>

<p>然后就可以这样解析excel文件：</p>

<pre><code class="javascript">var xlsx = require('node-xlsx');
var obj = xlsx.parse(__dirname + '/myFile.xlsx'); // parses a file 
</code></pre>

<p>下面是一段样例代码：</p>

<pre><code class="javascript">
// Include modules.
var xlsx = require('node-xlsx');

// read xlsx file and analyse
var excelObj = xlsx.parse('fileName.xlsx');

for (var sheet in excelObj) {
    if (sheet !== '0' &amp;&amp; excelObj.hasOwnProperty(sheet)) { // sheet is '0', '1', ...
        var sheetData = excelObj[sheet].data; // data inside a sheet, which is an two-dimention array
        var rowCount = sheetData.length;
        activityCountDic[sheet] = rowCount;
        for (var i = 1; i &lt; rowCount; i++) {
            var rowData = sheetData[i]; // data inside one row, which is an one-dimention array
            var columnCount = rowData.length;
            for (var j = 0; j &lt; columnCount; j++) {
                var cellData = rowData[j].toString(); // data in j column of the given row
                console.log(cellData);
            }
        }
    }
}
</code></pre>

<h3>写入excel文件</h3>

<pre><code class="javascript">// Include modules.
var xlsx = require('node-xlsx');
var fs = require('fs');

// 写入excel之后是一个一行两列的表格
var data1 = [
['name', 'age']
];

// 写入excel之后是一个三行两列的表格
var data2 = [
['name', 'age'], 
['zhang san', '10'], 
['li si', '11']
];

var buffer = xlsx.build([
    {
        name:'sheet1',
        data:data1
    }, {
        name:'sheet2',
        data:data2
    }
    ]);

fs.writeFileSync('book.xlsx', buffer, {'flag':'w'}); // 如果文件存在，覆盖
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[https在Server端的Nodejs实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs/"/>
    <updated>2015-12-30T21:23:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs</id>
    <content type="html"><![CDATA[<p>服务器端利用Nodejs创建https的Server，请参考<a href="http://blog.fens.me/nodejs-https-server/">Nodejs创建HTTPS服务器</a></p>

<!-- more -->


<p>首先确保已经安装nodejs、nodejs-https组件和openssl。</p>

<h3>用openssl生成密钥</h3>

<ul>
<li>cd到你的server路径。</li>
<li>生成私钥key文件privatekey.pem</li>
</ul>


<pre><code>openssl genrsa -out privatekey.pem 1024
</code></pre>

<ul>
<li>通过私钥生成CSR证书签名</li>
</ul>


<pre><code>openssl req -new -key privatekey.pem -out certrequest.csr
</code></pre>

<p>填写一些证书信息：</p>

<blockquote><p>You are about to be asked to enter information that will be incorporated
into your certificate request.</p>

<p>What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lsquo;.&rsquo;, the field will be left blank.</p></blockquote>

<pre><code>Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Zhejiang
Locality Name (eg, city) []:Hangzhou
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organization
Organizational Unit Name (eg, section) []:Organization
Common Name (eg, YOUR name) []:Name Zhang
Email Address []:Name@gmail.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>

<ul>
<li>通过私钥和证书签名生成证书文件</li>
</ul>


<pre><code>openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem
</code></pre>

<p>至此，我们有了三个文件：</p>

<ul>
<li>privatekey.pem: 私钥</li>
<li>certrequest.csr: CSR证书签名</li>
<li>certificate.pem: 证书文件</li>
</ul>


<h3>实现服务器端app</h3>

<pre><code class="javascript">var https = require('https')，
    fs = require("fs");

var options = {
    key: fs.readFileSync('./privatekey.pem'),
    cert: fs.readFileSync('./certificate.pem')
};

https.createServer(options, function(request, response) {
    response.writeHead(200);
    response.end("hello world\n");
}).listen(8181);
console.log('Https server listening on port ' + 8181);
</code></pre>

<p>在Safari中选择信任证书之后，就可以看到下面的页面了：</p>

<p><img src="/images/https-browser-screenshot.png" alt="003_package_name_in_Eclipse" /></p>

<h3>https的安全性</h3>

<p>对于http的server，在浏览器中看是这样的：</p>

<p><img src="/images/http-browser-sample.png" alt="http-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：http的request数据如下：</p>

<p><img src="/images/http-request-charles.png" alt="http-request-charles" /></p>

<p>http的response数据如下：</p>

<p><img src="/images/http-response-charles.png" alt="http-response-charles" /></p>

<p>可以看出，所有东西都是明文传送，如果被截取，必然造成信息泄露。</p>

<p>同样地，看一下https的server传输中的数据。
浏览器中看到的是这样的：</p>

<p><img src="/images/https-browser-sample.png" alt="https-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：https的request数据如下：</p>

<p><img src="/images/https-request-charles.png" alt="https-request-charles" /></p>

<p>从request中只可以看到URL地址，却看不到参数格式和内容。</p>

<p>https的response数据如下：</p>

<p><img src="/images/https-response-charles.png" alt="https-response-charles" /></p>

<p>即使网络传输中被截获，也不会造成信息泄露。</p>

<p>但是还有一个不安全的地方：对于上面的情况，我们使用的是https的get方法从server获取数据，需要在地址栏中输入查询参数，而这些参数可能通过浏览器的历史记录泄露。这一点可以通过使用https的post方法解决，参考<a href="http://cuishen.iteye.com/blog/2019925">http https get post 的区别，定义/安全性/性能</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用Node.js搭建一个简单的服务器]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/27/using-node-dot-js-for-a-simple-server/"/>
    <updated>2015-11-27T16:45:10+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/27/using-node-dot-js-for-a-simple-server</id>
    <content type="html"><![CDATA[<h3>第一个简单应用</h3>

<p>参考<a href="http://code.tutsplus.com/tutorials/nodejs-for-beginners--net-26314">Node.js for Beginners</a>. 去除以下代码：</p>

<pre><code class="javascript">request.on("end", function () {

});
</code></pre>

<h3>如何调试Node.js在服务器上的应用</h3>

<!-- more -->


<p><a href="https://github.com/node-inspector/node-inspector">node-inspector</a>是一款非常好用的GUI调试工具，可以让你像调试Web页面一样，在Chrome或者Opera里面调试Node.js应用。</p>

<p>安装</p>

<pre><code>$ npm install -g node-inspector
</code></pre>

<p>打开</p>

<pre><code>$ node-debug app.js
</code></pre>

<h4>注意</h4>

<ul>
<li>node-inspector只支持Chrome和Opera，所以至少将其中之一设为你的默认浏览器。</li>
<li>node-inspector使用127.0.0.1:8080进行调试，所以，保证localhost的8080端口没有被占用。</li>
</ul>

]]></content>
  </entry>
  
</feed>
