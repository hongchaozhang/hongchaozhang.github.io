<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2022-10-08T12:20:40+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何控制iOS应用的屏幕方向]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations/"/>
    <updated>2019-05-21T18:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>背景</h2>

<p>一个iOS应用默认都会支持所有的是个方向，当用户旋转屏幕的时候，应用会自动旋转。</p>

<p>有些时候，这可能不是我们想要的。比如你设计了一个只支持竖屏方向的应用，但是又想在某些时候支持Landscape模式，比如播放视频的时候。iOS应用有很多地方的设置会影响屏幕方向，iOS9之后，iPad又支持了split view，使得这个控制更加复杂。</p>

<h2>总起</h2>

<p>iPhone比较简单，因为其没有spit view的功能，iPad因为有了spilt view功能，在屏幕方向的控制上更复杂一些。</p>

<p>首先，需要明确：有哪些因素会影响到App的屏幕方向？</p>

<p><strong>1. Project设置（info.plist）</strong></p>

<p>有两个地方可以进行该项设置：</p>

<ul>
<li><p>Project->Target->General->Device Orientation</p>

<p><img src="/images/ScreenOrientationProjectSetting.png" alt="screen orientation project setting" /></p></li>
<li><p>Project的info.plist配置文件</p>

<p><img src="/images/ScreenOrientationInfoPlist.png" alt="screen orientation info plist" /></p></li>
</ul>


<p>这两个地方的设置是一致的：在一个地方改动，另一个地方会同步修改。其中：info.plist中的“Supported interface orientations (iPad)”属性对应于iPad的设置（Device选择iPad），info.plist中的“Supported interface orientations”属性对应于iPhone和Universal的设置（Device选择iPhone或者Universal，这两项的设置始终保持一致）。</p>

<p><strong>2. 在代码中设置应用支持的屏幕方向</strong></p>

<p>有两种方法可以在代码中设置应用支持的屏幕方向：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>每个<code>UIViewController</code>还可以通过<code>supportedInterfaceOrientations</code>方法设置自己支持的屏幕方向</li>
</ul>


<p>系统会自动将两种方法中支持的屏幕方向取交集，作为最终该view controller支持的屏幕方向。如果交集为空，那么应用将会Crash。</p>

<p><strong>3. <code>UIViewController</code>中的<code>shouldAutorotate</code>属性</strong></p>

<p>该属性是只读属性，用来控制该view controller可不可以旋转。可以在自己的view controller中将其override，返回自己的逻辑，甚至将其override为读写属性，可以在其它地方进行设置。比如：</p>

<pre><code class="swift">override public var shouldAutorotate: Bool {
    get {
        return self.shouldAutorotateVariable
    }
    set {
        self.shouldAutorotateVariable = newValue
    }
}
</code></pre>

<p>其中<code>shouldAutorotateVariable</code>为view controller中自定义的一私有变量。</p>

<h2>iPhone</h2>

<p>如果某个view controller中的<code>shouldAutorotate</code>被设置为<code>false</code>，那么系统将忽略下面的设置：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>系统只考虑用户在“Project设置（info.plist）”中的设置。</p>

<p>如果某个view controller中的<code>shouldAutorotate</code>未被重写（或者被重写为<code>true</code>），那么系统将优先考虑使用下面两个设置的交集：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>如果没有以上两个设置，再使用“Project设置（info.plist）”中的设置。</p>

<h2>iPad</h2>

<p>从iOS9开始，iPad开始支持split view功能。关于这个功能的设置说明，可以参考苹果官方文档：<a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a>。简单的说，就是：如果info.plist中的“Supported interface orientations (iPad)”属性对应的值包含了四个方向，同时<code>UIRequiresFullScreen</code>对应的值为<code>NO</code>，那么系统默认该应用支持split view属性，同时系统将忽略下面两处代码：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li><code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>以及<code>UIViewController</code>中<code>shouldAutorotate</code>的值。</p>

<p>也就是说：支持split view的应用将不能被禁止旋转，至少不能通过本文中的方法进行禁止旋转。</p>

<p>如果info.plist中的“Supported interface orientations (iPad)”属性对应的值未包含四个方向，或者“UIRequiresFullScreen”对应的值为<code>NO</code>，那么该应用不支持split view功能，其屏幕方向控制方法同iPhone相同。</p>

<blockquote><p>注意：对于“Project设置（info.plist）”设置，建议在info.plist中进行，直接设置一下三个属性的值：
* Supported interface orientations (iPad)
* Supported interface orientations
* UIRequiresFullScreen</p>

<p>在Project->Target->General->Device Orientation中进行设置，有点迷惑性：因为即使“Device”选的是“Universal”，“iPad”下面的设置也会起作用。</p></blockquote>

<h2>参考</h2>

<ol>
<li><a href="https://mobiarch.wordpress.com/2017/04/22/controlling-screen-orientation-of-ios-apps/">Controlling Screen Orientation of iOS Apps</a></li>
<li><a href="https://stackoverflow.com/questions/32782044/ios-9-supportedinterfaceorientations-not-working/32782517#32782517">iOS 9 supportedInterfaceOrientations not working</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在swift和Objc之间转换的一些想法]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift/"/>
    <updated>2018-11-13T10:50:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在工作中我们有时候需要在swift和objc之间进行转换，这时候有没有一些工具可以帮助我们呢？</p>

<blockquote><p>当然，大部分时候，我们不需要转换，因为swift和objc的类和方法可以互相暴露给对方。</p></blockquote>

<h2>objc转换成swfit</h2>

<p>搜索了一下，找到了两个工具可以做这个事情：</p>

<h3><a href="https://github.com/yahoojapan/objc2swift">objc2swift</a></h3>

<p>objc2swift是雅虎日本的一个工具，支持在线转换。<a href="https://github.com/dzenbot/XCSwiftr/blob/master/README.md">XCSwiftr</a>就是一个基于objc2swift的xcode插件，通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>进行管理安装，可以在Xcode里面进行objc到swift的转换。但是xcode自从8.0开始就不支持插件了。</p>

<blockquote><p>插件(plugin)只在xcode 8.0之前的版本才支持。从8.0开始，插件就不再支持，但是引入了扩展(extension)。扩展和插件不同的一点是：扩展在独立的进程里面运行，所以扩展的崩溃不会影响到xcode，但是插件的崩溃，则会导致xcode也崩溃。估计插件崩溃导致的xcode崩溃的锅都是Apple来背，Apple很不爽，就让xcode跟插件分开在不同的进程中运行。</p></blockquote>

<p>objc2swift的转换效果很一般。</p>

<p>objc源代码：</p>

<pre><code class="objc">@interface MyClass: NSObject

- (void)sayHelloTo:(NSString*)person;

@end

@implementation MyClass

- (void)sayHelloTo:(NSString*)person {
    NSLog([NSString stringWithFormat:@"Hello, %@.", person]);
    [self performSelector:@selector(test)];

}

- (void)test {
}

@end
</code></pre>

<p>转换之后：</p>

<pre><code class="swift">class MyClass: NSObject {
    func sayHelloTo(person: String) {
        print("Hello, \(person).")
        self.performSelector("test")
    }

    func test() {

    }
}
</code></pre>

<p>几个问题：</p>

<ol>
<li>方法名称没有按照swift的习惯改写：应该为<code>sayHello(to person: String)</code>，而不是<code>sayHelloTo(person: String)</code>。</li>
<li><code>performSelector:</code>方法完全转换错误：方法名称错误，应该为<code>perform(_ aSelector: Selector!)</code>，而且参数也错误，不应该为<code>String</code>类型，应该为<code>Selector</code>类型。</li>
<li><code>test</code>方法前面没有加上<code>@objc</code>，所以不能作为<code>#selector</code>的参数。</li>
</ol>


<h3><a href="https://objectivec2swift.com/#/home">Swiftify</a></h3>

<p>swiftify也支持在线转换，而且转换效果明显好于objc2swift。如果愿意花钱，swiftify还可以支持很多功能，包括xcode扩展（注意，这里是“扩展extension”，不是“插件plugin”）、finder扩展、整个工程的转换、离线转换等。</p>

<p><img src="/images/swiftify.webp" alt="swiftify.webp" /></p>

<p>同样用上述objc源代码，转换之后为：</p>

<pre><code class="swift">class MyClass: NSObject {
    func sayHello(to person: String?) {
        print("Hello Swift, Goodbye Obj-C!")
        perform(#selector(MyClass.test))
    }

    @objc func test() {
    }
}
</code></pre>

<h2>swift转换成objc</h2>

<p><a href="https://objectivec2swift.com/#/home">Swiftify</a>的作者写了一篇博客<a href="https://www.quora.com/How-can-you-convert-Swift-to-Objective-C">How can you convert Swift to Objective-C?</a>，说明了这个问题：</p>

<p>原文是：</p>

<blockquote><p>When speaking about idiomatic Swift, converting method implementations from Swift to Objective-C is the task that cannot be solved for all cases. As you might imagine, many “modern” Swift features do not have any counterparts in Objective-C and thus cannot be converted without a human brain :)</p></blockquote>

<p>结论就是：由于swift有很多objc没有的语言特性，所以swift到objc无法完成自动转换。</p>

<p>但是转换之后的objc的头文件可以从build in “Generated Interface” ([ProjectName]-Swift.h)里面找到，拷贝出来，稍作修改即可。但是仅限于swift暴漏给objc的接口和属性。那些没有暴漏给objc的接口和属性，就需要手动去转换啦。</p>

<blockquote><p>[ProjectName]-Swift.h如果不能通过cmd+shift+O找到，可以从引用这个头文件的objc文件中通过“go to declaration"找到。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将代码查重工具CPD集成到Xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode/"/>
    <updated>2018-08-02T18:34:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="/images/copy_and_paste_image.jpeg" alt="copy and paster image" /></p>

<h2>DRY准则</h2>

<p>编程的一个基本准则就是DRY（Don&rsquo;t Repeat Yourself)，不写重复代码。简单来说，就是不要复制黏贴。</p>

<p>在开始之前，我们先讨论一下什么叫做“复制黏贴”？首先，如果你有相同的文件，肯定是极其糟糕的“复制黏贴”。如果你有两个类只是类名不同，但是做着相同或者类似的事情，也是很严重的“复制黏贴”。即使只有10行代码的重复，也是”复制黏贴“。根据作者个人经验，一个100000行的工程，完全不需要复制黏贴。</p>

<h3>复制黏贴的坏处</h3>

<p>在重复的代码处修改bug，还需要手动找到另外一处，做相同的修改。</p>

<h2>如何避免复制黏贴</h2>

<p>避免重复代码的传统方法是代码审查，但是对于代码审查者来说，找到重复代码是一件很困难的事情。</p>

<p>我们能不能在编译阶段就查找出重复代码，并要求这些重复代码移除掉之后才可以继续进行编译。</p>

<h2>安装CPD</h2>

<p>对于Swift代码，有两个工具可以做代码查重：</p>

<ul>
<li><a href="https://github.com/kucherenko/jscpd">jscpd</a></li>
<li><a href="https://pmd.github.io/">pmd</a></li>
</ul>


<h3><a href="https://pmd.github.io/">pmd</a></h3>

<p>其中，pmd可定制，并且比较稳定。开始之前，先通过homebrew进行安装：</p>

<pre><code>brew install pmd
</code></pre>

<blockquote><p>注意：对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择<a href="https://github.com/realm/SwiftLint">SwiftLint</a>。</p></blockquote>

<h2>集成到Xcode</h2>

<p>为了将CPD功能集成到编译阶段，我们在Build Phase里新添加一个运行脚本（Run Script），并添加以下脚本：</p>

<pre><code># Running CPD
pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true
# Running script
php ./cpd_script.php -cpd-xml cpd-output.xml
</code></pre>

<p>让我们来看一下这一段脚本做了什么事情。</p>

<p>第一部分是说我们在项目根目录下对所有的文件进行代码查重：</p>

<ul>
<li><code>--minimum-tokens</code>指定重复代码的最少token数量。这里的token是一个比较抽象的概念，不是字符，不是单词，也不是短语的意思。根据经验来说，Swift语言的最优值是50：太大，会漏掉重复代码；太小，会将一些代码误判为重复代码。</li>
<li><code>--formant</code>指定输出格式，这里指定为xml文件。</li>
<li><code>--failOnViolation</code>标识为设置为<code>true</code>，意思是只要检测到重复代码，就不继续进行编译。</li>
</ul>


<blockquote><p>经测试，无论<code>--failOnViolation</code>设置成<code>true</code>，还是<code>false</code>，都不能阻断编译的正常运行。所有的warning都能正常地输出。</p></blockquote>

<p>第一部分脚本执行的结果，是一个xml文件，里面包含了整个工程里面的重复代码及其位置、行数等信息。下面让我们看看，怎么将这个难读的xml文件以warning的形式展示给开发者。</p>

<p>为了将xml文件转换成更好读的warning，需要在工程根目录下创建一个php文件，我们叫做cpd_script.php，拷贝下面的脚本到该文件中：</p>

<pre><code class="php">&lt;?php
foreach (simplexml_load_file('cpd-output.xml')-&gt;duplication as $duplication) {
    $files = $duplication-&gt;xpath('file');
    foreach ($files as $file) {
        echo $file['path'].':'.$file['line'].':1: warning: '.$duplication['lines'].' copy-pasted lines from: '
            .implode(', ', array_map(function ($otherFile) { return $otherFile['path'].':'.$otherFile['line']; },
            array_filter($files, function ($f) use (&amp;$file) { return $f != $file; }))).PHP_EOL;
    }
}
?&gt;
</code></pre>

<p>我们在Build Phase中添加的脚本的第二部分就是运行这一段脚本，将生成的xml文件中的所有重复代码信息以warning的形式展示在Xcode中。如果你想了解如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</p>

<blockquote><p>我试了<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>中说的方法，脚本有错误，为了将comment中有TODO:和FIXME:的地方标记为warning，将有ERROR:的地方标记为error，可以尝试将下面的脚本写到Build Phase的运行脚本（Run Script）中（参考<a href="https://medium.com/ios-os-x-development/highlight-warnings-in-xcode-521125121a75">Highlight Warnings in Xcode</a>）：</p>

<pre><code>TAGS="TODO:|FIXME:|WARNING:"
ERRORTAG="ERROR:"
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" -or -name "*.swift" \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching "($TAGS).*\$|($ERRORTAG).*\$" | perl -p -e "s/($TAGS)/ warning: \$1/"| perl -p -e "s/($ERRORTAG)/ error: \$1/"
</code></pre>

<p>其实不用这么复杂：以“#warning”开头，接下来跟上warning信息就可以了，Xcode会在左侧导航栏里面生成一种叫做User-Defined Issues的warning。</p></blockquote>

<p>现在编译工程，可以在Xcode左侧导航窗口看到所有的warning：</p>

<p><img src="/images/cpd_warnings_in_navigation.jpg" alt="cpd warnings in navigation" /></p>

<p>在相应的文件中，也可以看到该文件所包含的重复代码的warning：</p>

<p><img src="/images/cpd_warnings_in_file.jpg" alt="cpd warnings in file" /></p>

<p>这个warning的意思是说：从54行往下的41行代码和ErrorHandleTester.swift中从96行往下的41行代码重复。</p>

<blockquote><p>如果是刚安装的pmd，可能需要重启Xcode，让pmd命令生效。</p></blockquote>

<h3><a href="https://github.com/kucherenko/jscpd">jscpd</a></h3>

<p>生成的中间结果文件格式和pmd是一样的，节点名字也叫做<code>pmd-cpd</code>。</p>

<p>但是：<strong>jscpd支持yaml格式的配置文件。</strong>这一点很重要，我在工作中也是用jscpd，而不是pmd的cpd。jscpd的安装和使用方法同pmd的cpd基本一样，不再重复。</p>

<p>yaml语法参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a>。</p>

<h2>什么时候使用</h2>

<p>Finding clones is typically useful in the following cases:</p>

<ul>
<li><p><strong>When updating existing code</strong>. When you are fixing a bug, or responding to changes in requirements, you usually start by finding the location in the code that you need to change. Before you make the change, search for clones of that code segment. If clones are discovered:</p>

<ul>
<li>Consider whether you need to make the same change to each clone.</li>
<li>Consider also whether this is a good opportunity to refactor the cloned code into a shared method or class.</li>
</ul>
</li>
<li><p><strong>Architectural cleanup</strong>. Towards the end of every iteration, use Analyze Solution for Code Clones on the Analyze menu.</p></li>
<li><p><strong>When you create code</strong>. When you have written new code, use the tool to find similar code that already existed.</p></li>
</ul>


<h2>结论</h2>

<p>作者：重复代码清理刻不容缓。这个工具可以帮助我们做这件事情，而且，几乎没有任何副作用。</p>

<h2>参考</h2>

<ul>
<li>翻译部分<a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>。</li>
<li>如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</li>
<li>如何编写jscpd的yaml配置文件，参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码查重工具]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code/"/>
    <updated>2017-05-08T17:52:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>代码查重现状</h2>

<p>很多IDE里面都有自己的代码查重工具，比如WebStorm的代码查重工具做的非常好用。但是Xcode里面至今没有自己的代码查重工具。这里调研了一些常见的代码查重工具，最后选择<del>PMD里面的CPD</del>jscpd，并将其集成到Xcode中，重复代码会以warning的形式出现在Xcode里面，方便查看。</p>

<p>一些IDE调研结果：</p>

<table>
<thead>
<tr>
<th>IDE </th>
<th> Build-in Tool </th>
<th> Extension</th>
</tr>
</thead>
<tbody>
<tr>
<td>Xcode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>AppCode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>Android Studio </td>
<td> Yes (Find and Replace Code Duplications&hellip;) </td>
<td> &ndash;</td>
</tr>
<tr>
<td>WebStorm </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
<tr>
<td>VSCode </td>
<td> No </td>
<td> Copy/Paste Detector extension, based on jscpd</td>
</tr>
<tr>
<td>Visual Studio </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
</tbody>
</table>


<p>一些查重工具调研结果：</p>

<table>
<thead>
<tr>
<th>Tool </th>
<th> Swift Support </th>
<th> Objc Support </th>
<th> configuration file </th>
<th> Xocde Integration </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/cyupa/JenkinsCI-iOS">JenkinsCI-iOS</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> &ndash; </td>
<td> &ndash; </td>
<td> A Jenkins job setup for your XCode project. The CPD in PMD is the core of JenkinsCI-iOS.</td>
</tr>
<tr>
<td>CPD in <a href="https://pmd.github.io/">PMD</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> No </td>
<td> Yes </td>
<td> 对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择SwiftLint。</td>
</tr>
<tr>
<td><a href="https://github.com/kucherenko/jscpd">jscpd</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> Yes (yaml) </td>
<td> Yes </td>
<td> 支持swift、objective-c以及其它一些语言。</td>
</tr>
</tbody>
</table>


<h2>一些不容易写到表格中的信息</h2>

<h3>PMD</h3>

<p><a href="https://pmd.github.io/">PMD</a></p>

<h4>Supported IDEs</h4>

<ul>
<li>Maven PMD plugin</li>
<li>Gradle: The PMD Plugin</li>
<li>Eclipse plugin</li>
<li>NetBeans plugin</li>
<li>JBuilder plugin</li>
<li>JDeveloper plugin</li>
<li>IntelliJ IDEA plugin</li>
</ul>


<p>没有Xcode的插件，但是可以通过在Build Phase里面加入Run Script来使用。</p>

<h4>CPD has GUI</h4>

<p>On Mac, display the GUI by running:</p>

<pre><code>./run.sh cpdgui
</code></pre>

<p>The screen shot is like:</p>

<p><img src="/images/screenshot_cpd.png" alt="screenshot_cpd" /></p>

<h4>将CPD集成到XCode里面</h4>

<p><a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>: This is a newer post on April 2017 and gives a detailed step by step way for integrating CPD into Xcode:</p>

<ul>
<li>Add run script into Build Phase.</li>
<li>Xcode warnings will appear at the place of duplicated code.</li>
</ul>


<p>Refer to <a href="../../../../2018/08/02/integrate-copy-and-paste-detector-into-xcode/">将代码查重工具CPD集成到Xcode</a> for details.</p>

<p><a href="https://habrahabr.ru/post/137875/"><del>Интегрируем Copy-Paste-Detection в Xcode, и не только</del></a>: Integrate CPD into XCode, but this post is a little older on 2012.</p>

<h3>NiCad4 Clone Detector</h3>

<p><a href="http://www.txl.ca/nicaddownload.html">NiCad4 Clone Detector</a></p>

<p>NiCad handles a range of languages, including C, Java, Python, and C#, and provides a range of normalizations, filters and abstractions.</p>

<h3>Visual Studio</h3>

<p>Visual Studio Enterprise有自己的code clone analysis，see <a href="https://msdn.microsoft.com/en-us/library/hh205279.aspx">Finding Duplicate Code by using Code Clone Detection</a>。copy一段code，然后改了某个变量名称，仍然可以被检测出重复。</p>

<p>The following modifications can be made, and the clone will still be recognized. In each case, there is a tolerance of a specific number of such modifications:</p>

<pre><code>* Rename identifiers.
* Insert and delete statements.
* Rearrange statements.
</code></pre>

<h3>Simian - Similarity Analyser</h3>

<p><a href="http://www.harukizaemon.com/simian/">Simian - Similarity Analyser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting in Xcode with HeaderDoc Tutorial]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial/"/>
    <updated>2016-04-19T10:50:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial">Documenting in Xcode with HeaderDoc Tutorial</a> 讲解的非常全面详细可操作。</p>

<p>补充一点：如果最终导出的html文件想转换成docx或者pdf文件，只需要用word打开，然后另存为你想要的格式即可，多数情况下，word可以处理好格式的问题。</p>
]]></content>
  </entry>
  
</feed>
