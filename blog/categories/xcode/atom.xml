<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-11-13T10:03:11+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将代码查重工具CPD集成到Xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode/"/>
    <updated>2018-08-02T18:34:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="/images/copy_and_paste_image.jpeg" alt="copy and paster image" /></p>

<h2>DRY准则</h2>

<p>编程的一个基本准则就是DRY（Don&rsquo;t Repeat Yourself)，不写重复代码。简单来说，就是不要复制黏贴。</p>

<p>在开始之前，我们先讨论一下什么叫做“复制黏贴”？首先，如果你有相同的文件，肯定是极其糟糕的“复制黏贴”。如果你有两个类只是类名不同，但是做着相同或者类似的事情，也是很严重的“复制黏贴”。即使只有10行代码的重复，也是”复制黏贴“。根据作者个人经验，一个100000行的工程，完全不需要复制黏贴。</p>

<h3>复制黏贴的坏处</h3>

<p>在重复的代码处修改bug，还需要手动找到另外一处，做相同的修改。</p>

<h2>如何避免复制黏贴</h2>

<p>避免重复代码的传统方法是代码审查，但是对于代码审查者来说，找到重复代码是一件很困难的事情。</p>

<p>我们能不能在编译阶段就查找出重复代码，并要求这些重复代码移除掉之后才可以继续进行编译。</p>

<h2>安装CPD</h2>

<p>对于Swift代码，有两个工具可以做代码查重：</p>

<ul>
<li><a href="https://github.com/kucherenko/jscpd">jscpd</a></li>
<li><a href="https://pmd.github.io/">pmd</a></li>
</ul>


<h3><a href="https://pmd.github.io/">pmd</a></h3>

<p>其中，pmd可定制，并且比较稳定。开始之前，先通过homebrew进行安装：</p>

<pre><code>brew install pmd
</code></pre>

<blockquote><p>注意：对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择<a href="https://github.com/realm/SwiftLint">SwiftLint</a>。</p></blockquote>

<h2>集成到Xcode</h2>

<p>为了将CPD功能集成到编译阶段，我们在Build Phase里新添加一个运行脚本（Run Script），并添加以下脚本：</p>

<pre><code># Running CPD
pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true
# Running script
php ./cpd_script.php -cpd-xml cpd-output.xml
</code></pre>

<p>让我们来看一下这一段脚本做了什么事情。</p>

<p>第一部分是说我们在项目根目录下对所有的文件进行代码查重：</p>

<ul>
<li><code>--minimum-tokens</code>指定重复代码的最少token数量。这里的token是一个比较抽象的概念，不是字符，不是单词，也不是短语的意思。根据经验来说，Swift语言的最优值是50：太大，会漏掉重复代码；太小，会将一些代码误判为重复代码。</li>
<li><code>--formant</code>指定输出格式，这里指定为xml文件。</li>
<li><code>--failOnViolation</code>标识为设置为<code>true</code>，意思是只要检测到重复代码，就不继续进行编译。</li>
</ul>


<blockquote><p>经测试，无论<code>--failOnViolation</code>设置成<code>true</code>，还是<code>false</code>，都不能阻断编译的正常运行。所有的warning都能正常地输出。</p></blockquote>

<p>第一部分脚本执行的结果，是一个xml文件，里面包含了整个工程里面的重复代码及其位置、行数等信息。下面让我们看看，怎么将这个难读的xml文件以warning的形式展示给开发者。</p>

<p>为了将xml文件转换成更好读的warning，需要在工程根目录下创建一个php文件，我们叫做cpd_script.php，拷贝下面的脚本到该文件中：</p>

<pre><code class="php">&lt;?php
foreach (simplexml_load_file('cpd-output.xml')-&gt;duplication as $duplication) {
    $files = $duplication-&gt;xpath('file');
    foreach ($files as $file) {
        echo $file['path'].':'.$file['line'].':1: warning: '.$duplication['lines'].' copy-pasted lines from: '
            .implode(', ', array_map(function ($otherFile) { return $otherFile['path'].':'.$otherFile['line']; },
            array_filter($files, function ($f) use (&amp;$file) { return $f != $file; }))).PHP_EOL;
    }
}
?&gt;
</code></pre>

<p>我们在Build Phase中添加的脚本的第二部分就是运行这一段脚本，将生成的xml文件中的所有重复代码信息以warning的形式展示在Xcode中。如果你想了解如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</p>

<blockquote><p>我试了<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>中说的方法，脚本有错误，为了将comment中有TODO:和FIXME:的地方标记为warning，将有ERROR:的地方标记为error，可以尝试将下面的脚本写到Build Phase的运行脚本（Run Script）中（参考<a href="https://medium.com/ios-os-x-development/highlight-warnings-in-xcode-521125121a75">Highlight Warnings in Xcode</a>）：</p>

<pre><code>TAGS="TODO:|FIXME:|WARNING:"
ERRORTAG="ERROR:"
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" -or -name "*.swift" \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching "($TAGS).*\$|($ERRORTAG).*\$" | perl -p -e "s/($TAGS)/ warning: \$1/"| perl -p -e "s/($ERRORTAG)/ error: \$1/"
</code></pre>

<p>其实不用这么复杂：以“#warning”开头，接下来跟上warning信息就可以了，Xcode会在左侧导航栏里面生成一种叫做User-Defined Issues的warning。</p></blockquote>

<p>现在编译工程，可以在Xcode左侧导航窗口看到所有的warning：</p>

<p><img src="/images/cpd_warnings_in_navigation.jpg" alt="cpd warnings in navigation" /></p>

<p>在相应的文件中，也可以看到该文件所包含的重复代码的warning：</p>

<p><img src="/images/cpd_warnings_in_file.jpg" alt="cpd warnings in file" /></p>

<p>这个warning的意思是说：从54行往下的41行代码和ErrorHandleTester.swift中从96行往下的41行代码重复。</p>

<blockquote><p>如果是刚安装的pmd，可能需要重启Xcode，让pmd命令生效。</p></blockquote>

<h3><a href="https://github.com/kucherenko/jscpd">jscpd</a></h3>

<p>生成的中间结果文件格式和pmd是一样的，节点名字也叫做<code>pmd-cpd</code>。</p>

<p>但是：<strong>jscpd支持yaml格式的配置文件。</strong>这一点很重要，我在工作中也是用jscpd，而不是pmd的cpd。jscpd的安装和使用方法同pmd的cpd基本一样，不再重复。</p>

<p>yaml语法参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a>。</p>

<h2>什么时候使用</h2>

<p>Finding clones is typically useful in the following cases:</p>

<ul>
<li><p><strong>When updating existing code</strong>. When you are fixing a bug, or responding to changes in requirements, you usually start by finding the location in the code that you need to change. Before you make the change, search for clones of that code segment. If clones are discovered:</p>

<ul>
<li>Consider whether you need to make the same change to each clone.</li>
<li>Consider also whether this is a good opportunity to refactor the cloned code into a shared method or class.</li>
</ul>
</li>
<li><p><strong>Architectural cleanup</strong>. Towards the end of every iteration, use Analyze Solution for Code Clones on the Analyze menu.</p></li>
<li><p><strong>When you create code</strong>. When you have written new code, use the tool to find similar code that already existed.</p></li>
</ul>


<h2>结论</h2>

<p>作者：重复代码清理刻不容缓。这个工具可以帮助我们做这件事情，而且，几乎没有任何副作用。</p>

<h2>参考</h2>

<ul>
<li>翻译部分<a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>。</li>
<li>如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</li>
<li>如何编写jscpd的yaml配置文件，参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码查重工具]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code/"/>
    <updated>2017-05-08T17:52:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>代码查重现状</h2>

<p>很多IDE里面都有自己的代码查重工具，比如WebStorm的代码查重工具做的非常好用。但是Xcode里面至今没有自己的代码查重工具。这里调研了一些常见的代码查重工具，最后选择<del>PMD里面的CPD</del>jscpd，并将其集成到Xcode中，重复代码会以warning的形式出现在Xcode里面，方便查看。</p>

<p>一些IDE调研结果：</p>

<table>
<thead>
<tr>
<th>IDE </th>
<th> Build-in Tool </th>
<th> Extension</th>
</tr>
</thead>
<tbody>
<tr>
<td>Xcode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>AppCode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>Android Studio </td>
<td> Yes (Find and Replace Code Duplications&hellip;) </td>
<td> &ndash;</td>
</tr>
<tr>
<td>WebStorm </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
<tr>
<td>VSCode </td>
<td> No </td>
<td> Copy/Paste Detector extension, based on jscpd</td>
</tr>
<tr>
<td>Visual Studio </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
</tbody>
</table>


<p>一些查重工具调研结果：</p>

<table>
<thead>
<tr>
<th>Tool </th>
<th> Swift Support </th>
<th> Objc Support </th>
<th> configuration file </th>
<th> Xocde Integration </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/cyupa/JenkinsCI-iOS">JenkinsCI-iOS</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> &ndash; </td>
<td> &ndash; </td>
<td> A Jenkins job setup for your XCode project. The CPD in PMD is the core of JenkinsCI-iOS.</td>
</tr>
<tr>
<td>CPD in <a href="https://pmd.github.io/">PMD</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> No </td>
<td> Yes </td>
<td> 对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择SwiftLint。</td>
</tr>
<tr>
<td><a href="https://github.com/kucherenko/jscpd">jscpd</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> Yes (yaml) </td>
<td> Yes </td>
<td> 支持swift、objective-c以及其它一些语言。</td>
</tr>
</tbody>
</table>


<h2>一些不容易写到表格中的信息</h2>

<h3>PMD</h3>

<p><a href="https://pmd.github.io/">PMD</a></p>

<h4>Supported IDEs</h4>

<ul>
<li>Maven PMD plugin</li>
<li>Gradle: The PMD Plugin</li>
<li>Eclipse plugin</li>
<li>NetBeans plugin</li>
<li>JBuilder plugin</li>
<li>JDeveloper plugin</li>
<li>IntelliJ IDEA plugin</li>
</ul>


<p>没有Xcode的插件，但是可以通过在Build Phase里面加入Run Script来使用。</p>

<h4>CPD has GUI</h4>

<p>On Mac, display the GUI by running:</p>

<pre><code>./run.sh cpdgui
</code></pre>

<p>The screen shot is like:</p>

<p><img src="/images/screenshot_cpd.png" alt="screenshot_cpd" /></p>

<h4>将CPD集成到XCode里面</h4>

<p><a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>: This is a newer post on April 2017 and gives a detailed step by step way for integrating CPD into Xcode:</p>

<ul>
<li>Add run script into Build Phase.</li>
<li>Xcode warnings will appear at the place of duplicated code.</li>
</ul>


<p>Refer to <a href="../../../../2018/08/02/integrate-copy-and-paste-detector-into-xcode/">将代码查重工具CPD集成到Xcode</a> for details.</p>

<p><a href="https://habrahabr.ru/post/137875/"><del>Интегрируем Copy-Paste-Detection в Xcode, и не только</del></a>: Integrate CPD into XCode, but this post is a little older on 2012.</p>

<h3>NiCad4 Clone Detector</h3>

<p><a href="http://www.txl.ca/nicaddownload.html">NiCad4 Clone Detector</a></p>

<p>NiCad handles a range of languages, including C, Java, Python, and C#, and provides a range of normalizations, filters and abstractions.</p>

<h3>Visual Studio</h3>

<p>Visual Studio Enterprise有自己的code clone analysis，see <a href="https://msdn.microsoft.com/en-us/library/hh205279.aspx">Finding Duplicate Code by using Code Clone Detection</a>。copy一段code，然后改了某个变量名称，仍然可以被检测出重复。</p>

<p>The following modifications can be made, and the clone will still be recognized. In each case, there is a tolerance of a specific number of such modifications:</p>

<pre><code>* Rename identifiers.
* Insert and delete statements.
* Rearrange statements.
</code></pre>

<h3>Simian - Similarity Analyser</h3>

<p><a href="http://www.harukizaemon.com/simian/">Simian - Similarity Analyser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting in Xcode with HeaderDoc Tutorial]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial/"/>
    <updated>2016-04-19T10:50:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial">Documenting in Xcode with HeaderDoc Tutorial</a> 讲解的非常全面详细可操作。</p>

<p>补充一点：如果最终导出的html文件想转换成docx或者pdf文件，只需要用word打开，然后另存为你想要的格式即可，多数情况下，word可以处理好格式的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios内存管理——调试]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging/"/>
    <updated>2016-02-24T20:51:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20160222/15333.html">iOS/OS X 内存管理(二)：借助工具解决内存问题</a>讲了一些调试技巧，包括：</p>

<!-- more -->


<ul>
<li>启用Zombie Object进行悬挂指针的检测。</li>
<li>应用<em>Product -> Analysis</em>进行内存泄露的初步检测。</li>
<li>应用Leak Instrument进行内存泄露查找。</li>
<li>在以上方法不奏效的情况下，通过查看<code>dealloc</code>是否调用查看某个class是否泄露的问题。</li>
</ul>


<p>补充一下：在<em>Leak</em>页面可以打开<em>Cycles &amp; Roots</em>用图的方式查看ratain cycle的问题，截图如下：</p>

<p><img src="/images/xcode_leak_instrument_cycles_and_roots_view.png" alt="xcode_leak_instrument_cycles_and_roots_view" /></p>

<p>上文没有介绍的，也是比较麻烦的，就是leak instrument没法查出的内存泄露。最近在调试一个这样的问题，写点心得。</p>

<h3>行动前的准备</h3>

<h4>认识工具</h4>

<p>参看<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/LeaksInstrument/LeaksInstrument.html">Leaks Instrument</a>和<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/AllocationsInstrument/AllocationsInstrument.html#//apple_ref/doc/uid/TP40011355-CH40-SW1">Allocation Instrument</a>的官方文档。</p>

<p>补充：</p>

<ul>
<li>Leak Instrument有<em>Cycles &amp; Roots</em>界面，见上。</li>
<li>Persistent Bytes和#Persistent。#Persistent是object的数量，也就是allocation的次数，而Persistent Bytes是具体的内存大小。<strong>#Persistent是我们需要关注的，内存有没有泄露也是看这个值是不是只增不减。</strong></li>
<li>Allocation Instrument进行profile的时候，为<em>Launch Configuration for Heap Allocations</em>勾选<em>Record reference counts</em>。</li>
</ul>


<h4>编译参数设置</h4>

<p>为了保证看到代码，而不是一堆无意义的内存地址，参考<a href="http://hongchaozhang.github.io/blog/2015/08/17/the-dSYM-file-in-ios-project/">The .dSYM File in Ios Project</a>进行xcode的设置。</p>

<h3>如果<code>dealloc</code>没有被调用</h3>

<p>通过Allocation Instrument，我们可以得到内存使用情况。为了清楚地看出是哪部分最可能是内存泄露，可以使用<em>Call Trees</em>视图，然后在右边：</p>

<ul>
<li>勾选<em>Hide System Libraries</em>，排除系统影响。</li>
<li>勾选<em>Invert Call Tree</em>，使占用内存最多的分支在最前面。</li>
</ul>


<p>通过以上方法，可以大概确定是哪部分内存泄露。然后看看该class是不是被<code>dealloc</code>了。</p>

<ul>
<li>如果<code>dealloc</code>了，那不是本文要解决的问题。</li>
<li>如果<code>dealloc</code>没有调用到，继续往下看。</li>
</ul>


<h4>Retain Cycle导致<code>dealloc</code>没有被调用</h4>

<p>在ARC下，<code>dealloc</code>不能被调用，一般是因为存在Retain Cycle，而导致Retain Cycle的情况可能是下面几种可能(参考<a href="http://kkoval.blogspot.com/2014/03/ios-retain-cycle-in-arc.html">iOS Retain Cycle in ARC</a>和<a href="http://stackoverflow.com/questions/9219030/dealloc-not-being-called-on-arc-app">Dealloc not being called on ARC app</a>):</p>

<h5>1. Blocks</h5>

<p>并不是所有在block中引用<code>self</code>都会带来retain cycle，比如下面的代码就不会有内存泄露：</p>

<pre><code class="objc">- (void)testSelfInCocoaBlocks
{
    NSArray *cats = @[@"Smily", @"Garfild", @"Other cat"];
    [cats enumerateObjectsUsingBlock:^(NSString *cat, NSUInteger idx, BOOL *stop) {
        [self doSomethingWithCat:cat];
    }];
}
</code></pre>

<p>因为在上面的代码中，block ratain了self，但是self中没有retain这个block。只有当block中引用了self，并且self又以某种方式（比如用一个具有strong属性的Property指向该block，或者将该block加入了self的一个具有strong属性的array中）强引用了该block，才会引起内存泄露，比如：</p>

<pre><code class="objc">- (void)testSelfInBlock
{
    self.block = ^{
        [self doSomethingWithCat:@"Fat Cat"];
    };
}
</code></pre>

<p>有时候即使没有直接引用self，也可能导致self被retain，这叫做“implicit retain”。一种可能的情况就是在block中引用了self的实例变量，比如：</p>

<pre><code class="objc">- (void)testHiddenSelfInCocoaBlocks
{
    NSArray *cats = @[@"Smily", @"Garfild", @"Other cat"];
    [cats enumerateObjectsUsingBlock:^(NSString *cat, NSUInteger idx, BOOL *stop) {
        _aCat = cat;
        *stop = YES;
    }];
}
</code></pre>

<p>这段code在block中引用了self的实例变量<code>_aCat</code>。</p>

<p>为了避免implicit retain，可以在xcode的build setting中打开<em>implicit retain of &lsquo;self&rsquo; within blocks</em>，xcode编译器会给出警告。</p>

<h5>2. NSTimer</h5>

<p>如果在view controller中创建了NSTimer，在消失view controller的时候需要调用<code>invalidate</code>，否则会产生ratain cycle。</p>

<h5>3. Observers/NSNotificationCenter</h5>

<p>当我们在NSNotificationCenter的block中引用self的时候，也会产生retain cycle，比如：</p>

<pre><code class="objc">[[NSNotificationCenter defaultCenter] addObserverForName:@"not"
                                                      object:nil
                                                       queue:[NSOperationQueue mainQueue]
                                                  usingBlock:^(NSNotification *note) {
        [self doSomethingWithCat:@"Noty cat"];
    }];
</code></pre>

<p>在不用的时候需要将self从NSNotificationCenter中移除。</p>

<h5>4. Array contained reference</h5>

<p>比如在view controller中将self放在了一个array中，而这个array在view controller消失的时候不会被释放，view controller的<code>dealloc</code>就不会被调用。</p>

<h5>5. Delegate</h5>

<p>delegate的属性应该为weak。</p>

<h4>dealloc没被调用的调试</h4>

<p>调试dealloc没有被调用的情况，参考<a href="http://stackoverflow.com/questions/14890402/instruments-allocations-track-alloc-and-dealloc-of-objects-of-user-defined-class/14891837#14891837">Instruments Allocations track alloc and dealloc of objects of user defined classes</a>，可以看到对应实例在整个生命周期中发生的所有和内存有关的事件，包括malloc，ratain，release等和每次事件的call stack。注意其中的两项设置：</p>

<ul>
<li>勾选Record reference counts，记录retain，release和autorelease事件。</li>
<li>为Allocation Lifespan选择All Objects Created，如果你想看到已经被dealloc的实例，这个可以不选。</li>
<li>在<em>Allocation List -> All Allocations</em> 中可以搜索自己感兴趣的class。</li>
<li>在reference count页面，注意使用<em>All</em>、<em>uppair</em>等进行过滤。</li>
</ul>


<h3>关于ARC下的retainCount</h3>

<p>在ARC之前，我们可以使用<code>retainCount</code>得到一个Object被retain的次数。
引入ARC之后，这个方法不能在code中使用，可以使用下面的方法获得retain的次数：</p>

<pre><code class="objc">NSLog(@"Retain count is %ld", CFGetRetainCount((__bridge CFTypeRef)myObject));
</code></pre>

<p>或者通过设置断点，在调试窗口输入如下命令：</p>

<pre><code>po object.retainCount
</code></pre>

<blockquote><p> <strong>我们什么时候使用retainCount？</strong></p>

<p><strong>Never！</strong></p></blockquote>

<p>参考 <a href="http://stackoverflow.com/questions/4636146/when-to-use-retaincount">When to use -retainCount?</a>。
但是偶尔在调试的时候用一下，对于一些内存管理概念的理解还是有好处的，仅此而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warning Messages in xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/08/31/Warning-Messages-in-Xcode/"/>
    <updated>2015-08-31T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/08/31/Warning-Messages-in-Xcode</id>
    <content type="html"><![CDATA[<p><a href="http://oleb.net/blog/2013/04/compiler-warnings-for-objective-c-developers/">Compiler Warnings for Objective-C Developers</a> is a good post for describing warning messages for Objective-C in xcode. A Chinese version can be found <a href="http://onevcat.com/2013/05/talk-about-warning/">谈谈Objective-C的警告</a>.</p>

<p>Some important things are marked here.</p>

<p>Two ways to modify complier&rsquo;s warning setting: <strong>UI Method</strong> and <strong>Custom Compiler Flags Method</strong>.</p>

<!-- more -->


<h2>UI Method</h2>

<p>In <em>Project Navigator</em>, choose the project. On the right, under <em>Build Settings</em>, <code>Apple LLVM 6.1 - Warnings - Objective c</code> and <code>Apple LLVM 6.1 - Warnings - Objective C and ARC</code> are Objective C specific settings. You may also want to see some setttings for all languages, including Objective C in <code>Apple LLVM 6.1 - Warnings - All languages</code>.</p>

<h2><em>Custom Compiler Flags</em> Method</h2>

<p>Under <em>Build Settings</em>, find <code>other warning flags</code> in <code>Apple LLVM 6.1 - Custom Compiler Flags</code>. In this section, you can use <code>-W...</code> like commands for warning settings.</p>

<p>For example, use <code>-Wall</code> to display all warnings (actually, not <em>All</em>), use <code>-Wno-unused-variable</code> to indicate not displaying <em>unused variable</em> warnings. Use space between differenct commands, like <code>-Wall -Wno-unused-variable</code>.</p>

<p>Using this way, we can set for all kinds of warnings, some of which can not be set by <em>UI Method</em> above.</p>

<p>Go to the following two refrences for details on <code>-Wall</code>, <code>-Wextra</code> and <code>-Weverything</code>:</p>

<ul>
<li><a href="http://oleb.net/blog/2013/04/compiler-warnings-for-objective-c-developers/">Compiler Warnings for Objective-C Developers</a></li>
<li><a href="http://onevcat.com/2013/05/talk-about-warning/">谈谈Objective-C的警告</a>.</li>
</ul>


<p>The following paragraph comes from the first reference:</p>

<p>If you encounter a particular warning that you actively want to suppress, check the build log. The compiler will tell you the name of each warning it has issued (-Wunused-variable in this example). You can use this name to selectively disable (with -Wno-unused-variable) or enable this specific warning in your project. In my experience, you will come up with a very short list of warnings you want to disable (probably no more than a handful).</p>

<p>Attach one image to indicate the place (red circles) to find the warning type:</p>

<p><img src="/images/006_warning_type_from_build_log.png" alt="006_warning_type_from_build_log.png" /></p>
]]></content>
  </entry>
  
</feed>
