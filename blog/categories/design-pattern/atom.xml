<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design pattern | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2022-12-09T00:02:41+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[架构整洁之道总结（The Clean Architecture）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture/"/>
    <updated>2019-02-12T17:55:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E6%84%9F%E6%83%B3">总体感想</a></li>
<li><a href="#%E7%AB%A0%E8%8A%82%E5%B0%8F%E7%BB%93">章节小结</a>

<ul>
<li><a href="#%E7%AC%AC2%E7%AB%A0-%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6">第2章 两个价值维度</a></li>
<li><a href="#%E7%AC%AC14%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88">第14章 组件耦合</a></li>
<li><a href="#%E7%AC%AC15%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第15章 什么是软件架构</a></li>
<li><a href="#%E7%AC%AC17%E7%AB%A0-%E5%88%92%E5%88%86%E8%BE%B9%E7%95%8C">第17章 划分边界</a></li>
<li><a href="#%E7%AC%AC21%E7%AB%A0-%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第21章 尖叫的软件架构</a></li>
<li><a href="#%E7%AC%AC22%E7%AB%A0-%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84">第22章 整洁架构</a></li>
<li><a href="#%E7%AC%AC23%E7%AB%A0-%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1">第23章 展示器和谦卑对象</a></li>
<li><a href="#%E7%AC%AC24%E7%AB%A0-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C">第24章 不完全边界</a></li>
<li><a href="#%E7%AC%AC25%E7%AB%A0-%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C">第25章 层次与边界</a></li>
<li><a href="#%E7%AC%AC28%E7%AB%A0-%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C">第28章 测试边界</a></li>
<li><a href="#%E7%AC%AC34%E7%AB%A0-%E6%8B%BE%E9%81%97">第34章 拾遗</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93">其它人的一些读后总结</a>

<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9B%BE">为什么说我们需要软件架构图？</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93">推荐《架构整洁之道》</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-总体感想" name="总体感想"></a></p>

<h2>总体感想</h2>

<p>全书下来，印象最深、且最具有操作性的，就是：</p>

<p><strong>依赖反转</strong></p>

<p>源代码依赖方向永远是控制流方向的反转。
依赖关系必须要指向更稳定的方向：低层组件依赖高层组件，其中低层组件不稳定，高层组件稳定。
依赖关系应该指向更稳定的方向。</p>

<p>稳定抽象原则：一个组件的抽象程度应该与其稳定性保持一致。</p>

<p>系统的抽象程度和稳定性都可以量化，进而用来评测系统的质量。</p>

<p>系统在运行时的依赖关系与编译时的依赖关系是相反的：当高层组件的客户端需要调用低层组件中的服务时，我们就需要运用动态形式的多态来反转依赖关系。（第18章）</p>

<p>我们希望源码中的依赖关系与其数据流向脱钩，而与组件所在的层次挂钩。高层组件变更的原因具有“稀少而重大”的特点，低层组件变更的原因具有“频繁而不重大”的特点。（第19章）</p>

<p><a id="markdown-章节小结" name="章节小结"></a>
<a id="markdown-章节小结" name="章节小结"></a></p>

<h2>章节小结</h2>

<p><a id="markdown-第2章-两个价值维度" name="第2章-两个价值维度"></a></p>

<h3>第2章 两个价值维度</h3>

<p>系统行为，是紧急的。</p>

<p>系统架构，是重要的。</p>

<p>平衡系统架构的重要性与功能的紧急程度这件事，是软件研发人员自己的职责。因为业务部门本来就没有能力评估架构设计的重要程度。</p>

<p>请记住：如果忽视软件架构的价值，系统将会变得越来越难以维护，最终再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。</p>

<p><a id="markdown-第14章-组件耦合" name="第14章-组件耦合"></a></p>

<h3>第14章 组件耦合</h3>

<p>组件依赖关系图不是系统功能单元关系图，而是应用程序在构建性和维护性方面的一张地图。所以组件依赖关系图不能像系统功能单元关系图一样在设计之初就确定下来，而是随着开发进程中出现的维护性和构建性的需求而产生的。</p>

<p><a id="markdown-第15章-什么是软件架构" name="第15章-什么是软件架构"></a></p>

<h3>第15章 什么是软件架构</h3>

<p>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的选项。</p>

<p>如果在开发高层策略时有意识地让自己摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就拥有越多的信息来做出合理的决策。
另外，我们保留这些可选项的时间越长，实验的机会越多，我们做决策的时候就能拥有越充分的信息。</p>

<p><strong>一个优秀的软件架构师应该致力于最大化可选项数量。</strong></p>

<p><a id="markdown-第17章-划分边界" name="第17章-划分边界"></a></p>

<h3>第17章 划分边界</h3>

<p>软件架构设计本身就是一门划分边界的艺术。</p>

<p>一个系统的GUI与业务逻辑的变更原因、变更速率显然是不同的，所以二者中间应该有一条边界。同样的，一个系统的业务逻辑与依赖注入框架之间的变更原因和变更速率也会不同，它们之间也应该画边界线。</p>

<p>这其实就是单一指责原则（SRP）的具体实现。SRP的作用就是告诉我们应该在哪里画边界线。</p>

<p><strong>插件式架构</strong></p>

<p>事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。</p>

<p><a id="markdown-第21章-尖叫的软件架构" name="第21章-尖叫的软件架构"></a></p>

<h3>第21章 尖叫的软件架构</h3>

<p>架构设计的核心目标：</p>

<p>一个良好的架构设计应该围绕用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。</p>

<blockquote><p>这就好像一个住宅建筑设计的首要目的应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费很多精力来确保该架构的设计在满足用例需要的情况下，尽可能地允许用户能自由地选择建筑材料（砖头、石料或者木材）。</p></blockquote>

<p>而且，良好的架构设计应该尽可能地允许用户推迟和延后决定采用什么框架、数据库、Web服务以及其它与环境相关的工具。同时，良好的架构设计还应该让我们很容易改变这些决定。</p>

<p>总之，良好的架构设计应该只关注用例，并能将它们与其他的周边因素隔离。</p>

<p><a id="markdown-第22章-整洁架构" name="第22章-整洁架构"></a></p>

<h3>第22章 整洁架构</h3>

<p>整本书的核心总结。</p>

<p><img src="/images/CleanArchitecture22fig01.jpg" alt="clean architecture image" /></p>

<p>代码中的依赖关系必须指向同心圆的内层，即由低层机制指向高层机制。</p>

<p>比如下面这个例子就严格地遵守了依赖倒置原则，同时也就遵守了上面的设计原则：依赖关系指向同心圆的内层：</p>

<p><img src="/images/CleanArchitecture22fig02.jpg" alt="clean architecture example" /></p>

<p><a id="markdown-第23章-展示器和谦卑对象" name="第23章-展示器和谦卑对象"></a></p>

<h3>第23章 展示器和谦卑对象</h3>

<p>应用程序所能控制的，要在屏幕上显示的一切东西，都应该在视图模型中以字符串、布尔值或者枚举类型的形式存在。然后，视图部分除了加载视图模型所需要的值，不应该再做任何其他事情。因此，我们才能说视图是谦卑对象。</p>

<blockquote><p>这里的视图有点像Redux模式下的View了：只负责忠实地将Model展现出来。</p></blockquote>

<p><a id="markdown-第24章-不完全边界" name="第24章-不完全边界"></a></p>

<h3>第24章 不完全边界</h3>

<p>用于管理输入输出数据结构的双向多态边界接口，以及依赖反转关系的管理都需要耗费资源。某些情况下可以采用一些折中方案，采用某种不完全边界：单向边界、门户模式、省掉最后一步…。</p>

<p><a id="markdown-第25章-层次与边界" name="第25章-层次与边界"></a></p>

<h3>第25章 层次与边界</h3>

<p>“中庸”之道：
过度设计边界不对，一点不设计也是不合理的，我们能做的就是不断观察系统演进，权衡各个位置设计边界的成本与收益。</p>

<p><a id="markdown-第28章-测试边界" name="第28章-测试边界"></a></p>

<h3>第28章 测试边界</h3>

<p>测试：
针对系统组成部分来设计的测试是紧耦合的，比如针对每个类的每个方法进行的测试。最终这些测试都会被抛弃。</p>

<p>不要依赖于多变的东西。比如GUI一般是多变的，通过GUI来验证系统的测试一定是脆弱的。因此，我们在系统设计与测试设计时，应该让业务逻辑不通过GUI也能被测试。
怎么做：让GUI成为“谦卑对象”，只是忠实地反应一些数据（Redux模式）。</p>

<p><a id="markdown-第34章-拾遗" name="第34章-拾遗"></a></p>

<h3>第34章 拾遗</h3>

<p>这一章中，作者提到了一个重要的实现细节问题：访问权限修饰符（public、private等），以及该细节对整体设计架构的影响。</p>

<p>以网上书店为例，作者按照四种方法试图对系统进行模块化：按层封装，按功能封装，端口和适配器封装，按组件封装。每种模式都有各自的优缺点，但是这不是问题的重点。重点是：如果你在实现各个模式的时候，不能严格确定每个变量和方法的访问权限，那么所有的设计都等于“没有设计”。</p>

<p>四种设计模式图应该是这个样子：</p>

<p><img src="/images/CleanArchitecture34fig08.jpg" alt="model with access control attributes" /></p>

<p>其中虚化的部分代表只可在本包内可见的部分。</p>

<p>如果不能严格使用访问权限修饰符，那么理想中的模块化将会发生变化。极端一点，如果所有属性和方法都是public，那么这四种模式将变成下面的样子：</p>

<p><img src="/images/CleanArchitecture34fig07.jpg" alt="model with access control attributes" /></p>

<p><strong>四种模式将完全一样！完全一样，只是由于我们没有严格地使用访问权限修饰符！</strong></p>

<p><a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a>
<a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a></p>

<h2>其它人的一些读后总结</h2>

<p><a id="markdown-为什么说我们需要软件架构图" name="为什么说我们需要软件架构图"></a>
<a id="markdown-为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph" name="为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph"></a></p>

<h3><a href="https://www.infoq.cn/article/GhprrUlOYyOqS8*FR1pH">为什么说我们需要软件架构图？</a></h3>

<p>这篇文章中肯、实用，提出的一些观点具有很大的可操作性：
1. 我们常犯的最大的一个错误是为系统中具有高波动性的部分创建详细的架构图。除非是自动生成的，否则手动维护它们对我们来说就是一种负担。
2. 在实践中，大多数利益相关者对详细架构图不感兴趣，但会对一两个反映系统模块和边界的高级架构图感兴趣。除此之外，要深入理解系统，代码才是事实的来源。
3. 请停止为代码中自解释的内容创建详细的架构图，或者当没有真正受众时。
4. 直接询问利益相关者：你们希望从文档中获得什么信息？</p>

<p><a id="markdown-推荐架构整洁之道" name="推荐架构整洁之道"></a>
<a id="markdown-推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597" name="推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597"></a></p>

<h3><a href="https://blog.csdn.net/csdnsevenn/article/details/83189597">推荐《架构整洁之道》</a></h3>

<p>简单vs.简陋、平衡vs.妥协、迭代vs.半成品</p>

<p>这些拥有工匠精神的工程师们还是难以解决某些问题，这些人渐渐地发现，这个世界上有很多问题就像翘翘板一样，只能要一边，这一边上去了，另一边就下来了。就像要么用空间换时间，要么用时间换空间一样，你很难找到同时满足空间和时间要求的“双利解”；就像CAP的三选二的理论一样，这个世界不存在完美的解决方案，无论什么方案都有好的一面和不好的一面。而且，这些工程师还渐渐发现，每当引入一个新的技术来解决一个已有的问题时，这个新的技术就会带来更多的问题，问题就像有一个生命体一样，它们会不断地繁殖和进化。渐渐地，他们发现，问题的多少和系统的复杂度呈正比，而且不仅是线性正比，还可能呈级数正比，此时就越来越难做技术决定。但是有一些资深的工程师开始站出来挑战这些问题，有的基于业务分析给出平衡的方案，有的开始尝试设计更高级的技术，有的开始设计更灵活的系统，有的则开始简化和轻量化整个系统……这些高智商、经验足、不怕难的工程师们引领着整个行业前行。他们就是架构师！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程中的SOLID原则]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming/"/>
    <updated>2018-12-04T11:31:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming</id>
    <content type="html"><![CDATA[<p>Robert C. Martin (Bob大叔)在《敏捷软件开发》中提出了编程过程中的五个原则，以适应敏捷开发（Agile）的特点：以微小增量的方式构建软件。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#solid%E5%8E%9F%E5%88%99">SOLID原则</a></li>
<li><a href="#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99the-single-responsibility-principle%E7%AE%80%E7%A7%B0srp">单一职责原则（The Single Responsibility Principle，简称SRP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%8C%E8%B4%A3">什么是职责</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li>
</ul>
</li>
<li><a href="#%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99the-open-close-principle%E7%AE%80%E7%A7%B0ocp">开放——封闭原则（The Open-Close Principle，简称OCP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E6%98%AF%E6%8A%BD%E8%B1%A1">关键是抽象</a>

<ul>
<li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
</ul>
</li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%9B%E8%A1%8C%E6%8A%BD%E8%B1%A1">什么时候进行抽象</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-1">结论</a></li>
</ul>
</li>
<li><a href="#liskov%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99the-liskov-substitution-priciple%E7%AE%80%E7%A7%B0lsp">Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">一个违反LSP的简单例子</a></li>
<li><a href="#%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%92%8C%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%85%B3%E7%B3%BB%E6%9B%B4%E5%BE%AE%E5%A6%99%E7%9A%84%E8%BF%9D%E8%A7%84">正方形和长方形的关系：更微妙的违规</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E5%AF%BC%E8%87%B4%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95">其它一些容易导致违反LSP的习惯用法</a>

<ul>
<li><a href="#%E5%AD%90%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%80%80%E5%8C%96%E5%87%BD%E6%95%B0">子类中的退化函数</a></li>
<li><a href="#%E5%AD%90%E7%B1%BB%E6%8A%9B%E5%87%BA%E5%9F%BA%E7%B1%BB%E6%B2%A1%E6%9C%89%E7%9A%84%E5%BC%82%E5%B8%B8">子类抛出基类没有的异常</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-2">结论</a></li>
</ul>
</li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99the-dependency-inversion-principle%E7%AE%80%E7%A7%B0dip">依赖倒置原则（The Dependency Inversion Principle，简称DIP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-3">定义</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E4%BA%8E%E6%8A%BD%E8%B1%A1">依赖于抽象</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90">一个例子</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-3">结论</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99the-interface-segregation-principle%E7%AE%80%E7%A7%B0isp">接口隔离原则（The Interface Segregation Principle，简称ISP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-4">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AE%9A%E6%97%B6%E9%97%A8">一个例子：定时门</a>

<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用委托对接口分组</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用多重继承对接口分组</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90atm%E7%95%8C%E9%9D%A2">一个例子：ATM界面</a>

<ul>
<li><a href="#%E5%A4%9A%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F%E4%B8%8E%E5%8D%95%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F">多参数形式与单参数形式</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-4">结论</a></li>
</ul>
</li>
</ul>


<p> <br></p>

<p><a id="markdown-solid原则" name="solid原则"></a></p>

<h2>SOLID原则</h2>

<p>SOLID是指我们编程时应该遵守的五个原则：</p>

<ol>
<li>单一职责原则（The Single Responsibility Principle，简称SRP）</li>
<li>开放——封闭原则（The Open-Close Principle，简称OCP）</li>
<li>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</li>
<li>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</li>
<li>接口隔离原则（The Interface Segregation Principle，简称ISP）</li>
</ol>


<p>每个原则取一个字母（<strong>S</strong>RP，<strong>O</strong>CP，<strong>L</strong>SP，<strong>I</strong>SP，<strong>D</strong>IP），合称SOLID原则。</p>

<p><a id="markdown-单一职责原则the-single-responsibility-principle简称srp" name="单一职责原则the-single-responsibility-principle简称srp"></a></p>

<h2>单一职责原则（The Single Responsibility Principle，简称SRP）</h2>

<p><a id="markdown-定义" name="定义"></a></p>

<h3>定义</h3>

<p><strong>就一个类而言，应该只有一个引起它变化的原因。</strong></p>

<p>一个类如果有多个职责，但是你只需要其中的一个职责，你也不得不将其它职责包括进来，还有其它职责所依赖的所有组件。</p>

<p><a id="markdown-什么是职责" name="什么是职责"></a></p>

<h3>什么是职责</h3>

<p>在SRP中，我们把职责定义为“变化的原因”（a reason for change）。如果能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p>

<p>比如Employee这个类如果同时包含了业务规则和对于持久化的控制，多数情况下，我们可以断定它们不应该放在一起：业务规则会频繁地变化，但是持久化的方式却不会如此频繁地变化，并且变化的原因也是完全不同的。</p>

<p><a id="markdown-结论" name="结论"></a></p>

<h3>结论</h3>

<p>SRP是所有原则中最简单的，也是最难运用的。软件设计很多时候要做的，就是发现职责，并把它分离出来。事实上，我们将要论述的其它原则都会以这样或者那样的方式回到这个问题上。</p>

<p><a id="markdown-开放封闭原则the-open-close-principle简称ocp" name="开放封闭原则the-open-close-principle简称ocp"></a></p>

<h2>开放——封闭原则（The Open-Close Principle，简称OCP）</h2>

<p><a id="markdown-定义-1" name="定义-1"></a></p>

<h3>定义</h3>

<p><strong>软件实体（类、模块、函数等）应该是可以扩展，但是不可修改的。</strong></p>

<p>OCP的定义，换个说法：</p>

<ul>
<li>对扩展开放（Open for extension）</li>
<li>对修改封闭（Close for modification）</li>
</ul>


<p>如果程序中的一处改动就会产生连锁反应，导致一系列相关模块的改动，OCP建议我们应该对程序进行重构。重构之后再进行同样的修改，就只需要添加新的功能模块，不需要对原有的代码进行修改。</p>

<p>如何在能在不改变模块原代码的情况下去更改它的行为或者为其添加功能呢？</p>

<p><a id="markdown-关键是抽象" name="关键是抽象"></a></p>

<h3>关键是抽象</h3>

<p>抽象一般有两种方式：
1. 接口
2. 继承</p>

<p><a id="markdown-接口" name="接口"></a></p>

<h4>接口</h4>

<p>用接口对需要的对象进行抽象，也就是所谓的“面向接口编程”。</p>

<p><img src="/images/InterfaceProgramming.jpg" alt="interface programming" /></p>

<p>上面的a图是一个不遵循OCP的设计。Client和Server都是具体的类，Client要使用Server。如果我们希望Client使用另外一个不同的Server类，那么就需要把Client里面使用Server的地方都做响应的修改。</p>

<p>上面的b图是一个符合OCP的设计。如果需要使用一个不同的服务器类，只需要重新实现这个类，保证这个类也实现类ClientInterface接口，则Client这个类不需要做修改，同时扩展类Client的功能。</p>

<blockquote><p>这个接口为什么叫ClientInterface，而不叫ServerInterface或者AbstractServer之类？因为这个接口和Client的关系更密切。</p></blockquote>

<p><a id="markdown-继承" name="继承"></a></p>

<h4>继承</h4>

<p>继承一个抽象类（和接口类似）或者重写一个父类中的（虚）方法，也是OCP的惯用伎俩。典型的例子，就是那个图形的绘制的例子。</p>

<pre><code class="swift">class Shape {
    func draw() {}
};

class Square: Shape {
    override func draw() {
        // draw square
    }
};

class Circle: Shape {
    override func draw() {
        // draw circle
    }
};

void drawAllShapes([Shape] list) {
    for (Shape shape in list) {
        shape.draw()
    }
}
</code></pre>

<p>如果想扩展drawAllShapes方法，使其可以绘制一种新的形状，只需要重新创建一个Shape类的子类，drawAllShapes函数不需要改变，即可实现功能的扩展。这就是OCP。</p>

<p><a id="markdown-什么时候进行抽象" name="什么时候进行抽象"></a></p>

<h3>什么时候进行抽象</h3>

<p>即使是上面的形状绘制的例子，也不是完全的“对扩展开放，对修改关闭。”比如，我要求所有的圆必须在正方形之前绘制，就没法在不修改drawAllShapes的情况下进行这个功能扩展。</p>

<p>我们无法准确预测未来的功能扩展需求，所以，理论上来说，我们也无法实现完全的“对扩展开放，对修改关闭。”</p>

<p>而且更重要的，遵循OCP进行抽象的代价也是昂贵的。创建正确的抽象需要花费开发时间和精力。同时，这些抽象也增加了软件的设计复杂度。开发人员有能力处理的抽象的数量也是有限的。</p>

<p>所以，不要试图在刚开始就实现OCP，可以试着遵循下面的准则：</p>

<ul>
<li>只受一次愚弄</li>
</ul>


<p>也就是说，在刚开始编写代码的时候，假设变化不会发生。当变化发生时，我们就创建抽象进行隔离，防止以后发生同类变化。</p>

<p><a id="markdown-结论-1" name="结论-1"></a></p>

<h3>结论</h3>

<p>在很多方面，OCP都是面向对象设计的核心所在。遵循这个原则，可以带来面向对象技术所声称的巨大好处（也就是，灵活性、可重用性以及可维护性）。但是，对程序的每个部分都肆意地进行抽象也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</p>

<p><a id="markdown-liskov替换原则the-liskov-substitution-priciple简称lsp" name="liskov替换原则the-liskov-substitution-priciple简称lsp"></a></p>

<h2>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</h2>

<p><a id="markdown-定义-2" name="定义-2"></a></p>

<h3>定义</h3>

<p><strong>子类型必须能够替换掉它们的基类型。</strong></p>

<p>假设一个函数f，它的参数是某个基类型B。如果将基类型B的子类D传给f，会导致f出现错误的行为，那么D就违反了LSP原则。</p>

<p>此时，f的编写者想在f内对D进行检测，以便在把D传给f时，可以使f具有正确的行为。这个行为又违反了OCP原则，因为此时f对于基类型B的所有子类都不在封闭。</p>

<p><a id="markdown-一个违反lsp的简单例子" name="一个违反lsp的简单例子"></a></p>

<h3>一个违反LSP的简单例子</h3>

<p>对于LSP的违反常常会导致以明显违反OCP的方式使用运行时类型检测。这种方式常常是使用一个显式的if语句去确定一个对象的类型，以便于能够选择针对该类型的正确行为。考虑下面的例子：</p>

<pre><code class="swift">class Shape {

};

class Square: Shape {
    func drawSquare() {
        // draw square
    }
};

class Circle: Shape {
    func drawCircle() {
        // draw circle
    }
};

void drawAllShapes([Shape] list) {
    for (Shape shape in list) {
        if (shape is Square) {
            shape.drawSquare()
        } else if (shape is Circle) {
            shape.drawCircle()
        }
    }
}
</code></pre>

<p>很显然，上面的drawAllShapes违反了OCP原则，它必须知道所有的Shape的子类，并且，每创建一个子类，都需要修改drawAllShapes函数。</p>

<p>Square和Circle不能替换其基类型Shape就是违反了LSP原则，这又进一步导致了drawAllShapes违反了OCP原则。因而，对于LSP的违反也潜在违反了OCP原则。</p>

<p><a id="markdown-正方形和长方形的关系更微妙的违规" name="正方形和长方形的关系更微妙的违规"></a></p>

<h3>正方形和长方形的关系：更微妙的违规</h3>

<p>下面正方形继承长方形的例子，很微妙地违反了LSP原则。</p>

<p>长方形的实现如下：</p>

<pre><code class="swift">class Rectangle {
    var width: Double = 0
    var height: Double = 0

    func getWidth() -&gt; Double {
        return width
    }

    func getHeight() -&gt; Double {
        return height
    }

    func setWidth(_ width: Double) {
        self.width = width
    }

    func setHeight(_ height: Double) {
        self.height = height
    }

    func getArea() -&gt; Double {
        return self.width * self.height
    }
}
</code></pre>

<p>正方形IS-A长方形，按照面向对象分析的方法，正方形应该继承长方形。同时为了保证正方形的四个边长度一致，需要对<code>setWidth</code>和<code>setHeight</code>两个函数重写。</p>

<p>实现如下：</p>

<pre><code class="swift">class Square: Rectangle {
    override func setWidth(_ width: Double) {
        self.width = width
        self.height = width
    }

    override func setHeight(_ height: Double) {
        self.width = height
        self.height = height
    }
}
</code></pre>

<p>Square看起来工作不错，而且这个设计似乎也是自相容的，正确的。可是这个结论是错误的，一个自相容的程序未必就和所有的用户程序相容。考虑下面的函数：</p>

<pre><code class="swift">func tempFunc(_ rect: Rectangle) {
    rect.setWidth(4)
    rect.setHeight(5)
    assert(rect.getArea() == 4*5)
}
</code></pre>

<p>如果传递一个Square的实例给<code>tempFunc</code>，那么程序就会报错。</p>

<p>有人可能对<code>tempFunc</code>存在的问题进行争辩，说函数<code>tempFunc</code>的编写者不应该假设宽和长是独立变化的。这时候<code>tempFunc</code>的编写者肯定不同意：函数以Rectangle为参数，长宽独立变化就是长方形的特性，为什么不能用？</p>

<p>这时候，我们应该反过来思考一下：IS-A是不是继承的唯一标准？</p>

<p><strong>IS-A不应该成为继承的准则，“可替换性”才是。</strong></p>

<p><a id="markdown-其它一些容易导致违反lsp的习惯用法" name="其它一些容易导致违反lsp的习惯用法"></a></p>

<h3>其它一些容易导致违反LSP的习惯用法</h3>

<p><a id="markdown-子类中的退化函数" name="子类中的退化函数"></a></p>

<h4>子类中的退化函数</h4>

<p>当子类在重写基类函数的时候，如果功能不如基类完备，即出现了退化，那么这个子类在某些情况下就不能替换基类，违反了LSP原则。</p>

<blockquote><p>这也许就是一些语言在子类重写基类函数的时候必须通过super调用基类函数，这就保证了重写不会退化。但是在Swift和Objective-C中可以不调用super。</p></blockquote>

<p><a id="markdown-子类抛出基类没有的异常" name="子类抛出基类没有的异常"></a></p>

<h4>子类抛出基类没有的异常</h4>

<p>此时要遵循LSP，要么改变使用者的期望，要么子类不抛出这个异常。</p>

<p><a id="markdown-结论-2" name="结论-2"></a></p>

<h3>结论</h3>

<p>OCP是很多说法的核心，而LSP是使OCP成为可能的主要原则之一。正是子类的可替换性才使得使用基类类型的模块在无需修改的情况下就可以扩展。这种可替换性必须是开发人员可以隐式依赖的东西。</p>

<p><a id="markdown-依赖倒置原则the-dependency-inversion-principle简称dip" name="依赖倒置原则the-dependency-inversion-principle简称dip"></a></p>

<h2>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</h2>

<p><a id="markdown-定义-3" name="定义-3"></a></p>

<h3>定义</h3>

<ul>
<li><strong>高层模块不应该依赖于低级模块。二者都应该依赖于抽象。</strong></li>
<li><strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></li>
</ul>


<blockquote><p>这里的“抽象”是指接口或者抽象类。</p>

<p>为什么用”倒置“：这是相对于传统的软件开发，比如结构化分析和设计。在这些设计中，倾向于创建一些高层模块依赖于低层模块的模块，策略（Policy）依赖于细节的软件结构。而DIP要求大家都依赖于抽象，而且这个抽象绝对不会放在低层模块中，而是放在高层模块中（或者独立出来一个模块），所以，不再是高层模块依赖低层模块，而是低层模块依赖高层模块（中的抽象）。</p></blockquote>

<p>传统软件开发可能会设计出下面这样的程序结构：</p>

<p><img src="/images/DIP_bad_design.jpg" alt="DIP bad design" /></p>

<p>在这个设计中，高层模块依赖于低层模块，如果要重用，必须同时引入低层模块。如果高层模块能够独立于低层模块，那么，高层模块就可以非常容易地被重用。该原则是框架（framework）设计的核心原则。</p>

<p><img src="/images/DIP_good_design.jpg" alt="DIP good design" /></p>

<p>上图展示了一个更为合适的模型。每个高层模块都为它所需要的服务声明一个独立的接口，较低的层次实现这些抽象接口，每个高层模块都通过接口使用低层模块。这样，高层模块就不依赖于低层模块，低层模块反而依赖于高层模块中定义的抽象服务接口。</p>

<blockquote><p>其实，低层模块也有重用的问题，也不应该直接依赖于高层模块。这里，应该将高层模块抽象出来的接口独立成一个模块，大家都依赖这个模块。</p></blockquote>

<p><strong>这里的倒置不仅仅是依赖关系的倒置，也是接口所有权的倒置。</strong>我们通常认为工具库应该拥有自己的接口，但是当应用了DIP之后，我们发现往往是客户拥有抽象接口，而它们的服务者则从这些抽象接口派生。</p>

<p><a id="markdown-依赖于抽象" name="依赖于抽象"></a></p>

<h3>依赖于抽象</h3>

<p>“依赖于抽象”这一启发式规则与DIP要求类似，要求我们不应该依赖具体的类，也就是说，程序中所有的依赖关系都应该终止于抽象（抽象类或者接口）。根据这一规则，可知：</p>

<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用。</li>
<li>任何类都不应该从具体类派生。</li>
<li>任何方法都不应该重写它的任何基类中的已经实现了的方法。</li>
</ul>


<p>要完全遵守这个规则几乎是不可能的。对于一些具体的类，如果比较稳定，还是可以依赖的。比如Java或者Swift中的String类型，String比较稳定，不太会变化，依赖于它不会造成损害。</p>

<p>但是如果一个类不稳定，我们最好不要直接依赖它，而要用一个抽象接口隔离这个类的不稳定性，直接使用接口，而不是这个类。</p>

<p><a id="markdown-一个例子" name="一个例子"></a></p>

<h3>一个例子</h3>

<p>依赖倒置可以应用于任何存在一个类向另一个类发送消息的地方。例如Button对Lamp的控制。</p>

<p><img src="/images/DIP_button_lamp_design.jpg" alt="DIP button lamp design" /></p>

<p>上图中的a设计是不成熟的：Button类依赖于Lamp类，当Lamp类改变时，Button类会受到影响。此外，想要重用Button来控制另外一种对象（比如Motor）是不可能的。Button控制着Lamp对象，并且也只能控制Lamp对象。</p>

<p>这个设计违反类DIP原则：应用程序的高层策略没有和低层的实现分离，抽象没有和具体细节分离。也可以说，高层策略依赖于低层模块，抽象自动依赖于细节。</p>

<p>什么是高层策略呢？它是应用背后的抽象，是那些不随具体细节的改变而改变的真理，它是系统内部的系统——它是隐喻（metaphore）。在Button/Lamp这个例子中，背后的抽象是检测用户的开/关指令并将指令传给目标对象。用什么机制检测用户的指令呢？是直接按下GUI上的一个按钮，还是一个实体按钮，或者一个安全系统中的运动监测器？无关紧要！目标对象是什么呢？无关紧要！这些都是不会影响到抽象的具体细节。</p>

<p>改进之后的b设计则是一个遵守DIP的设计。而且，接口本身没有所有者，可以独立放在一个不同于Button，也不同于Lamp的地方。</p>

<p><a id="markdown-结论-3" name="结论-3"></a></p>

<h3>结论</h3>

<p>传统程序设计，策略依赖于细节。面向对象设计倒置了这种依赖关系，使得细节和策略都依赖于抽象，并且常常是客户拥有服务接口。</p>

<p>事实上，这种依赖关系的倒置正好是面向对象的标志所在。如果依赖关系是倒置的，就是面向对象设计；否则，就是过程化设计。</p>

<p>依赖倒置关系是实现许多面向对象技术所宣称的好处的基本底层机制。它的正确应用对于创建可重用的框架来说是必要的。同时它对于构建在变化面前富有弹性的代码也是非常重要的。</p>

<p><a id="markdown-接口隔离原则the-interface-segregation-principle简称isp" name="接口隔离原则the-interface-segregation-principle简称isp"></a></p>

<h2>接口隔离原则（The Interface Segregation Principle，简称ISP）</h2>

<p><a id="markdown-定义-4" name="定义-4"></a></p>

<h3>定义</h3>

<p><strong>不应该强迫客户依赖于它们不用的方法。</strong></p>

<p>这个原则是用来处理“胖”接口所具有的缺点。如果类的接口不是内聚（cohesive）的，就表示该类具有“胖”的接口。换句话说，类的“胖”接口可以分解成多组方法，每一组方法都服务于不同的客户程序。</p>

<p>如果客户程序依赖于一个具有“胖”接口的类，就相当于强迫客户程序依赖它们不使用的方法，那么这些客户程序就面临着由于这些未使用的方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。</p>

<p><a id="markdown-一个例子定时门" name="一个例子定时门"></a></p>

<h3>一个例子：定时门</h3>

<p><strong>问题描述：</strong></p>

<p>现在有一个Door的类，现在需要实现一个TimerDoor，如果门开的时间过长，就发出警报。为了做到这一点，TimerDoor需要跟另一个名为Timer的对象进行交互。如果一个对象希望得到超时通知，它可以调用Timer的register函数，该函数有两个参数，一个是超时时间，另一个是TimerClient对象，该对象的<code>timeout</code>函数会在超时时被Timer调用。</p>

<p>一个容易想到的实现如下图：</p>

<p><img src="/images/door_bad_design.jpg" alt="timer door bad design" /></p>

<p>现在Door依赖TimerClient了，可是并不是所有种类的Door都需要定时功能。如果要创建无需定时功能的Door的子类，那么在子类中就必须要提供<code>timeout</code>方法的退化实现，这就有可能违反LSP原则，使得子类不能够替换父类。而且，这些子类的应用程中中也必须引入TimerClient的定义。使Door变“胖”，只是为了给其某个子类带来需要的功能，这就是接口污染。</p>

<p>下面应用接口隔离原则ISP重新设计这个TimerDoor。</p>

<p>TimerDoor应该“具有”两组接口，一组供Timer使用，一组供Door使用。如何将这两组接口分开呢？该问题的答案基于这样的事实：一个对象的客户不是必须通过该对象才能访问其接口，也可以通过委托或者该对象的基类来访问它。</p>

<p><a id="markdown-使用委托对接口分组" name="使用委托对接口分组"></a></p>

<h4>使用委托对接口分组</h4>

<p>该方案如下图所示，当TimerDoor需要向Timer对象注册一个超时请求时，它就创建一个DoorTimerAdaper，并把它注册给Timer。当Timer对象发送<code>timeout</code>消息给DoorTimerAdapter时，DoorTimerAdapter把这个消息委托给TimerDoor的<code>doorTimeout</code>方法。</p>

<p><img src="/images/door_good_design_1.jpg" alt="timer door good design 1" /></p>

<p>这个设计是个比较通用的设计，在其他地方，也叫做“使用组合而非继承（Prefer Composition to Extension）”。但是这个设计略显复杂。下面基于多重继承的实现更加简洁。</p>

<p><a id="markdown-使用多重继承对接口分组" name="使用多重继承对接口分组"></a></p>

<h4>使用多重继承对接口分组</h4>

<p>不同语言的多重继承的实现是不一样的。倾向于使用Interface或者Protocol实现这一功能。</p>

<p><img src="/images/door_good_design_2.jpg" alt="timer door good design 2" /></p>

<p>TimerDoor继承Door和TimerClient。尽管这两个基类的客户程序都可以使用TimerDoor，但是实际上都不需要依赖TimerDoor类。这样，它们就通过分离的接口使用同一个对象。</p>

<p>通常情况下，我们都会优先选择多重继承方法，只有当DoorTimerAdapter所做的转换是必须的时候，才考虑使用委托方案。</p>

<blockquote><p>DoorTimerAdapter将<code>timeout</code>接口转换成TimerDoor里面的<code>doorTimeout</code>接口，如果需要，在这个转换过程中还可以做些其它事情。</p></blockquote>

<p><a id="markdown-一个例子atm界面" name="一个例子atm界面"></a></p>

<h3>一个例子：ATM界面</h3>

<p>现在让我们考虑一个更有意义的例子：自动取款机ATM问题。对于ATM上面可执行的不同操作封装一个抽象接口Transaction，三种具体的操作（Deposit，Withdrawal，Transfer）都实现这个接口。每种操作对应的类都可以调用UI抽象接口中的不同方法，但是<strong>每个操作只调用自己对应的方法</strong>。</p>

<p>一个简单直接的实现如下：</p>

<p><img src="/images/ATM_bad_design.jpg" width="400" alt="atm bad design" /></p>

<p>对于任何Transaction的子类的改动都有可能迫使对UI的相应改动，从而影响其它所有Transaction的子类以及所有依赖UI的类。如果要增加一种操作PayGasBillTransaction，为了处理该操作想要显示的特定消息，就必须要在UI中加入新的方法。这就导致所有其它Transaction都必须重新编译部署。</p>

<p>通过将UI接口分解成三个对应于不同操作的接口，可以避免这种耦合。设计如下：</p>

<p><img src="/images/ATM_good_design.jpg" width="600" alt="atm good design" /></p>

<p>当我们需要增加一种新的Transaction时，其它Transaction都不需要重新编译部署。</p>

<p><a id="markdown-多参数形式与单参数形式" name="多参数形式与单参数形式"></a></p>

<h4>多参数形式与单参数形式</h4>

<p>考虑一个既要访问TransferUI又要访问DepositUI的函数。假设我们想把这两个UI传入该函数，是应该这样写：</p>

<pre><code class="swift">void tempFund(_ depositeUI: DepositUI, _ transferUI: TransferUI)
</code></pre>

<p>还是应该这样写：</p>

<pre><code class="swift">void tempFund(_ ui: UI)
</code></pre>

<p>以第二种方法编写函数的诱惑是很强的。毕竟，在第一种多参数形式中，两个参数应用的是同一个对象，调用起来是这个样子：</p>

<pre><code class="swift">tempFunc(ui, ui)
</code></pre>

<p>虽然上面的调用看起来有悖常理，但是我们还是应该倾向于多参数形式。单参数形式的函数依赖于UI中包含的每一个接口，如果WithDrawalUI发生了改变，那么函数及其所有客户程序都会受到影响。这更悖常理。此外，我们也不能保证传入函数的两个参数一直是同一个对象。也许以后，接口对象会因为某些原因而分离，此时，函数并不需要关注接口对象是合并还是分拆这一事实。</p>

<p><a id="markdown-结论-4" name="结论-4"></a></p>

<h3>结论</h3>

<p>“胖”类会导致其客户程序之间的耦合。当一个客户程序要求该“胖”类进行一个改动时，其它客户程序都会受到影响。因此客户程序应该仅仅依赖于它调用的方法，而不应该直接依赖于一个“胖”类。通过把“胖”类的接口分解为多个特定程序的接口，每个针对特定客户程序的接口只声明其对应客户程序需要的接口。接着，该“胖”类就可以继承所有分离出来的接口，并实现它们。这就解除了客户程序和其没有调用的方法间的依赖关系，并使客户程序之间互不依赖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/09/07/Singleton/"/>
    <updated>2015-09-07T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/09/07/Singleton</id>
    <content type="html"><![CDATA[<h2>Singleton implementation</h2>

<p><a href="http://cocoa.venj.me/blog/singleton-in-objc/">Objective-C中单例模式的实现</a></p>

<p><a href="http://www.makebetterthings.com/iphone/singleton-design-pattern-for-objective-c/">Singleton Design Pattern for Objective-C</a></p>

<!-- more -->


<pre><code class="objc">+ (instancetype)sharedInstance
{
    static dispatch_once_t once;
    static id sharedInstance;
    dispatch_once(&amp;once, ^{
        sharedInstance = [[self alloc] init];
    });
    return sharedInstance;
}
</code></pre>

<h2>Avoid abusing singleton</h2>

<p><a href="http://objccn.io/issue-13-2/">避免滥用单例</a></p>

<p>Singleton introduces globla variable, which may lead to coupling of far-away components.</p>

<p>Note the life circle of an object, to see if it confirm to &ldquo;will always has one instance&rdquo;. If NO, we can not use Singleton here.</p>
]]></content>
  </entry>
  
</feed>
