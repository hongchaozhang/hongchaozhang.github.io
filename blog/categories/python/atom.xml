<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2021-02-26T18:34:34+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Python解析Excel文件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/06/23/parse-excel-using-python/"/>
    <updated>2020-06-23T19:17:45+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/06/23/parse-excel-using-python</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Python基础教程</h2>

<p><a href="https://www.runoob.com/python/python-tutorial.html">python基础教程</a></p>

<h2>xlrd和xlwt</h2>

<pre><code class="python">#!/usr/bin/env python
# -*- coding: utf-8 -*-

import xlrd
import xlwt


def read_excel():
    file_name = 'demo.xlsx'

    # 打开excel文件
    wb = xlrd.open_workbook(file_name)

    # 获取所有表格名字
    print(wb.sheet_names())

    # 通过索引获取表格
    sheet1 = wb.sheet_by_index(0)
    print(sheet1.name, sheet1.nrows, sheet1.ncols)

    # 获取行内容
    rows = sheet1.row_values(2)
    print(rows)

    # 获取列内容
    cols = sheet1.col_values(3)
    print(cols)

    # 获取表格里的内容，三种方式
    print(sheet1.cell(1, 0).value)
    print(sheet1.cell_value(1, 0))
    print(sheet1.row(1)[0].value)


def write_excel():
    f = xlwt.Workbook()

    # 添加sheet
    sheet1 = f.add_sheet('Students', True)

    # 创建杭数据和列数据
    row0 = ["qq", "ddd", "fgg", "hjj"]
    column0 = ["zsfsd", "ghg", "Python", "fs", "fgsf", "zbg"]

    # 写第一行
    for i in range(0, len(row0)):
        sheet1.write(0, i, row0[i])

    # 写第一列
    for i in range(0, len(column0)):
        sheet1.write(i + 1, 0, column0[i])

    # 保存文件为xls格式，xlsx格式不能打开
    f.save('test.xls')
</code></pre>

<h2>openpyxl</h2>

<p>xlwt的局限性是不能写入超过65535行、256列的数据（因为它只支持Excel 2003及之前的版本，在这些版本的Excel中行数和列数有此限制）。openpyxl支持07/10/13版本Excel，功能很强大，但是操作起来感觉没有xlwt方便。</p>

<h2>总结</h2>

<ol>
<li>读取Excel时，选择openpyxl和xlrd差别不大，都能满足要求</li>
<li>写入少量数据且存为xls格式文件时，用xlwt更方便</li>
<li>写入大量数据（超过xls格式限制）或者必须存为xlsx格式文件时，就要用openpyxl了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python解析XML格式文件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python/"/>
    <updated>2020-06-22T18:34:32+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Python基础教程</h2>

<p><a href="https://www.runoob.com/python/python-tutorial.html">python基础教程</a></p>

<h2>ElementTree</h2>

<p>ELementTree官方文档参考：<a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element">The ElementTree XML API</a></p>

<p>下面是一个例子：</p>

<pre><code class="python">from xml.etree import ElementTree as ET

# 读取xml文件
tree = ET.parse('gadm36_CHN_2.kml')
## 获取root节点
root = tree.getroot()

# 打印root节点的tag名称和所有的attribute
print root.tag, root.attrib

# 正常的xml文件的tag可能只是Placemark，这里是因为读进来的是一个kml文件
for placemark in root.iter('{http://www.opengis.net/kml/2.2}Placemark'):
    for simpleData in placemark.iter('{http://www.opengis.net/kml/2.2}SimpleData'):
        # 获取某一个attribute的值也可以可以使用simpleData.get('attribute name')
        print simpleData.attrib['name']
        if simpleData.attrib['name'] == 'NAME_2':
            cityName = simpleData.text
            # 创建一个tag为name的节点作为placemark的子节点
            nameEle = ET.SubElement(placemark, 'name')
            # 给新创建的节点的text属性赋值
            nameEle.text = cityName
            # 给placemark节点增加一个名为updated的attribute，其值为'yes'
            placemark.set('updated', 'yes')

# 将新修改的xml文件写入新的文件
tree.write('modifyChinaCity.kml')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python对中文的支持问题]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors/"/>
    <updated>2016-01-15T23:18:52+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors</id>
    <content type="html"><![CDATA[<p>参考<a href="https://www.python.org/dev/peps/pep-0263/">官方文档</a></p>

<!-- more -->


<p>一种解决方案：在python文件的开头（第一行）加入如下内容：
```python</p>

<h1>!/usr/local/bin/python</h1>

<h1>coding: utf-8</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pdb commands for python debugging in command line]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/06/27/pdb-commands-for-python-debugging-in-command-line/"/>
    <updated>2015-06-27T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/06/27/pdb-commands-for-python-debugging-in-command-line</id>
    <content type="html"><![CDATA[<p>The page is from <a href="http://web.stanford.edu/class/physics91si/2013/handouts/Pdb_Commands.pdf">MIT</a>. Keeping here only for reference.</p>

<h3>Startup and Help</h3>

<!-- more -->




<table>
    <tr>
        <td><strong>python -m pdb &lt;name&gt;.py [args]</strong></td>
        <td>begin the debugger</td>
    </tr>
    <tr>
        <td><strong>help [command]</strong></td>
        <td>view a list of command, or view help for a specific command</td>
    </tr>
</table>


<p>Within a python file:</p>

<table>
    <tr>
        <td>import pdb
        <br>...
        <br>pdb.set_trace()</td>
        <td>begin the debugger at this line when the file is run normally</td>
    </tr>
</table>


<h3>Navigating Code (within the pdb interpreter)</h3>

<table>
    <tr>
        <td><strong>l</strong>(ist)</td>
        <td>list 11 lines surrounding the current line</td>
    </tr>
    <tr>
        <td><strong>w</strong>(here)</td>
        <td>display the file and line number of the current line</td>
    </tr>
    <tr>
        <td><strong>n</strong>(ext)</td>
        <td>execute the current line</td>
    </tr><tr>
        <td><strong>s</strong>(tep)</td>
        <td>step into functions called at the current line</td>
    </tr><tr>
        <td><strong>r</strong>(eturn)</td>
        <td>execute until the current function's return is encountered</td>
    </tr>
</table>


<h3>Controlling Execution</h3>

<table>
    <tr>
        <td><strong>b #</strong></td>
        <td>create a breakpoint at line #</td>
    </tr>
    <tr>
        <td><strong>condition</strong> 4 a==3</td>
        <td>add condition a==3 to the 4th breakpoint</td>
    </tr>
    <tr>
        <td><strong>b</strong></td>
        <td>list breakpoints and their indices</td>
    </tr>
    <tr>
        <td><strong>c</strong>(ontinue)</td>
        <td>execute until a breakpoint is encountered</td>
    </tr><tr>
        <td><strong>clear #</strong></td>
        <td>clear breakpoint of index #</td>
    </tr>
</table>


<h3>Changing Variables / Interacting with Code</h3>

<table>
    <tr>
        <td><strong>p &lt;name&gt;</strong></td>
        <td>print value of variable &lt;name&gt;</td>
    </tr>
    <tr>
        <td><strong>!&lt;expr&gt;</strong></td>
        <td>execute the expression &lt;expr&gt;</td>
    </tr>
    <tr>
        <td><strong>run [args]</strong></td>
        <td>restart the debugger with sys.argv arguments [args]</td>
    </tr><tr>
        <td><strong>q</strong>(uit)</td>
        <td>exit the debugger</td>
    </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use the python script for adding tags and categories]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/06/27/instructions-for-adding-tags-and-categories/"/>
    <updated>2015-06-27T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/06/27/instructions-for-adding-tags-and-categories</id>
    <content type="html"><![CDATA[<p>[<strong>updated 2015.10.30</strong>] The following way is for my previous blog, and now I am using <a href="http://hongchaozhang.github.io/blog/2015/09/09/migrate-blog-to-octopress/">octopress for my blog</a>.</p>

<p>The following is for my project pages (gh-pages) <em>GitBlogs</em>.</p>

<p>The python script is put GitBlogs/tools/add.py.</p>

<p>For adding category or tag:</p>

<ul>
<li>go to tools/</li>
<li>run <code>python add.py -category category_name</code> or <code>python add.py -tag tag_name</code> for adding category and tag respectively.</li>
</ul>

]]></content>
  </entry>
  
</feed>
