<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-06-14T14:06:43+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Coding Conventions]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention/"/>
    <updated>2018-01-26T11:37:05+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention</id>
    <content type="html"><![CDATA[<p>Collection of some Swift coding conventions.</p>

<!-- more -->


<p>The following is conventions I like or I will likely misuse. For a complete version, go to:</p>

<ol>
<li><a href="https://github.com/raywenderlich/swift-style-guide/">The Official raywenderlich.com Swift Style Guide.</a></li>
<li>Swift <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a></li>
</ol>


<!-- TOC -->


<ul>
<li><a href="#naming">Naming</a>

<ul>
<li><a href="#try-to-form-grammatical-english-phrases">Try to Form Grammatical English Phrases</a></li>
<li><a href="#mutatingnonmutating-methods-naming">Mutating/Nonmutating Methods Naming</a></li>
<li><a href="#boolean-methods-naming">Boolean Methods Naming</a></li>
<li><a href="#protocol-naming">Protocol Naming</a></li>
<li><a href="#avoid-abbreviations">Avoid Abbreviations</a></li>
<li><a href="#delegates">Delegates</a></li>
</ul>
</li>
<li><a href="#code-organization">Code Organization</a>

<ul>
<li><a href="#protocol-conformance">Protocol Conformance</a></li>
</ul>
</li>
<li><a href="#classes-and-structures">Classes and Structures</a>

<ul>
<li><a href="#use-of-self">Use of Self</a></li>
<li><a href="#constants">Constants</a></li>
</ul>
</li>
<li><a href="#control-flow">Control Flow</a>

<ul>
<li><a href="#golden-path">Golden Path</a>

<ul>
<li><a href="#failing-guards">Failing Guards</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#argument-labels">Argument Labels</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-naming" name="naming"></a></p>

<h2>Naming</h2>

<p>Descriptive and consistent naming makes software easier to read and understand. Use the Swift naming conventions described in the <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a>. Some key principles include:</p>

<ol>
<li>prioritizing clarity over brevity</li>
<li>striving for fluent usage</li>
<li>using uppercase for types (and protocols), lowercase for everything else</li>
<li>boolean types should read like assertions</li>
<li>choosing good parameter names that serve as documentation</li>
<li>generally avoiding abbreviations</li>
<li>taking advantage of default parameters</li>
<li>labeling closure and tuple parameters</li>
<li>verb methods follow the -ed, -ing rule for the non-mutating version</li>
<li>noun methods follow the formX rule for the mutating version</li>
<li>protocols that describe what something is should read as nouns</li>
<li>protocols that describe a capability should end in -able or -ible</li>
<li>striving for clarity at the call site</li>
</ol>


<p><a id="markdown-try-to-form-grammatical-english-phrases" name="try-to-form-grammatical-english-phrases"></a></p>

<h3>Try to Form Grammatical English Phrases</h3>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">x.insert(y, at: z)          // “x, insert y at z”
x.subViews(havingColor: y)  // “x's subviews having color y”
x.capitalizingNouns()       // “x, capitalizing nouns”
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">x.insert(y, position: z)
x.subViews(color: y)
x.nounCapitalize()
</code></pre>

<p><a id="markdown-mutatingnonmutating-methods-naming" name="mutatingnonmutating-methods-naming"></a></p>

<h3>Mutating/Nonmutating Methods Naming</h3>

<p>When the operation is naturally described by a verb, use the verb’s imperative for the mutating method and apply the “ed” or “ing” suffix to name its nonmutating counterpart.</p>

<table>
<thead>
<tr>
<th> Mutating  </th>
<th> Nonmutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x.sort()</code>    </td>
<td> <code>z = x.sorted()</code> </td>
</tr>
<tr>
<td> <code>x.append(y)</code> </td>
<td> <code>z = x.appending(y)</code> </td>
</tr>
</tbody>
</table>


<p><br>
When the operation is naturally described by a noun, use the noun for the nonmutating method and apply the “form” prefix to name its mutating counterpart.</p>

<table>
<thead>
<tr>
<th> Nonmutating   </th>
<th> Mutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x = y.union(z)</code>  </td>
<td> <code>y.formUnion(z)</code> </td>
</tr>
<tr>
<td> <code>j = c.successor(i)</code>  </td>
<td> <code>c.formSuccessor(&amp;i)</code> </td>
</tr>
</tbody>
</table>


<p><a id="markdown-boolean-methods-naming" name="boolean-methods-naming"></a></p>

<h3>Boolean Methods Naming</h3>

<p>Uses of Boolean methods and properties should read as assertions about the receiver when the use is nonmutating, e.g. <code>x.isEmpty</code>, <code>line1.intersects(line2)</code>.</p>

<p><a id="markdown-protocol-naming" name="protocol-naming"></a></p>

<h3>Protocol Naming</h3>

<p>Protocols that describe what something is should read as nouns (e.g. <code>Collection</code>).</p>

<p>Protocols that describe a capability should be named using the suffixes -able, -ible, or -ing (e.g. <code>Equatable</code>, <code>ProgressReporting</code>).</p>

<p><a id="markdown-avoid-abbreviations" name="avoid-abbreviations"></a></p>

<h3>Avoid Abbreviations</h3>

<blockquote><p>The intended meaning for any abbreviation you use should be easily found by a <strong>web search</strong>.</p></blockquote>

<p><a id="markdown-delegates" name="delegates"></a></p>

<h3>Delegates</h3>

<p>When creating custom delegate methods, an unnamed first parameter should be the delegate source. (UIKit contains numerous examples of this.)</p>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">func namePickerView(_ namePickerView: NamePickerView, didSelectName name: String)
func namePickerViewShouldReload(_ namePickerView: NamePickerView) -&gt; Bool
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">func didSelectName(namePicker: NamePickerViewController, name: String)
func namePickerShouldReload() -&gt; Bool
</code></pre>

<p><a id="markdown-code-organization" name="code-organization"></a></p>

<h2>Code Organization</h2>

<p>Use extensions to organize your code into logical blocks of functionality. Each extension should be set off with a <code>// MARK: - comment</code> to keep things well-organized.</p>

<p><a id="markdown-protocol-conformance" name="protocol-conformance"></a></p>

<h3>Protocol Conformance</h3>

<p>In particular, when adding protocol conformance to a model, prefer adding a separate extension for the protocol methods. This keeps the related methods grouped together with the protocol and can simplify instructions to add a protocol to a class with its associated methods.</p>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">class MyViewController: UIViewController {
  // class stuff here
}

// MARK: - UITableViewDataSource
extension MyViewController: UITableViewDataSource {
  // table view data source methods
}

// MARK: - UIScrollViewDelegate
extension MyViewController: UIScrollViewDelegate {
  // scroll view delegate methods
}
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">class MyViewController: UIViewController, UITableViewDataSource, UIScrollViewDelegate {
  // all methods
}
</code></pre>

<p>For UIKit view controllers, consider grouping lifecycle, custom accessors, and IBAction in separate class extensions.</p>

<p><a id="markdown-classes-and-structures" name="classes-and-structures"></a></p>

<h2>Classes and Structures</h2>

<p><a id="markdown-use-of-self" name="use-of-self"></a></p>

<h3>Use of Self</h3>

<p>For conciseness, avoid using <code>self</code> since Swift does not require it to access an object&rsquo;s properties or invoke its methods.</p>

<p>Use <code>self</code> only when required by the compiler (in <code>@escaping</code> closures, or in initializers to disambiguate properties from arguments). In other words, if it compiles without <code>self</code> then omit it.</p>

<p><a id="markdown-constants" name="constants"></a></p>

<h3>Constants</h3>

<p>Constants are defined using the <code>let</code> keyword, and variables with the <code>var</code> keyword. Always use <code>let</code> instead of <code>var</code> if the value of the variable will not change.</p>

<blockquote><p>Tip: A good technique is to define everything using <code>let</code> and only change it to <code>var</code> if the compiler complains!</p></blockquote>

<p>You can define constants on a type rather than on an instance of that type using type properties. To declare a type property as a constant simply use <code>static let</code>. Type properties declared in this way are generally preferred over global constants because they are easier to distinguish from instance properties.</p>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">enum Math {
  static let e = 2.718281828459045235360287
  static let root2 = 1.41421356237309504880168872
}

let hypotenuse = side * Math.root2
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">let e = 2.718281828459045235360287  // pollutes global namespace
let root2 = 1.41421356237309504880168872

let hypotenuse = side * root2 // what is root2?
</code></pre>

<p><a id="markdown-control-flow" name="control-flow"></a></p>

<h2>Control Flow</h2>

<p><a id="markdown-golden-path" name="golden-path"></a></p>

<h3>Golden Path</h3>

<p>When coding with conditionals, the left-hand margin of the code should be the &ldquo;golden&rdquo; or &ldquo;happy&rdquo; path. That is, don&rsquo;t nest <code>if</code> statements. Multiple return statements are OK. The <code>guard</code> statement is built for this.</p>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">func computeFFT(context: Context?, inputData: InputData?) throws -&gt; Frequencies {

  guard let context = context else {
    throw FFTError.noContext
  }
  guard let inputData = inputData else {
    throw FFTError.noInputData
  }

  // use context and input to compute the frequencies
  return frequencies
}
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">func computeFFT(context: Context?, inputData: InputData?) throws -&gt; Frequencies {

  if let context = context {
    if let inputData = inputData {
      // use context and input to compute the frequencies

      return frequencies
    } else {
      throw FFTError.noInputData
    }
  } else {
    throw FFTError.noContext
  }
}
</code></pre>

<p>When multiple optionals are unwrapped either with <code>guard</code> or <code>if let</code>, minimize nesting by using the compound version when possible. Example:</p>

<p><strong>Preferred:</strong></p>

<pre><code class="swift">guard let number1 = number1,
      let number2 = number2,
      let number3 = number3 else {
  fatalError("impossible")
}
// do something with numbers
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">if let number1 = number1 {
  if let number2 = number2 {
    if let number3 = number3 {
      // do something with numbers
    } else {
      fatalError("impossible")
    }
  } else {
    fatalError("impossible")
  }
} else {
  fatalError("impossible")
}
</code></pre>

<p><a id="markdown-failing-guards" name="failing-guards"></a></p>

<h4>Failing Guards</h4>

<p><code>guard</code> statements are required to exit in some way. Generally, this should be simple one line statement such as <code>return</code>, <code>throw</code>, <code>break</code>, <code>continue</code>, and <code>fatalError()</code>. Large code blocks should be avoided. If cleanup code is required for multiple exit points, consider using a <code>defer</code> block to avoid cleanup code duplication.</p>

<p><a id="markdown-argument-labels" name="argument-labels"></a></p>

<h2>Argument Labels</h2>

<ol>
<li>Good practice</li>
</ol>


<pre><code class="swift">func move(from start: Point, to end: Point)
x.move(from: x, to: y) 
</code></pre>

<ol>
<li><p>Omit all labels when arguments can’t be usefully distinguished, e.g. <code>min(number1, number2)</code>, <code>zip(sequence1, sequence2)</code>.</p></li>
<li><p>When the first argument forms part of a prepositional phrase, give it an argument label. The argument label should normally begin at the preposition, e.g. <code>x.removeBoxes(havingLength: 12)</code>.</p>

<ul>
<li>An exception for the principle above arises when the first two arguments represent parts of a single abstraction. In such cases, begin the argument label after the preposition, to keep the abstraction clear.</li>
</ul>
</li>
</ol>


<p><strong>Preferred:</strong></p>

<pre><code class="swift">a.moveTo(x: b, y: c)
a.fadeFrom(red: b, green: c, blue: d)
</code></pre>

<p><strong>Not Preferred:</strong></p>

<pre><code class="swift">a.move(toX: b, y: c)
a.fade(fromRed: b, green: c, blue: d)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DR Project]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/02/dr-project/"/>
    <updated>2018-01-02T13:39:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/02/dr-project</id>
    <content type="html"><![CDATA[<p>Key words: ARKit, CoreML, SceneKit</p>

<!-- more -->


<p><a href="https://github.com/hongchaozhang/ProjectDataToReality">DR (Data to Reality)</a> is a demo for projecting data into reality: Using <strong>CoreML</strong> for object recognition, and then get the recognized object data and project the data to reality, just above the recognized object. In this process, <strong>ARKit</strong> helps us to get the real world object coordinate to put the data at, and <strong>SceneKit</strong> helps us to render the data in reality.</p>

<p>This is a screenshot in demo:</p>

<p><img src="/images/DR-Screenshot-1.jpg" alt="project chart to reality" /></p>

<p>Refer to github <a href="https://github.com/hongchaozhang/ProjectDataToReality">Project Data to Reality</a> for demo project. In the github page, the following are told:</p>

<ol>
<li>Requirement</li>
<li>How to Run the Project</li>
<li>How to Use the Demo

<ol>
<li>Project Chart to Reality</li>
<li>Face Detection</li>
<li>Face Recognition</li>
</ol>
</li>
</ol>


<h2>Related techniques used</h2>

<ol>
<li><a href="../../../../2017/12/28/arkit-usage/">ARKit</a></li>
<li><a href="../../../../2017/12/28/coreml-usage/">CoreML</a></li>
<li><a href="../../../../2018/01/02/scenekit-usage/">SceneKit</a></li>
</ol>


<h2>Notes on the Demo</h2>

<p>As this is a rough demo, it need some enhancements:</p>

<ol>
<li>Only four kinds of fruits are supported: banana, orange, cucumber and strawberry. But for anything recognized by Inceptionv3.mlmodel, we can add a sphere and the name just at the world position of the object. (Set <code>showRecognizedResultNearby</code> to <code>true</code>.)</li>
<li>The chart data of the four kinds of fruits are images exported from other apps.</li>
<li>For face detection on iphone, rotate the device to left by 90 degrees to make it work on landscape. This is an issue need to be fixed.</li>
<li>Face recognition needs a trained face recognition model, called FaceRecognition.mlmodel.</li>
<li>Face recognition request doesn&rsquo;t crop the image from camera according to the face detection result. This should be done to make face recognition more robust.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreML Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage/"/>
    <updated>2017-12-28T17:25:39+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#about-coreml">About CoreML</a></li>
<li><a href="#coreml-and-vision">CoreML and Vision</a></li>
<li><a href="#model-usage">Model Usage</a></li>
<li><a href="#model-training">Model Training</a>

<ul>
<li><a href="#basic">Basic</a></li>
<li><a href="#advanced">Advanced</a></li>
</ul>
</li>
<li><a href="#coreml-pros-and-cons">CoreML Pros and Cons</a>

<ul>
<li><a href="#pros">Pros</a></li>
<li><a href="#cons">Cons</a></li>
</ul>
</li>
</ul>


<!-- /TOC -->


<p><a id="markdown-about-coreml" name="about-coreml"></a></p>

<h2>About CoreML</h2>

<ol>
<li>Support image processing for <em>Vision</em>.</li>
<li>Support NPL (natural language processing) for <em>Foundation</em>.</li>
<li>Support learned decision tree analyzing for <em>GameplayKit</em>.</li>
</ol>


<p><a id="markdown-coreml-and-vision" name="coreml-and-vision"></a></p>

<h2>CoreML and Vision</h2>

<ol>
<li>CoreML makes it even easier to use trained models in your apps.</li>
<li>Vision gives you easy access to Apple’s models for detecting faces, face landmarks, text, rectangles, barcodes, and objects.</li>
</ol>


<p>Because these two frameworks are built on Metal, they run efficiently on the device, so you don’t need to send your users’ data to a server.</p>

<p><a id="markdown-model-usage" name="model-usage"></a></p>

<h2>Model Usage</h2>

<p>When you load a trained machine learning model (.mlmodel) into xcode, the screenshot is like (take inceptionv3.mlmodel as an example):</p>

<p><img src="/images/mlmodel_in_xcode.png" alt="machine learning model imported to xcode" /></p>

<p>From <em>Model Class</em> (section A), we can see that xcode has <em>Automatically generated Swift model calss</em>. Click the right arrow to view the generated model class.</p>

<p>If the model class is not generated successfully, double check <em>Target Membership</em> (section B) to make sure the mlmodel file is added into the correct target.</p>

<p>From <em>Model Evaluation Parameters</em>(section C), we can see the input and output of the trained model.</p>

<p>The following is a sample usage of image classification model:</p>

<pre><code class="swift">
// create request
guard let selectedModel = try? VNCoreMLModel(for: Inceptionv3().model) else {
    fatalError("Could not load model. Ensure model has been drag and dropped (copied) to XCode Project. Also ensure the model is part of a target.")
}     

let classificationRequest = VNCoreMLRequest(model: selectedModel, completionHandler: classificationCompleteHandler)
classificationRequest.imageCropAndScaleOption = VNImageCropAndScaleOption.centerCrop // Crop from centre of images and scale to appropriate size.

...

// run request against an image
guard let pixbuff = (sceneView.session.currentFrame?.capturedImage) else { return }
let ciImage = CIImage(cvPixelBuffer: pixbuff)
// Note1: Not entirely sure if the ciImage is being interpreted as RGB, but for now it works with the Inception model.
// Note2: Also uncertain if the pixelBuffer should be rotated before handing off to Vision (VNImageRequestHandler) - regardless, for now, it still works well with the Inception model.

let imageRequestHandler = VNImageRequestHandler(ciImage: ciImage, options: [:])

do {
    try imageRequestHandler.perform([classificationRequest])
} catch {
    print(error)
}

...

// completion handler for coping with image classification results.
func classificationCompleteHandler(request: VNRequest, error: Error?) {
    if error != nil {
        print("Error: " + (error?.localizedDescription)!)
        return
    }

    guard let observations = request.results else {
        print("No results")
        return
    }

    // Get Classifications
    let classifications = observations[0...1] // top 2 results
        .flatMap({ $0 as? VNClassificationObservation })
        .filter({ $0.confidence &gt; 0.2 })
        .map({ "\($0.identifier) \(String(format:"- %.2f", $0.confidence))" })
        .joined(separator: "\n")

    print("image recognition: " + classifications)
}
</code></pre>

<p>Refer to <a href="https://developer.apple.com/machine-learning/">Build more intelligent apps with machine learning</a> for some official materials.</p>

<p>For some detailed usage step by step, refer to <a href="https://www.raywenderlich.com/164213/coreml-and-vision-machine-learning-in-ios-11-tutorial">Core ML and Vision: Machine Learning in iOS 11 Tutorial</a>.</p>

<p><a id="markdown-model-training" name="model-training"></a></p>

<h2>Model Training</h2>

<p><a id="markdown-basic" name="basic"></a></p>

<h3>Basic</h3>

<p><img src="/images/CustomVisionFromMicroSoft.png" alt="Custom Vision From MicroSoft" /></p>

<p>Microsoft <a href="https://www.customvision.ai/">Custom Vision</a> supplies a very friendly UI interface. You can upload you images and label them very easily. After training is done, you can export the model for mobile devices, including: mlmodel file for iOS platform, and TensorFlow model on Android platform.</p>

<p>Friendly UI Interface:</p>

<p><img src="/images/InterfaceOfCustomVision.png" alt="interface of microsoft custom vision" /></p>

<p>But there are some limitations, as <a href="https://www.customvision.ai/">Custom Vision</a> is still in preview process.</p>

<p><img src="/images/MicroSoftCustomVisionLimitation.png" alt="limitation of microsoft custom vision" /></p>

<p><a id="markdown-advanced" name="advanced"></a></p>

<h3>Advanced</h3>

<p><a href="https://github.com/apple/turicreate/tree/master/userguide/image_classifier">apple turicreate image classification</a> supplies more configurations for model training, like the partition of trainning data and verification data. But some Python experience is needed.</p>

<p><a id="markdown-coreml-pros-and-cons" name="coreml-pros-and-cons"></a></p>

<h2>CoreML Pros and Cons</h2>

<p><a id="markdown-pros" name="pros"></a></p>

<h3>Pros</h3>

<ol>
<li><p><strong>Easy to use.</strong> As described at the beginning of the post.</p></li>
<li><p><strong>High performance.</strong> As is said:</p>

<blockquote><p>“It was amazing to see the prediction results immediately without any time interval.”</p></blockquote></li>
</ol>


<p><a id="markdown-cons" name="cons"></a></p>

<h3>Cons</h3>

<p><strong>Lack of federated learning.</strong> As is said:</p>

<blockquote><p>There are no provisions within Core ML for model retraining or federated learning, where data collected from the field is used to improve the accuracy of the model. That’s something you would have to implement by hand, most likely by asking app users to opt in for data collection and using that data to retrain the model for a future edition of the app.</p></blockquote>

<p>Refer to <a href="https://www.infoworld.com/article/3200885/machine-learning/apples-core-ml-the-pros-and-cons.html">Apple’s Core ML: The pros and cons</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARKit Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage/"/>
    <updated>2017-12-28T17:25:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#cool-ar-apps-in-app-store">Cool AR Apps in App Store</a>

<ul>
<li><a href="#world-brush">World Brush</a></li>
<li><a href="#ikea-place">IKEA Place</a></li>
<li><a href="#ar-measurekit">AR MeasureKit</a></li>
</ul>
</li>
<li><a href="#requirement">Requirement</a></li>
<li><a href="#arkit-usage">ARKit Usage</a>

<ul>
<li><a href="#arkit-related-techniques">ARKit Related Techniques</a></li>
<li><a href="#arkit-in-ios-system">ARKit in iOS System</a></li>
<li><a href="#arkit-key-classes">ARKit Key Classes</a></li>
<li><a href="#arsession"><code>ARSession</code></a></li>
<li><a href="#arconfiguration"><code>ARConfiguration</code></a></li>
<li><a href="#more-on-arworldtrackingconfiguration">More on <code>ARWorldTrackingConfiguration</code></a>

<ul>
<li><a href="#tracking-quality">Tracking Quality</a></li>
</ul>
</li>
<li><a href="#arframe"><code>ARFrame</code></a></li>
<li><a href="#hittest-for-real-world-position">HitTest for Real World Position</a>

<ul>
<li><a href="#existingplane"><code>existingPlane</code></a></li>
<li><a href="#existingplaneusingextent"><code>existingPlaneUsingExtent</code></a></li>
<li><a href="#estimatedhorizontalplane"><code>estimatedHorizontalPlane</code></a></li>
<li><a href="#featurepoint"><code>featurePoint</code></a></li>
</ul>
</li>
<li><a href="#display-virtual-object-in-real-world">Display Virtual Object in Real World</a>

<ul>
<li><a href="#standard-view">Standard View</a></li>
<li><a href="#custom-view">Custom View</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#best-practices-and-limitations">Best Practices and Limitations</a>

<ul>
<li><a href="#best-practices">Best Practices</a></li>
<li><a href="#limitations">Limitations</a></li>
</ul>
</li>
<li><a href="#ar-from-google">AR from Google</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-cool-ar-apps-in-app-store" name="cool-ar-apps-in-app-store"></a></p>

<h2>Cool AR Apps in App Store</h2>

<p><a id="markdown-world-brush" name="world-brush"></a></p>

<h3>World Brush</h3>

<p><a href="https://itunes.apple.com/us/app/world-brush/id1277410449?mt=8">World Brush</a> is an AR experience where users can paint with brushes on the world around them. Every painting is saved at the approximate GPS location where it was created, and will be recommended to the user around.</p>

<p><img src="/images/ARKit_WorldBrush.png" width="300" alt="world brush" /></p>

<p><a id="markdown-ikea-place" name="ikea-place"></a></p>

<h3>IKEA Place</h3>

<p><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">IKEA Place</a> lets you virtually &lsquo;place&rsquo; IKEA products in your space.</p>

<p><img src="/images/ARKit_IkeaPlace.png" width="300" alt="ikea place" /></p>

<p><a id="markdown-ar-measurekit" name="ar-measurekit"></a></p>

<h3>AR MeasureKit</h3>

<p><a href="https://itunes.apple.com/us/app/ar-measurekit/id1258270451?mt=8">AR MeasureKit</a> makes it really easy to measure different things in the world using your iPhone’s or iPad’s camera.</p>

<p><img src="/images/ARKit_MeasureKit.png" width="300" alt="ar measure kit" /></p>

<p><a id="markdown-requirement" name="requirement"></a></p>

<h2>Requirement</h2>

<ul>
<li>iOS 11 and above system.</li>
<li>iOS device with an A9 or later processor.</li>
</ul>


<p>To make your app available only on devices supporting ARKit, use the arkit key in the <code>UIRequiredDeviceCapabilities</code> section of your app&rsquo;s Info.plist. If augmented reality is a secondary feature of your app, use the <code>ARWorldTrackingSessionConfiguration.isSupported</code> property to determine whether the current device supports the session configuration you want to use.</p>

<p><a id="markdown-arkit-usage" name="arkit-usage"></a></p>

<h2>ARKit Usage</h2>

<p><a id="markdown-arkit-related-techniques" name="arkit-related-techniques"></a></p>

<h3>ARKit Related Techniques</h3>

<p><img src="/images/ARKitRelatedTechs.png" alt="arkit related techs" /></p>

<p><a id="markdown-arkit-in-ios-system" name="arkit-in-ios-system"></a></p>

<h3>ARKit in iOS System</h3>

<p><img src="/images/ARKitFramework.png" alt="arkit in ios system" /></p>

<p><a id="markdown-arkit-key-classes" name="arkit-key-classes"></a></p>

<h3>ARKit Key Classes</h3>

<p><img src="/images/ARKitUsage.png" alt="arkit usage" /></p>

<p><a id="markdown-arsession" name="arsession"></a></p>

<h3><code>ARSession</code></h3>

<p>An <a href="https://developer.apple.com/documentation/arkit/arsession"><code>ARSession</code></a> object coordinates the major processes that ARKit performs on your behalf to create an augmented reality experience. These processes include reading data from the device&rsquo;s motion sensing hardware, controlling the device&rsquo;s built-in camera, and performing image analysis on captured camera images. The session synthesizes all of these results to establish a correspondence between the real-world space the device inhabits and a virtual space where you model AR content.</p>

<p>Every AR experience built with ARKit requires a single <code>ARSession</code>object. If you use an <code>ARSCNView</code> or <code>ARSKView</code> object to easily build the visual part of your AR experience, the view object includes an <code>ARSession</code> instance. If you build your own renderer for AR content, you&rsquo;ll need to instantiate and maintain an ARSession object yourself.</p>

<p>Running a session requires a session configuration: an instance of the <code>ARConfiguration</code> class, or its subclass <code>ARWorldTrackingConfiguration</code>. These classes determine how ARKit tracks a device&rsquo;s position and motion relative to the real world, and thus affect the kinds of AR experiences you can create.</p>

<p><a id="markdown-arconfiguration" name="arconfiguration"></a></p>

<h3><code>ARConfiguration</code></h3>

<p><a href="https://developer.apple.com/documentation/arkit/arconfiguration"><code>ARConfiguration</code></a> is an abstract class; you do not create or work with instances of this class.</p>

<p>To run an AR session, create an instance of the concrete <code>ARConfiguration</code> subclass that provides the kind of augmented reality experience you want to use in your app or game. Then, set up the configuration object&rsquo;s properties and pass the configuration to your session&rsquo;s <code>run(_:options:)</code> method. ARKit includes the following concrete configuration classes:</p>

<ul>
<li><p><a href="https://developer.apple.com/documentation/arkit/arworldtrackingconfiguration"><code>ARWorldTrackingConfiguration</code></a>
Provides high-quality AR experiences that use the rear-facing camera precisely track a device&rsquo;s position and orientation and allow plane detection and hit testing. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>ARWorldTrackingConfiguration</code> class tracks the device&rsquo;s movement with six degrees of freedom (6DOF): specifically, the three rotation axes (roll, pitch, and yaw), and three translation axes (movement in x, y, and z).</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arorientationtrackingconfiguration"><code>AROrientationTrackingConfiguration</code></a>
Provides basic AR experiences that use the rear-facing camera and track only a device&rsquo;s orientation. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>AROrientationTrackingConfiguration</code> class tracks the device&rsquo;s movement with three degrees of freedom (3DOF): specifically, the three rotation axes (roll, pitch, and yaw).</p>

<p>  <code>AROrientationTrackingConfiguration</code> cannot track movement of the device, and 3DOF tracking does not support plane detection or hit testing.</p>

<p>  Use 3DOF tracking only as a fallback in situations where 6DOF tracking is temporarily unavailable.</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arfacetrackingconfiguration"><code>ARFaceTrackingConfiguration</code></a>
Provides AR experiences that use the front-facing camera and track the movement and expressions of the user&rsquo;s face.</p></li>
</ul>


<p>Face tracking is available only on iOS devices with a front-facing TrueDepth camera.</p>

<p>An official example <a href="https://developer.apple.com/documentation/arkit/creating_face_based_ar_experiences">Creating Face-Based AR Experiences</a> demonstrates that you can place and animate 3D content that follows the user’s face and matches facial expressions, using the TrueDepth camera on iPhone X.</p>

<p><a id="markdown-more-on-arworldtrackingconfiguration" name="more-on-arworldtrackingconfiguration"></a></p>

<h3>More on <code>ARWorldTrackingConfiguration</code></h3>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a> for an official explanation of the world tracking things.</p>

<p>World tracking process can be illustrated as:</p>

<p><img src="/images/ARKitTracking.gif" alt="arkit world tracking" /></p>

<blockquote><p>One question here: <em>How does ARKit know how long is 1 meter in the real world?</em> <a href="https://www.quora.com/How-can-Apple%E2%80%99s-ARKit-Augmented-Reality-do-precise-measurement-with-just-one-camera">How can Apple’s ARKit (Augmented Reality) do precise measurement with just one camera?</a> is trying to figure this out:</p>

<p>&ldquo;When an iPhone camera is turned on, it doesn’t have two different images with which to calculate distances. However, a moment after the first image is taken it does have a second image. <strong>Thanks to data from the iPhone accelerometer sensors, it can also estimate the difference - from the first image to the second - of the iPhone camera’s 3D position and aim.</strong> Now we go back to those “known features” being tracked. For each image the iPhone doesn’t just do this for a single feature, it maps as many features as it can. Aside from doing the triangulation on each of the features in the images, it also does a comparison between the differences in each feature’s relationship to other features in the image. So now, like your brain, the iPhone has two different views of something, knows the approximate angles of focus, knows the distance between the lens position, is tracking known features and their relationship to each other. From this, the iPhone can get a very good approximation of how each feature is positioned in space with relation to the other features, essentially producing a 3D mapping of the space.&rdquo;</p></blockquote>

<p><a id="markdown-tracking-quality" name="tracking-quality"></a></p>

<h4>Tracking Quality</h4>

<p>To get better tracking quality:</p>

<ol>
<li>Uninterrupted sensor data</li>
<li>Textured environments</li>
<li>Static scenes</li>
</ol>


<p>If tracking quality changes, the tracking state will also change:</p>

<p><img src="/images/ARKitTrackingState.png" alt="arkit tracing state transition" /></p>

<p>And the tracking state changes will be notified by:</p>

<pre><code class="swift">
func session(_ session: ARSession, cameraDidChangeTrackingState camera: ARCamera) { 
    if case .limited(let reason) = camera.trackingState {
        // Notify user of limited tracking state
        ...
    } 
}
</code></pre>

<p><a id="markdown-arframe" name="arframe"></a></p>

<h3><code>ARFrame</code></h3>

<p>After world tracking, we can get the 6 DOF of the camera, used for the upcoming rendering. These infos are stored in each <code>ARFrame</code>.</p>

<p><code>ARFrame</code> owns video image and position tracking information captured as part of an AR session. There are two ways to access <code>ARFrame</code> objects produced by an AR session, depending on whether your app favors a pull or a push design pattern.</p>

<ul>
<li><em>Pull Pattern</em>: get <code>currentFrame</code> from <code>ARSession</code>.</li>
<li><em>Push Pattern</em>: implement the <code>session(_:didUpdate:)</code> delegate method, and the session will call it once for each video frame it captures (at 60 frames per second by default).</li>
</ul>


<p>Key infos in <code>ARFrame</code>:</p>

<ol>
<li><p><strong><code>ARCamera</code></strong>: Information about the camera position and imaging characteristics for a captured video frame in an AR session. Get <code>camera</code> from <code>ARFrame</code>.</p></li>
<li><p><strong><code>ARLightEstimate</code></strong>: Estimated scene lighting information associated with a captured video frame in an AR session. Get <code>lightEstimate</code> from <code>ARFrame</code>.</p>

<p> Refer to <a href="https://blog.markdaws.net/arkit-by-example-part-4-realism-lighting-pbr-b9a0bedb013e">ARKit by Example — Part 4: Realism - Lighting &amp; PBR</a> for mimicing the environment light.</p></li>
</ol>


<p><a id="markdown-hittest-for-real-world-position" name="hittest-for-real-world-position"></a></p>

<h3>HitTest for Real World Position</h3>

<p>By calling the following method on <code>ARSCNView</code>,</p>

<pre><code class="swift">open func hitTest(_ point: CGPoint, types: ARHitTestResult.ResultType) -&gt; [ARHitTestResult]
</code></pre>

<p>we can get an array of <code>ARHitTestResult</code>, which stay at the very position point indicates. The <code>ARHitTestResult</code>s are sorted by distance. To call the method, you need to specify the <code>ARHitTestResult.ResultType</code>. There are four kinds of hitTest types:</p>

<p><a id="markdown-existingplane" name="existingplane"></a></p>

<h4><code>existingPlane</code></h4>

<p>Return the result type from intersecting with an existing plane anchor.</p>

<p><img src="/images/ARKitHitTestExistingPlane.gif" alt="arkit hittest existing plane" /></p>

<p><a id="markdown-existingplaneusingextent" name="existingplaneusingextent"></a></p>

<h4><code>existingPlaneUsingExtent</code></h4>

<p>Return the result type from intersecting with an existing plane anchor, taking into account the plane’s extent.</p>

<p><a id="markdown-estimatedhorizontalplane" name="estimatedhorizontalplane"></a></p>

<h4><code>estimatedHorizontalPlane</code></h4>

<p>Return the result type from intersecting a horizontal plane estimate, determined for the current frame.</p>

<p><img src="/images/ARKitHitTestEstimatedPlane.gif" alt="arkit hittest estimated plane" /></p>

<p><a id="markdown-featurepoint" name="featurepoint"></a></p>

<h4><code>featurePoint</code></h4>

<p>Return the result type from intersecting the nearest feature point.</p>

<p><img src="/images/ARKitHitTestFeaturePoints.gif" alt="" /></p>

<p><a id="markdown-display-virtual-object-in-real-world" name="display-virtual-object-in-real-world"></a></p>

<h3>Display Virtual Object in Real World</h3>

<p><a id="markdown-standard-view" name="standard-view"></a></p>

<h4>Standard View</h4>

<ul>
<li><strong><code>ARSCNView</code></strong>: A view for displaying AR experiences that augment the camera view with 3D SceneKit content.</li>
<li><strong><code>ARSKView</code></strong>: A view for displaying AR experiences that augment the camera view with 2D SpriteKit content.</li>
</ul>


<p><a id="markdown-custom-view" name="custom-view"></a></p>

<h4>Custom View</h4>

<p>To display your AR experience in a custom view, you’ll need to:</p>

<ol>
<li>Retrieve video frames and tracking information from the session.</li>
<li>Render those frame images as the backdrop for your view.</li>
<li>Use the tracking information to position and draw AR content atop the camera image.</li>
</ol>


<p>Refer to <a href="https://developer.apple.com/documentation/arkit/displaying_an_ar_experience_with_metal">Displaying an AR Experience with Metal</a>.</p>

<p><a id="markdown-best-practices-and-limitations" name="best-practices-and-limitations"></a></p>

<h2>Best Practices and Limitations</h2>

<p><a id="markdown-best-practices" name="best-practices"></a></p>

<h3>Best Practices</h3>

<p>World tracking is an inexact science. This process can often produce impressive accuracy, leading to realistic AR experiences. However, it relies on details of the device’s physical environment that are not always consistent or are difficult to measure in real time without some degree of error. To build high-quality AR experiences, be aware of these caveats and tips.</p>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a>.</p>

<p><strong>Design AR experiences for predictable lighting conditions.</strong></p>

<p> World tracking involves image analysis, which requires a clear image. Tracking quality is reduced when the camera can’t see details, such as when the camera is pointed at a blank wall or the scene is too dark.</p>

<p><strong>Use tracking quality information to provide user feedback.</strong></p>

<p> World tracking correlates image analysis with device motion. ARKit develops a better understanding of the scene if the device is moving, even if the device moves only subtly. Excessive motion—too far, too fast, or shaking too vigorously—results in a blurred image or too much distance for tracking features between video frames, reducing tracking quality. The ARCamera class provides tracking state reason information, which you can use to develop UI that tells a user how to resolve low-quality tracking situations.</p>

<p><strong>Allow time for plane detection to produce clear results, and disable plane detection when you have the results you need.</strong></p>

<p> Plane detection results vary over time—when a plane is first detected, its position and extent may be inaccurate. As the plane remains in the scene over time, ARKit refines its estimate of position and extent. When a large flat surface is in the scene, ARKit may continue changing the plane anchor’s position, extent, and transform after you’ve already used the plane to place content.</p>

<p><a id="markdown-limitations" name="limitations"></a></p>

<h3>Limitations</h3>

<ol>
<li>For a moving object, ARKit can not give an usable world position of it.</li>
<li>You can not put a virtual object behind a real object. This leads to some problems, like:

<ol>
<li>When an real object move in front of an virtual object, the virtual object will still be displayed in front of the real object.</li>
<li>You can not hold a virtual object coolly, as the virtual object you are trying to hold can not be behind your fingers.</li>
</ol>
</li>
</ol>


<p>Two thoughts that may be help on the second limitation:</p>

<ul>
<li>Segment the camera image based on the feature point with world position. Draw further real object, and then virtual object, and at last, the nearest real object. However, as the feature point is sparse (performance consideration), some edge detection algorithms are needed for accurate edges of objects.</li>
<li>Based on the dual camera, we can get depth of each pixel of the camera image. This will help on image segmentation.</li>
</ul>


<p><a id="markdown-ar-from-google" name="ar-from-google"></a></p>

<h2>AR from Google</h2>

<p><a href="https://developers.google.com/tango/?hl=zh-cn">Tango</a> is a platform that uses computer vision to give devices the ability to understand their position relative to the world around them. But Tango requires very special hardware to run on. So <a href="https://developers.google.com/ar/">ARCore</a> comes.</p>

<blockquote><p>The Tango project will be deprecated on March 1st, 2018. Google is continuing AR development with ARCore, a new platform designed for building augmented reality apps for a broad range of devices without the requirement for specialized hardware.</p></blockquote>

<p>ARCore is a platform for building augmented reality apps on Android. ARCore is designed to work on a wide variety of qualified Android phones running N and later. During the developer <strong>preview</strong>, ARCore supports the following devices:</p>

<ul>
<li>Google Pixel, Pixel XL, Pixel 2, Pixel 2 XL</li>
<li>Samsung Galaxy S8 (SM-G950U, SM-G950N, SM-G950F, SM-G950FD, SM-G950W, SM-G950U1)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的Error]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift/"/>
    <updated>2017-10-20T16:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC depthFrom:1 depthTo:3 insertAnchor:true -->


<ul>
<li><a href="#swift-error%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">Swift Error基本使用</a>

<ul>
<li><a href="#throws-in-swift-1x"><code>throws</code> in Swift 1.x</a></li>
<li><a href="#throws-in-swift-2"><code>throws</code> in Swift 2</a></li>
<li><a href="#throws%E7%9A%84%E4%BD%BF%E7%94%A8"><code>throws</code>的使用</a></li>
<li><a href="#throws%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86"><code>throws</code>抛出错误的处理</a></li>
</ul>
</li>
<li><a href="#throws%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5"><code>throws</code>的一些实践</a>

<ul>
<li><a href="#throws%E7%9A%84%E8%B0%83%E8%AF%95%E5%92%8C%E6%96%AD%E7%82%B9"><code>throws</code>的调试和断点</a></li>
<li><a href="#throws%E4%BB%8D%E7%84%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"><code>throws</code>仍然存在的问题</a></li>
</ul>
</li>
<li><a href="#swift-%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A7%8D%E7%B1%BB">Swift 错误类型的种类</a>

<ul>
<li><a href="#simple-domain-error">Simple domain error</a></li>
<li><a href="#recoverable-error">Recoverable error</a></li>
<li><a href="#universal-error">Universal error</a></li>
<li><a href="#logic-failure">Logic failure</a></li>
</ul>
</li>
<li><a href="#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">几种常见场景下的错误处理</a>

<ul>
<li><a href="#app%E5%86%85%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD">app内资源加载</a></li>
<li><a href="#%E5%8A%A0%E8%BD%BD%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%97%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF">加载当前用户信息时发生错误</a></li>
<li><a href="#%E8%BF%98%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81">还没有实现的代码</a></li>
<li><a href="#%E8%B0%83%E7%94%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84%E4%BC%A0%E6%84%9F%E5%99%A8%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE">调用设备上的传感器收集数据</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
<li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95">错误处理相关的辅助方法</a>

<ul>
<li><a href="#use-custom-errors">Use Custom Errors</a></li>
<li><a href="#do-cleanup-work-using-defer">Do Cleanup Work Using <code>defer</code></a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-swift-error基本使用" name="swift-error基本使用"></a></p>

<h2>Swift Error基本使用</h2>

<p><a id="markdown-throws-in-swift-1x" name="throws-in-swift-1x"></a></p>

<h3><code>throws</code> in Swift 1.x</h3>

<p>在Objective-C中，<code>FileManager</code>的copy接口如下：</p>

<pre><code class="objc">- (BOOL)copyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error
</code></pre>

<p>调用该方法时，写法如下：</p>

<pre><code class="swift">NSFileManager *fileManager = [NSFileManager defaultManager];
NSError *error;
[fileManager copyItemAtPath:srcPath toPath:toPath error:&amp;error];
if (error) {
    // 发生了错误
} else {
    // 复制成功
}
</code></pre>

<p>在Swift 1.x中，与Objective-C类似。方法接口如下：</p>

<pre><code class="swift">func copyItemAtPath(_ srcPath: String, toPath dstPath: String, error: NSErrorPointer)
</code></pre>

<p>使用方法如下：</p>

<pre><code class="swift">let fileManager = NSFileManager.defaultManager()
var error: NSError?
fileManager.copyItemAtPath(srcPath, toPath: dstPath, error: &amp;error)
if error != nil {
    // 发生了错误
} else {
    // 复制成功
}
</code></pre>

<p>在上面的例子中，因为这个 API 仅会在极其特定的条件下 (比如磁盘空间不足) 会出错，所以开发者为了方便，有时会直接传入 nil 来忽视掉这个错误：</p>

<pre><code class="swift">let fileManager = NSFileManager.defaultManager()
// 不关心是否发生错误
fileManager.copyItemAtPath(srcPath, toPath: dstPath, error: nil)
</code></pre>

<p><a id="markdown-throws-in-swift-2" name="throws-in-swift-2"></a></p>

<h3><code>throws</code> in Swift 2</h3>

<p>这种做法无形中降低了应用的可靠性以及从错误中恢复的能力。为了解决这个问题，Swift 2 中在编译器层级就对<code>throws</code>进行了限定。上面提到的copy接口在Swift 2中的形式为：</p>

<pre><code class="swift">func copyItem(atPath srcPath: String, toPath dstPath: String) throws
</code></pre>

<p>被标记为<code>throws</code>的API，必须被处理，否则编译器就会报错。这就在编译器层面对错误的处理进行了强制执行，保证了代码的可靠性。</p>

<p><a id="markdown-throws的使用" name="throws的使用"></a></p>

<h3><code>throws</code>的使用</h3>

<p>下面是包含<code>throws</code>的一个自动售货机实现：</p>

<pre><code class="swift">enum VendingMachineError: Error {
    case invalidSelection
    case insufficientFunds(coinsNeeded: Int)
    case outOfStock
}

struct Item {
    var price: Int
    var count: Int
}

class VendingMachine {
    var inventory = [
        "Candy Bar": Item(price: 12, count: 7),
        "Chips": Item(price: 10, count: 4),
        "Pretzels": Item(price: 7, count: 11)
    ]
    var coinsDeposited = 0

    func vend(itemNamed name: String) throws {
        guard let item = inventory[name] else {
            throw VendingMachineError.invalidSelection
        }

        guard item.count &gt; 0 else {
            throw VendingMachineError.outOfStock
        }

        guard item.price &lt;= coinsDeposited else {
            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)
        }

        coinsDeposited -= item.price

        var newItem = item
        newItem.count -= 1
        inventory[name] = newItem

        print("Dispensing \(name)")
    }
}
</code></pre>

<p><code>vend(itemNamed:)</code>方法的实现通过<code>guard</code>抛出购买过程中相应的错误。</p>

<p><a id="markdown-throws抛出错误的处理" name="throws抛出错误的处理"></a></p>

<h3><code>throws</code>抛出错误的处理</h3>

<p>被标记为<code>throws</code>的API，我们必须采用下面几种处理方式中的一种来处理，否则，编译器会报错。</p>

<h4><code>do catch</code></h4>

<pre><code class="swift">var vendingMachine = VendingMachine()
vendingMachine.coinsDeposited = 8
do {
    try buyFavoriteSnack(person: "Alice", vendingMachine: vendingMachine)
} catch VendingMachineError.invalidSelection {
    print("Invalid Selection.")
} catch VendingMachineError.outOfStock {
    print("Out of Stock.")
} catch VendingMachineError.insufficientFunds(let coinsNeeded) {
    print("Insufficient funds. Please insert an additional \(coinsNeeded) coins.")
}
</code></pre>

<h4><code>try?</code></h4>

<p>使用<code>try?</code>来处理错误，将其返回值变为Optional：如果在执行过程中出现错误，接口返回<code>nil</code>，同时错误停止继续传播。比如：</p>

<pre><code class="swift">func fetchDataFromDisk() throws -&gt; Data

func fetchDataFromServer() throws -&gt; Data

func fetchData() -&gt; Data? {
    if let data = try? fetchDataFromDisk() { 
        return data 
    }
    if let data = try? fetchDataFromServer() { 
        return data 
    }
    return nil
}
</code></pre>

<h4><code>try!</code></h4>

<p>如果你非常确信一个被标记为<code>throws</code>的接口，在你的环境中不会抛出错误，可以通过<code>try!</code>来强制终止错误的继续传播。如果在执行的时候出现了错误，那么抛出运行时错误，导致程序崩溃。</p>

<p>比如，<code>loadImage(atPath:)</code>方法加载指定目录下面的一张图片到内存中，如果加载异常，会抛出错误。在下面的使用中，我们希望加载一张应用中包含的图片，这种情况下，可以通过<code>try!</code>来终止错误的继续传播。</p>

<pre><code class="swift">let photo = try! loadImage(atPath: "./Resources/John Appleseed.jpg")
</code></pre>

<h4><code>try</code></h4>

<p>也可以直接使用<code>try</code>来调用被标记为<code>throws</code>的接口，但是这种情况下，错误会继续传播，包含该调用的方法也必须被标记为<code>throws</code>才行，否则，编译器会报错。</p>

<pre><code class="swift">let favoriteSnacks = [
    "Alice": "Chips",
    "Bob": "Licorice",
    "Eve": "Pretzels",
]
func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {
    let snackName = favoriteSnacks[person] ?? "Candy Bar"
    try vendingMachine.vend(itemNamed: snackName)
}
</code></pre>

<p>在这个例子中，因为<code>buyFavoriteSnack(person: vendingMachine:)</code>使用<code>try</code>调用了一个被标记为throws的接口<code>vend(itemNamed:)</code>，错误会继续传播，因此，该方法也需要标记为thorws。</p>

<p><a id="markdown-throws的一些实践" name="throws的一些实践"></a></p>

<h2><code>throws</code>的一些实践</h2>

<p><a id="markdown-throws的调试和断点" name="throws的调试和断点"></a></p>

<h3><code>throws</code>的调试和断点</h3>

<p>Swift的错误抛出并不是传统意义的exception，在调试时抛出错误并不会触发Exception断点。另外，throw本身是语言的关键字，而不是一个symbol，它也不能触发Symbolic类型的断点。如果我们希望在所有throw语句执行的时候让程序停住的话，需要一些额外的技巧。在之前 throw 的汇编实现中，可以看到所有throw语句在返回前都会进行一次<code>swift_willThrow</code>的调用，这就是一个有效的 Symbolic语句，我们设置一个<code>swift_willThrow</code>的Symbolic断点，就可以让程序在throw的时候停住，并使用调用栈信息来获知程序在哪里抛出了错误。</p>

<p>补充，在最新版本的Xcode中，Apple直接为我们在断点类型中加上了 “Swift Error Breakpoint”的选项，它背后做的就是在<code>swift_willThrow</code>上添加一个断点。不过因为有了更直接的方法，我们现在不再需要手动去添加这个符号断点了。我们可以通过设置“Swift Error Breakpoint”对throws进行断点设置和调试。设置方法如下：</p>

<p><img src="/images/Swift-Error-Breakpoint.png" alt="swift error breakpoint" /></p>

<p><a id="markdown-throws仍然存在的问题" name="throws仍然存在的问题"></a></p>

<h3><code>throws</code>仍然存在的问题</h3>

<p>不能从接口直接看出有哪些可能抛出的Error，必须看Document才行，带来了一些不便。比如，只通过接口：</p>

<pre><code class="swift">func vend(itemNamed name: String) throws
</code></pre>

<p>我们没有办法知道这个接口可能返回哪些错误。此时，要么阅读文档，获得确切的抛出错误，分别进行处理；或者将所有的错误统一处理如下：</p>

<pre><code class="swift">do {
    let snackName = favoriteSnacks[person] ?? "Candy Bar"
    try vendingMachine.vend(itemNamed: snackName)
} catch {
    // 错误抛出
}
</code></pre>

<p><a id="markdown-swift-错误类型的种类" name="swift-错误类型的种类"></a></p>

<h2>Swift 错误类型的种类</h2>

<p>参考Swift官方文档<a href="https://github.com/apple/swift/blob/master/docs/ErrorHandling.rst">Error Handling in Swift<!-- 2.0--></a>，Swift中的错误有下面四种：</p>

<ol>
<li>Simple domain error</li>
<li>Recoverable error</li>
<li>Universal error</li>
<li>Logic failure</li>
</ol>


<p><a id="markdown-simple-domain-error" name="simple-domain-error"></a></p>

<h3>Simple domain error</h3>

<p>简单的，显而易见的错误。这类错误的最大特点是我们不需要知道原因，只需要知道错误发生，并且想要进行处理。用来表示这种错误发生的方法一般就是返回一个<code>nil</code>值。在Swift中，这类错误最常见的情况就是将某个字符串转换为整数，或者在字典尝试用某个不存在的 key 获取元素：</p>

<pre><code class="swift">// Simple Domain Error 的例子
let num = Int("hello world") // nil
let element = dic["key_not_exist"] // nil
</code></pre>

<p><strong>可能出现这种错误的接口，不需要使用<code>throws</code>来标记，只需要将接口的返回类型设置为Optional即可。</strong>在使用层面 (或者说应用逻辑) 上，这类错误一般用<code>if let</code>的可选值绑定或者是<code>guard let</code>提前进行返回处理即可。</p>

<p><a id="markdown-recoverable-error" name="recoverable-error"></a></p>

<h3>Recoverable error</h3>

<p>正如其名，这类错误应该是被容许，并且是可以恢复的。可恢复错误的发生是正常的程序路径之一，而作为开发者，我们应当去检出这类错误发生的情况，并进一步对它们进行处理，让它们恢复到我们期望的程序路径上。</p>

<p><strong>这类错误在Objective-C的时代通常用NSError类型来表示，而在Swift里则是通过throws来实现。</strong>一般我们需要检查错误的类型，并作出合理的响应。而选择忽视这类错误往往是不明智的，因为它们是用户正常使用过程中可能会出现的情况，我们应该尝试对其恢复，或者至少向用户给出合理的提示，让他们知道发生了什么。像是网络请求超时，或者写入文件时磁盘空间不足：</p>

<pre><code class="swift">// 网络请求
let url = URL(string: "https://www.example.com/")!
let task = URLSession.shared.dataTask(with: url) { data, response, error in
    if let error = error {
        // 提示用户
        self.showErrorAlert("Error: \(error.localizedDescription)")
    }
    let data = data!
    // ...
}

// 写入文件
func write(data: Data, to url: URL) {
    do {
        try data.write(to: url)
    } catch let error as NSError {
        if error.code == NSFileWriteOutOfSpaceError {
            // 尝试通过释放空间自动恢复
            removeUnusedFiles()
            write(data: data, to: url)
        } else {
            // 其他错误，提示用户
            showErrorAlert("Error: \(error.localizedDescription)")
        }
    } catch {
        showErrorAlert("Error: \(error.localizedDescription)")
    }
}
</code></pre>

<p><a id="markdown-universal-error" name="universal-error"></a></p>

<h3>Universal error</h3>

<p>这类错误理论上可以恢复，但是由于语言本身的特性所决定，我们难以得知这类错误的来源，所以一般来说也不会去处理这种错误。这类错误包括类似下面这些情形：</p>

<pre><code class="swift">// 内存不足
[Int](repeating: 100, count: .max)

// 调用栈溢出
func foo() { foo() }
foo()
</code></pre>

<p>我们可以通过设计一些手段来对这些错误进行处理，比如：检测当前的内存占用并在超过一定值后警告，或者监视栈frame数进行限制等。但是一般来说这是不必要的，也不可能涵盖全部的错误情况。更多情况下，这是由于代码触碰到了设备的物理限制和边界情况所造成的，一般我们也不去进行处理（除非是人为造成的bug）。</p>

<p>在 Swift 中，各种被使用<code>fatalError</code>进行强制终止的错误一般都可以归类到 Universal error。</p>

<p><a id="markdown-logic-failure" name="logic-failure"></a></p>

<h3>Logic failure</h3>

<p>逻辑错误是程序员的失误所造成的错误，它们应该在开发时通过代码进行修正并完全避免，而不是等到运行时再进行恢复和处理。</p>

<p>常见的 Logic failure 包括有：</p>

<pre><code class="swift">// 强制解包一个 `nil` 可选值
var name: String? = nil
name!

// 数组越界访问
let arr = [1,2,3]
let num = arr[3]

// 计算溢出
var a = Int.max
a += 1

// 强制 try 但是出现错误
try! JSONDecoder().decode(Foo.self, from: Data())
</code></pre>

<p>这类错误在实现中触发的一般是<code>assert</code>或者<code>precondition</code>。</p>

<p>和<code>fatalError</code>不同，<code>assert</code>只在进行编译优化的<code>-O</code>配置下是不触发的，而如果更进一步，将编译优化选项配置为<code>-Ounchecked</code>的话，<code>precondition</code>也将不触发。此时，各方法中的<code>precondition</code>将被跳过，因此我们可以得到最快的运行速度。但是相对地代码的安全性也将降低，因为对于越界访问或者计算溢出等错误，我们得到的将是不确定的行为。</p>

<table>
<thead>
<tr>
<th>函数 </th>
<th> fatalError </th>
<th> precondition </th>
<th> assert</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Onone </td>
<td> 触发 </td>
<td> 触发 </td>
<td> 触发</td>
</tr>
<tr>
<td>-O </td>
<td> 触发 </td>
<td> 触发 </td>
<td> -</td>
</tr>
<tr>
<td>-Ounchecked </td>
<td> 触发 </td>
<td> - </td>
<td> -</td>
</tr>
</tbody>
</table>


<p>对于Universal error一般使用<code>fatalError</code>，而对于<code>Logic failure</code>一般使用<code>assert</code>或者<code>precondition</code>。遵守这个规则会有助于我们在编码时对错误进行界定。而有时候我们也希望能尽可能多地在开发的时候捕获Logic failure，而在产品发布后尽量减少crash比例。这种情况下，相比于直接将Logic failure转换为可恢复的错误，我们最好是使用<code>assert</code>在内部进行检查，来让程序在开发时崩溃。</p>

<p><a id="markdown-几种常见场景下的错误处理" name="几种常见场景下的错误处理"></a></p>

<h2>几种常见场景下的错误处理</h2>

<p>光说不练假把式。让我们来实际判断一下下面这些情况下我们都应该选择用哪种错误处理方式吧~</p>

<p><a id="markdown-app内资源加载" name="app内资源加载"></a></p>

<h3>app内资源加载</h3>

<p>假设我们在处理一个机器学习的模型，需要从磁盘读取一份预先训练好的模型。该模型以文件的方式存储在 app bundle 中，如果读取时没有找到该模型，我们应该如何处理这个错误？</p>

<h4>方案 1 Simple domain error</h4>

<pre><code class="swift">func loadModel() -&gt; Model? {
    guard let path = Bundle.main.path(forResource: "my_pre_trained_model", ofType: "mdl") else {
        return nil
    }
    let url = URL(fileURLWithPath: path)
    guard let data = try? Data(contentOf: url) else {
        return nil
    }

    return try? ModelLoader.load(from: data)
}
</code></pre>

<h4>方案 2 Recoverable error</h4>

<pre><code class="swift">func loadModel() throws -&gt; Model {
    guard let path = Bundle.main.path(forResource: "my_pre_trained_model", ofType: "mdl") else {
        throw AppError.FileNotExisting
    }
    let url = URL(fileURLWithPath: path)
    let data = try Data(contentOf: url)
    return try ModelLoader.load(from: data)
}
</code></pre>

<h4>方案 3 Universal error</h4>

<pre><code class="swift">func loadModel() -&gt; Model {
    guard let path = Bundle.main.path(forResource: "my_pre_trained_model", ofType: "mdl") else {
        fatalError("Model file not existing")
    }
    let url = URL(fileURLWithPath: path)
    do {
        let data = try Data(contentOf: url)
        return try ModelLoader.load(from: data)
    } catch {
        fatalError("Model corrupted.")
    }
}
</code></pre>

<h4>方案 4 Logic failure</h4>

<pre><code class="swift">func loadModel() -&gt; Model {
    let path = Bundle.main.path(forResource: "my_pre_trained_model", ofType: "mdl")!
    let url = URL(fileURLWithPath: path)
    let data = try! Data(contentOf: url)
    return try! ModelLoader.load(from: data)
}
</code></pre>

<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案应该是方案 4，使用Logic failure让代码直接崩溃。</p>

<p>作为内建的存在于app bundle中模型或者配置文件，如果不存在或者无法初始化，在不考虑极端因素的前提下，一定是开发方面出现了问题，这不应该是一个可恢复的错误，无论重试多少次结果肯定是一样的。也许是开发者忘了将文件放到合适的位置，也许是文件本身出现了问题。不论是哪种情况，我们都会希望尽早发现并强制我们修正错误，而让代码崩溃可以很好地做到这一点。</p>

<p>使用Universal error同样可以让代码崩溃，但是Universal error更多是用在语言的边界情况下。而这里并非这种情况。
</details></p>

<p><a id="markdown-加载当前用户信息时发生错误" name="加载当前用户信息时发生错误"></a></p>

<h3>加载当前用户信息时发生错误</h3>

<p>我们在用户登录后会将用户信息存储在本地，每次重新打开app时我们检测并使用用户信息。当用户信息不存在时，应该进行的处理：</p>

<h4>方案 1 Simple domain error</h4>

<pre><code class="swift">func loadUser() -&gt; User? {
    let username = UserDefaults.standard.string(forKey: "com.onevcat.app.defaults.username")
    if let username {
        return User(name: username)
    } else {
        return nil
    }
}
</code></pre>

<h4>方案 2 Recoverable error</h4>

<pre><code class="swift">func loadUser() throws -&gt; User {
    let username = UserDefaults.standard.string(forKey: "com.onevcat.app.defaults.username")
    if let username {
        return User(name: username)
    } else {
        throws AppError.UsernameNotExisting
    }
}
</code></pre>

<h4>方案 3 Universal error</h4>

<pre><code class="swift">func loadUser() -&gt; User {
    let username = UserDefaults.standard.string(forKey: "com.onevcat.app.defaults.username")
    if let username {
        return User(name: username)
    } else {
        fatalError("User name not existing")
    }
}
</code></pre>

<h4>方案 4 Logic failure</h4>

<pre><code class="swift">func loadUser() -&gt; User {
    let username = UserDefaults.standard.string(forKey: "com.onevcat.app.defaults.username")
    return User(name: username!)
}
</code></pre>

<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>首先肯定排除方案3和4。“用户名不存在”是一个正常的现象，肯定不能直接crash。所以我们应该在方案1和方案2中选择。</p>

<p>对于这种情况，选择方案1 Simple domain error会更好。因为用户信息不存在是很简单的一个状况，如果用户不存在，那么我们直接让用户登录即可，这并不需要知道额外的错误信息，返回<code>nil</code>就能够很好地表达意图了。</p>

<p>当然，我们不排除今后随着情况越来越复杂，会需要区分用户信息缺失的原因 (比如是否是新用户还没有注册，还是由于原用户注销等)。但是在当前的情况下来看，这属于过度设计，暂时并不需要考虑。如果之后业务复杂到这个程度，在编译器的帮助下将Simple domain error修改为Recoverable error也不是什么难事儿。
</details></p>

<p><a id="markdown-还没有实现的代码" name="还没有实现的代码"></a></p>

<h3>还没有实现的代码</h3>

<p>假设你在为你的服务开发一个iOS框架，但是由于工期有限，有一些功能只定义了接口，没有进行具体实现。这些接口会在正式版中完成，但是我们需要预先发布给友商内测。所以除了在文档中明确标明这些内容，这些方法内部应该如何处理呢？</p>

<h4>方案 1 Simple domain error</h4>

<pre><code class="swift">func foo() -&gt; Bar? {
    return nil
}
</code></pre>

<h4>方案 2 Recoverable error</h4>

<pre><code class="swift">func foo() throws -&gt; Bar? {
    throw FrameworkError.NotImplemented
}
</code></pre>

<h4>方案 3 Universal error</h4>

<pre><code class="swift">func foo() -&gt; Bar? {
    fatalError("Not implemented yet.")
}
</code></pre>

<h4>方案 4 Logic failure</h4>

<pre><code class="swift">func foo() -&gt; Bar? {
    assertionFailure("Not implemented yet.")
    return nil
}
</code></pre>

<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案是方案3 Universal error。对于没有实现的方法，返回<code>nil</code>或者抛出错误期待用户恢复都是没有道理的，这会进一步增加框架用户的迷惑。这里的问题是语言层面的边界情况，由于没有实现，我们需要给出强力的提醒。在任意build设定下，都不应该期待用户可以成功调用这个函数，所以<code>fatalError</code>是最佳选择。</p>

<p>其实在swift继承的时候，编译器会给我们添加一个默认的未实现的接口：</p>

<pre><code class="swift">required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
}
</code></pre>

<p></details></p>

<p><a id="markdown-调用设备上的传感器收集数据" name="调用设备上的传感器收集数据"></a></p>

<h3>调用设备上的传感器收集数据</h3>

<p>调用传感器的app最有意思了！不管是相机还是陀螺仪，传感器相关的app总是能带给我们很多乐趣。那么，如果想要调用传感器获取数据时，发生了错误，应该怎么办呢？</p>

<h4>方案 1 Simple domain error</h4>

<pre><code class="swift">func getDataFromSensor() -&gt; Data? {
    let sensorState = sensor.getState()
    guard sensorState == .normal else {
        return nil
    }
    return try? sensor.getData()
}
</code></pre>

<h4>方案 2 Recoverable error</h4>

<pre><code class="swift">func getDataFromSensor() throws -&gt; Data {
    let sensorState = sensor.getState()
    guard sensorState == .normal else {
        throws SensorError.stateError
    }
    return try sensor.getData()
}
</code></pre>

<h4>方案 3 Universal error</h4>

<pre><code class="swift">func loadUser() -&gt; Data {
    let sensorState = sensor.getState()
    guard sensorState == .normal, let data = try? sensor.getData() else {
        fatalError("Sensor get data failed!")
    }
    return data
}
</code></pre>

<h4>方案 4 Logic failure</h4>

<pre><code class="swift">func loadUser() -&gt; Data {
    let sensorState = sensor.getState()
    assert(sensorState == .normal, "The sensor state is not normal")
    return try! sensor.getData()
}
</code></pre>

<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>传感器由于种种原因暂时不能使用 (比如正在被其他进程占用，或者甚至设备上不存在对应的传感器)，是很有可能发生的情况。即使这个传感器的数据对应用是至关重要，不可或缺的，我们可能也会希望至少能给用户一些提示。基于这种考虑，使用方案2 Recoverable error是比较合理的选择。</p>

<p>方案1在传感器数据无关紧要的时候可能也会是一个更简单的选项。但是方案3和4会直接让程序崩溃，而且这实际上也并不是代码边界或者开发者的错误，所以不应该被考虑。
</details></p>

<p><a id="markdown-总结" name="总结"></a></p>

<h3>总结</h3>

<p>可以看到，其实在错误处理的时候，选用哪种错误是根据情景和处理需求而定的，我在参考答案也使用了很多诸如“可能”，“相较而言”等语句。虽然对于特定的场景，我们可以进行直观的考虑和决策，但这并不是教条主义般的一成不变。错误类型之间可以很容易地通过代码互相转换，这让我们在处理错误的时候可以自由选择使用的策略：比如API即使提供给我们的是Recoverable的throws形式，我们也还是可以按照需要，通过<code>try?</code>将其转为Simple domain error，或者用<code>try!</code>将其转为Logic failure。</p>

<p>能切实理解使用情景，利用这些错误类型转换的方式，灵活选取使用场景下最合适的错误类型，才能说是真正理解了这四种错误的分类依据。</p>

<p><a id="markdown-错误处理相关的辅助方法" name="错误处理相关的辅助方法"></a></p>

<h2>错误处理相关的辅助方法</h2>

<p>For custom errors in swift, refer to <a href="https://developer.apple.com/documentation/swift/error">Error</a> official document.</p>

<p><a id="markdown-use-custom-errors" name="use-custom-errors"></a></p>

<h3>Use Custom Errors</h3>

<h4>Using Enumerations as Errors</h4>

<p>Swift’s enumerations are well suited to represent simple errors. Create an enumeration that conforms to the Error protocol with a case for each possible error. If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</p>

<p>The following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</p>

<pre><code class="swift">enum IntParsingError: Error {
    case overflow
    case invalidInput(String)
}
</code></pre>

<h4>Including More Data in Errors</h4>

<p>The following XMLParsingError conforms to Error and supply line and column position of the error.</p>

<pre><code class="swift">struct XMLParsingError: Error {
    enum ErrorKind {
        case invalidCharacter
        case mismatchedTag
        case internalError
    }

    let line: Int
    let column: Int
    let kind: ErrorKind
}

func parse(_ source: String) throws -&gt; XMLDoc {
    // ...
    throw XMLParsingError(line: 19, column: 5, kind: .mismatchedTag)
    // ...
}
</code></pre>

<p>Here’s how you can catch any XMLParsingError errors thrown by the parse(_:) function:</p>

<pre><code class="swift">do {
    let xmlDoc = try parse(myXMLData)
} catch let e as XMLParsingError {
    print("Parsing error: \(e.kind) [\(e.line):\(e.column)]")
} catch {
    print("Other error: \(error)")
}

// Prints "Parsing error: mismatchedTag [19:5]"
</code></pre>

<p><a id="markdown-do-cleanup-work-using-defer" name="do-cleanup-work-using-defer"></a></p>

<h3>Do Cleanup Work Using <code>defer</code></h3>

<p>You use a <code>defer</code> statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as <code>return</code> or <code>break</code>. For example, you can use a <code>defer</code> statement to ensure that file descriptors are closed and manually allocated memory is freed.</p>

<pre><code class="swift">func processFile(filename: String) throws {
    if exists(filename) {
        let file = open(filename)
        defer {
            close(file)
        }
        while let line = try file.readline() {
            // Work with the file.
        }
        // close(file) is called here, at the end of the scope.
    }
}

func vend(itemNamed name: String) throws {

    defer {
        // do some clean work
    }

    guard let item = inventory[name] else {
        throw VendingMachineError.invalidSelection
    }

    guard item.count &gt; 0 else {
        throw VendingMachineError.outOfStock
    }

    guard item.price &lt;= coinsDeposited else {
        throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)
    }

    coinsDeposited -= item.price
    var newItem = item
    newItem.count -= 1
    inventory[name] = newItem

    print("Dispensing \(name)")
}
</code></pre>

<p>The above example uses a <code>defer</code> statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="https://onevcat.com/2017/10/swift-error-category/">关于 Swift Error 的分类</a></li>
<li><a href="https://onevcat.com/2016/03/swift-throws/">Swift 2 throws 全解析 - 从原理到实践</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508">Error Handling Official Site</a></li>
<li><a href="https://developer.apple.com/documentation/swift/error">Error from Apple Document</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
