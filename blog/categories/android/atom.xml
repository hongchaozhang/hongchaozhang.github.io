<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2020-02-21T11:58:48+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android开发中使用的度量单位px、dp、sp、pt、in、mm]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android/"/>
    <updated>2016-10-25T17:10:08+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android</id>
    <content type="html"><![CDATA[<p>关于多屏的支持，最好的文章当然是官方文档：<a href="https://developer.android.com/guide/practices/screens_support.html#testing">Supporting Multiple Screens</a>。一篇文章，从概念到解决方案，非常全面。</p>

<p>下面主要讨论一下开发过程中使用的度量单位的问题。</p>

<!-- more -->


<h2>单位的意义及其之间的转换</h2>

<p>对于不同的度量单位（<code>px</code>、<code>dp</code>、<code>sp</code>、<code>pt</code>、<code>in</code>、<code>mm</code>），可以从下面一张图看出它们之间的关系：</p>

<p><img src="/images/android_font_size_tesst.png" alt="android_font_size_tesst" /></p>

<p>左上->右上->左下->右下，依次为ldpi->mdpi->hdpi->xhdpi（其大小不代表绝对大小，只用关注它们之间的相对大小即可）。结论如下：</p>

<h3><code>px</code></h3>

<p><code>px</code>是唯一一个显示大小与dpi有关系的单位，其它单位的显示大小都与dpi无关。</p>

<h3><code>dp</code></h3>

<p><code>dp</code>也叫<code>dip</code>，即<em>density-independent-pixel</em>，在dpi等于160的时候，其大小与px相等。因此，我们可以算出1dp等于<code>densityDpi / DENSITY_DEFAULT(160)） px</code>，也就是<code>density px</code>。具体关系参考下面介绍<code>DisplayMetrics</code>中属性的表格。</p>

<h3><code>sp</code></h3>

<p>除了具有<code>dp</code>的特征之外，<code>sp</code>还可以响应用户的font size preference设置其值像dp一样，也只能取一些离散的值。font size preference的设置界面如下：</p>

<p><img src="/images/android_font_preference_setting.png" alt="android_font_preference_setting" /></p>

<h3><code>pt</code>、<code>in</code>、<code>mm</code></h3>

<p>这几个单位都是长度单位，其中pt等于1/72inch，都是用户最终看到的大小。这些值都是根据设备真实物理像素密度（<code>xdpi</code>和<code>ydpi</code>）算出来的，不会像<code>dp</code>和<code>sp</code>一样，只有几个离散的值。</p>

<p>在TypedValue.java中有所有单位到<code>px</code>的转换方法：</p>

<pre><code class="java">/**
 * Converts an unpacked complex data value holding a dimension to its final floating 
 * point value. The two parameters &lt;var&gt;unit&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt;
 * are as in {@link #TYPE_DIMENSION}.
 *  
 * @param unit The unit to convert from.
 * @param value The value to apply the unit to.
 * @param metrics Current display metrics to use in the conversion -- 
 *                supplies display density and scaling information.
 * 
 * @return The complex floating point value multiplied by the appropriate 
 * metrics depending on its unit. 
 */
public static float applyDimension(int unit, float value,
                                   DisplayMetrics metrics)
{
    switch (unit) {
    case COMPLEX_UNIT_PX:
        return value;
    case COMPLEX_UNIT_DIP:
        return value * metrics.density;
    case COMPLEX_UNIT_SP:
        return value * metrics.scaledDensity;
    case COMPLEX_UNIT_PT:
        return value * metrics.xdpi * (1.0f/72);
    case COMPLEX_UNIT_IN:
        return value * metrics.xdpi;
    case COMPLEX_UNIT_MM:
        return value * metrics.xdpi * (1.0f/25.4f);
    }
    return 0;
}
</code></pre>

<p>该函数将所有的单位转换为px，其中参数意义如下：</p>

<table>
<thead>
<tr>
<th>属性 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>metrics.density</code> </td>
<td> 默认值为<code>densityDpi / (float) DENSITY_DEFAULT</code>。该值为归整之后的值：比如150dpi的设备，<code>density</code>值为1，即按照160dpi进行处理。<code>density</code>的典型值为0.75、1.0、1.5、2.0、3.0等。</td>
</tr>
<tr>
<td><code>metrics.densityDpi</code> </td>
<td> 设备物理像素密度，非精确的归整值，可取值为<code>DENSITY_LOW(120)</code>、<code>DENSITY_MEDIUM(160)</code>、<code>DENSITY_HIGH(240)</code>等。<code>density</code>的值是根据<code>densityDpi / DENSITY_DEFAULT</code>计算出来的，所以取值也是一些典型的离散值。</td>
</tr>
<tr>
<td><code>metrics.scaledDensity</code> </td>
<td> 具有<code>density</code>所有的特征，如果用户设置了font size preference，还需要乘以一个scale系数。</td>
</tr>
<tr>
<td><code>metrics.xdpi</code> </td>
<td> <code>x</code>方向的物理像素密度，精确的值，单位px/inch。同样的有<code>ydpi</code>。</td>
</tr>
<tr>
<td><code>DENSITY_DEFAULT</code> </td>
<td> dpi的参考值，值为160px/inch。</td>
</tr>
</tbody>
</table>


<h3><code>dp</code>转换为<code>px</code></h3>

<p>有时候我们必须使用<code>px</code>作为单位，比如某个api接受的参数只能是<code>px</code>。这个时候，需要将<code>dp</code>转化为<code>px</code>。在code中我们可以使用下面的方法将<code>dp</code>转化为<code>px</code>：</p>

<pre><code class="java">// The gesture threshold expressed in dp
private static final float GESTURE_THRESHOLD_DP = 16.0f;

// Get the screen's density scale
final float scale = getResources().getDisplayMetrics().density;
// Convert the dps to pixels, based on density scale
mGestureThreshold = (int) (GESTURE_THRESHOLD_DP * scale + 0.5f);

// Use mGestureThreshold as a distance in pixels...
</code></pre>

<h2>Best Practice</h2>

<ol>
<li>Use <code>wrap_content</code>, <code>match_parent</code>, or <code>dp</code> units when specifying dimensions in an XML layout file</li>
<li>Do not use hard coded pixel values in your application code</li>
<li>Do not use <code>AbsoluteLayout</code> (it&rsquo;s deprecated). Use <code>RelativeLayout</code> instead.</li>
<li>Supply alternative bitmap drawables for different screen densities</li>
</ol>


<p>另外一篇关于网页上字体大小单位的讨论：<a href="http://hongchaozhang.github.io/blog/2015/08/03/Font-size-in-Html/">Font Size in Html - Px, Em, Rem</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android unit test with junit]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit/"/>
    <updated>2016-08-25T13:27:16+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit</id>
    <content type="html"><![CDATA[<p>Create Android unit tests using junit4.</p>

<!-- more -->


<h2>Test Types</h2>

<p>When using Android Studio to write any of your tests, your test code must go into one of two different code directories (source sets). For each module in your project, Android Studio includes both source sets, corresponding to the following test types:</p>

<h3>Local unit tests</h3>

<p>Located at <em>module-name/src/test/java/</em>.
These tests run on the local JVM and do not have access to functional Android framework APIs.</p>

<h3>Instrumented tests</h3>

<p>Located at <em>module-name/src/androidTest/java/</em>.
These are all tests that must run on an Android hardware device or an Android emulator.</p>

<p>In the following, we will only focus on local unit test.</p>

<h2>Set Up Your Testing Environment</h2>

<p>In your app&rsquo;s top-level build.gradle file, you need to specify these libraries as dependencies:</p>

<pre><code>dependencies {
    // Required -- JUnit 4 framework
    testCompile 'junit:junit:4.12'
    // Optional -- Mockito framework
    testCompile 'org.mockito:mockito-core:1.10.19'
}
</code></pre>

<h2>Create a Local Unit Test Class</h2>

<h3>Manualy create junit4 unit test</h3>

<p>Your local unit test class should be written as a JUnit 4 test class. <a href="http://junit.org/junit4/">JUnit</a> is the most popular and widely-used unit testing framework for Java. The latest version of this framework, JUnit 4, allows you to write tests in a cleaner and more flexible way than its predecessor versions. Unlike the previous approach to Android unit testing based on JUnit 3, with JUnit 4, you do not need to extend the junit.framework.TestCase class. You also do not need to prefix your test method name with the ‘test’ keyword, or use any classes in the junit.framework or junit.extensions package.</p>

<p>To create a basic JUnit 4 test class, create a Java class that contains one or more test methods. A test method begins with the @Test annotation and contains the code to exercise and verify a single functionality in the component that you want to test.</p>

<pre><code class="java">import org.junit.Test;
import java.util.regex.Pattern;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class EmailValidatorTest {

    @Test
    public void emailValidator_CorrectEmailSimple_ReturnsTrue() {
        assertThat(EmailValidator.isValidEmail("name@email.com"), is(true));
    }
    ...
}
</code></pre>

<h3>Auto create junit4 unit test with the help of Android Studio</h3>

<p>Right click inside the class you are to test, and select <em>Go to -> Test</em> (Shift + Command + T), then select <em>create new test&hellip;</em>. You will see:</p>

<p><img src="/images/auto_create_junit4_unit_test.png" alt="auto_create_junit4_unit_test.png" /></p>

<p>In the above window, select the test class name, the methods you want to test, and some other helper methods like <code>setUp</code> and <code>tearDown</code>.</p>

<p>Then fill out all the test cases.</p>

<h3>Some annotations</h3>

<table>
<thead>
<tr>
<th>Annotation </th>
<th> Meaning </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Test </td>
<td> for test cases </td>
<td></td>
</tr>
<tr>
<td>@Before </td>
<td> excute before every test case </td>
<td></td>
</tr>
<tr>
<td>@After </td>
<td> excute after every test case </td>
<td></td>
</tr>
<tr>
<td>@BeforeClass </td>
<td> static, excute only once, before the first test case begin </td>
<td></td>
</tr>
<tr>
<td>@AfterClass </td>
<td> see @BeforeClass </td>
<td></td>
</tr>
<tr>
<td>@Rule </td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<h2><code>Mock</code> and <code>Spy</code></h2>

<h4>Difference between mock and spy</h4>

<p><strong>Mock</strong>: Mock will wrap the Class of an Type, not from an actual instance. The mock simply creates a bare-bones shell instance of the Class. In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p><strong>Spy</strong>: Spy will wrap an existing instance. In this case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>For <code>mock</code>:</p>

<pre><code class="java">Stock stock = mock(Stock.class);
when(stock.getPrice()).thenReturn(100.00);    // Mock implementation
when(stock.getQuantity()).thenReturn(200);    // Mock implementation
when(stock.getValue()).thenCallRealMethod();  // Real implementation
</code></pre>

<p>In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p>For <code>spy</code>:</p>

<pre><code class="java">Stock stock = spy(new Stock());
when(stock.getPrice()).thenReturn(100.00);    // Mock implementation
when(stock.getQuantity()).thenReturn(200);    // Mock implementation
// All other method call will use the real implementations
</code></pre>

<p>In that case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>There is one important pitfall when you use <code>when(Object)</code> with spy like in the previous example. The real method will be called (because <code>stock.getPrice()</code> is evaluated before <code>when(..)</code> at runtime). This can be a problem if your method contains logic that should not be called. You can write the previous example like this:</p>

<pre><code class="java">Stock stock = spy(new Stock());
doReturn(100.00).when(stock).getPrice();    // Mock implementation
doReturn(200).when(stock).getQuantity();    // Mock implementation
// All other method call will use the real implementations
</code></pre>

<h2>Mock Android Dependencies</h2>

<p>To do.</p>

<h2>Use Hamcrest for Assertion</h2>

<p>Use <a href="https://github.com/hamcrest/hamcrest-junit">hamcrest</a> to make the code more readable.</p>

<p>Instead of using:</p>

<pre><code class="java">assertEquals(expected, "the two values should be the same");
assertNotNull(object);
</code></pre>

<p>we can use:</p>

<pre><code class="java">assertThat(expected, equalTo("the two values should be the same"));
assertThat(object, is(NotNullValue()));
</code></pre>

<h2>References</h2>

<p><a href="https://developer.android.com/training/testing/start/index.html">Getting Started with Testing</a>: official site from Google.</p>

<p><a href="http://stackoverflow.com/questions/14970516/use-mockito-to-mock-some-methods-but-not-others">Use Mockito to mock some methods but not others</a>讲解Mock和Spy的用法，简单易懂。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Google Maps Android API Utility Library in Android Studio]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/08/26/How-to-Use-Google-Maps-Android-API-Utility-Library-in-Android-Studio/"/>
    <updated>2015-08-26T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/08/26/How-to-Use-Google-Maps-Android-API-Utility-Library-in-Android-Studio</id>
    <content type="html"><![CDATA[<p><strong>Google Maps Android API utility library</strong> (the <a href="https://github.com/googlemaps/android-maps-utils">github repo</a> and the <a href="http://googlemaps.github.io/android-maps-utils/">documentation</a>) supplies multiple cool features, including</p>

<ul>
<li><strong>Marker clustering</strong> — handles the display of a large number of points</li>
<li><strong>Heat maps</strong> — display a large number of points as a heat map</li>
<li><strong>IconGenerator</strong> — display text on your Markers</li>
<li><strong>Poly decoding and encoding</strong> — compact encoding for paths, interoperability with Maps API web services</li>
<li><strong>Spherical geometry</strong> — for example: computeDistance, computeHeading, computeArea</li>
<li><strong>KML</strong> — displays KML data (Caution: Beta!)</li>
<li><strong>GeoJSON</strong> — displays and styles GeoJSON data</li>
</ul>


<!-- more -->


<p>A simple documentation about the usage of these features based on a demo can be found in <em>Google Developers</em> page <a href="https://developers.google.com/maps/documentation/android/utility/?hl=zh-cn">Google Maps Android API Utility Library</a>. And you can also refer to the <a href="http://googlemaps.github.io/android-maps-utils/javadoc/">javadoc</a>.</p>

<p>When I tried to use the library in my Android Studio (Windows OS) project, I met some problems. It is not as simple as the <a href="http://googlemaps.github.io/android-maps-utils/">document</a> describes. A reference for setting up in Eclipse can be found in the <a href="https://developers.google.com/maps/documentation/android/utility/setup?hl=zh-cn">Google Maps Android API Utilities Setup</a>.</p>

<p>As we know, we have three ways to use a library in Android Studio project: <em>Module dependency</em>, <em>Remote binary dependency</em> and <em>Local binary dependency</em>. (Go to <a href="https://developer.android.com/tools/building/configuring-gradle.html">Configure Gradle Builds</a> for detail). See the following code that we can use in the module <code>build.gradle</code>, not the project <code>build.gradle</code></p>

<pre><code>dependencies {
    // Module dependency
    compile project(":lib")

    // Remote binary dependency
    compile 'com.android.support:appcompat-v7:19.0.1'

    // Local binary dependency
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
</code></pre>

<p>I use the <em>Module dependency</em> method <strong>successfully</strong> in my project, but <strong>failed</strong> with the other two methods. Let&rsquo;s go to the details.</p>

<h2>Module Dependency (Succeeded)</h2>

<ul>
<li>In your project, <strong>New &ndash;> Module &ndash;> Android Library</strong>, name it with <em>library</em> (not a googd name).</li>
<li>Go to the exploror, go to <em><your project folder>/library</em>, delete all the files and folders there.</li>
<li>Go to the <em>library</em> folder in the repository you downloaded from <a href="https://github.com/googlemaps/android-maps-utils">android-maps-utils</a>. Copy all the files and folders, and paste them into your own <em>library</em> folder.</li>
<li>Open <code>build.gradle</code> under your own module, under <code>dependencies</code> element, add <code>compile project(':library')</code>.</li>
<li>Sync your project, build and run. Success!</li>
</ul>


<h2>Remote Binary Dependency (Failed)</h2>

<p>The github page suggested this way by</p>

<pre><code>dependencies {
    compile 'com.google.maps.android:android-maps-utils:x.y.z'
}
</code></pre>

<p>But I just can not find the path <code>&lt;Android SDK&gt;/extras/google/m2repository/com/google/map.android/</code>. I am sure that I already installed the <em>Google Repository</em> by SDK manager.</p>

<h2>Local Binary Dependency (Failed)</h2>

<p>To use this way, I tried:</p>

<ul>
<li>put the <code>library-debug.aar</code> in to the <em>libs</em> folder in my module from <em>&lt;library/build/output/aar/</em> in Android Studio project exploror view.</li>
<li>add <code>compile fileTree(dir: 'libs', include: ['*.aar'])</code> into my module <code>build.gradle</code> file, <code>dependencies</code> element.</li>
</ul>


<p>Seems that Android studio doesn&rsquo;t support <code>.aar</code> type library.</p>

<p>So I changed to the following way:</p>

<ul>
<li>unzip the <code>library-debug.aar</code> file, and copy the <code>class.jar</code> file into the <em>libs</em> folder in my module.</li>
<li>add <code>compile fileTree(dir: 'libs', include: ['*.jar'])</code> in to my module <code>build.gradle</code> file, <code>dependencies</code> element.</li>
<li>Build passed, but crashed when I run it. I didn&rsquo;t go into it. Maybe the library need some resource that is in the <code>.aar</code> file, which is not in the <code>class.jar</code> file. Just guess.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Environment for Android Map Development]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/08/20/Deploy-Environment-for-Android-Map-Developmet/"/>
    <updated>2015-08-20T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/08/20/Deploy-Environment-for-Android-Map-Developmet</id>
    <content type="html"><![CDATA[<p><strong>Contents:</strong></p>

<ul>
<li><a href="#get_map_key_from_google">Get map key from Google</a></li>
<li><a href="#install_google_service_in_genymotion_vm">Install Google Service in Genymotion VM</a></li>
</ul>


<p>The following suggestions are all based on Windows. It should be similar on Mac.</p>

<!-- more -->


<p>Reference Google document from <a href="https://developers.google.com/maps/documentation/android/signup">here</a> and <a href="https://developers.google.com/maps/documentation/android/start">here</a>.</p>

<h2><a name="get_map_key_from_google"></a>Get map key from Google</h2>

<h3>Get package name</h3>

<p>For Eclipse, or projects migrated from Eclipse to Android Studio, open <strong>Androidmanifast.xml</strong> and the package name is:</p>

<p><img src="/images/003_package_name_in_Eclipse.png" alt="003_package_name_in_Eclipse" /></p>

<p>For Android Studio, <strong>TODO</strong></p>

<h3>Get SHA1 fingerprint certificate</h3>

<h4>Windows</h4>

<p>For Eclipse, go to <strong>Windows -> Preferences -> Android -> Build</strong> to find it.</p>

<p>For Android Studio, go to your java(jdk) bin directory, and run:</p>

<pre><code>keytool -list -v -keystore c:\users\&lt;your_user_name&gt;\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
</code></pre>

<p>You will get your SHA1 fingerprint from:</p>

<p><img src="/images/004_SHA1_in_Android_Studio.png" alt="004_SHA1_in_Android_Studio" /></p>

<h4>Mac</h4>

<p>For Android Studio, go to your java home directory (/usr/libexec/), and run the following command to get SHA1 fingerprint:</p>

<pre><code>keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android
</code></pre>

<h3>Generate the key</h3>

<p>With your package name and SHA1 fingerprint, now we can generate your key.</p>

<ol>
<li>Go to the <a href="https://console.developers.google.com/">Google Developers Console</a>.</li>
<li>In the sidebar on the left, select <em>Credentials</em>.</li>
<li>If your project doesn&rsquo;t already have an Android API key, create one new by selecting <strong>Add credentials -> API key -> Android key</strong>.</li>
<li>In the resulting dialog, enter your app&rsquo;s SHA-1 fingerprint and package name.</li>
<li>Your new Android API key appears in the list of API keys for your project. An API key is a string of characters, something start with <em>AIza</em>, like <em>AIzaSyBdVl-cTICSwYKrZ95SuvNw7dbMuDt1KG0</em>.</li>
</ol>


<p>If you want to use an existing key, open the key, and click <em>add package name and fingerprint</em>, and then fill your package name and fingerprint.</p>

<h3>Add the Android API key to your application</h3>

<p>For Eclipse, or projects migrated from Eclipse to Android Studio, in <code>AndroidManifest.xml</code>, add the following element as a child of the <code>&lt;application&gt;</code> element. Take the following as an example:</p>

<p><img src="/images/002_add_key_in_Eclipse.png" alt="002_add_key_in_Eclipse" /></p>

<p>For Android Studio, in res/values/google_maps_api.xml, add your Android API key as the value of <code>google_maps_key</code> element.</p>

<h2><a name="install_google_service_in_genymotion_vm"></a>Install Google Service in Genymotion VM</h2>

<p>Genymotion is a Virtual Android Environment built on x86 and Virtualbox. It&rsquo;s not an ARM emulator so it&rsquo;s performance is better than the Android SDK Emulator. However in their latest update they&rsquo;ve removed both ARM Translation and Google Play Apps.</p>

<p>Sometimes, We need the above two functions for genymotion VM. For example, to run map type apps needs Google play service.</p>

<p>In order to install ARM translation for Genymotion, follow these steps:</p>

<ol>
<li>Download the zip file from <a href="http://filetrip.net/dl?4SUOrdcMRv">here</a></li>
<li>Open Genymotion and go to the home screen.</li>
<li>Drag and Drop the .zip file onto the Genymotion window.</li>
<li>Restart Genymotion</li>
</ol>


<p>Genymotion can now run applications that require ARM emulation.</p>

<p>It is similar for Google Play Apps, which can be downloaded from <a href="https://www.androidfilehost.com/?fid=95784891001614559">here</a></p>

<p>Go to <a href="http://stackoverflow.com/questions/20121883/how-to-install-google-play-services-in-a-genymotion-vm-with-no-drag-and-drop-su">How to install Google Play Services in a Genymotion VM (with no drag and drop support)?</a> for details.</p>

<p>At last, <strong>Remenber</strong> to make sure that your device can connect to google server, especially when you are in China.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication between WebView and native android]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/07/28/Communication-between-WebView-and-native-android/"/>
    <updated>2015-07-28T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/07/28/Communication-between-WebView-and-native-android</id>
    <content type="html"><![CDATA[<h2>Description</h2>

<p>In Android project, we sometimes want to rend a page in <strong>WebView</strong>, and need communication between webview and native android side.</p>

<p><strong>Note:</strong> Go to <a href="https://github.com/hongchaozhang/android_java_javascript_communication">here</a> for a project as a sample.</p>

<h2>Javascript and Java Bridge</h2>

<!-- more -->


<ol>
<li><p>Code for javascript interface in native android side:</p>

<pre><code> public class JavaScriptInterface {
     protected MyActivity parentActivity;
     protected WebView mWebView;

     public JavaScriptInterface(MyActivity _activity, WebView _webView)  {
         parentActivity = _activity;
         mWebView = _webView;

     }

     @JavascriptInterface
     public void setResult(int val){
         Log.v("mylog","JavaScriptHandler.setResult is called : " + val);
         this.parentActivity.javascriptCallFinished(val);
     }

     @JavascriptInterface
     public void calcSomething(int x, int y){
         this.parentActivity.changeText("Result is : " + (x * y));
     }

     @JavascriptInterface
     public String modifyString(String inputString) {
         return inputString + " from Java side";
     }
 }
</code></pre>

<p> Here, we can introduce the main activity <code>parentActivity</code> and the webview <code>mWebView</code> into the interface for further use.</p></li>
<li><p>Get webview from layout xml file, or create it from scrach, and config it:</p>

<pre><code> myWebView = (WebView)this.findViewById(R.id.myWebView);
 myWebView.getSettings().setJavaScriptEnabled(true);
 myWebView.loadUrl("file:///android_asset/index.html");

 myWebView.addJavascriptInterface(new JavaScriptInterface(this, myWebView), "MyHandler");
 if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
     WebView.setWebContentsDebuggingEnabled(true);
 }
</code></pre>

<p> 1) Pay attention to <code>addJavascriptinterface</code>, which add the javascript interface, and gives the interface a name <code>MyHandler</code>.
2) To be able to debug web page inside webview, <code>setWebContentsDebuggingEnabled(true)</code> should be called for android version after <code>KITKAT(4.4)</code>.</p></li>
<li><p>Then we can use the following way to call javascript function and change html page from java side:</p>

<pre><code> myWebView.loadUrl("javascript:document.getElementById('test1').innerHTML = 'changed'");
</code></pre>

<p> And use the following to call java method from javascript side:</p>

<pre><code> window.MyHandler.setResult(9999)
</code></pre></li>
</ol>


<h2>Passing parameters and <code>return</code> value</h2>

<h4>parameter of <code>WebView.loadUrl</code></h4>

<p>We can only use <em>String</em> as the parameter of <code>WebView.loadUrl()</code> function (Note <code>val1</code> and <code>val2</code>):</p>

<pre><code>myWebView.loadUrl("javascript:window.MyHandler.setResult( addSomething("+val1+","+val2+") )");
</code></pre>

<h4>parameter of the interface for javascript</h4>

<p>We can use <em>String</em> or <em>int</em> for these interfaces, like:</p>

<pre><code>window.MyHandler.setResult(10);
var stringFromJava = window.MyHandler.modifyString("string from javascript");
</code></pre>

<h4>Java return value to Javascript: <strong>sync</strong></h4>

<p>Java can directly return String back to Javascritp, so we can use the following way to get the string from Java:</p>

<pre><code>var stringFromJava = window.MyHandler.modifyString("string from javascript");
</code></pre>

<h4><a name="javascript_return_value_to_java"></a>Javascript return value to Java: <strong>async</strong></h4>

<p>As <code>WebView.loadUrl</code> does not return anything, so Java can not get results from Javascript. We need other ways to get the result.</p>

<p>Currently, we have no way to do this. The work around is: when javascript get the result, call a method in java side through the interface <code>MyHandler</code>, and pass the result as a parameter. As java call <code>WebView.loadurl</code> in a differenct thread, so even in this way, we can not get the result right away for use in the next line.</p>

<h2>Multi-thread in Java side and Single-thread in Javascript side</h2>

<h3>Javascript call Java: sync</h3>

<p>When we run the following function, we can get the string returned from java side, and then set it into the html page.</p>

<pre><code>function testSync() {
    var string = "default string";
    string = window.MyHandler.testString();
    document.getElementById('test1').innerHTML = string;
}
</code></pre>

<h3>Java call Javascript: async</h3>

<p>Similar to <a href="#javascript_return_value_to_java">Javascript return value to Java</a>.</p>

<h2>Security problems</h2>

<p>Reference to <a href="http://jiajixin.cn/2014/09/16/webview-js-safety/">Java和Javascript安全交互</a>.</p>

<p>An example listed:</p>

<ul>
<li>成名已久的任意命令执行漏洞，通过addJavascriptInterface方法，Js可以调用Java对象方法，通过反射机制，Js可以直接获取Runtime，从而执行任意命令。Android 4.2以上，可以通过声明@JavascriptInterface保证安全性，4.2以下不能再调用addJavascriptInterface，需要另谋他法。</li>
</ul>

]]></content>
  </entry>
  
</feed>
