<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Zhang Hongchao]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2016-03-15T00:06:06+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Communication Between WebView and Native Android]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/07/28/Communication-between-WebView-and-native-android/"/>
    <updated>2015-07-28T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/07/28/Communication-between-WebView-and-native-android</id>
    <content type="html"><![CDATA[<h2>Description</h2>

<p>In Android project, we sometimes want to rend a page in <strong>WebView</strong>, and need communication between webview and native android side.</p>

<p><strong>Note:</strong> Go to <a href="https://github.com/hongchaozhang/android_java_javascript_communication">here</a> for a project as a sample.</p>

<h2>Javascript and Java Bridge</h2>

<!-- more -->


<ol>
<li><p>Code for javascript interface in native android side:</p>

<pre><code> public class JavaScriptInterface {
     protected MyActivity parentActivity;
     protected WebView mWebView;

     public JavaScriptInterface(MyActivity _activity, WebView _webView)  {
         parentActivity = _activity;
         mWebView = _webView;

     }

     @JavascriptInterface
     public void setResult(int val){
         Log.v("mylog","JavaScriptHandler.setResult is called : " + val);
         this.parentActivity.javascriptCallFinished(val);
     }

     @JavascriptInterface
     public void calcSomething(int x, int y){
         this.parentActivity.changeText("Result is : " + (x * y));
     }

     @JavascriptInterface
     public String modifyString(String inputString) {
         return inputString + " from Java side";
     }
 }
</code></pre>

<p> Here, we can introduce the main activity <code>parentActivity</code> and the webview <code>mWebView</code> into the interface for further use.</p></li>
<li><p>Get webview from layout xml file, or create it from scrach, and config it:</p>

<pre><code> myWebView = (WebView)this.findViewById(R.id.myWebView);
 myWebView.getSettings().setJavaScriptEnabled(true);
 myWebView.loadUrl("file:///android_asset/index.html");

 myWebView.addJavascriptInterface(new JavaScriptInterface(this, myWebView), "MyHandler");
 if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
     WebView.setWebContentsDebuggingEnabled(true);
 }
</code></pre>

<p> 1) Pay attention to <code>addJavascriptinterface</code>, which add the javascript interface, and gives the interface a name <code>MyHandler</code>.
2) To be able to debug web page inside webview, <code>setWebContentsDebuggingEnabled(true)</code> should be called for android version after <code>KITKAT(4.4)</code>.</p></li>
<li><p>Then we can use the following way to call javascript function and change html page from java side:</p>

<pre><code> myWebView.loadUrl("javascript:document.getElementById('test1').innerHTML = 'changed'");
</code></pre>

<p> And use the following to call java method from javascript side:</p>

<pre><code> window.MyHandler.setResult(9999)
</code></pre></li>
</ol>


<h2>Passing parameters and <code>return</code> value</h2>

<h4>parameter of <code>WebView.loadUrl</code></h4>

<p>We can only use <em>String</em> as the parameter of <code>WebView.loadUrl()</code> function (Note <code>val1</code> and <code>val2</code>):</p>

<pre><code>myWebView.loadUrl("javascript:window.MyHandler.setResult( addSomething("+val1+","+val2+") )");
</code></pre>

<h4>parameter of the interface for javascript</h4>

<p>We can use <em>String</em> or <em>int</em> for these interfaces, like:</p>

<pre><code>window.MyHandler.setResult(10);
var stringFromJava = window.MyHandler.modifyString("string from javascript");
</code></pre>

<h4>Java return value to Javascript: <strong>sync</strong></h4>

<p>Java can directly return String back to Javascritp, so we can use the following way to get the string from Java:</p>

<pre><code>var stringFromJava = window.MyHandler.modifyString("string from javascript");
</code></pre>

<h4><a name="javascript_return_value_to_java"></a>Javascript return value to Java: <strong>async</strong></h4>

<p>As <code>WebView.loadUrl</code> does not return anything, so Java can not get results from Javascript. We need other ways to get the result.</p>

<p>Currently, we have no way to do this. The work around is: when javascript get the result, call a method in java side through the interface <code>MyHandler</code>, and pass the result as a parameter. As java call <code>WebView.loadurl</code> in a differenct thread, so even in this way, we can not get the result right away for use in the next line.</p>

<h2>Multi-thread in Java side and Single-thread in Javascript side</h2>

<h3>Javascript call Java: sync</h3>

<p>When we run the following function, we can get the string returned from java side, and then set it into the html page.</p>

<pre><code>function testSync() {
    var string = "default string";
    string = window.MyHandler.testString();
    document.getElementById('test1').innerHTML = string;
}
</code></pre>

<h3>Java call Javascript: async</h3>

<p>Similar to <a href="#javascript_return_value_to_java">Javascript return value to Java</a>.</p>

<h2>Security problems</h2>

<p>Reference to <a href="http://jiajixin.cn/2014/09/16/webview-js-safety/">Java和Javascript安全交互</a>.</p>

<p>An example listed:</p>

<ul>
<li>成名已久的任意命令执行漏洞，通过addJavascriptInterface方法，Js可以调用Java对象方法，通过反射机制，Js可以直接获取Runtime，从而执行任意命令。Android 4.2以上，可以通过声明@JavascriptInterface保证安全性，4.2以下不能再调用addJavascriptInterface，需要另谋他法。</li>
</ul>

]]></content>
  </entry>
  
</feed>
