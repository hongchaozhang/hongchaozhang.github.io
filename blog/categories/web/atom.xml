<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2025-06-10T18:27:41+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web性能指标]]></title>
    <link href="http://hongchaozhang.github.io/blog/2025/06/10/kpi-for-web-performance/"/>
    <updated>2025-06-10T17:51:04+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2025/06/10/kpi-for-web-performance</id>
    <content type="html"><![CDATA[<!-- more -->


<p>下面是Google Web Vitals的指标，以及如何测量。</p>

<ul>
<li><a href="https://web.dev/articles/vitals">Web Vitals</a></li>
<li><a href="https://web.dev/articles/lcp#measure">Largest Contentful Paint (LCP)</a></li>
<li><a href="https://web.dev/articles/inp#how-to-measure-inp">Interaction to Next Paint (INP)</a></li>
<li><a href="https://web.dev/articles/cls#measure">Cumulative Layout Shift (CLS)</a></li>
</ul>


<p>下面对其进行总结。</p>

<hr />

<h2>🔍 什么是 Web Vitals？</h2>

<ul>
<li><strong>Web Vitals</strong> 是 Google 推出的统一性能评估体系，旨在让开发者、产品经理等聚焦界面体验质量的核心指标 (<a href="https://web.dev/articles/vitals">web.dev</a>)。</li>
<li>它简化了性能指标体系，聚焦当前"<strong>Core Web Vitals</strong>&ldquo;（核心页面体验指标） (<a href="https://developers.google.com/search/docs/appearance/core-web-vitals">developers.google.com</a>)。</li>
</ul>


<hr />

<h2>🎯 Core Web Vitals 主要指标</h2>

<p><img src="/images/LCP-INP-CLS.jpg" alt="lcp inp cls" /></p>

<p>这三个指标反映了用户体验的三个关键维度：</p>

<table>
<thead>
<tr>
<th> 指标                              </th>
<th> 描述                     </th>
<th> 优良阈值                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> LCP (Largest Contentful Paint)  </td>
<td> 最大内容元素首次对用户可见所需时间      </td>
<td> ≤ 2.5 s (<a href="https://web.dev/articles/vitals">web.dev</a>) </td>
</tr>
<tr>
<td> INP (Interaction to Next Paint) </td>
<td> 用户交互至下一帧渲染完成的延迟，反映响应速度 </td>
<td> ≤ 200 ms               </td>
</tr>
<tr>
<td> CLS (Cumulative Layout Shift)   </td>
<td> 页面元素意外移动引起的视觉稳定性问题累积分数 </td>
<td> ≤ 0.1                  </td>
</tr>
</tbody>
</table>


<ul>
<li>衡量标准采用 <strong>75th percentile</strong>，也就是大多数用户（前 75%）体验应满足上述阈值 (<a href="https://web.dev/articles/vitals">web.dev</a>)。</li>
<li>长期来看，Core Web Vitals 指标可能会随着研究演进调整（目前由实验→待定→稳定阶段管理） 。</li>
</ul>


<hr />

<h2>🛠 如何衡量 Web Vitals</h2>

<ul>
<li><strong>合成工具</strong>：Lighthouse、WebPageTest、Chrome DevTools Performance 面板（支持实时测量 FCI、LCP、CLS、INP） (<a href="https://web.dev/performance">web.dev</a>)。</li>
<li><p><strong>真实用户监控</strong>：</p>

<ul>
<li>使用 <code>web-vitals</code> JS 库采集、上报（可配合 GA4、BigQuery）(<a href="https://web.dev/articles/vitals-ga4">web.dev</a>)；</li>
<li>或使用现成 RUM 工具，如 Google Analytics、CrUX、Search Console Core Web Vitals 报告等 (<a href="https://web.dev/articles/vitals-ga4">web.dev</a>)。</li>
</ul>
</li>
</ul>


<hr />

<h2><a href="https://web.dev/articles/lcp#measure">Largest Contentful Paint (LCP)</a></h2>

<h3>1. 什么是 LCP？</h3>

<ul>
<li><strong>LCP</strong> 指的是浏览器首次渲染页面中 <strong>最大内容元素</strong>（如图片块、文本块或视频）的时间，相对于页面开始加载时刻(<a href="https://web.dev/articles/lcp?utm_source=chatgpt.com">web.dev</a>)。</li>
<li>它是 Core Web Vitals 中衡量“页面主要内容是否快速可见”的关键指标，比传统指标（如 FCP、DOMContentLoaded）更能贴合用户感知(<a href="https://web.dev/articles/lcp?hl=ja&amp;utm_source=chatgpt.com">web.dev</a>)。</li>
<li>LCP被认为是最接近“首屏渲染时间”的指标。</li>
</ul>


<h3>2. 考量元素与规则</h3>

<ul>
<li>LCP 只考虑特定类型元素。</li>
<li>只计算可见部分</li>
</ul>


<p>下面是几个LCP的例子。</p>

<p><img src="/images/lcp-demo1.png" alt="lcp demo 1" /></p>

<p>在这个例子中，新内容被添加到DOM中，这改变了哪个元素是最大的。</p>

<p><img src="/images/lcp-demo-2.png" alt="lcp demo 2" /></p>

<p>在这个例子中，Instagram的logo相对较早加载，即使其他内容逐渐显示，它仍然是最大的元素。</p>

<p><img src="/images/lcp-demo-3.png" alt="lcp demo 3" /></p>

<p>在这个Google搜索结果页面的例子中，最大的元素是一段文本，它在任何图像或logo加载完成之前就显示出来了。由于所有单独的图像都比这段文本小，所以在整个加载过程中它始终是最大的元素。</p>

<hr />

<h2><a href="https://web.dev/articles/inp#how-to-measure-inp">Interaction to Next Paint (INP)</a></h2>

<h3>🎯 什么是 INP？</h3>

<ul>
<li><strong>INP</strong> 是 Core Web Vitals 的一项稳定指标，用来评估页面对用户所有交互（点击、触摸、键盘输入等）的整体响应能力。</li>
<li>它会记录整个页面生命周期中的每次交互延迟，最终以 <strong>最长的那次交互</strong>（剔除极端值）作为该页面的 INP 分数。</li>
</ul>


<h3>🔄 为什么用 INP 替代 FID？</h3>

<ul>
<li><strong>FID（First Input Delay）</strong> 只测量页面首次交互的延迟，而 INP 更全面，衡量整个访问过程中的所有交互延迟，更真实反映用户体验。</li>
<li>INP 包括从用户输入、事件处理到下一帧</li>
</ul>


<h3>🧪 如何测量 INP？</h3>

<p>使用 <code>web-vitals</code> JavaScript 库测量 INP。</p>

<h3>🛠 提高 INP 的常见优化措施</h3>

<ol>
<li>避免主线程长时间阻塞（比如大循环或同步 JS）。</li>
<li>将重逻辑拆分为异步任务（如 requestIdleCallback、setTimeout）。</li>
<li>减少第三方脚本干扰。</li>
<li>延迟加载不重要的资源（如图片、iframe）。</li>
<li>使用 <code>content-visibility: auto</code> 优化首次绘制区域。</li>
</ol>


<hr />

<h2><a href="https://web.dev/articles/cls#measure">Cumulative Layout Shift (CLS)</a></h2>

<h3>🧩 什么是 CLS？</h3>

<ul>
<li><strong>CLS（Cumulative Layout Shift）</strong> 測量的是页面在非用户触发的情况下，视觉内容发生的意外位移累积程度，是 Core Web Vitals 的一项重要稳定指标 ([web.dev][1])。</li>
<li>一次布局移动（layout shift）指的是在两个绘制帧之间，一个可见元素的位置改变。若多个这种变化连续发生（间隔 &lt; 1 秒，总时长 ≤ 5 秒），它们形成一个布局移动“突发窗口”（session window），CLS 取该窗口里得分最高的一组变化 ([web.dev][1])。</li>
</ul>


<hr />

<h3>📊 如何计算布局移动分数？</h3>

<p>每次 layout‑shift 条目的分数由下面两个部分组成：</p>

<ol>
<li><strong>impact fraction</strong>：不稳定元素的影响区域占视口大小的比例。</li>
<li><strong>distance fraction</strong>：元素移动距离占视口最大边长（宽或高）的比例。</li>
</ol>


<h3>🧪 如何测量 CLS？</h3>

<h4>实验室工具（合成环境）：</h4>

<ul>
<li>Chrome DevTools、Lighthouse、PageSpeed Insights、WebPageTest 都可测量加载过程中的 CLS 值。</li>
</ul>


<h4>真实用户监控（Field Data）：</h4>

<ul>
<li>使用 CrUX、Search Console、PageSpeed Insights RUM 等；</li>
<li>推荐通过 <code>web-vitals</code> 或 Layout Instability API 捕获事件并上报</li>
</ul>


<h3>🛠 如何优化 CLS？</h3>

<ul>
<li><strong>显式指定资源尺寸</strong>：给图片、视频、iframe 设置 <code>width/height</code> 或使用 CSS aspect-ratio，避免加载后推移。</li>
<li><strong>先占位后加载</strong>：异步加载资源前预留空间（例如广告、远程组件），加载后不引起布局移动。</li>
<li><strong>适度动画过渡</strong>：用 CSS <code>transform</code> 动画代替突兀的布局变化，若与用户交互触发可排除计算。</li>
<li><strong>第三方脚本注意尺寸</strong>：广告、embed 内容应提供固定高度/宽度；若动态变化，应用动画或预留长条提示。</li>
<li><strong>过滤用户交互触发移动</strong>：500ms 内关联用户交互的 layout shift 不计入 CLS（例如点击展开）。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样提高web性能]]></title>
    <link href="http://hongchaozhang.github.io/blog/2025/06/10/how-to-improve-web-performance/"/>
    <updated>2025-06-10T16:57:17+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2025/06/10/how-to-improve-web-performance</id>
    <content type="html"><![CDATA[<!-- more -->


<p>下面是GPT总结的web性能优化，我整理了一下，方便自己阅读。</p>

<p>以下内容分为三部分：一是分析思路与流程，二是常用工具推荐，三是Chrome DevTools 中几个常用且好用的功能示例。</p>

<hr />

<h2>一、分析思路与流程</h2>

<ol>
<li><p><strong>明确性能目标与衡量指标</strong></p>

<ul>
<li>明确“性能”：

<ul>
<li>页面首次可交互（First Contentful Paint）</li>
<li>首屏渲染时间（Time to First Byte、First Paint、First Meaningful Paint）</li>
<li>可交互时间（Time to Interactive）</li>
<li>整体加载完成时间（Load Event End）</li>
</ul>
</li>
<li>结合业务需求，确定用户体验最关心的关键指标（KPI），如：

<ul>
<li>首屏加载时间 &lt; 2s</li>
<li>首个输入延迟（FID）&lt; 100ms</li>
<li>累计布局偏移（CLS）&lt; 0.1</li>
</ul>
</li>
<li>基于这些指标，才能有的放矢地去定位瓶颈。</li>
</ul>
</li>
<li><p><strong>收集初步的性能数据（基线测量）</strong></p>

<ul>
<li>通过 Lighthouse、WebPageTest、Chrome DevTools 自带的 Performance 面板等工具，先跑一次完整的测速，把得出的各项指标（TTFB、FCP、LCP、TTI、Total Blocking Time、Overall Load Time、资源大小统计等）记录下来，作为后续优化前后的对比基线。</li>
<li>也可以接入 RUM（Real User Monitoring）系统，比如 Google Analytics、Sentry Performance、New Relic Browser，收集真实用户在不同网络环境（4G、3G、宽带）下的加载情况。</li>
</ul>
</li>
<li><p><strong>深入分析各项耗时明细</strong></p>

<ul>
<li><strong>网络请求分析</strong>：查看资源请求的数量、按域名分组大小、缓存命中率、是否存在多余的第三方脚本；关注阻塞（Blocking）、排队（Queuing）和传输（Transfer）时长。</li>
<li><strong>JavaScript 执行分析</strong>：分析脚本解析与编译、函数执行、长任务（Long Tasks）。如<em>有大量主线程阻塞</em>、长任务会阻塞渲染或用户交互，需要考虑拆分 Webpack bundle、采用 <em>Code Splitting</em>、<em>懒加载</em>。</li>
<li><strong>渲染与布局</strong>：查看是否存在<em>强制同步布局（Forced Reflow）</em>、频繁的 DOM 操作导致布局抖动，是否存在大面积的 repaint。</li>
<li><strong>资源加载优先级</strong>：评估关键 CSS/JS 是否合理 inline 或预加载，图片是否做了懒加载、尺寸压缩，以及字体加载策略（font-display）是否合理。</li>
</ul>
</li>
<li><p><strong>定位瓶颈并分类优化方案</strong></p>

<ul>
<li><p><strong>网络层面</strong></p>

<ul>
<li>合并或拆分请求：将多个小静态资源合并为一个包（或反之，拆分较大的包为按需加载）；</li>
<li>启用 HTTP/2 或 HTTP/3，减小握手与队头阻塞（Head-of-line Blocking）；</li>
<li>核查缓存策略（Cache-Control、ETag），确保静态资源在客户端可复用；</li>
<li>开启 Gzip 或 Brotli 压缩；</li>
<li>确认 CDN 覆盖与节点就近分发。</li>
</ul>
</li>
<li><p><strong>代码包体积</strong></p>

<ul>
<li>使用 Tree Shaking、代码分割（Code Splitting）、按需加载（dynamic import）；</li>
<li>删除不必要的 polyfill、第三方库里不使用的功能；</li>
<li>压缩混淆 JS/CSS（Terser、CSSNano）。</li>
</ul>
</li>
<li><p><strong>图片与多媒体资源</strong></p>

<ul>
<li>图片压缩（WebP、AVIF），使用合适的分辨率；</li>
<li>图片懒加载（Intersection Observer API）；</li>
<li>Sprite 图合并静态小图标，尽量减少 HTTP 请求。

<ul>
<li>也不一定。如果启用 HTTP/2 或 HTTP/3，并行能力增强，合并请求反而会降低性能。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>渲染与交互</strong></p>

<ul>
<li>减少无意义的 DOM 操作，避免频繁读写 DOM；</li>
<li>避免同步布局、强制回流，合理使用 requestAnimationFrame；</li>
<li>使用虚拟列表（Virtual List）处理长列表。</li>
</ul>
</li>
<li><p><strong>第三方脚本</strong></p>

<ul>
<li>定期审查埋点 / 监控 / 广告 / 社交插件，移除或延迟加载冗余脚本；</li>
<li>将不影响首屏渲染的第三方脚本标记为 <code>async</code> 或 <code>defer</code>，或放在页面底部。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>验证和迭代</strong></p>

<ul>
<li>每做一步优化，都要重新收集 Performance 指标，与基线做对比；</li>
<li>借助 Lighthouse、CI/CD 中的自动化检测工具（如 GitHub Action + Lighthouse CI）持续监控；</li>
<li>对比真实用户数据（RUM），避免“合成测试指标很好，但真用户网络环境下反而没提升”的情况。</li>
</ul>
</li>
</ol>


<hr />

<h2>二、常用工具推荐</h2>

<ol>
<li><p><strong>浏览器级工具</strong></p>

<ul>
<li><strong>Chrome DevTools</strong>：自带 Network、Performance、Coverage、Lighthouse、Web Vitals、Audits、Memory 等面板，适合本地快速定位瓶颈。</li>
</ul>
</li>
<li><p><strong>自动化测试与报告</strong></p>

<ul>
<li><strong>Lighthouse CLI / Lighthouse CI</strong>：既可以在本地命令行执行 Lighthouse 审计，也可以集成到持续集成流水线里，对比性能得分、查看详细报告。</li>
<li><strong>WebPageTest</strong>：支持多地节点、多种网络模拟（3G、DSL、快网），可以生成瀑布流（Waterfall）、Video Capture、Filmstrip、Speed Index 等数据。</li>
<li><strong>PageSpeed Insights</strong>：Google 官方工具，结合 Lighthouse 分析，同时给出移动端与桌面端的评分与优化建议。</li>
</ul>
</li>
<li><p><strong>真实用户监控（RUM）</strong></p>

<ul>
<li><strong>Google Analytics</strong>：可以打开 Site Speed 报表，查看真实用户的加载时间分布；也可接入自定义埋点上报 FCP、LCP 等 Web Vitals。</li>
<li><strong>New Relic Browser / Datadog Browser RUM / Sentry Performance</strong>：能够在生产环境监控用户体验，分析不同地域、设备、网络下的性能表现。</li>
</ul>
</li>
<li><p><strong>打包分析</strong></p>

<ul>
<li><strong>Webpack Bundle Analyzer / Source-map-explorer / Rollup-plugin-visualizer</strong>：可视化打包体积，找出哪个模块体积最大，进一步做按需加载或删除不必要依赖。</li>
<li><strong>Bundlephobia</strong>：在线查看某个 npm 包的体积、下载统计、Tree Shaking 后体积等。</li>
</ul>
</li>
<li><p><strong>其他辅助工具</strong></p>

<ul>
<li><strong>Pingdom</strong>、<strong>GTmetrix</strong>：在线性能检测与报告，相对 WebPageTest 严谨度稍低，但上手更快。</li>
<li><strong>BrowserMob Proxy / Fiddler / Charles</strong>：抓包工具，用于调试 HTTP/HTTPS 请求，查看请求头、响应头、Cookie、重定向链路。</li>
<li><strong>HEAP Profiler / CPU Profiler（Chrome DevTools）</strong>：用于深度分析 JS 运行时性能、内存泄漏、调用栈等。</li>
</ul>
</li>
</ol>


<hr />

<h2>三、Chrome DevTools 中几个好用的功能</h2>

<p>下面着重介绍几个在实际排查网络与渲染性能时经常会用到的面板与要点。</p>

<h3>1. Network 面板（网络面板）</h3>

<ul>
<li><p><strong>Waterfall 瀑布流</strong></p>

<ul>
<li>每个资源的请求时序：DNS 查询、TCP 建立、SSL 握手、请求发送（Request Sent）、等待服务器响应（Waiting / TTFB）、内容下载（Content Download）、以及结束时间。</li>
<li>从瀑布流上可以直观看出是否有“队头阻塞”（Head-of-line Blocking）、哪个请求是阻塞渲染的关键请求。</li>
</ul>
</li>
<li><p><strong>按域名与资源类型分组</strong></p>

<ul>
<li>在 Headers 栏目里可查看所有请求的域名、请求方法（GET/POST）、状态码、内容大小等；</li>
<li>在 Sizes 栏目里可快速看哪个资源占用流量最多；</li>
<li>在 Initiator 栏目可以看到是哪个脚本或哪个 HTML 标签发起的请求。</li>
</ul>
</li>
<li><p><strong>过滤和筛选</strong></p>

<ul>
<li>可以通过“JS/CSS/Img/Media/Font/Doc/XHR”等标签快速过滤；</li>
<li>也可以在 Filter 输入框里根据 URL 关键字或正则筛选感兴趣的请求；</li>
</ul>
</li>
<li><p><strong>Disable Cache（禁用缓存）</strong></p>

<ul>
<li>在开发测试时勾选“Disable cache”可以确保所有请求都走网络而非本地缓存，方便复现首次加载时的网络开销。</li>
</ul>
</li>
<li><p><strong>Throttling（模拟网络环境）</strong></p>

<ul>
<li>可在 “No throttling” 下拉里选择“Fast 3G、Slow 3G、Offline” 等，以模拟移动网络环境下的加载速度。</li>
</ul>
</li>
<li><p><strong>Capture Screenshots</strong></p>

<ul>
<li>勾选左上角的相机图标后，在加载过程中会自动截取页面渲染快照；配合 Performance 面板的 Filmstrip 视图，可以定位哪个资源加载完成对应的视觉变化。</li>
</ul>
</li>
</ul>


<h3>2. Performance 面板（性能面板，又叫 Timeline）</h3>

<ul>
<li><p><strong>录制整个页面加载与交互过程</strong></p>

<ul>
<li>点击“Record”（录制），然后刷新页面或执行某个操作，工具会捕获加载期间的网络请求、脚本执行、布局（Layout）、绘制（Paint）、合成（Composite）、垃圾回收（GC）等各阶段耗时。</li>
</ul>
</li>
<li><p><strong>关键时间线（Timings）</strong></p>

<ul>
<li>Top-down 视图里会标注 CIF（DOMContentLoaded）、Load、First Paint、First Contentful Paint、Largest Contentful Paint、Time to Interactive 等时间点（有时需要开启 Web Vitals 支持）。</li>
</ul>
</li>
<li><p><strong>查看长任务（Long Tasks）</strong></p>

<ul>
<li>在 Flame Chart 上可以看到哪些 JavaScript 执行占用了主线程超过 50ms，会被标注为长任务；根据 Call Tree（调用树）可以追溯是哪段代码导致的。</li>
</ul>
</li>
<li><p><strong>帧率与交互流畅度</strong></p>

<ul>
<li>通过 FPS（Frames Per Second）视图监测渲染帧率，帧率过低可能是由于过多重绘重排（Reflow/Repaint）或频繁执行 JS 造成。</li>
</ul>
</li>
<li><p><strong>CPU / Memory 节点</strong></p>

<ul>
<li>可以在录制时分别打开 CPU Profiler 或 Memory Profiler，定位内存泄露或高 CPU 占用的调用栈。</li>
</ul>
</li>
</ul>


<h3>3. Lighthouse 面板（审计）</h3>

<ul>
<li><p><strong>一键跑性能审计</strong></p>

<ul>
<li>在 DevTools 的右侧或菜单中切换到“Lighthouse”面板，选择“Mobile”或“Desktop”，然后点击“Generate report”（生成报告）。</li>
<li>审计会根据最新的 Lighthouse 规则给出性能分数（0–100），并列出可优化项（例如：减少首次内容绘制时间、启用文本压缩、图片元素所占空间建议、使用合并脚本等）。</li>
</ul>
</li>
<li><p><strong>可视化建议与详情</strong></p>

<ul>
<li>对每一项得分，Lighthouse 都会给出“为什么重要”、“如何优化”的详细说明，以及与同行业网站的对比。非常适合做一次性健康检查。</li>
</ul>
</li>
</ul>


<h3>4. Coverage 面板（覆盖率检测）</h3>

<ul>
<li><p><strong>Detect Unused CSS/JS（检测未使用代码）</strong></p>

<ul>
<li>打开 DevTools 后，按 <code>Ctrl+Shift+P</code>（Windows）或 <code>⌘+Shift+P</code>（Mac），输入 “Coverage: Show Coverage” 并回车，打开 Coverage 面板。</li>
<li>点击左上角小圆点开始录制，再次刷新页面。工具会扫描页面加载过程中哪些 CSS/JS 代码块被实际使用、哪些未用。</li>
<li>根据未使用百分比，可以考虑移除或拆分那些冗余很高的模块。</li>
</ul>
</li>
</ul>


<h3>5. Web Vitals / Core Web Vitals</h3>

<ul>
<li><p><strong>实时查看 LCP、FID、CLS</strong></p>

<ul>
<li>在最新版本的 Chrome DevTools 的 Performance 面板中，如果勾选了 “Capture Web Vitals”，录制时就会在时间轴上标注 LCP、FID、CLS 等关键指标。</li>
<li>也可以通过控制台命令 <code>performance.getEntriesByType('paint')</code> 查看 First Paint (FP) 与 First Contentful Paint (FCP) 时间。</li>
</ul>
</li>
</ul>


<h3>6. Audit for Networking/Blocking</h3>

<ul>
<li><p><strong>Disable JavaScript / CSS</strong></p>

<ul>
<li>在 Network 面板中右键某个脚本或样式文件，选择 “Block request URL”，即可临时屏蔽该资源，然后观察页面表现，便于在无需改代码的情况下判断某个库/样式对首屏渲染的阻塞程度。</li>
</ul>
</li>
<li><p><strong>Request Blocking</strong></p>

<ul>
<li>DevTools 的 “Network” 面板中有一个 “Block” 选项卡，可以自定义匹配规则（如正则）屏蔽特定域名、文件类型的请求，测试若该请求不加载，对页面加载有何影响。</li>
</ul>
</li>
</ul>


<h3>7. 其他辅助功能</h3>

<ul>
<li><p><strong>Inspect Mode 与 Layout Shift Region</strong></p>

<ul>
<li>在 Elements 面板中，右上角有一个 “Inspect element” 按钮，可以直接选中页面元素，在右侧看到对应的 CSS 规则、盒模型（Box Model）信息、继承链等，便于优化样式。</li>
</ul>
</li>
<li><p><strong>Performance Monitor</strong></p>

<ul>
<li>在 DevTools 菜单里勾选 “Performance Monitor”，可在顶部显示 CPU 利用率、DOM Nodes 数量、JS Heap、Layout 队列长度等实时数据，对发现性能瓶颈有辅助意义。</li>
</ul>
</li>
<li><p><strong>Application 面板</strong></p>

<ul>
<li>查看 Cache Storage、Service Worker、Local Storage、IndexedDB、Cookie 等。若项目启用了 PWA，可以查看离线缓存策略是否生效、Service Worker 是否出现异常。</li>
</ul>
</li>
</ul>


<hr />

<h2>四、小结</h2>

<ul>
<li><strong>抓大放小，有的放矢</strong>：首先要量化几个关键性能指标（如 FCP、LCP、TTI），明确“哪里卡”，分析“为什么卡”；</li>
<li><strong>数据驱动优化</strong>：借助 Lighthouse、Chrome DevTools、WebPageTest 等工具形成初始报告，从网络、资源、渲染、脚本执行等角度分别剖析；</li>
<li><strong>细化手段</strong>：从减少请求数、减小请求体积、合理缓存策略、异步加载、懒加载、拆包降维、优化渲染路径等多方面入手；</li>
<li><strong>迭代与监控</strong>：每一次优化都要验证指标变化，并结合 RUM 监控真实用户体验，避免 “合成指标” 与 “真实指标” 脱节。</li>
</ul>


<p>掌握并灵活运用以上思路和工具，相信你在分析和优化 Web 应用资源加载性能时，会更加高效、有的放矢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Babel工作原理]]></title>
    <link href="http://hongchaozhang.github.io/blog/2025/03/24/babel-workflow/"/>
    <updated>2025-03-24T23:20:31+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2025/03/24/babel-workflow</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Babel is a JavaScript compiler。
主要用于将 ECMAScript 2015+（ES6 及以上）的 JavaScript 代码转换成能够在当前和旧版浏览器环境中兼容运行的代码版本。</p>

<h1>配置</h1>

<p>Babel 的配置文件通常是<code>.babelrc.json</code>或<code>babel.config.json</code>，可以在其中配置需要使用的插件和预设:</p>

<pre><code>{
  "presets": [...],
  "plugins": [...]
}
</code></pre>

<p>甚至可以直接写在<code>package.json</code>中：</p>

<pre><code>{
  ...,
  "babel": {
    "presets": [...],
    "plugins": [...]
  },
  ...
}
</code></pre>

<p>更加灵活的，可以在<code>webpack.config.js</code>中访问 Node.js 的 APIs：</p>

<pre><code>module.exports = function (api) {
  api.cache(true);

  const presets = [ ... ];
  const plugins = [ ... ];

  if (process.env["ENV"] === "prod") {
    plugins.push(...);
  }

  return {
    presets,
    plugins
  };
}
</code></pre>

<h1>工作流程</h1>

<p><img src="/images/babel-workflow.png" alt="babel workflow" /></p>

<p>Babel 的编译过程与大多数编程语言的编译器类似，分为三个主要阶段：解析（Parsing）、转换（Transformation）和生成（Code Generation）</p>

<h2>解析（Parsing）</h2>

<p>这一阶段将代码字符串解析成抽象语法树（AST，Abstract Syntax Tree）<a href="https://developer.aliyun.com/article/1303957">2</a><a href="https://blog.csdn.net/ByteDanceTech/article/details/126900235">3</a>。AST 是源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一种结构<a href="https://developer.aliyun.com/article/1303957">2</a>。
解析过程又分为两个步骤：</p>

<ul>
<li>分词：将整个代码字符串分割成语法单元数组：tokenizer，keyword</li>
<li>语法分析：建立分析语法单元之间的关系<a href="https://developer.aliyun.com/article/1303957">2</a></li>
</ul>


<p>例如，一个简单的<code>console.log('zcy');</code>会被解析成包含程序结构、表达式语句、调用表达式等节点的 AST<a href="https://developer.aliyun.com/article/1303957">2</a>。</p>

<pre><code>{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "console"
          },
          "property": {
            "type": "Identifier",
            "name": "log"
          }
        },
        "arguments": [
          {
          "type": "Literal",
          "value": "zcy",
          "raw": "'zcy'"
          }
        ]
      }
    }
  ],
  "sourceType": "script"
}
</code></pre>

<h2>转换（Transformation）</h2>

<p>这一阶段对 AST 进行转换操作<a href="https://developer.aliyun.com/article/1303957">2</a><a href="https://blog.csdn.net/ByteDanceTech/article/details/126900235">3</a>。转换通常通过 Babel plugin（插件）或者 preset（预设）实现，每个插件可以访问 AST 并对其进行修改，例如将箭头函数的节点转换为普通函数节点。</p>

<h3>plugin（插件）</h3>

<p>Babel 本身只是一个编译器，可以理解为一个框架，就像一个纯函数<code>const babel = code =&gt; code</code>一样，只负责解析然后生成代码。要实现具体的转换功能，需要添加和使用插件（plugins）。
例如，要将箭头函数转换为普通函数，可以使用官方提供的<code>@babel/plugin-transform-arrow-functions</code>插件<a href="https://www.xuwenchao.site/blogs/babel.html">1</a>。每个插件负责特定类型的语法转换，开发者可以根据需要添加相应的插件。</p>

<h3>presets（预设）</h3>

<p>如果要编译一个完整的应用，单独配置每个所需的插件会非常繁琐。为了解决这个问题，Babel 引入了 presets（预设）的概念<a href="https://www.xuwenchao.site/blogs/babel.html">1</a>。
presets 可以理解为 plugins 和部分配置的集合，使用预设可以避免单独配置每个 plugin 和参数，直接使用已经组合好的配置即可<a href="https://www.xuwenchao.site/blogs/babel.html">1</a>。常见的预设包括<code>@babel/preset-env</code>、<code>@babel/preset-react</code>等。</p>

<p>@babel/preset-env 包含以下插件：</p>

<ul>
<li>@babel/plugin-transform-template-literals</li>
<li>@babel/plugin-transform-literals</li>
<li>@babel/plugin-transform-function-name</li>
<li>@babel/plugin-transform-arrow-functions</li>
<li>@babel/plugin-transform-block-scoped-functions</li>
<li>@babel/plugin-transform-classes</li>
<li>@babel/plugin-transform-object-super</li>
</ul>


<p>@babel/preset-react 包含以下插件：</p>

<ul>
<li>@babel/plugin-syntax-jsx</li>
<li>@babel/plugin-transform-react-jsx</li>
<li>@babel/plugin-transform-react-display-name</li>
</ul>


<h2>生成（Code Generation）</h2>

<p>最后一个阶段是根据转换后的 AST 生成新的代码字符串。这一过程包括将 AST 中的每个节点映射回字符串形式，并生成源码映射（source maps）。</p>

<h1>结论</h1>

<p>Babel 作为现代前端开发的重要工具，为开发者提供了使用最新 JavaScript 特性的能力，同时保证了代码在各种浏览器环境中的兼容性。深入理解 Babel 的基本概念、工作流程和使用方法，对于前端开发者提升开发效率和代码质量有着重要意义。</p>

<p>从入门的基本使用，到进阶的插件开发，再到专业的性能优化，Babel 的学习是一个循序渐进的过程。随着对 Babel 的不断深入学习和实践，开发者能够更加灵活地利用这一工具，构建更加现代化、高效的前端应用。</p>

<h1>应用场景</h1>

<ul>
<li>编辑器</li>
<li>LSP language server protocol</li>
<li>语法高亮，自动补全</li>
<li>静态代码分析</li>
<li>代码转换</li>
<li>代码压缩和优化</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS resolution rules and specificity]]></title>
    <link href="http://hongchaozhang.github.io/blog/2024/06/17/css-resolution-rules-and-specificity/"/>
    <updated>2024-06-17T11:53:39+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2024/06/17/css-resolution-rules-and-specificity</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Description</h2>

<p>The css property doesn&rsquo;t take effect in the release build but works fine in the debug build.</p>

<h2>Root cause</h2>

<p>We applied two css classes in one dom node and didn’t specify the priority (have the same css specificity (0,1,0)), thus the CSS class order matters: the latter one will override the previous one.</p>

<p>However, the css class order is not stable between the debug and release builds.</p>

<h2>Solution</h2>

<p>After fixing, the classes are like this:</p>

<p><img src="/images/css-specificity-1.png" alt="css-specificity-1" /></p>

<p>We can use the scss file helper tools in VS Code:</p>

<p><img src="/images/css-specificity-2.png" alt="css-specificity-2" /></p>

<p>Caution while nesting &amp; :</p>

<p><img src="/images/css-specificity-3.png" alt="css-specificity-3" /></p>

<h2><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance">Cascade</a></h2>

<p>When two rules from the same cascade layer apply and both have equal specificity, the one that is defined last in the stylesheet is the one that will be used.</p>

<p>There are three factors to consider, listed here in increasing order of importance. Later ones overrule earlier ones:</p>

<h3>Source order</h3>

<h3><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">Specificity</a></h3>

<ul>
<li>one identifier selector has 1-0-0 specificity</li>
<li>one class selector (attribute selector) has 0-1-0 specificity</li>
<li>one element selector has 0-0-1 specificity</li>
<li>The specificity weight of :not/:is/:has comes from the selector parameter in the list of selectors with the highest specificity.</li>
<li>Combinators, such as +, >, ~, &ldquo; &rdquo;, and ||, may make a selector more specific in what is selected but they don&rsquo;t add any value to the specificity weight.</li>
</ul>


<p><img src="/images/css-specificity-4.png" alt="css-specificity-4" /></p>

<h3>Importance</h3>

<ul>
<li>inline style</li>
<li><code>!important</code>: DO NOT use <code>!important</code>. It makes the CSS hard to maintain and debug.

<ul>
<li>See a demo for <code>!important</code> <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance#!important">here</a>.</li>
</ul>
</li>
</ul>


<h2>Other info</h2>

<p>The VS Code should have issues with “specificity” calculation.</p>

<p><img src="/images/css-specificity-5.png" alt="css-specificity-5" /></p>

<p>The specificity should be 0-2-0.</p>

<p>More examples can be seen from here: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#three-column_comparison">Specificity</a></p>

<p><img src="/images/css-specificity-6.png" alt="css-specificity-6" /></p>

<p>Some online css specificity calculator can be used for testing:</p>

<p><a href="https://specificity.keegan.st/">Specificity Calculator</a></p>

<h2>How to avoid such issues?</h2>

<ul>
<li>Make sure all the loaded CSSs have different css specificity.</li>
<li>Review the CSS in the developer tool.</li>
<li>For a specific css property, filter out all CSSs which contains it.</li>
<li>Make sure the CSS you want to apply have the highest css specificity.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Learning Note 2023]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/09/15/react-learning-note-2023/"/>
    <updated>2023-09-15T17:33:08+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/09/15/react-learning-note-2023</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#react-state-is-updated-in-a-batch">React state is updated in a “batch”</a></li>
<li><a href="#update-react-state-with-a-new-object-do-not-mute-existing-one">Update react state with a new object, do not mute existing one</a></li>
<li><a href="#declarative-ui">Declarative UI</a></li>
<li><a href="#react-redux">React-redux</a></li>
<li><a href="#hooks">Hooks</a></li>
<li><a href="#react%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F">React中的变量</a></li>
<li><a href="#useeffect">useEffect</a>

<ul>
<li><a href="#clean-up-function">clean up function</a></li>
</ul>
</li>
<li><a href="#usememo">useMemo</a></li>
<li><a href="#two-ways-to-store-previous-props">two ways to store previous props</a>

<ul>
<li><a href="#useref">useRef</a></li>
<li><a href="#usestate">useState</a></li>
</ul>
</li>
<li><a href="#fetch-data%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98">fetch data的两个问题</a>

<ul>
<li><a href="#race-condition">race condition</a></li>
<li><a href="#undo">undo</a></li>
</ul>
</li>
<li><a href="#effect-event">Effect Event</a>

<ul>
<li><a href="#what-is-reactive">what is reactive</a></li>
<li><a href="#problem">Problem</a></li>
<li><a href="#solution">Solution:</a></li>
<li><a href="#supress-react-lint-error">Supress react lint error</a></li>
</ul>
</li>
<li><a href="#how-to-review-effect-dependencies">How to review effect dependencies</a>

<ul>
<li><a href="#ways-to-review-and-fix-this">ways to review and fix this</a></li>
</ul>
</li>
<li><a href="#object-and-function-compare">Object and function compare</a></li>
<li><a href="#usememo-and-usecallback">useMemo and useCallback</a></li>
<li><a href="#forwardref">forwardRef</a>

<ul>
<li><a href="#useref-1">useRef</a></li>
<li><a href="#basic-concepts">basic concepts</a></li>
<li><a href="#expose-dom-node">expose dom node</a></li>
<li><a href="#expose-an-object">expose an object</a></li>
</ul>
</li>
<li><a href="#custom-hook">Custom Hook</a></li>
<li><a href="#strict-mode">strict mode</a></li>
<li><a href="#other-rules">Other Rules</a>

<ul>
<li><a href="#data-from-parent-to-child">data from parent to child</a></li>
<li><a href="#usesyncexternalstore">useSyncExternalStore</a></li>
<li><a href="#useeffect-dependencies">useEffect dependencies</a></li>
</ul>
</li>
</ul>


<h2>React state is updated in a “batch”</h2>

<p>This means that you can not get the state immediately after you change it.</p>

<p>number will be 1 after one click:
<code>
export default function Counter() {
  const [number, setNumber] = useState(0);
  return (
    &lt;&gt;
      &lt;h1&gt;{number}&lt;/h1&gt;
      &lt;button onClick={() =&gt; {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}&gt;+3&lt;/button&gt;
    &lt;/&gt;
  )
}
</code>
To make the number to be 3, pass a update function to the setNumber function. An update function will be queued and executed later.
<code>
export default function Counter() {
  const [number, setNumber] = useState(0);
  return (
    &lt;&gt;
      &lt;h1&gt;{number}&lt;/h1&gt;
      &lt;button onClick={() =&gt; {
        setNumber(n =&gt; n + 1);
        setNumber(n =&gt; n + 1);
        setNumber(n =&gt; n + 1);
      }}&gt;+3&lt;/button&gt;
    &lt;/&gt;
  )
}
</code></p>

<h2>Update react state with a new object, do not mute existing one</h2>

<p>Use <code>…</code> , the object spread operator:
<code>
setPerson({
  ...person, // Copy the old fields
  firstName: e.target.value // But override this one
});
</code>
Note that spread syntax is shallow: it only copies one level deep. To update nested object:
<code>
setPerson({
  ...person, // Copy other fields
  artwork: { // but replace the artwork
    ...person.artwork, // with the same one
    city: 'New Delhi' // but in New Delhi!
  }
});
</code>
For updating array object:
<code>
setArtists([
  { id: nextId++, name: name },
  ...artists // Put old items at the end
]);
</code>
<code>Immer</code> is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you.
<code>
updatePerson(draft =&gt; {
  draft.artwork.city = 'Lagos';
});
</code>
Using <code>Immer</code> for array:
<code>
updateMyTodos(draft =&gt; {
  const artwork = draft.find(a =&gt; a.id === artworkId);
  artwork.seen = nextSeen;
});
</code></p>

<h2>Declarative UI</h2>

<ul>
<li>Declarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).</li>
<li>When developing a component, Think in declarative UI way:

<ol>
<li>Identify all its visual states.</li>
<li>Determine the human and computer triggers for state changes.</li>
<li>Model the state with useState.</li>
<li>Remove non-essential state to avoid bugs and paradoxes.</li>
<li>Connect the event handlers to set state.</li>
</ol>
</li>
</ul>


<h2>React-redux</h2>

<ul>
<li>useReducer+useContext?</li>
<li>Provider</li>
<li>Context</li>
</ul>


<h2>Hooks</h2>

<ul>
<li>useContext: 跨层传输props，不用一层一层传下去</li>
<li>useEffect: Use them to synchronize your component with a system outside of React.</li>
</ul>


<h2>React中的变量</h2>

<ul>
<li>Props：immutable, 触发rerender，不记忆(retained by component)</li>
<li>State：immutable, 触发rerender，记忆(retained by React)</li>
<li>useRef：mutable, 不触发rerender，记忆(retained by React)</li>
</ul>


<h2>useEffect</h2>

<p>Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.</p>

<p>Effects run at the end of a <em>commit</em> after the screen updates. That is, useEffect “delays” a piece of code from running until that render is reflected on the screen.</p>

<h3>clean up function</h3>

<p>You can use a clean up function to clean up the effect. For example, if you subscribe to an external data source, you can unsubscribe it in the clean up function.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useEffect(() =&gt; {
</span><span class='line'>  const connection = createConnection();
</span><span class='line'>  connection.connect();
</span><span class='line'>  return () =&gt; {
</span><span class='line'>    connection.disconnect();
</span><span class='line'>  };
</span><span class='line'>}, []);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;useEffect(() =&gt; {
</span><span class='line'>  function handleScroll(e) {
</span><span class='line'>    console.log(window.scrollX, window.scrollY);
</span><span class='line'>  }
</span><span class='line'>  window.addEventListener(&lsquo;scroll&rsquo;, handleScroll);
</span><span class='line'>  return () =&gt; window.removeEventListener(&lsquo;scroll&rsquo;, handleScroll);
</span><span class='line'>}, []);</span></code></pre></td></tr></table></div></figure>
<strong>React will call your cleanup function each time before the next Effect runs again, and one final time when the component unmounts (gets removed).</strong>
That is, the cleanup function runs not only during unmount, but before every re-render with changed dependencies.</p>

<h2>useMemo</h2>

<p>useMemo和useEffect都可以加依赖，但是useMemo在render过程起作用，而useEffect在commit之后起作用。
所以，如果是render依赖的变量值，用useMemo，不用useEffect+useState。</p>

<p>不推荐：
<code>
function TodoList({ todos, filter }) {
  const [newTodo, setNewTodo] = useState('');
  // 🔴 Avoid: redundant state and unnecessary Effect
  const [visibleTodos, setVisibleTodos] = useState([]);
  useEffect(() =&gt; {
    setVisibleTodos(getFilteredTodos(todos, filter));
  }, [todos, filter]);
  // ...
}
</code>
推荐：
<code>
import { useMemo, useState } from 'react';
function TodoList({ todos, filter }) {
  const [newTodo, setNewTodo] = useState('');
  const visibleTodos = useMemo(() =&gt; {
    // ✅ Does not re-run unless todos or filter change
    return getFilteredTodos(todos, filter);
  }, [todos, filter]);
  // ...
}
</code></p>

<h2>two ways to store previous props</h2>

<h3>useRef</h3>

<p><code>prevProps</code> updates after render:
<code>
  const prevProps = useRef();
  useEffect(() =&gt; {
    prevProps.current = props;
  }, [props]);
</code></p>

<h3>useState</h3>

<p><code>prevItems</code> is ready when render:
<code>
  const [prevItems, setPrevItems] = useState(items);
  if (items !== prevItems) {
    setPrevItems(items);
  }
</code></p>

<h2>fetch data的两个问题</h2>

<h3>race condition</h3>

<p>输入特别快的时候，很多search的request连续发出，不能保证回来的顺序，会出问题。
解决方法：给useEffect提供cleanup函数解决
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function SearchResults({ query }) {
</span><span class='line'>  const [results, setResults] = useState([]);
</span><span class='line'>  const [page, setPage] = useState(1);
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    let ignore = false;
</span><span class='line'>    fetchResults(query, page).then(json =&gt; {
</span><span class='line'>      if (!ignore) {
</span><span class='line'>        setResults(json);
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>    return () =&gt; {
</span><span class='line'>      ignore = true;
</span><span class='line'>    };
</span><span class='line'>  }, [query, page]);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  function handleNextPageClick() {
</span><span class='line'>    setPage(page + 1);
</span><span class='line'>  }
</span><span class='line'>  // &hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<h3>undo</h3>

<p>没看懂：<a href="https://react.dev/learn/you-might-not-need-an-effect#fetching-data">https://react.dev/learn/you-might-not-need-an-effect#fetching-data</a></p>

<h2>Effect Event</h2>

<h3>what is reactive</h3>

<p>variables which can change due to a re-render
* Logic inside event handlers (or Effect Event) is not reactive.
* Logic inside Effects is reactive.</p>

<h3>Problem</h3>

<pre><code>function ChatRoom({ roomId, theme }) {
  useEffect(() =&gt; {
    const connection = createConnection(serverUrl, roomId);
    connection.on('connected', () =&gt; {
      showNotification('Connected!', theme);
    });
    connection.connect();
    return () =&gt; {
      connection.disconnect()
    };
  }, [roomId, theme]); // ✅ All dependencies declared
  // ...
</code></pre>

<p>When reconnected, a notification will be shown, and the notificaiton will consider the theme.
But when the theme changes, the notification will also be shown, which is not expected.</p>

<h3>Solution:</h3>

<p>Use Effect Event to separate this non-reactive logic from the reactive Effect around it.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ChatRoom({ roomId, theme }) {
</span><span class='line'>  const onConnected = useEffectEvent(() =&gt; {
</span><span class='line'>    showNotification(&lsquo;Connected!&rsquo;, theme);
</span><span class='line'>  });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(serverUrl, roomId);
</span><span class='line'>    connection.on(&lsquo;connected&rsquo;, () =&gt; {
</span><span class='line'>      onConnected();
</span><span class='line'>    });
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId]); // ✅ All dependencies declared
</span><span class='line'>  // &hellip;</span></code></pre></td></tr></table></div></figure></p>

<p>You can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you “break the chain” between the reactivity of Effects and code that should not be reactive.</p>

<h3>Supress react lint error</h3>

<p>React linter ask you to add all reactive variables into the Effect dependencies.
Effect Events let you fix many patterns where you might be tempted to suppress the dependency linter.</p>

<h2>How to review effect dependencies</h2>

<p>Every time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:</p>

<ul>
<li>You might want to re-execute different parts of your Effect under different conditions.</li>
<li>You might want to only read the latest value of some dependency instead of “reacting” to its changes.</li>
<li>A dependency may change too often unintentionally because it’s an object or a function.</li>
</ul>


<h3>ways to review and fix this</h3>

<ul>
<li>Should this code move to an event handler?</li>
<li>Is your Effect doing several unrelated things?

<ul>
<li>If different parts of your Effect should re-run for different reasons, split it into several Effects.</li>
</ul>
</li>
<li>Are you reading some state to calculate the next state?

<ul>
<li>Use update function. Use <code>setMessages([...messages, receivedMessage])</code> instead of <code>setMessages(msgs =&gt; [...msgs, receivedMessage])</code></li>
</ul>
</li>
<li>In JavaScript, objects and functions are considered different if they were created at different times.</li>
<li>Try to avoid object and function dependencies. Move them outside the component or inside the Effect.

<ul>
<li>Move static objects and functions outside your component
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function createOptions() {
</span><span class='line'>return {
</span><span class='line'>serverUrl: &lsquo;&lt;a href="https://localhost:1234"&gt;https://localhost:1234&lt;/a&gt;&rsquo;,
</span><span class='line'>roomId: &lsquo;music&rsquo;
</span><span class='line'>};
</span><span class='line'>}&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;function ChatRoom() {
</span><span class='line'>  const [message, setMessage] = useState(&lsquo;&rsquo;);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  useEffect(() =&gt; {
</span><span class='line'>    const options = createOptions();
</span><span class='line'>    const connection = createConnection();
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, []); // ✅ All dependencies declared
</span><span class='line'>  // &hellip;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    * Move dynamic objects and functions inside your Effect
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>const serverUrl = &lsquo;&lt;a href="https://localhost:1234"&gt;https://localhost:1234&lt;/a&gt;&rsquo;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;function ChatRoom({ roomId }) {
</span><span class='line'>  const [message, setMessage] = useState(&lsquo;&rsquo;);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  useEffect(() =&gt; {
</span><span class='line'>    const options = {
</span><span class='line'>      serverUrl: serverUrl,
</span><span class='line'>      roomId: roomId
</span><span class='line'>    };
</span><span class='line'>    const connection = createConnection(options);
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId]); // ✅ All dependencies declared
</span><span class='line'>  // &hellip;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>* Read primitive values from objects
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>function ChatRoom({ options }) {
</span><span class='line'>  const [message, setMessage] = useState(&lsquo;&rsquo;);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  const { roomId, serverUrl } = options;
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection({
</span><span class='line'>      roomId: roomId,
</span><span class='line'>      serverUrl: serverUrl
</span><span class='line'>    });
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId, serverUrl]); // ✅ All dependencies declared
</span><span class='line'>  // &hellip;</span></code></pre></td></tr></table></div></figure></p>

<h2>Object and function compare</h2>

<pre><code>import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  // Temporarily disable the linter to demonstrate the problem
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const options = {
    serverUrl: serverUrl,
    roomId: roomId
  };

  useEffect(() =&gt; {
    const connection = createConnection(options);
    connection.connect();
    return () =&gt; connection.disconnect();
  }, [options]);

  return (
    &lt;&gt;
      &lt;h1&gt;Welcome to the {roomId} room!&lt;/h1&gt;
      &lt;input value={message} onChange={e =&gt; setMessage(e.target.value)} /&gt;
    &lt;/&gt;
  );
}

export default function App() {
  const [roomId, setRoomId] = useState('general');
  return (
    &lt;&gt;
      &lt;label&gt;
        Choose the chat room:{' '}
        &lt;select
          value={roomId}
          onChange={e =&gt; setRoomId(e.target.value)}
        &gt;
          &lt;option value="general"&gt;general&lt;/option&gt;
          &lt;option value="travel"&gt;travel&lt;/option&gt;
          &lt;option value="music"&gt;music&lt;/option&gt;
        &lt;/select&gt;
      &lt;/label&gt;
      &lt;hr /&gt;
      &lt;ChatRoom roomId={roomId} /&gt;
    &lt;/&gt;
  );
}
</code></pre>

<p>In the example above, the input only updates the message state variable. From the user’s perspective, this should not affect the chat connection. However, every time you update the message, your component re-renders. When your component re-renders, the code inside of it runs again from scratch.</p>

<p>A new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options), and the chat re-connects as you type.</p>

<p>This problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn’t matter that the contents inside of them may be the same!</p>

<p>Object and function dependencies can make your Effect re-synchronize more often than you need.</p>

<p>This is why, whenever possible, you should try to avoid objects and functions as your Effect’s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.</p>

<h2>useMemo and useCallback</h2>

<ul>
<li>useMemo caches the result of calling your function.</li>
<li>useCallback caches the function itself. React will not call your function.</li>
</ul>


<h2>forwardRef</h2>

<p>First, get familar with <code>useRef</code>:</p>

<h3>useRef</h3>

<p>ref.current is set during the <em>commit</em> process, not <em>render</em> process, so do not read or write ref.current during rendering. We can use ref.current in event handler or useEffect.</p>

<h3>basic concepts</h3>

<pre><code>const MyInput = forwardRef(function MyInput(props, ref) {
  return (
    &lt;label&gt;
      {props.label}
      &lt;input ref={ref} /&gt;
    &lt;/label&gt;
  );
});
</code></pre>

<p>The ref attribute passed by the parent component. The ref can be an object or a function. You should either
* pass the ref you receive to another component, or
* pass it to useImperativeHandle.</p>

<h3>expose dom node</h3>

<p>The parent <code>Form</code> component accesses the \<input\> DOM node exposed by <code>MyInput</code>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { forwardRef } from &lsquo;react&rsquo;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;const MyInput = forwardRef(function MyInput(props, ref) {
</span><span class='line'>  const { label, &hellip;otherProps } = props;
</span><span class='line'>  return (
</span><span class='line'>    &lt;label&gt;
</span><span class='line'>      {label}
</span><span class='line'>      &lt;input {...otherProps} ref={ref} /&gt;
</span><span class='line'>    &lt;/label&gt;
</span><span class='line'>  );
</span><span class='line'>});&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;function Form() {
</span><span class='line'>  const ref = useRef(null);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  function handleClick() {
</span><span class='line'>    ref.current.focus();
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  return (
</span><span class='line'>    &lt;form&gt;
</span><span class='line'>      &lt;MyInput label="Enter your name:" ref={ref} /&gt;
</span><span class='line'>      &lt;button type="button" onClick={handleClick}&gt;
</span><span class='line'>        Edit
</span><span class='line'>      &lt;/button&gt;
</span><span class='line'>    &lt;/form&gt;
</span><span class='line'>  );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<h3>expose an object</h3>

<p>Use <code>useImperativeHandle</code> to expose an object referenced by <code>ref</code>:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { forwardRef, useRef, useImperativeHandle } from &lsquo;react&rsquo;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;const MyInput = forwardRef(function MyInput(props, ref) {
</span><span class='line'>  const inputRef = useRef(null);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  useImperativeHandle(ref, () =&gt; {
</span><span class='line'>    return {
</span><span class='line'>      focus() {
</span><span class='line'>        inputRef.current.focus();
</span><span class='line'>      },
</span><span class='line'>      scrollIntoView() {
</span><span class='line'>        inputRef.current.scrollIntoView();
</span><span class='line'>      },
</span><span class='line'>    };
</span><span class='line'>  }, []);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  return &lt;input {...props} ref={inputRef} /&gt;;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></p>

<h2>Custom Hook</h2>

<p>You must follow these naming conventions:</p>

<ul>
<li>React component names must start with a capital letter, like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.</li>
<li>Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.</li>
</ul>


<p>This convention guarantees that you can always look at a component and know where its state, Effects, and other React features might “hide”. For example, if you see a getColor() function call inside your component, you can be sure that it can’t possibly contain React state inside because its name doesn’t start with use. However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!</p>

<p>If your linter is configured for React, it will enforce this naming convention.</p>

<p>Note that custom Hooks only share stateful logic, not state itself.</p>

<h2>strict mode</h2>

<p><StrictMode> lets you find common bugs in your components early during development.</p>

<p>Strict Mode enables the following development-only behaviors:
* Your components will re-render an extra time to find bugs caused by impure rendering.
* Your components will re-run Effects an extra time to find bugs caused by missing Effect cleanup.
* Your components will be checked for usage of deprecated APIs.</p>

<h2>Other Rules</h2>

<h3>data from parent to child</h3>

<p>When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child.
This is simpler and keeps the data flow predictable: the data flows down from the parent to the child.</p>

<h3>useSyncExternalStore</h3>

<h3>useEffect dependencies</h3>

<p>All variables from the component body used by the Effect should be in the Effect dependency list. However, you could instead “prove” to the linter that these values aren’t reactive values, i.e. that they can’t change as a result of a re-render. For example, if serverUrl and roomId don’t depend on rendering and always have the same values, you can move them outside the component. Now they don’t need to be dependencies:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const serverUrl = &lsquo;&lt;a href="https://localhost:1234"&gt;https://localhost:1234&lt;/a&gt;&rsquo;; // serverUrl is not reactive
</span><span class='line'>const roomId = &lsquo;general&rsquo;; // roomId is not reactive&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;function ChatRoom() {
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(serverUrl, roomId);
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; {
</span><span class='line'>      connection.disconnect();
</span><span class='line'>    };
</span><span class='line'>  }, []); // ✅ All dependencies declared
</span><span class='line'>  // &hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
