<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-c | Zhang Hongchao]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2016-01-30T22:56:39+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[火星坐标导致iOS系统下高德地图定位不准]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system/"/>
    <updated>2016-01-29T13:47:42+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system</id>
    <content type="html"><![CDATA[<p>首先感慨一下：神奇的国度，神奇的坐标！</p>

<h3>火星坐标系统介绍</h3>

<!-- more -->


<p>我们平时用到的地球坐标系统，叫做WGS-84坐标，这个是国际通用的“准确”的坐标系统。国家保密插件，其实就是对真实坐标系统进行人为的加偏处理，即为GCJ-02坐标，戏称“火星坐标”。于是，我们有了下面的东西：</p>

<ul>
<li>地球坐标：指WGS84坐标系统</li>
<li>火星坐标：指使用国家保密插件人为偏移后的坐标</li>
<li>地球地图：指与地球坐标对应的客观真实的地图</li>
<li>火星地图：指经过加密偏移后的，与火星坐标对应的地图</li>
</ul>


<p>而且，国家龟腚： <strong>国内出版的各种地图系统（包括电子形式），必须至少采用GCJ-02对地理位置进行首次加密。</strong>于是，</p>

<ul>
<li>谷歌地图的大陆地图、高德国内地图采用GCJ-02对地图进行加偏。</li>
<li>百度地图更是进一步发挥了天朝特色，除了GCJ-02加偏，自己又在此基础上继续进行加偏，相应的坐标称为BD-09坐标。</li>
</ul>


<p>也就是说，我们平时用到的地图应用都是采用的虚假的坐标，虚假的地图。</p>

<h3>各地图厂商使用的坐标系</h3>

<ul>
<li>火星坐标

<ul>
<li>iOS 地图</li>
<li>Gogole地图</li>
<li>搜搜、阿里云、高德地图</li>
</ul>
</li>
<li>地球坐标

<ul>
<li>Google 卫星地图（国外地图应该都是……）</li>
</ul>
</li>
<li>百度坐标

<ul>
<li>百度地图</li>
</ul>
</li>
</ul>


<h3>各坐标系之间的转换</h3>

<p>为了在地图应用开发中准确地定位，需要将准确的WGS-84坐标转换成需要的坐标。在加偏算法不公开的的情况下，各方大神各显神通，有了下面几种方案：</p>

<h4>数据库</h4>

<p>可以列出WGC-84坐标和GCJ-02坐标系统的对应关系，放在数据库中供检索。数据库方案参考：<a href="http://code4app.com/ios/GPS%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/51c2564f6803fa9a29000000">GPS火星坐标转换</a>。</p>

<p>也有一些网站提供转换查询服务，比如<a href="http://www.zdoz.net/">ZDOZ.net</a>，和 <a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition">坐标转换API - Web服务API</a>。</p>

<h4>近似解析式</h4>

<p>逆向求解近似解析式，不需要大的数据库，不需要进行网络请求，而且精度在10米以内，基本能满足日常需求。</p>

<p>这样的实现很多，具体实现可以参考Objective-C的一种实现：<a href="https://github.com/JackZhouCn/JZLocationConverter">JZLocationConverter</a>。</p>

<h3>iOS系统中坐标系的使用</h3>

<p>iOS（9.0）中的关于地图和位置的接口中有些用的是WGS-84坐标，有的使用的是GCJ-02坐标。比如定位用户位置的时候我们使用的两种方法：</p>

<ul>
<li>设置MKMapView中的<code>showsUserLocation = YES</code>，然后在<code>- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation</code>方法中获得的坐标是GCJ-02坐标。</li>
<li>通过CLLocationManager的<code>startUpdatingLocation</code>方法，并在<code>- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations</code>方法中获得的坐标是WGS-84坐标。</li>
</ul>


<p>其实在使用iOS的地图应用的时候，只要使用的是非大陆的ip地址（国外用户或者国内用户通过国外代理），使用的都将是准确的WGS-84坐标和准确的地图。但是当在大陆地区使用是，苹果使用的是搞得的地图服务，得到的坐标也都是GCJ-02坐标。</p>

<p>下面具体说一下在下面三个接口中经纬度坐标的使用，下面的内容都是针对iOS中高德地图的使用。</p>

<h4>MKMapView</h4>

<p>通过加到MMKMapView中的UIGestureRecognizer的<code>locationInVieww:</code>获得手势在地图上的CGPoint，然后通过MKMapView的<code>convertPoint:toCoordinateFromView:</code>方法得到的经纬度坐标是GCJ-02坐标，使用的也是高德地图，所以在<code>addAnnotation:</code>等操作的时候，不用进行坐标转换。</p>

<h3>CLLocationManager</h3>

<p>即使使用的是高德地图，CLLocationManager返回的坐标也是WGS-84坐标，所以在定位用户位置的时候是有偏差的，需要我们进行坐标转换。</p>

<h3>CLGeoCoder</h3>

<p>在进行经纬度坐标和地址描述转换的时候，我们需要CLGeoCoder中的转换方法：</p>

<ul>
<li><p><code>- (void)geocodeAddressString:(NSString *)addressString completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法没有问题，输入地址的描述，返回该地址对应的GCJ-02坐标（高德地图）。</p></li>
<li><p><code>- (void)reverseGeocodeLocation:(CLLocation *)location completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法有问题：当我们直接将得到的GCJ-02坐标传给该接口之后，该接口不能得到正确的地址，而且返回的坐标和输入的坐标有较大的差距，经试验，该返回的坐标是输入坐标经过<code>wgs84ToGcj02:</code>转换之后的坐标，所以，解决方案如下：
  将得到的坐标先经过<code>gcj02ToWgs84</code>转换成WGS-84坐标，传给接口，返回正确的地址，然后将地址坐标通过<code>wgs84ToGcj02</code>转换之后进行使用。</p></li>
</ul>


<h3>其它系统中用的坐标系</h3>

<p>最近在抓取<a href="http://www.hzbus.cn">hzbus.cn</a>网站中的一些数据时发现：该坐标不是我们前面提到的各种坐标。原来该网站使用的是<a href="http://www.mountor.cn/rjcp_377.html">蒙特的GIS引擎</a>。通过试验各种接口，发现其坐标应该是连续<strong>两次</strong>将WGS-84坐标进行<code>wgs84ToGcj02</code>转换得到的，<strong>两次</strong>。所以将其坐标经过<code>gcj02ToWgs84</code>转换成真正的GCJ-02坐标在iOS的高德地图中使用。</p>

<h3>参考</h3>

<ul>
<li>这一片文章的结论和我的结论一致，（除了GeoCoding外）：<a href="http://blog.it985.com/7728.html">iOS 火星坐标相关整理及解决方案汇总</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775121">火星坐标系统简介</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775267">google map 的地图偏移 火星坐标</a>
*<a href="http://blog.csdn.net/coolypf/article/details/8686588">地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775183">WGS84坐标转火星坐标（iOS篇）</a></li>
<li>各种坐标体系之间的转换，参考：<a href="http://blog.csdn.net/wildboy2001/article/details/12031351">WGS84、Web墨卡托、火星坐标、百度坐标互转</a></li>
<li><a href="http://blog.csdn.net/swingpyzf/article/details/16972351">IOS LocationManager定位国内偏移，火星坐标(GCJ-02)解决方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https在ios客户端的objective-c实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c/"/>
    <updated>2015-12-30T21:23:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c</id>
    <content type="html"><![CDATA[<p>ios通过NSURLSession进行网络请求，参考另一篇博客<a href="http://hongchaozhang.github.io/blog/2015/11/29/ios-network-request/">ios进行网络请求</a>。</p>

<p>在开发阶段，server端我们会用self-signed证书（省钱啊！）。正因为不是第三方机构认证的证书，所以客户端都会报警告。我们需要对此进行处理（参考<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECNSURLSESSION">NSURLSession in Apple Tech Note</a>和<a href="http://stackoverflow.com/questions/19507207/how-do-i-accept-a-self-signed-ssl-certificate-using-ios-7s-nsurlsession-and-its">How do I accept a self-signed SSL certificate using iOS 7&rsquo;s NSURLSession and its family of delegate methods for development purposes?</a>）:</p>

<!-- more -->


<blockquote><p>NSURLSession allows you to customize HTTPS server trust evaluation by implementing the <code>-URLSession:didReceiveChallenge:completionHandler:</code> delegate method. To customize HTTPS server trust evaluation, look for a challenge whose protection space has an authentication method of <code>NSURLAuthenticationMethodServerTrust</code>. For those challenges, resolve them as described below. For other challenges, the ones that you don&rsquo;t care about, call the completion handler block with the <code>NSURLSessionAuthChallengePerformDefaultHandling</code> disposition and a NULL credential.</p>

<p>When dealing with the <code>NSURLAuthenticationMethodServerTrust</code> authentication challenge, you can get the trust object from the challenge&rsquo;s protection space by calling the <code>-serverTrust</code> method. After using the trust object to do your own custom HTTPS server trust evaluation, you must resolve the challenge in one of two ways:</p>

<ul>
<li>If you want to deny the connection, call the completion handler block with the <code>NSURLSessionAuthChallengeCancelAuthenticationChallenge</code> disposition and a NULL credential.</li>
<li>If you want to allow the connection, create a credential from your trust object (using <code>+[NSURLCredential credentialForTrust:]</code>) and call the completion handler block with that credential and the <code>NSURLSessionAuthChallengeUseCredential</code> disposition.</li>
</ul>
</blockquote>

<p>说了这么多，代码在下面的delegate中实现：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">session</span> <span class="nf">didReceiveChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">challenge</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURLSessionAuthChallengeDisposition</span><span class="p">,</span> <span class="bp">NSURLCredential</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">))</span><span class="nv">completionHandler</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">authenticationMethod</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">NSURLAuthenticationMethodServerTrust</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 3</span>         <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">host</span> <span class="nl">isEqualToString</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">domaintoverride</span><span class="p">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;])</span> <span class="p">{</span>
<span class="lineno"> 4</span>             <span class="bp">NSURLCredential</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">credential</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">];</span>
<span class="lineno"> 5</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeUseCredential</span><span class="p">,</span><span class="n">credential</span><span class="p">);</span>
<span class="lineno"> 6</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno"> 7</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
<span class="lineno"> 8</span>         <span class="p">}</span>
<span class="lineno"> 9</span>     <span class="p">}</span>
<span class="lineno">10</span> <span class="p">}</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generics in Objective-c]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c/"/>
    <updated>2015-12-22T13:18:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/649483/is-there-any-way-to-enforce-typing-on-nsarray-nsmutablearray-etc">Is there any way to enforce typing on NSArray, NSMutableArray, etc.?</a></p>

<p>参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a></p>

<p>随着Xcode7的发布，苹果实现了collection类（NSArray，NSDictionary，NSSet）的generics功能。</p>

<!-- more -->


<p>以后，可以这样定义Array了：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">MyClass</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">],</span> <span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span></code></pre></div></p>

<p>但是，我们仍然可以在Array中加入非MyClass类型的实例，此时xcode会报出警告，但是不会报错，程序仍然可以运行。所以需要我们在写程序时去除所有的警告。</p>

<p>Xcode的提示也会帮助我们避免这些警告：当你试图add一个元素到Array中时，Xcode会提示其中元素的类型<code>void addObject:(nonnull MyClass *)</code>；如果没有用Generics，Xcode的提示是<code>void addObject:(nonnull id)</code>。</p>

<p>但是这个可以给我们带来一个明显的好处：</p>

<p>我们只要看到定义，就能知道其中的元素类型，而不用全局搜索代码，看往其中加入了什么。就冲这一点，就足以让我们毫不犹豫地使用了。</p>

<p>更多的介绍和Generics的局限，请参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Propety, Instance Variable and @synthesize]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize/"/>
    <updated>2015-12-19T15:17:41+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize</id>
    <content type="html"><![CDATA[<p>这一段时间，在对自己不是很了解的代码进行重构，重新了解了一下Property、Instance Variable和@synthesize，总结一下。</p>

<p>首先需要明白一点：Property和@synthesize是让编译器帮助我们做一些规律性的工作。</p>

<h3>如果没有Property</h3>

<p>如果没有Property，我们可以这样实现Instance Variable的accessor（getter和setter），示例代码如下：</p>

<!-- more -->


<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 4</span>     <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 5</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">PropertyTester</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">12</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">testString</span> <span class="p">{</span>
<span class="lineno">13</span>   <span class="k">return</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">14</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">15</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setTestString</span><span class="p">:(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">stringValue</span> <span class="p">{</span>
<span class="lineno">16</span>   <span class="n">testString</span> <span class="o">=</span> <span class="n">stringValue</span><span class="p">;</span>
<span class="lineno">17</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">18</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">test</span> <span class="p">{</span>
<span class="lineno">19</span>   <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span> <span class="n">proeprty</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
<span class="lineno">20</span>   <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">21</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">22</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">23</span> 
<span class="lineno">24</span> 
<span class="lineno">25</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">26</span> 
<span class="lineno">27</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<h3>有了Property</h3>

<p>眼看着Instance Variable及其getter和setter函数是如此有规律，于是Property出现了。</p>

<p>Property可以告诉编译器：我声明了一个Property，名字叫做<code>propertyName</code>，你帮我声明一个Instance Variable <code>_propertyName</code>，并帮助我实现其getter和setter函数。于是，上述代码，我们可以写成：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">PropertyTester</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">12</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">test</span> <span class="p">{</span>
<span class="lineno">13</span>   <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span> <span class="n">proeprty</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
<span class="lineno">14</span>   <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">15</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> 
<span class="lineno">18</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">19</span> 
<span class="lineno">20</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">21</span> 
<span class="lineno">22</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>看看，是不是简单了很多。</p>

<h3>Auto Synthesize</h3>

<p>其实在上述使用Property的代码中，编译器还帮助我们做了一件事情：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="k">@synthesize</span> <span class="n">testString</span> <span class="o">=</span> <span class="n">_testString</span><span class="p">;</span></code></pre></div></p>

<p>从Xcode 4.4和LLVM Compiler 4.0起，有了<strong>auto synthesize</strong>，即@synthesize被更改为默认使用。因此，大多数情况下，你只需要 @property 指令，编译器将为你关心其它的事情。对，是“大多数”，因为在某些情况下，不会进行auto synthesize 。比如，对于上述代码，如果我打算自己实现getter函数：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">PropertyTester</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">10</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">testString</span> <span class="p">{</span>
<span class="lineno">11</span>   <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno">12</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">13</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">test</span> <span class="p">{</span>
<span class="lineno">14</span>   <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span> <span class="n">proeprty</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
<span class="lineno">15</span>   <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">16</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">17</span> 
<span class="lineno">18</span> 
<span class="lineno">19</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span></code></pre></div></p>

<p>没有任何问题。</p>

<p>如果我再试图加入setter函数：</p>

<p><div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 3</span> <span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">PropertyTester</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">testString</span> <span class="p">{</span>
<span class="lineno"> 9</span>   <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno">10</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setTestString</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">testString</span> <span class="p">{</span>
<span class="lineno">12</span>   <span class="n">_testString</span> <span class="o">=</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">13</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">14</span> <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">test</span> <span class="p">{</span>
<span class="lineno">15</span>   <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span> <span class="n">proeprty</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
<span class="lineno">16</span>   <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="lineno">17</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="lineno">18</span> 
<span class="lineno">19</span> 
<span class="lineno">20</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">21</span> 
<span class="lineno">22</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span></code></pre></div></p>

<p>编译器会报错：</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">use of undefined identifier &amp;lsquo;_testString&#39;。</code></pre></div></p>

<p>为什么呢？</p>

<p>因为此时auto synthesize没有工作。编译器认为：既然你同时手动接管了getter和setter的实现，那么我就什么也不管了，Instance Variable你也自己声明并起个名字吧。</p>

<p>总结一下auto synthesize不会工作的几种情况（参考<a href="http://stackoverflow.com/questions/19784454/when-should-i-use-synthesize-explicitly">When should I use @synthesize explicitly?</a>）：</p>

<ul>
<li><p>readwrite property with custom getter and setter</p>

<p>  when providing both a getter and setter custom implementation, the property won&rsquo;t be automatically synthesized</p></li>
<li><p>readonly property with custom getter</p>

<p>  when providing a custom getter implementation for a readonly property, this won&rsquo;t be automatically synthesized</p></li>
<li><p>@dynamic</p>

<p>  when using @dynamic propertyName, the property won&rsquo;t be automatically synthesized (pretty obvious, since @dynamic and @synthesize are mutually exclusive).</p>

<p>  @synthesize will generate getter and setter methods for your property. @dynamic just tells the compiler that the getter and setter methods are implemented not by the class itself but somewhere else (like the superclass)</p></li>
<li><p>properties declared in a @protocol</p>

<p>  when conforming to a protocol, any property the protocol defines won&rsquo;t be automatically synthesized</p></li>
<li><p>properties declared in a category</p>

<p>  this is a case in which the @synthesize directive is not automatically inserted by the compiler, but this properties cannot be manually synthesized either. While categories can declare properties, they cannot be synthesized at all, since categories cannot create ivars. For the sake of completeness, I&rsquo;ll add that it&rsquo;s still possible to fake the property synthesis using the Objective-C runtime.</p>

<p>  Actually, <strong>categorie</strong> is best used for adding capability to code you do not own and cannot change. Adding properties via categories is deprecated.</p></li>
<li><p>overridden properties (new since clang-600.0.51, shipping with Xcode 6, thanks Marc Schlüpmann)</p>

<p>  when you override a property of a superclass, two ways for you:</p>

<ul>
<li>explicitly synthesize it with a different instance variable name from super class.</li>
<li>@dynamic the property to tell the compiler that I will use the getter and setter methods in the super class.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios Coding Best Practice]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/17/ios-coding-best-practice/"/>
    <updated>2015-12-17T10:49:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/17/ios-coding-best-practice</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li>Use forward declarations</li>
<li>Move variable declaration out of header</li>
<li>Cleanup duplication in import</li>
<li>Remove private method declaration in implementation files</li>
<li>Move protocol definition to separate header to aviod unnecessary cross reference</li>
<li>Freqently monitor warnings and static analyzer warnings in your component. Usually it is a good idea to fix it.</li>
<li>Removing unused resources</li>
<li>Delegate objects should not be retained when doing so would create a retain cycle.</li>
<li>import Objective-C/Objective-C++ headers, and #include C/C++ headers.</li>
<li>Don&rsquo;t @throw Objective-C exceptions, but you should be prepared to catch them from third-party or OS calls.</li>
<li>Use nil checks for logic flow only.</li>
<li>Don&rsquo;t initialize variables to 0 or nil in the init method; it&rsquo;s redundant.</li>
<li>Instance Variables In Headers Should Be @private

<ul>
<li>Instance variables should typically be declared in implementation files or auto-synthesized by properties. When ivars are declared in a header file, they should be marked @private.</li>
</ul>
</li>
<li>One space should be used between the - or + and the return type, and no spacing in the parameter list except between parameters.</li>
</ul>

]]></content>
  </entry>
  
</feed>
