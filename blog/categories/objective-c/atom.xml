<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2023-09-15T23:57:03+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SightReading(视奏)应用开发知识点总结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2021/03/01/summarize-of-sight-reading-app-developping/"/>
    <updated>2021-03-01T14:39:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2021/03/01/summarize-of-sight-reading-app-developping</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">数据持久化</a>

<ul>
<li><a href="#%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%9D%E5%AD%98%E5%92%8C%E8%AF%BB%E5%8F%96">文件的保存和读取</a></li>
<li><a href="#nsdefault%E4%BF%9D%E5%AD%98%E6%A0%87%E7%AD%BE%E4%BF%A1%E6%81%AF">NSDefault：保存标签信息</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
<li><a href="#%E6%92%AD%E6%94%BE%E8%8A%82%E6%8B%8D%E5%99%A8%E5%A3%B0%E9%9F%B3">播放节拍器声音</a>

<ul>
<li><a href="#%E9%80%9A%E8%BF%87avfoundation%E6%92%AD%E6%94%BE%E5%A3%B0%E9%9F%B3">通过AVFoundation播放声音</a></li>
<li><a href="#%E8%8A%82%E6%8B%8D%E5%99%A8%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82">节拍器音量调节</a></li>
</ul>
</li>
<li><a href="#navigationcontroller%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E9%80%92">navigationController的使用和数据的传递</a>

<ul>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
<li><a href="#photokit%E7%9A%84%E4%BD%BF%E7%94%A8">PhotoKit的使用</a>

<ul>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
<li><a href="#alert-view">Alert View</a></li>
<li><a href="#uiimage">UIImage</a>

<ul>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
<li><a href="#%E5%8F%AF%E7%BC%96%E8%BE%91%E7%9A%84uitableview">可编辑的UITableView</a></li>
<li><a href="#calayer--cashapelayer--core-graphics">CALayer &amp; CAShapeLayer &amp; Core Graphics</a></li>
<li><a href="#%E9%9F%B3%E4%B9%90%E6%9C%AF%E8%AF%AD%E8%8B%B1%E8%AF%AD">音乐术语英语</a></li>
<li><a href="#swift%E4%B8%AD%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95designatedconvenience">swift中构造方法designated，convenience</a>

<ul>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
<li><a href="#%E7%AC%94%E8%AE%B0%E7%BB%98%E5%88%B6%E5%8A%9F%E8%83%BD">笔记绘制功能</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-数据持久化" name="数据持久化"></a></p>

<h2>数据持久化</h2>

<p><a id="markdown-文件的保存和读取" name="文件的保存和读取"></a></p>

<h3>文件的保存和读取</h3>

<ul>
<li>Json文件：每个乐谱页对应一个Json文件。文件保存乐谱每小节的大小和位置信息，以及乐谱的基本信息，包括每小节节拍数和用户设置的速度和Mask偏移量。</li>
<li>png文件：每个乐谱都有一个乐谱图片，如果用户做了笔记，还有一个笔记图片。</li>
</ul>


<p>保存文件的代码如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func getRootPath() -&gt; String? {
</span><span class='line'>    return NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func saveImageFile() {
</span><span class='line'>    if let rootPath = Utility.getRootPath(),
</span><span class='line'>        let imageName = getFileName() {
</span><span class='line'>        let imagePath = &ldquo;(rootPath)/(imageName).png&rdquo;
</span><span class='line'>        print(&ldquo;image path: (imagePath)&rdquo;)
</span><span class='line'>        if let image = imageView.image, let imageData = image.pngData() {
</span><span class='line'>            FileManager.default.createFile(atPath: imagePath, contents: imageData, attributes: nil)
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func saveJsonFile() {
</span><span class='line'>    if let rootPath = Utility.getRootPath(),
</span><span class='line'>        let jsonFileName = getFileName() {
</span><span class='line'>        let jsonPath = &ldquo;(rootPath)/(jsonFileName).json&rdquo;
</span><span class='line'>        print(&ldquo;image path: (jsonPath)&rdquo;)
</span><span class='line'>        let jsonDic: [String: Any] = [basicInfoKey: &lt;a href=""&gt;String: String&lt;/a&gt;, barFramesKey: barFrames]
</span><span class='line'>        if let jsonData = try? NSKeyedArchiver.archivedData(withRootObject: jsonDic, requiringSecureCoding: false) {
</span><span class='line'>            FileManager.default.createFile(atPath: jsonPath, contents: jsonData, attributes: nil)
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>读取文件的代码如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func loadJsonFile() {
</span><span class='line'>    if let rootPath = Utility.getRootPath(),
</span><span class='line'>        let jsonName = navigationItem.title,
</span><span class='line'>        let jsonData = FileManager.default.contents(atPath: &ldquo;(rootPath)/(jsonName).json&rdquo;),
</span><span class='line'>        let jsonObjectAny = NSKeyedUnarchiver.unarchiveObject(with: jsonData),
</span><span class='line'>        let jsonObject = jsonObjectAny as? [String: Any] {
</span><span class='line'>        if let sheetBasicInfo = jsonObject[basicInfoKey] as? [String: String] {
</span><span class='line'>            self.sheetBasicInfo = sheetBasicInfo
</span><span class='line'>        }
</span><span class='line'>        if let barFrames = jsonObject[barFramesKey] as? [Int: CGRect] {
</span><span class='line'>            self.barFrames =  barFrames
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func loadSheetImage(with imageName: String) {
</span><span class='line'>    if let rootPath = Utility.getRootPath(),
</span><span class='line'>        let sheetImage = UIImage(contentsOfFile: &ldquo;(rootPath)/(imageName).png&rdquo;) {
</span><span class='line'>        sheetImageView.image = sheetImage
</span><span class='line'>        noteImageView.image = UIImage(contentsOfFile: &ldquo;(rootPath)/(imageName)(noteImageSubfix).png&rdquo;)
</span><span class='line'>        layoutImageView()
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p><a id="markdown-nsdefault保存标签信息" name="nsdefault保存标签信息"></a></p>

<h3>NSDefault：保存标签信息</h3>

<pre><code>UserDefaults.standard.setValue(allTags, forKey: allTagsKey)
let allTags = UserDefaults.standard.value(forKey: allTagsKey)
</code></pre>

<p><a id="markdown-参考" name="参考"></a></p>

<h3>参考</h3>

<ul>
<li><a href="https://www.jianshu.com/p/d1c621631f7e">iOS数据本地持久化方法总结</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1129341">iOS应用数据存储（数据持久化）的常用方式</a></li>
<li><a href="https://www.jianshu.com/p/fad66bae5484">iOS 将对象序列化成json，写入本地文件</a></li>
</ul>


<p><a id="markdown-播放节拍器声音" name="播放节拍器声音"></a></p>

<h2>播放节拍器声音</h2>

<p><a id="markdown-通过avfoundation播放声音" name="通过avfoundation播放声音"></a></p>

<h3>通过AVFoundation播放声音</h3>

<pre><code>if let audioUrl = Bundle.main.url(forResource: "FirstMeter", withExtension: "wav", subdirectory: "Resource.bundle")  {
    AudioServicesCreateSystemSoundID(audioUrl as CFURL, &amp;firstMeterId)
}
AudioServicesPlaySystemSound(self.firstMeterId)
</code></pre>

<p><a id="markdown-节拍器音量调节" name="节拍器音量调节"></a></p>

<h3>节拍器音量调节</h3>

<p>在设置中，如果“声音->铃声和警报”下面的“跟随按钮”没有打开，那么通过<code>AudioServicesPlaySystemSound()</code>播放的声音就会始终用一个固定的音量播放，其它声音API播放的声音（比如<code>AVAudioPlayer</code>）会跟随系统音量变化音量大小。</p>

<blockquote><p>In Settings app, Sounds->RINGER AND ALERTS, if &lsquo;Change with Buttons&rsquo; is set to Off, then sounds using AudioServicesPlaySystemSound() will always be played at a fixed volume (yet other sound API&rsquo;s such as AVAudioPlayer will respect the volume of the device).</p></blockquote>

<p><a id="markdown-navigationcontroller的使用和数据的传递" name="navigationcontroller的使用和数据的传递"></a></p>

<h2>navigationController的使用和数据的传递</h2>

<p>通过下面两种方法进行ViewController的弹出
<code>
let playVC = storyBoard.instantiateViewController(identifier: "Play")
playVC.navigationItem.title = filtedFileNames[indexPath.row]
navigationController?.pushViewController(playVC, animated: true)
</code>
或者
<code>
let colorPickerVC = UIColorPickerViewController()
colorPickerVC.selectedColor = brushColorButton.selectedColor
colorPickerVC.delegate = self
present(colorPickerVC, animated: true, completion: nil)
</code>
通过delegate进行目标ViewController到源ViewController的方法调用和数据传递，源ViewControler可以直接设置目标ViewController的属性进行数据传递。</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h3>参考</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/30618172/how-to-send-data-back-by-popviewcontrolleranimated-for-swift">How to send data back by popViewControllerAnimated for Swift?</a></li>
<li><a href="https://www.jianshu.com/p/319cbc53f0ba">iOS导航控制器——UINavigationController使用详解</a></li>
<li><a href="https://blog.csdn.net/liuyinghui523/article/details/62036465">一篇较为详细的 Storyboard使用方法 总结</a></li>
</ul>


<p><a id="markdown-photokit的使用" name="photokit的使用"></a></p>

<h2>PhotoKit的使用</h2>

<p>需要在info.plist里面设置<code>NSPhotoLibraryUsageDescription</code>属性，设置在获取权限的时候显示给用户的弹窗中显示的内容。</p>

<p>检查权限状态：
<code>
private func requestPrivilegeAndLoadPhotos() {
    let status = PHPhotoLibrary.authorizationStatus()
    if status == .authorized {
        loadPhotos()
    } else {
        PHPhotoLibrary.requestAuthorization { (status) in
            if status == .authorized {
                self.loadPhotos()
                DispatchQueue.main.async {
                    self.collection.reloadData()
                }
            } else {
                // use not grant the privilege
            }
        }
    }
}
</code></p>

<p>如果用户给了访问相册的权限，通过下面的方法加载所有图片信息：
<code>
private func loadPhotos() {
    let allPhotosOptions = PHFetchOptions()
    allPhotosOptions.sortDescriptors = [NSSortDescriptor(key: "creationDate", ascending: true)]
    allPhotos = PHAsset.fetchAssets(with: .image, options: allPhotosOptions)
}
</code></p>

<p>通过下面方法将所有图片信息显示在collection列表中：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
</span><span class='line'>    return allPhotos.count
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
</span><span class='line'>    if let cell = collection.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath) as? PhotoCollectionCell {
</span><span class='line'>        let assert = allPhotos.object(at: indexPath.item)
</span><span class='line'>        PHImageManager.default().requestImage(for: assert, targetSize: CGSize(width: photoCollectionWH, height: photoCollectionWH), contentMode: .aspectFill, options: .none) { (image, dic) in
</span><span class='line'>            if let image = image {
</span><span class='line'>                cell.imageView.image = image
</span><span class='line'>            }
</span><span class='line'>        }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    return cell
</span><span class='line'>} else {
</span><span class='line'>    return collection.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath)
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p>通过下面方法，将用户选择的图片传给delegate处理（delegate可以是源ViewController）：
<code>
func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    print("item: \(indexPath.item)")
    let assert = allPhotos.object(at: indexPath.item)
    PHImageManager.default().requestImage(for: assert, targetSize: CGSize(width: assert.pixelWidth, height: assert.pixelHeight), contentMode: .aspectFill, options: .none) { (image, dic) in
        if let image = image {
            self.delegate?.set(image: image, and: nil)
        }
    }
}
</code>
<a id="markdown-参考" name="参考"></a></p>

<h3>参考</h3>

<ul>
<li><a href="https://developer.apple.com/documentation/photokit">官方文档：PhotoKit</a></li>
<li><a href="https://www.raywenderlich.com/11764166-getting-started-with-photokit">Getting Started with PhotoKit</a></li>
</ul>


<p><a id="markdown-alert-view" name="alert-view"></a></p>

<h2>Alert View</h2>

<p><a href="https://learnappmaking.com/uialertcontroller-alerts-swift-how-to/">Displaying Alerts with UIAlertController in Swift</a></p>

<p><a id="markdown-uiimage" name="uiimage"></a></p>

<h2>UIImage</h2>

<p>下面两个图片加载方法对cache的运用是不一样的：
<code>
+ (UIImage *)imageNamed:(NSString *)name: use cached images
+ (UIImage *)imageWithContentsOfFile:(NSString *)path: skip cached images and read data directly from file
</code></p>

<p><a id="markdown-参考" name="参考"></a></p>

<h3>参考</h3>

<p><a href="https://medium.com/@maximbilan/ios-uiimage-cache-92563c3ae3c2">iOS UIImage Cache</a></p>

<p><a id="markdown-可编辑的uitableview" name="可编辑的uitableview"></a></p>

<h2>可编辑的UITableView</h2>

<p>通过实现下面方法保证每个cell支持左滑操作：
<code>
func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -&gt; Bool {
    return true
}
</code></p>

<p>通过实现下面的方法，左滑之后显示两个按钮: Edit Tags和Delete
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -&gt; [UITableViewRowAction]? {
</span><span class='line'>    let deleteAction = UITableViewRowAction(style: .destructive, title: &ldquo;Delete&rdquo;) { (action, indexPath) in
</span><span class='line'>        self.deleteItem(at: indexPath)
</span><span class='line'>    }
</span><span class='line'>    let editAction = UITableViewRowAction(style: .default, title: &ldquo;Edit Tags&rdquo;) { (action, indexPath) in
</span><span class='line'>        self.editTags(for: indexPath)
</span><span class='line'>    }
</span><span class='line'>    editAction.backgroundColor = UIColor(displayP3Red: 60/255, green: 148/255, blue: 1.0, alpha: 1.0)
</span><span class='line'>    deleteAction.backgroundColor = .red&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;return [deleteAction, editAction]
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p><a id="markdown-calayer--cashapelayer--core-graphics" name="calayer--cashapelayer--core-graphics"></a></p>

<h2>CALayer &amp; CAShapeLayer &amp; Core Graphics</h2>

<p>这一块的内容太多，希望有时间可以单独总结一下。</p>

<p><a id="markdown-音乐术语英语" name="音乐术语英语"></a></p>

<h2>音乐术语英语</h2>

<p><a href="https://zhuanlan.zhihu.com/p/35999407">音乐术语英文名称汇总</a></p>

<p><a id="markdown-swift中构造方法designatedconvenience" name="swift中构造方法designatedconvenience"></a></p>

<h2>swift中构造方法designated，convenience</h2>

<p>官方文档中有如下描述：</p>

<ol>
<li>子类designated构造方法中必须调用父类的designated构造方法。</li>
<li>convenience构造方法中必须调用当前类的构造方法。</li>
<li>convenience构造方法归根结底要调用到designated构造方法。</li>
</ol>


<p><img src="/images/swift_init_method.webp" alt="swift init methods" /></p>

<p><a id="markdown-参考" name="参考"></a></p>

<h3>参考</h3>

<ul>
<li><a href="https://www.jianshu.com/p/e2cce123a5af">Swift之init构造方法</a></li>
</ul>


<p><a id="markdown-笔记绘制功能" name="笔记绘制功能"></a></p>

<h2>笔记绘制功能</h2>

<p>通过第三方库<a href="https://github.com/e7711bbear/ATSketchKit">STSketchKit</a>实现笔记功能支持Undo/Redo操作。官方介绍如下：</p>

<blockquote><p>ATSketchKit is a drawing / sketching framework for iOS written in Swift.</p>

<p>It can be used as the foundation for an artistic app, a simple signature feature or more inteligent graph designing app.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在swift和Objc之间转换的一些想法]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift/"/>
    <updated>2018-11-13T10:50:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在工作中我们有时候需要在swift和objc之间进行转换，这时候有没有一些工具可以帮助我们呢？</p>

<blockquote><p>当然，大部分时候，我们不需要转换，因为swift和objc的类和方法可以互相暴露给对方。</p></blockquote>

<h2>objc转换成swfit</h2>

<p>搜索了一下，找到了两个工具可以做这个事情：</p>

<h3><a href="https://github.com/yahoojapan/objc2swift">objc2swift</a></h3>

<p>objc2swift是雅虎日本的一个工具，支持在线转换。<a href="https://github.com/dzenbot/XCSwiftr/blob/master/README.md">XCSwiftr</a>就是一个基于objc2swift的xcode插件，通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>进行管理安装，可以在Xcode里面进行objc到swift的转换。但是xcode自从8.0开始就不支持插件了。</p>

<blockquote><p>插件(plugin)只在xcode 8.0之前的版本才支持。从8.0开始，插件就不再支持，但是引入了扩展(extension)。扩展和插件不同的一点是：扩展在独立的进程里面运行，所以扩展的崩溃不会影响到xcode，但是插件的崩溃，则会导致xcode也崩溃。估计插件崩溃导致的xcode崩溃的锅都是Apple来背，Apple很不爽，就让xcode跟插件分开在不同的进程中运行。</p></blockquote>

<p>objc2swift的转换效果很一般。</p>

<p>objc源代码：</p>

<pre><code>@interface MyClass: NSObject

- (void)sayHelloTo:(NSString*)person;

@end

@implementation MyClass

- (void)sayHelloTo:(NSString*)person {
    NSLog([NSString stringWithFormat:@"Hello, %@.", person]);
    [self performSelector:@selector(test)];

}

- (void)test {
}

@end
</code></pre>

<p>转换之后：</p>

<pre><code>class MyClass: NSObject {
    func sayHelloTo(person: String) {
        print("Hello, \(person).")
        self.performSelector("test")
    }

    func test() {

    }
}
</code></pre>

<p>几个问题：</p>

<ol>
<li>方法名称没有按照swift的习惯改写：应该为<code>sayHello(to person: String)</code>，而不是<code>sayHelloTo(person: String)</code>。</li>
<li><code>performSelector:</code>方法完全转换错误：方法名称错误，应该为<code>perform(_ aSelector: Selector!)</code>，而且参数也错误，不应该为<code>String</code>类型，应该为<code>Selector</code>类型。</li>
<li><code>test</code>方法前面没有加上<code>@objc</code>，所以不能作为<code>#selector</code>的参数。</li>
</ol>


<h3><a href="https://objectivec2swift.com/#/home">Swiftify</a></h3>

<p>swiftify也支持在线转换，而且转换效果明显好于objc2swift。如果愿意花钱，swiftify还可以支持很多功能，包括xcode扩展（注意，这里是“扩展extension”，不是“插件plugin”）、finder扩展、整个工程的转换、离线转换等。</p>

<p><img src="/images/swiftify.webp" alt="swiftify.webp" /></p>

<p>同样用上述objc源代码，转换之后为：</p>

<pre><code>class MyClass: NSObject {
    func sayHello(to person: String?) {
        print("Hello Swift, Goodbye Obj-C!")
        perform(#selector(MyClass.test))
    }

    @objc func test() {
    }
}
</code></pre>

<h2>swift转换成objc</h2>

<p><a href="https://objectivec2swift.com/#/home">Swiftify</a>的作者写了一篇博客<a href="https://www.quora.com/How-can-you-convert-Swift-to-Objective-C">How can you convert Swift to Objective-C?</a>，说明了这个问题：</p>

<p>原文是：</p>

<blockquote><p>When speaking about idiomatic Swift, converting method implementations from Swift to Objective-C is the task that cannot be solved for all cases. As you might imagine, many “modern” Swift features do not have any counterparts in Objective-C and thus cannot be converted without a human brain :)</p></blockquote>

<p>结论就是：由于swift有很多objc没有的语言特性，所以swift到objc无法完成自动转换。</p>

<p>但是转换之后的objc的头文件可以从build in “Generated Interface” ([ProjectName]-Swift.h)里面找到，拷贝出来，稍作修改即可。但是仅限于swift暴漏给objc的接口和属性。那些没有暴漏给objc的接口和属性，就需要手动去转换啦。</p>

<blockquote><p>[ProjectName]-Swift.h如果不能通过cmd+shift+O找到，可以从引用这个头文件的objc文件中通过“go to declaration"找到。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理多个手势之间的关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures/"/>
    <updated>2017-03-03T13:11:55+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures</id>
    <content type="html"><![CDATA[<ol>
<li>可以为同一个view添加两个相同类型的手势吗？比如添加两个<code>UITapGestureRecognizer</code>到同一个view。</li>
<li>如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</li>
<li>如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</li>
</ol>


<!-- more -->


<p><br></p>

<p>单个手势的响应过程参考<a href="http://hongchaozhang.github.io/blog/2015/10/21/touch-event-in-ios/">iOS中的触控事件机制</a>。但是上面几个问题需要考虑多个手势之间的关系，超出了上面文章的讨论范围。下面，我们就来讨论一下上面几个问题。</p>

<h3>1. 可以为同一个view添加两个相同类型的手势吗？比如添加两个UITapGestureRecognizer到同一个view。</h3>

<p>可以为view添加多个不同的<code>UIGestureRecognizer</code>，比如pan和tap，可以同时起作用，但是如果你想<strong>加入两个tap手势，第二个会将第一个手势覆盖</strong>。这个时候，至少需要为其中一个tap手势添加delegate，并实现下面的方法，为两个tap同时存在的情况返回true：</p>

<pre><code>optional public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -&gt; Bool
</code></pre>

<blockquote><p>returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture&rsquo;s delegate may return YES.</p></blockquote>

<h3>2. 如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</h3>

<p>如果两个手势之间没有识别上的困难，那么不用任何处理，比如tap和pan，但是如果有关系，比如single tap和double tap，rotate和pinch，这需要明确两者之间的关系。</p>

<p>如果不希望在double tap的同时触发两次single tap，需要在single tap的delegate中实现方法</p>

<pre><code>optional public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIGestureRecognizer) -&gt; Bool
</code></pre>

<p>这样，可以保证single tap会等待double tap失败之后再被触发。缺点是single tap反应迟钝。</p>

<p>如果希望在rotate的同时可以进行pinch，需要在pinch或者rotate的手势的delegate中实现方法：</p>

<pre><code>optional public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -&gt; Bool
</code></pre>

<p>这样，rotate和pinch就能同时被识别。</p>

<h3>3. 如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</h3>

<p><code>UIGestureRecognizerDelegate</code>中的方法并没有限制在同一个view之中，所以，不同view之间的手势关系与1和2的处理相同。</p>

<h3>注意</h3>

<p>如果为手势实现了delegate方法，那么<code>UIGestureRecognizer</code>里面的类似的方法将不再起作用。比如：</p>

<p>如果设置了</p>

<pre><code>singleTap.delegate = self.singleTapOnMapWidgetViewerGestureRecognizerDelegate
</code></pre>

<p>那么</p>

<pre><code>singleTap.require(toFail: doubleTap)
</code></pre>

<p>就不起作用了，必须通过<code>UIGestureRecognizerDelegate</code>里面的方法实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中Property和Method的可见性]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c/"/>
    <updated>2016-06-16T21:48:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c</id>
    <content type="html"><![CDATA[<ol>
<li>Objective-C里Category和Inheritence中的Property和Method的可见性.</li>
<li>Instance variable的可见性。</li>
</ol>


<!-- more -->


<h2>说明</h2>

<p>本来只想思考一下<em>Objective-C里Category和Inheritence中的Property和Method的可见性</em>，搜着搜着，主题有些变化，所以题目也改了。</p>

<p>这里只是一些来自参考博客的结论和自己测试得到的结论。</p>

<p>具体参考博客如下：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4869935/objective-c-private-vs-protected-vs-public">Objective-C - Private vs Protected vs Public</a></li>
<li><a href="http://stackoverflow.com/questions/12633627/expose-a-private-objective-c-method-or-property-to-subclasses">实现public、private和protected属性和方法</a></li>
<li><a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a></li>
<li><a href="http://bootstragram.com/blog/simulating-protected-modifier-with-objective-c/">Simulating protected properties and selectors in Objective-C</a></li>
</ul>


<p>自己的测试代码为：OCPlayground。</p>

<h2>结论</h2>

<h3>来自参考博客的结论</h3>

<ol>
<li>点操作(.)只和property有关和iVar没有关系。</li>
<li><code>-&gt;</code>操作只和iVar有关，和property无关。</li>
<li>ivar中的关键字<code>public</code>、<code>private</code>和<code>protected</code>只对ivar有效，表明的是ivar的可见性，默认<code>protected</code>。子类中想用继承来的ivar，需要使用->操作符，不能使用dot操作符（dot操作符只用于property）。实例中想用ivar，只能用具有<code>public</code>属性的ivar。</li>
</ol>


<h3>来自代码测试的结论</h3>

<h4>结论1</h4>

<p>We can use <code>@property</code> in Extension the same way as <em>.h</em> file of the class. Compiler can generate the setter and getter methods for us. But in Category, compiler will not generate the setter and getter methods for us, you need to implement them manually or by using <code>@dynamic</code> to tell the compiler that the setter and getter methods are implemented somewhere else.</p>

<p>The difference comes from the fact that instance variables can be added into Extension but not Category.</p>

<h4>结论2</h4>

<p>to define whether a category can use the extended class&rsquo;s property or method, just define whether the property or method is in one &ldquo;interface&rdquo; that the category can &ldquo;see&rdquo;.</p>

<h4>结论3</h4>

<p>visibility(<code>private</code>, <code>public</code>, <code>protected</code>) does not affect methods. methods are as good as public when visible to clients (and potential pitfalls/bugs when invisible to clients). instead, visibility affects instance variables.</p>

<h4>结论4</h4>

<p>The same priciple as Category: to define whether I can use a property or method (in super class), just define whether the property or method is in an &ldquo;@interface&rdquo; the context (where you are trying to use the property or method) can &ldquo;see&rdquo;.</p>

<p>One exception: <code>performSelector:</code> can run method that are not ready in compile time but ready in runtime. However there will be one warning from the compiler. You can dismiss the warning by declaring a method with the same name in the class in which you are coding, but will introduce another warning saying that &ldquo;Method definition for *** is not found&rdquo;.</p>

<h3>Protected method</h3>

<p>来自<a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a>的protected method的实现：</p>

<pre><code>/////// SuperClass.h
@interface SuperClass

@end

/////// SuperClass.m
@implementation SuperClass
- (void) protectedMethod
{}
@end

/////// SubClass.h
@interface SubClass : SuperClass
@end

/////// SubClass.m
@interface SubClass (Protected)
- (void) protectedMethod ;
@end

@implementation SubClass
- (void) callerOfProtectedMethod
{
  [self protectedMethod] ; // this will not generate warning
} 
@end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios MultiplePagesViewController usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage/"/>
    <updated>2016-03-27T16:58:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage</id>
    <content type="html"><![CDATA[<p>先上截图：</p>

<p><img src="/images/multiple_pages_view_controller_demo.gif" alt="multiple_pages_view_controller_demo.gif" /></p>

<p>demo地址：<a href="https://github.com/hongchaozhang/MultiplePagesViewControllerDemo.git">MultiplePagesViewControllerDemo</a></p>

<!-- more -->


<h3>demo解释</h3>

<p>首先，创建<code>MultiplePagesViewController</code>的实例，并将其和其view加入到需要的view controller 中：</p>

<pre><code>
[self.view addSubview:self.multiplePagesViewController.view];
[self addChildViewController:self.multiplePagesViewController];
</code></pre>

<p>其中，<code>self.multiplePagesViewController</code>对应的getter函数如下：</p>

<pre><code>
- (MultiplePagesViewController*)multiplePagesViewController {
    if (!_multiplePagesViewController) {
        _multiplePagesViewController = [[MultiplePagesViewController alloc] init];
        _multiplePagesViewController.view.frame = self.view.frame;
        _multiplePagesViewController.delegate = self;
    }

    return _multiplePagesViewController;
}
</code></pre>

<p>并且，在<code>viewDidLayoutSubviews</code>中重新调整view的大小，以解决转屏等问题：</p>

<pre><code>
- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];

    self.multiplePagesViewController.view.frame = self.view.frame;
}
</code></pre>

<p>然后，只需要将你的UIViewController的实例加入<code>self.multiplePagesViewController</code>就可以了：</p>

<pre><code>
- (void)addDefaultPageViewControllers {
    NSInteger vcCount = 3;
    for (NSInteger i = 0; i &lt; vcCount; i++) {
        SampleViewController *svc = [[SampleViewController alloc] initWithText:[NSString stringWithFormat:@"%ld", i]];
        [self.multiplePagesViewController addViewController:svc];
    }
}
</code></pre>

<p><code>MultiplePagesViewController</code>主要的两个接口如下：</p>

<pre><code>
/**
 *  add a new &lt;UIViewController*&gt; instance
 *
 *  @param viewController
 */
- (void)addViewController:(UIViewController*)viewController;

/**
 *  remove an existing view controller by index
 *
 *  @param viewControllerIndex
 */
- (void)removeViewController:(NSUInteger)viewControllerIndex;
</code></pre>

<p>另外，可以在<code>MultiplePagesViewController</code>的父view controller中实现下面接口，当切换page的时候做些其它事情，比如更新view controller的title信息等。</p>

<pre><code>
@protocol MultiplePagesViewControllerDelegate &lt;NSObject&gt;

- (void)pageChangedTo:(NSInteger)pageIndex;

@end
</code></pre>
]]></content>
  </entry>
  
</feed>
