<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2020-06-22T18:46:00+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Python解析XML格式文件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python/"/>
    <updated>2020-06-22T18:34:32+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Python基础教程</h2>

<p><a href="https://www.runoob.com/python/python-tutorial.html">python基础教程</a></p>

<h2>ElementTree</h2>

<p>ELementTree官方文档参考：<a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element">The ElementTree XML API</a></p>

<p>下面是一个例子：</p>

<pre><code class="python">from xml.etree import ElementTree as ET

# 读取xml文件
tree = ET.parse('gadm36_CHN_2.kml')
## 获取root节点
root = tree.getroot()

# 打印root节点的tag名称和所有的attribute
print root.tag, root.attrib

# 正常的xml文件的tag可能只是Placemark，这里是因为读进来的是一个kml文件
for placemark in root.iter('{http://www.opengis.net/kml/2.2}Placemark'):
    for simpleData in placemark.iter('{http://www.opengis.net/kml/2.2}SimpleData'):
        # 获取某一个attribute的值也可以可以使用simpleData.get('attribute name')
        print simpleData.attrib['name']
        if simpleData.attrib['name'] == 'NAME_2':
            cityName = simpleData.text
            # 创建一个tag为name的节点作为placemark的子节点
            nameEle = ET.SubElement(placemark, 'name')
            # 给新创建的节点的text属性赋值
            nameEle.text = cityName
            # 给placemark节点增加一个名为updated的attribute，其值为'yes'
            placemark.set('updated', 'yes')

# 将新修改的xml文件写入新的文件
tree.write('modifyChinaCity.kml')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[区域位置地理信息的获取、查看、和后期处理]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/05/29/quyu-bianjie-dili-weizhi-xinxi/"/>
    <updated>2020-05-29T16:53:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/05/29/quyu-bianjie-dili-weizhi-xinxi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>如果想展示一些基于地理位置信息的数据，可以考虑使用地图。比如：</p>

<p><img src="/images/%E5%8C%BA%E5%9F%9F%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B.gif" alt="区域男女比例" /></p>

<blockquote><p>注：上图是MicroStrategy产品效果。</p></blockquote>

<p>这需要在地图上显示指定区域的边界信息，比如中国国家边界信息，或者各省市的边界信息。</p>

<p>为此，首先要获得边界信息数据。下面就介绍一下我在获取中国各省边界信息的过程中用到的一些资源和工具。</p>

<h2>下载</h2>

<p><img src="/images/GADMDownload.jpg" alt="GADMDownload" /></p>

<p><a href="https://gadm.org/download_country_v3.html">GADM</a>可以下载的格式包括KMZ格式和SHP格式。</p>

<ol>
<li>KMZ格式是KML格式的压缩格式，需要用解压工具解压。</li>
<li>下载文件中中国各地区的名称都是英文名称，需要写脚本换成中文信息。</li>
<li>下载的中国各省没有包括台湾，需要手动下载台湾，整合起来。</li>
</ol>


<p>贴个我整合好的连结：<a href="/assets/resources/%E4%B8%AD%E5%9B%BD%E5%90%84%E7%9C%81%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90.zip">中国各省男女比例地图分析</a>。</p>

<h2>查看</h2>

<p><img src="/images/vscodemappreview.jpg" alt="vscodemappreview" /></p>

<p>在VSCode中使用插件VSCode Map Preview进行预览。但是该插件不支持SHP格式文件预览。</p>

<p><img src="/images/mapshaper.jpg" alt="mapshaper" /></p>

<p><a href="https://mapshaper.org/">mapshaper</a>这个地址支持SHP文件的预览，但是不支持KML格式的预览。</p>

<h2>编辑</h2>

<p>在VSCode中编辑，同时结合VSCode Map Preview插件进行预览。</p>

<p>目前为止，发现的编辑工具都只能基于文本进行编辑，还没有发现一款有UI界面的编辑工具。</p>

<p>另外，如果是KML文件，可以将其当作XML文件进行编辑修改。参考<a href="/blog/2020/06/22/parse-xml-using-python/">使用python编辑xml文件</a></p>

<h2>绘制</h2>

<p><img src="/images/geojsondraw.jpg" alt="geojsondraw" /></p>

<p><a href="http://geojson.io/">geojson.io</a>手动绘制多边形，并且导出geojson格式的文件。</p>

<h2>格式转换</h2>

<p>GDAL ogr2ogr</p>

<ol>
<li>安装GDAL

<ol>
<li>pkg安装</li>
<li>homebrew 安装</li>
</ol>
</li>
<li>添加环境变量<code>export PATH=/Library/Frameworks/GDAL.framework/Programs/:$PATH</code>到<code>～/.bash_profile</code>文件。</li>
<li>运行<code>source ~/.bash_profile</code>或者重启Terminal。</li>
</ol>


<p>现在就可以运行ogr2ogr命令进行格式转化了：</p>

<pre><code>ogr2ogr -f “KML” output.kml input.shp
</code></pre>

<h2>压缩</h2>

<h3>GDAL ogr2ogr压缩点的数量</h3>

<p>除了格式转换，GDAL ogr2ogr还可以进行压缩（ogr2ogr官方网站 <a href="https://gdal.org/programs/ogr2ogr.html%EF%BC%89%EF%BC%9A">https://gdal.org/programs/ogr2ogr.html%EF%BC%89%EF%BC%9A</a></p>

<pre><code>ogr2ogr output.kml input lml 0.0001
</code></pre>

<p>上面命令中最后一个参数对应的是压缩系数，用来控制点的数量，不代表经纬度的小数点位数。</p>

<h3>google官方工具压缩经纬度的经度</h3>

<p>如果要压缩经纬度的精度，即小数点的位数，可以使用<a href="https://www.gearthblog.com/blog/archives/2016/03/making-kml-files-smaller-reducing-precision.html">google官方工具</a>。</p>

<h3>mapshaper压缩点的数量，并实时查看效果。</h3>

<p><img src="/images/mapshapercompressor.gif" alt="mapshapercompressor" /></p>

<p><a href="https://mapshaper.org/">mapshaper</a>进行压缩很是方便。</p>

<p><strong>优点：</strong></p>

<ol>
<li>滑块调整压缩系数，同时查看压缩效果。</li>
<li>可以导出shp格式文件，还有console可以查看shp文件结构。</li>
</ol>


<h2>多边形合并融合</h2>

<p>关键字：merge dissolve</p>

<p>试图寻找中国七大区域（华北、华南、东北等）边界信息，没有找到。理论上可以通过多边形合并得到，但是没有合适的工具。</p>

<p>目前只发现了ArcGIS的desktop可以做这个事情，但是需要收费账号。</p>

<h2>中国各省份的坐标</h2>

<p><a href="https://github.com/baixuexiyang/geocoord">省市坐标</a>上面贴出了中国各省的地理坐标，可能需要用到。</p>

<h2>数据源</h2>

<p>有了各地区的边界信息，我们还需要各地区的一些有意义的数据，比如人口，GDP等，才能在地图上进行查看。这些数据怎么得到呢？</p>

<h3>国家数据网站</h3>

<p><a href="http://data.stats.gov.cn/">国家数据网站</a>提供全国各省很多类型的数据，值得好好挖掘。</p>

<p>其中：</p>

<ol>
<li><a href="http://data.stats.gov.cn/easyquery.htm?cn=C01">年度数据</a>适合查看变化趋势；</li>
<li><a href="http://data.stats.gov.cn/easyquery.htm?cn=E0103">分省年度数据</a>适合观察基于地图的地区分布趋势；</li>
<li><a href="http://www.stats.gov.cn/tjsj/pcsj/">普查数据</a>中的人口普查数据有详细的人口方面的数据。</li>
<li>&hellip;</li>
</ol>


<h3>使用脚本解析excel</h3>

<p>上面的数据有的是网页数据，有的是excel数据（普查数据），对excel内部数据的结构调整可以参考<a href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/">使用node-xlsx进行excel文件的读写</a>进行。</p>

<p>最后贴上所有的资源，包括最后写成的文档：<a href="/assets/resources/%E4%B8%AD%E5%9B%BD%E5%90%84%E7%9C%81%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90.zip">中国各省男女比例地图分析</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移Octopress到新的机器上]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/02/26/deploy-octopress-in-a-new-machine/"/>
    <updated>2020-02-26T13:36:46+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/02/26/deploy-octopress-in-a-new-machine</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#%E9%97%AE%E9%A2%98">问题</a>

<ul>
<li><a href="#%E9%97%AE%E9%A2%981-rake%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98">问题1: rake版本问题</a></li>
<li><a href="#%E9%97%AE%E9%A2%982-rake-deploy%E9%94%99%E8%AF%AF">问题2: <code>rake deploy</code>错误</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-问题" name="问题"></a></p>

<h2>问题</h2>

<p>在新到Mac上面部署Octopress的时候遇到了几个问题。</p>

<p>将github上面的资源clone到本地，并切换到<code>source</code>分支：</p>

<pre><code>git clone -b source git@github.com:username/username.github.io.git octopress
cd octopress
</code></pre>

<p>然后，安装rake：</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p><a id="markdown-问题1-rake版本问题" name="问题1-rake版本问题"></a></p>

<h3>问题1: rake版本问题</h3>

<p>之后，试图执行rake命令到时候，会报错：</p>

<pre><code>rake aborted!
Gem::LoadError: You have already activated rake 12.3.2, but your Gemfile requires rake 10.5.0. Prepending `bundle exec` to your command may solve this.
/Users/hozhang/Develop/hongchaozhang.github.io/Rakefile:2:in `&lt;top (required)&gt;'
/Library/Ruby/Gems/2.6.0/gems/rake-12.3.2/exe/rake:27:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</code></pre>

<p>这个时候，可以根据提示，在rake前面加上<code>bundle exec</code>，比如<code>bundle exec rake preview</code>。每次都这样，比较麻烦。这个问题到根源是Gemfile里面定义使用到rake版本和本地安装到rake版本不一致，这样修改：</p>

<p>在octopress目录下找到我们上面第一步从远端clone下来到Gemfile，打开，将</p>

<pre><code>gem 'rake', '~&gt; 10.0'
</code></pre>

<p>修改成</p>

<pre><code>gem 'rake', '~&gt; 12.0'
</code></pre>

<p>即可。上面的<code>10.0</code>表示老版本，<code>12.0</code>表示新版本，查看本地rake的版本，如果是<code>12.3</code>，就用<code>12.0</code>。</p>

<p><a id="markdown-问题2-rake-deploy错误" name="问题2-rake-deploy错误"></a></p>

<h3>问题2: <code>rake deploy</code>错误</h3>

<p>直接执行<code>rake deploy</code>，报错<code>[rejected] master -&gt; master (non-fast-forward)</code>，这是因为_deploy这个目录下面的内容是本地生成的，和远端没有关系，不能push。执行：</p>

<pre><code>rm -rf _deploy
git clone git@github.com:username/username.github.io.git _deploy
</code></pre>

<p>解决。</p>

<p>当你在多台机器上同时工作时，经常会出现这个问题。</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="http://michal.codes/setting-up-existing-octopress-blog-on-a-new-machine/">Setting Up Existing Octopress Blog on a New Machine</a></li>
<li><a href="http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine/">Setting Up Octopress on a New Machine</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将代码查重工具CPD集成到Xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode/"/>
    <updated>2018-08-02T18:34:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="/images/copy_and_paste_image.jpeg" alt="copy and paster image" /></p>

<h2>DRY准则</h2>

<p>编程的一个基本准则就是DRY（Don&rsquo;t Repeat Yourself)，不写重复代码。简单来说，就是不要复制黏贴。</p>

<p>在开始之前，我们先讨论一下什么叫做“复制黏贴”？首先，如果你有相同的文件，肯定是极其糟糕的“复制黏贴”。如果你有两个类只是类名不同，但是做着相同或者类似的事情，也是很严重的“复制黏贴”。即使只有10行代码的重复，也是”复制黏贴“。根据作者个人经验，一个100000行的工程，完全不需要复制黏贴。</p>

<h3>复制黏贴的坏处</h3>

<p>在重复的代码处修改bug，还需要手动找到另外一处，做相同的修改。</p>

<h2>如何避免复制黏贴</h2>

<p>避免重复代码的传统方法是代码审查，但是对于代码审查者来说，找到重复代码是一件很困难的事情。</p>

<p>我们能不能在编译阶段就查找出重复代码，并要求这些重复代码移除掉之后才可以继续进行编译。</p>

<h2>安装CPD</h2>

<p>对于Swift代码，有两个工具可以做代码查重：</p>

<ul>
<li><a href="https://github.com/kucherenko/jscpd">jscpd</a></li>
<li><a href="https://pmd.github.io/">pmd</a></li>
</ul>


<h3><a href="https://pmd.github.io/">pmd</a></h3>

<p>其中，pmd可定制，并且比较稳定。开始之前，先通过homebrew进行安装：</p>

<pre><code>brew install pmd
</code></pre>

<blockquote><p>注意：对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择<a href="https://github.com/realm/SwiftLint">SwiftLint</a>。</p></blockquote>

<h2>集成到Xcode</h2>

<p>为了将CPD功能集成到编译阶段，我们在Build Phase里新添加一个运行脚本（Run Script），并添加以下脚本：</p>

<pre><code># Running CPD
pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true
# Running script
php ./cpd_script.php -cpd-xml cpd-output.xml
</code></pre>

<p>让我们来看一下这一段脚本做了什么事情。</p>

<p>第一部分是说我们在项目根目录下对所有的文件进行代码查重：</p>

<ul>
<li><code>--minimum-tokens</code>指定重复代码的最少token数量。这里的token是一个比较抽象的概念，不是字符，不是单词，也不是短语的意思。根据经验来说，Swift语言的最优值是50：太大，会漏掉重复代码；太小，会将一些代码误判为重复代码。</li>
<li><code>--formant</code>指定输出格式，这里指定为xml文件。</li>
<li><code>--failOnViolation</code>标识为设置为<code>true</code>，意思是只要检测到重复代码，就不继续进行编译。</li>
</ul>


<blockquote><p>经测试，无论<code>--failOnViolation</code>设置成<code>true</code>，还是<code>false</code>，都不能阻断编译的正常运行。所有的warning都能正常地输出。</p></blockquote>

<p>第一部分脚本执行的结果，是一个xml文件，里面包含了整个工程里面的重复代码及其位置、行数等信息。下面让我们看看，怎么将这个难读的xml文件以warning的形式展示给开发者。</p>

<p>为了将xml文件转换成更好读的warning，需要在工程根目录下创建一个php文件，我们叫做cpd_script.php，拷贝下面的脚本到该文件中：</p>

<pre><code class="php">&lt;?php
foreach (simplexml_load_file('cpd-output.xml')-&gt;duplication as $duplication) {
    $files = $duplication-&gt;xpath('file');
    foreach ($files as $file) {
        echo $file['path'].':'.$file['line'].':1: warning: '.$duplication['lines'].' copy-pasted lines from: '
            .implode(', ', array_map(function ($otherFile) { return $otherFile['path'].':'.$otherFile['line']; },
            array_filter($files, function ($f) use (&amp;$file) { return $f != $file; }))).PHP_EOL;
    }
}
?&gt;
</code></pre>

<p>我们在Build Phase中添加的脚本的第二部分就是运行这一段脚本，将生成的xml文件中的所有重复代码信息以warning的形式展示在Xcode中。如果你想了解如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</p>

<blockquote><p>我试了<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>中说的方法，脚本有错误，为了将comment中有TODO:和FIXME:的地方标记为warning，将有ERROR:的地方标记为error，可以尝试将下面的脚本写到Build Phase的运行脚本（Run Script）中（参考<a href="https://medium.com/ios-os-x-development/highlight-warnings-in-xcode-521125121a75">Highlight Warnings in Xcode</a>）：</p>

<pre><code>TAGS="TODO:|FIXME:|WARNING:"
ERRORTAG="ERROR:"
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" -or -name "*.swift" \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching "($TAGS).*\$|($ERRORTAG).*\$" | perl -p -e "s/($TAGS)/ warning: \$1/"| perl -p -e "s/($ERRORTAG)/ error: \$1/"
</code></pre>

<p>其实不用这么复杂：以“#warning”开头，接下来跟上warning信息就可以了，Xcode会在左侧导航栏里面生成一种叫做User-Defined Issues的warning。</p></blockquote>

<p>现在编译工程，可以在Xcode左侧导航窗口看到所有的warning：</p>

<p><img src="/images/cpd_warnings_in_navigation.jpg" alt="cpd warnings in navigation" /></p>

<p>在相应的文件中，也可以看到该文件所包含的重复代码的warning：</p>

<p><img src="/images/cpd_warnings_in_file.jpg" alt="cpd warnings in file" /></p>

<p>这个warning的意思是说：从54行往下的41行代码和ErrorHandleTester.swift中从96行往下的41行代码重复。</p>

<blockquote><p>如果是刚安装的pmd，可能需要重启Xcode，让pmd命令生效。</p></blockquote>

<h3><a href="https://github.com/kucherenko/jscpd">jscpd</a></h3>

<p>生成的中间结果文件格式和pmd是一样的，节点名字也叫做<code>pmd-cpd</code>。</p>

<p>但是：<strong>jscpd支持yaml格式的配置文件。</strong>这一点很重要，我在工作中也是用jscpd，而不是pmd的cpd。jscpd的安装和使用方法同pmd的cpd基本一样，不再重复。</p>

<p>yaml语法参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a>。</p>

<h2>什么时候使用</h2>

<p>Finding clones is typically useful in the following cases:</p>

<ul>
<li><p><strong>When updating existing code</strong>. When you are fixing a bug, or responding to changes in requirements, you usually start by finding the location in the code that you need to change. Before you make the change, search for clones of that code segment. If clones are discovered:</p>

<ul>
<li>Consider whether you need to make the same change to each clone.</li>
<li>Consider also whether this is a good opportunity to refactor the cloned code into a shared method or class.</li>
</ul>
</li>
<li><p><strong>Architectural cleanup</strong>. Towards the end of every iteration, use Analyze Solution for Code Clones on the Analyze menu.</p></li>
<li><p><strong>When you create code</strong>. When you have written new code, use the tool to find similar code that already existed.</p></li>
</ul>


<h2>结论</h2>

<p>作者：重复代码清理刻不容缓。这个工具可以帮助我们做这件事情，而且，几乎没有任何副作用。</p>

<h2>参考</h2>

<ul>
<li>翻译部分<a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>。</li>
<li>如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</li>
<li>如何编写jscpd的yaml配置文件，参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some tips on markdown usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage/"/>
    <updated>2017-11-21T10:13:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage</id>
    <content type="html"><![CDATA[<p>Collect some markdown usage tips.</p>

<!-- more -->


<h2>添加表格</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 左对齐 </th>
<th style="text-align:right;"> 右对齐 </th>
<th style="text-align:center;"> 居中对齐 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 单元格 </td>
<td style="text-align:right;"> 单元格 </td>
<td style="text-align:center;"> 单元格 </td>
</tr>
<tr>
<td style="text-align:left;"> 单元格 </td>
<td style="text-align:right;"> 单元格 </td>
<td style="text-align:center;"> 单元格 </td>
</tr>
</tbody>
</table>


<p>上面表格的markdown写法如下：</p>

<p><img src="/images/markdown-table.png" alt="markdown table" /></p>

<blockquote><p>注意：上面的<strong>|</strong>必须为英文输入法下面的字符，中文输入法下是不同的字符，而且不易看出差别。</p></blockquote>

<h2>insert an image</h2>

<p>To insert the image, just use the path under the base url, for me, it is <em><delete>/GitBlogs</delete>/images/<image_name>.png</em>, for example</p>

<pre><code>![image annotation](/images/001_ios_frameworks.png)
</code></pre>

<p>To define the size of the image:</p>

<pre><code>![image annotation](/images/001_ios_frameworks.png =200x300)
</code></pre>

<p>Or you can omit the <code>height</code> of the image:</p>

<pre><code>![image annotation](/images/001_ios_frameworks.png =200x)
</code></pre>

<p>If the aspect ratio you define is not consistent with the original image, the height will be omitted automatically. That is to say, just define the <code>width</code> you want, and the system will calculate the <code>height</code> for you.</p>

<h2>show content while click</h2>

<p>Using the following block of code for hiding some content and show the content while click.</p>

<pre><code class="html">&lt;details&gt; 
  &lt;summary&gt;Q1: What is the best Language in the World? &lt;/summary&gt;
   A1: Swift 
&lt;/details&gt;
</code></pre>

<p>You will get:</p>

<p><details>
  <summary><em>Question: What is the best Language in the World?</em></summary>
   Answer: Swift
</details></p>
]]></content>
  </entry>
  
</feed>
