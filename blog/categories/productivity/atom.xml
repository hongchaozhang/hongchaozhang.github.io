<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Zhang Hongchao]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2015-10-22T13:59:52+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrate Blog to Octopress]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/09/09/migrate-blog-to-octopress/"/>
    <updated>2015-09-09T10:22:17+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/09/09/migrate-blog-to-octopress</id>
    <content type="html"><![CDATA[<p>For basic configuration of octopress blog, go to <a href="http://octopress.org/">official site</a> for references.</p>

<h2>Themes</h2>

<p>Go to <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">here</a> to choose the theme you like. Personally, I like the <strong>boldandblue</strong> theme. It is simple and elegant.</p>

<!-- more -->


<h2>Category list</h2>

<p>Go to <a href="https://github.com/ctdk/octopress-category-list">here</a>, and the guy tells you how to enhance your blog to display the categories.</p>

<h2>code syntax highlight</h2>

<p>Refer to my previous post on write post for project pages (gh-pages) <a href="http://hongchaozhang.github.io/blog/2015/05/20/How-to-write-post-in-github-pages/#to_enable_code_highlight">How to Write Post in Github Pages</a></p>

<h2>Write post</h2>

<ul>
<li>go to <em>source</em> branch.</li>
<li>in <em>hongchaozhang.github.io</em> folder, run <code>rake new_post["title"]</code>, and you will find a well named file with <code>md</code> as the extension. Open it and edit.</li>
</ul>


<blockquote><p><strong>Note:</strong>The url of post is generated from the post file name in <em>_post</em> folder, and you shouuld only use English charactors there. But inside your site, the title comes from the <code>title</code> property in the <em>yaml</em> header of your post, and other languages are supported here.</p>

<p>use <code>published: false</code> in the yaml header to disable your post from being displayed in the blog.</p></blockquote>

<ul>
<li>run <code>rake setup_github_pages</code> if you haven&rsquo;t run it.</li>
</ul>


<blockquote><p>This command help you do the followings:</p>

<ul>
<li>Ask for and store your Github Pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog&rsquo;s url according to your repository.</li>
<li>Setup a master branch in the _deploy directory for deployment.</li>
<li>run <code>rake generate</code> to generate your new post.</li>
<li>run <code>rake preview</code> to start local server at <em>localhost:4000</em> for testing.</li>
</ul>
</blockquote>

<ul>
<li>If everything is OK, run <code>rake deploy</code> to push the generated site in <em>_deploy</em> to <strong>master</strong> branch in github (Do it in <strong>source</strong> branch). In a second, you will see the changes at <username>.github.io.</li>
</ul>


<blockquote><p>If you meet with the following error while pushing your site to master branch:</p>

<pre><code>To git@github.com:hongchaozhang/hongchaozhang.github.io.git
! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'git@github.com:hongchaozhang/hongchaozhang.github.io.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>Go to <em>_deploy</em> folder, and run the following commands (<a href="http://stackoverflow.com/questions/21356212/failed-to-deploy-to-github-pages-using-octopress">reference</a>):</p>

<pre><code>git config branch.master.remote origin
git config branch.master.merge refs/heads/master
git pull
</code></pre></blockquote>

<ul>
<li>push your source code to <strong>source</strong> branch.</li>
</ul>


<blockquote><p><strong>Note:</strong> Never push your source code to <strong>master</strong> branch. <strong>master</strong> branch should only hold your site.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shortcut of Chrome on Windows and Mac]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/09/02/Shortcut-of-Chrome-on-Windows-and-Mac/"/>
    <updated>2015-09-02T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/09/02/Shortcut-of-Chrome-on-Windows-and-Mac</id>
    <content type="html"><![CDATA[<p>Use shortcut to improve productivity while using Chrome.</p>

<p>A full page is on Chrome helper:</p>

<ul>
<li><a href="https://support.google.com/chrome/answer/157179?hl=en">English version</a></li>
<li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans">Chinese version</a></li>
</ul>


<p>I will list some common used ones here by myself.</p>

<!-- more -->


<p>Five star recommended:</p>

<table>
<thead>
<tr>
<th>Windows         </th>
<th> Mac                   </th>
<th> Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + F        </td>
<td> Command + F       </td>
<td> open search toolbar</td>
</tr>
<tr>
<td>ESC             </td>
<td> ESC                   </td>
<td> close search toolbar</td>
</tr>
<tr>
<td>Ctrl + W        </td>
<td> Command + W       </td>
<td> close a tab</td>
</tr>
<tr>
<td>Ctrl + T        </td>
<td> Command + T       </td>
<td> new a tab</td>
</tr>
<tr>
<td>Ctrl + click a link </td>
<td> Command + click a link </td>
<td> open the link in a new tab, but stay in original tab</td>
</tr>
<tr>
<td>Ctrl + Shift + click a link </td>
<td> Command + Shift + click a link </td>
<td> open the link in a new tab, and go to the new tab</td>
</tr>
<tr>
<td>Ctrl + Shift + T </td>
<td> Command + Shift + T </td>
<td> open last closed tab (10 at the most)</td>
</tr>
<tr>
<td>Ctrl + Tab </td>
<td> Ctrl + Tab </td>
<td> move to the next tab</td>
</tr>
<tr>
<td>Backspace </td>
<td> Backspace </td>
<td> go to the last history page</td>
</tr>
<tr>
<td>Shift + Backspace </td>
<td> Shift + Backspace </td>
<td> go to the next history page</td>
</tr>
<tr>
<td>Space </td>
<td> Space </td>
<td> page down</td>
</tr>
<tr>
<td>Home </td>
<td> Command + up arrow </td>
<td> go to the start of the page</td>
</tr>
<tr>
<td>End </td>
<td> Command + down arrow </td>
<td> go to the end of the page</td>
</tr>
</tbody>
</table>


<p>Four star recommended</p>

<table>
<thead>
<tr>
<th>Windows </th>
<th> Mac </th>
<th> Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + N        </td>
<td> Command + N           </td>
<td> new a window</td>
</tr>
<tr>
<td>Ctrl + 1 (to 8) </td>
<td> Ctrl + 1 (to 8) </td>
<td> go to the 1 (to 8) page</td>
</tr>
<tr>
<td>Ctrl + 9 </td>
<td> Command + 9 </td>
<td> go to the last tab</td>
</tr>
<tr>
<td>Ctrl + Shift + B </td>
<td> Command + Shift + B </td>
<td> open or close bookmarks bar</td>
</tr>
<tr>
<td>Ctrl + L </td>
<td> Command + L </td>
<td> highlight the URL</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Useful Tools for Coding]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/07/20/Some-Useful-Tools-for-Coding/"/>
    <updated>2015-07-20T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/07/20/Some-Useful-Tools-for-Coding</id>
    <content type="html"><![CDATA[<h2>VVDocument-Xcode</h2>

<p>Use this plug-in for xcode to enable xcode support automatically adding comments to our code, using Javadoc style.
With these comments, we can alt+click a used function to see some useful info.</p>

<p>Go to <a href="http://nshipster.com/documentation/">here</a> for more info.</p>

<h2>kdiff</h2>

<!-- more -->


<p>Use <strong>kdiff</strong> for comparing and merging files or folders.</p>

<h2>goagent for VPN</h2>

<p>For Mac, refer to <a href="http://blog.csdn.net/yanzi1225627/article/details/42886391">this post</a>.</p>

<p>If you meet with httplib.BadStatusLine error while running <code>python uploader.py</code>, refer <a href="https://code.google.com/p/goagent/issues/detail?can=2&amp;start=0&amp;num=100&amp;q=&amp;colspec=ID%20Opened%20Reporter%20Modified%20Summary%20Stars&amp;groupby=&amp;sort=&amp;id=18501">here</a> (tricky here, as the link need vpn to get):</p>

<ul>
<li>关闭谷歌账户的两部验证功能。</li>
<li>并且到 <a href="https://www.google.com/settings/security/lesssecureapps">这里</a> 确认"不够安全的应用的访问权限"已启用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Category or Tag to Github Page Posts]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/07/14/How-to-add-category-or-tag-to-github-pages-posts/"/>
    <updated>2015-07-14T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/07/14/How-to-add-category-or-tag-to-github-pages-posts</id>
    <content type="html"><![CDATA[<p><strong>[updated 2015.09.13]</strong> This adding method is only for my project pages (gh-pages) <em>GitBlogs</em>, and for octopress, the way is builded in.</p>

<p><strong>[updated 2015.06.07]</strong> For adding category or tag automatically through python script, go to <a href="http://hongchaozhang.github.io/code/2015/06/27/instructions-for-adding-tags-and-categories.html">here</a>.</p>

<h3>Introduction</h3>

<p>The <strong>index</strong> page includes <em>cat_tag_for_index.html</em> for showing all the categories and tags, and the number of the corresponding posts.</p>

<p>The <strong>_layouts/default.html</strong> describes the content of a post, because post includes it. In the <strong>_layout/default.html</strong> file, it includes the <strong>cat_tag.html</strong> template as the <em>category</em> and <em>tag</em> info in the beginning of the post. And <strong>cat_tag.html</strong> also includes the date behind.</p>

<p><em>_data/categories.yml</em> and <em>_data/tags.yml</em> describe all the categories and tags.</p>

<!-- more -->


<h3>Category</h3>

<p>To add a <strong>category</strong>:</p>

<ol>
<li>add the category in <em>_data/categories.yml</em>. The <em>slug</em> tag is used as the <em>id</em>, the <em>name</em> is used as the <em>description</em>, and the <em>color</em> is used as the background color.</li>
<li><p>in folder <em>blog/category/</em>, add a <em>.md</em> file with the category as the file name. use the following as the content (change <em>category_name</em> to the real category name):</p>

<p> ---<br>
 layout: blog_by_category<br>
 cat: category_name<br>
 permalink: /blog/category/category_name/<br>
 ---<br></p></li>
</ol>


<p>Now we can use <em>category: category_name</em> in the post <em>YAML</em> header to indicate the category of the post.</p>

<p><strong>Note:</strong> the category name can not contain capital letter. For example, <em>testCat</em> will not work as a new category.</p>

<h3>Tag</h3>

<p>Adding a new <strong>tag</strong> is very similar to adding a new category.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Git Commands]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/07/09/Basic-Git-Commands/"/>
    <updated>2015-07-09T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/07/09/Basic-Git-Commands</id>
    <content type="html"><![CDATA[<h1>Contents</h1>

<ul>
<li><a href="#branch_operation">Branch Operation</a></li>
<li><a href="#check_commit_history">Check commit history</a></li>
<li><a href="#git_ignore">.gitignore</a></li>
<li><a href="#git_stash">Using <em>git stash</em></a></li>
</ul>


<!-- more -->


<p><strong>Git</strong> commands can be searched everywheere. Here I will list only the commonly used ones in <strong>my</strong> development.</p>

<p>First of all, try the following commands first:</p>

<ul>
<li><p><strong>git help:</strong> get git basic commands.</p></li>
<li><p><strong>git help COMMAND:</strong> get help of a command.</p></li>
</ul>


<h2><a name="branch_operation"></a>Branch Operation</h2>

<p>To checkout a new branch from remote repo: When you want to change to a branch that is not in your local side, use <code>git branch -a</code> to list all the branches, and find the one you want to checkout in the remote. Then run <code>git checkout --track origin/&lt;branch_name&gt;</code>, and you will get the branch. Use <code>git branch</code> to check it.</p>

<h2><a name="check_commit_history"></a>Check commit history</h2>

<p>First, use <code>git log</code> to find the commit we want. We can use <code>git log --author=&lt;someone&gt;</code> to narrow the scope.</p>

<p>Then, use <strong>git diff COMMIT^ COMMIT</strong> to get all the changes of one commit.</p>

<p>More useful commands on <code>git log</code></p>

<table>
<thead>
<tr>
<th>git commands</th>
<th> in GUI <em>SourceTree</em> </th>
<th> comments</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git log --author=&lt;someone&gt;</code> </td>
<td> on the top left, select <em>Log</em> view </td>
<td> list all commits <someone> made</td>
</tr>
<tr>
<td><code>git log --name-only</code> </td>
<td> on the top left, select <em>Log</em> view </td>
<td>  list all commits and each modified or new created files</td>
</tr>
<tr>
<td><code>git log -- &lt;file&gt;</code> </td>
<td> right click a file and select <em>log selected&hellip;</em> </td>
<td> list all commits on a file</td>
</tr>
</tbody>
</table>


<h2><a name="git_ignore"></a>.gitignore</h2>

<p>Sometimes we want to ignore some files/folders from being tracked by git. We can use <strong>.gitignore</strong> file to do this. But this only works for the untracked items. If you have done <em>git add file</em> to the file once, .gitignore will not exclude this file from being tracked. For this case, we can use the following two ways to ignore the file:</p>

<h5><code>git rm \-\-cached file</code></h5>

<p>This command will remove the file from the stage, and if you exclude the file in the <strong>.gitignore</strong>, it will not appear in the <em>untrancked files</em> list. But you will get a <em>deleted: file</em> in the <em>changes to be commited</em> list, and the next time you commit, the file in the repo will be deleted.</p>

<p>If this is not what you want, and you only want to ignore the file locally, and don&rsquo;t want to remove it in the repo, because someone else may need this file, go to the second method.</p>

<h5><code>git update-index \-\-assume-unchanged file</code></h5>

<p>This method doesn&rsquo;t need <strong>.gitignore</strong>, and will not delete the file in the repo. The disadvantage is: when you clone the repo in other places, you need to run the command again.</p>

<h2><a name="git_stash"></a>Using <code>git stash</code></h2>

<p>Reference:</p>

<ul>
<li><a href="http://www.cppblog.com/deercoder/archive/2011/11/13/160007.html">here</a>: Chinese version</li>
<li><a href="http://www.gitguys.com/topics/switching-branches-without-committing/">here</a>: provide a good scenario for using <code>git stash</code>.</li>
</ul>


<h3>Description</h3>

<p>When you are woring on a <code>newbranch</code> which is based on an <code>oldbranch</code>, and have some uncommitted changes in <code>newbranch</code>. But now your manager notice you that there is an urgent issue needs to be fixed in the <code>oldbranch</code> right now, and you don&rsquo;t want to commit your changes in <code>newbranch</code>, what should we do here?</p>

<h3>Solution</h3>

<p>When we trying to checkout <code>oldbranch</code> using <code>git checkout oldbranch</code>, what is <em>git</em> doing? There may be three ways:</p>

<ol>
<li>Ignore the uncommitted working directory changes in <code>newbranch</code>, and set the working directory to the files in the <code>oldbranch</code>. The uncommited changes in the <code>newbranch</code> will be lost.</li>
<li>Ignore the state of the files in <code>oldbranch</code>, and use the working directory files in <code>newbranch</code>. Completely wrong! This will not confirm with the original <code>oldbranch</code>.</li>
<li>Attempt to merge in the changes from the working directory in <code>newbranch</code> into the files in <code>oldbranch</code>.</li>
</ol>


<p><em>Git</em> actually tries to use <em>#3</em> method.</p>

<h5>With no confilicts</h5>

<p>checkout <code>oldbranch</code> from <code>newbranch</code> with uncommitted changes in <code>newbranch</code>, but <strong>NO Conflicts</strong> between the two branches</p>

<p>The sample log:
<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> M   test.txt
<span class="lineno">2</span> Switched to branch &amp;lsquo;oldbranch&amp;rsquo;</code></pre></div></p>

<p>And the <code>M</code> means the <code>test.txt</code> is successfully merged.</p>

<h5>With Conflicts</h5>

<p>checkout <code>oldbranch</code> from <code>newbranch</code> with uncommitted changes in <code>newbranch</code>, but <strong>With Conflict</strong> between the two branches. In this situation, if you want to checkout <code>oldbranch</code> any way, use <code>git checkout -m oldbranch</code> which will let git list all the conflicts, as follows:
<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno"> 1</span> $ git checkout -m oldbranch
<span class="lineno"> 2</span> M   test.txt
<span class="lineno"> 3</span> Switched to branch &amp;lsquo;oldbranch&amp;rsquo;
<span class="lineno"> 4</span> $ cat test.txt
<span class="lineno"> 5</span> This is the test file.
<span class="lineno"> 6</span> &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; oldbranch&lt;/p&gt;
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span> &lt;h1&gt;Second line added from the &amp;lsquo;oldbranch&amp;rsquo; branch.&lt;/h1&gt;
<span class="lineno"> 9</span> 
<span class="lineno">10</span> &lt;p&gt;A conflicted line added on the test branch.&lt;/p&gt;
<span class="lineno">11</span> 
<span class="lineno">12</span> &lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;local
<span class="lineno">13</span> $ git branch
<span class="lineno">14</span> * oldbranch
<span class="lineno">15</span>   newbranch</code></pre></div></p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>

<h5><code>git stash</code></h5>

<p>But most of the time, we want to keep the uncommited changes staying in <code>newbranch</code>, and <code>oldbranch</code> as it was. And when we finish the work in <code>oldbranch</code> and get back to <code>newbranch</code>, the uncommited changes is still there. For this purpose, we need <code>git stash</code>:</p>

<ol>
<li>in <code>newbranch</code>, run <code>git stash</code>. Check <code>git status</code>, and there will be nothing changed.</li>
<li><code>git checkout oldbranch</code>.</li>
<li>Work in <code>oldbranch</code>, and commit the changes.</li>
<li><code>git checkout newbranch</code></li>
<li><code>git stash pop</code></li>
</ol>


<p><em>Git</em> will hold a stash stack for all the stashes in all branches. That is to say, no matter how many branches you have, you will have only one stash stack. So when you run <code>git stash pop</code>, you should check the stash stack using <code>git stash list</code>, you will get:
<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> stash@{0}: WIP on oldbranch: 6ed44e2 checkin a new file
<span class="lineno">2</span> stash@{1}: WIP on newbranch: 7a51723 checkin
<span class="lineno">3</span> stash@{2}: WIP on oldbranch: 022cbf7 first checkin
<span class="lineno">4</span> stash@{3}: WIP on newbranch: 6995c80 checkin changes to test.txt</code></pre></div>
If you want to roll back the last stash in newbranch, in #5 step, run <code>git stash pop stash@{1}</code>. If you don&rsquo;t use the index <code>stash@{1}</code>, the top stash in the stash stack will be popped out.</p>

<h2>Use <em>kdiff3</em> as the default tool for git</h2>

<p>When you run <code>git diff</code>, the difference will be listed in the command window. If you want to see the difference in a visual window (for exmple, <em>kdiff3</em>):</p>

<ol>
<li>install <em>kdiff3</em> in your mac</li>
<li><p>As the new version of git has build-in support for <em>kdiff3</em>, so there is no need for manually configuration, just run</p>

<pre><code> $ git config --global merge.tool *kdiff3*
</code></pre></li>
<li><p>If <em>kdiff3</em> is not in your path, run</p>

<pre><code> $ git config --global mergetool.kdiff3.path /Applications/kdiff3.app/Contents/MacOS/kdiff3
</code></pre></li>
<li>Use <code>git difftool</code> instead of <code>git diff</code> to let git launch <em>kdiff3</em> for the difference. Also use <code>git mergetool</code> instead of <code>git merge</code> for merging files.</li>
</ol>

]]></content>
  </entry>
  
</feed>
