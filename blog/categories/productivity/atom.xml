<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2022-12-08T23:59:19+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从Terminal切换到iTerm2，从Bash切换到Zsh]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/03/08/change-from-bash-to-zsh/"/>
    <updated>2022-03-08T16:45:12+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/03/08/change-from-bash-to-zsh</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>安装iTerm2 + Oh My Zsh</h2>

<p><a href="https://segmentfault.com/a/1190000014992947">iTerm2 + Oh My Zsh 打造舒适终端体验</a></p>

<h4>我的主题和插件</h4>

<p>OhMyZsh的主题：ZSH_THEME=&ldquo;af-magic&rdquo;</p>

<p>OhMyZsh的插件：plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</p>

<h2>Zsh配置文件加载顺序</h2>

<p>最重要的是下面两个文件：</p>

<ul>
<li>.zshenv：.zshenv总是被读取,所以通常把$PATH, $EDITOR等变量写在这里,这样无论是在shell交互,或者运行程序都会读取此文件</li>
<li>.zshrc：.zshrc主要用在交互shell,所以主要是为shell服务的,比如对shell做的一些个性化设置都可以在这里写入</li>
</ul>


<p>更多配置文件，参考<a href="https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout">What should/shouldn&rsquo;t go in .zshenv, .zshrc, .zlogin, .zprofile, .zlogout?</a>，或者这一篇中文<a href="http://blog.xsudo.com/2019/04/12/1445/">zsh的环境变量的加载.zprofile .zlogin .zshrc .zshenv</a></p>

<h2>Zsh问题</h2>

<h3>Octopress在zsh下无法新建博客的问题</h3>

<p>执行：</p>

<pre><code>$ rake new_post["new post name"]
</code></pre>

<p>报错：</p>

<pre><code>zsh: no matches found: new_post[new post name]
</code></pre>

<p>原因：
zsh中若出现‘*’, ‘(’, ‘|’, ‘&lt;’, ‘[’, 或者 ‘?’符号，则将其识别为查找文件名的通配符。</p>

<p>解决方法一：</p>

<p>遇到上面的特殊字符，使用转义字符代替。比如：</p>

<pre><code>$ rake new_post\["new post name"\]
</code></pre>

<p>解决方法二：</p>

<p>取消zsh的通配(GLOB), 在.zshrc中加入</p>

<pre><code>alias rake="noglob rake"
</code></pre>

<p>并且执行：</p>

<pre><code>source ./zshrc
</code></pre>

<p>PS: git操作也有类似的问题。</p>

<p>在 git 回滚操作</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<p>出现报错：</p>

<pre><code>zsh: no matches found HEAD^
</code></pre>

<p>也为同样原因，因为^也为正则中的符号， 需要转义为</p>

<pre><code>git reset --soft HEAD\^
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python解析Excel文件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/06/23/parse-excel-using-python/"/>
    <updated>2020-06-23T19:17:45+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/06/23/parse-excel-using-python</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Python基础教程</h2>

<p><a href="https://www.runoob.com/python/python-tutorial.html">python基础教程</a></p>

<h2>xlrd和xlwt</h2>

<pre><code class="python">#!/usr/bin/env python
# -*- coding: utf-8 -*-

import xlrd
import xlwt


def read_excel():
    file_name = 'demo.xlsx'

    # 打开excel文件
    wb = xlrd.open_workbook(file_name)

    # 获取所有表格名字
    print(wb.sheet_names())

    # 通过索引获取表格
    sheet1 = wb.sheet_by_index(0)
    print(sheet1.name, sheet1.nrows, sheet1.ncols)

    # 获取行内容
    rows = sheet1.row_values(2)
    print(rows)

    # 获取列内容
    cols = sheet1.col_values(3)
    print(cols)

    # 获取表格里的内容，三种方式
    print(sheet1.cell(1, 0).value)
    print(sheet1.cell_value(1, 0))
    print(sheet1.row(1)[0].value)


def write_excel():
    f = xlwt.Workbook()

    # 添加sheet
    sheet1 = f.add_sheet('Students', True)

    # 创建杭数据和列数据
    row0 = ["qq", "ddd", "fgg", "hjj"]
    column0 = ["zsfsd", "ghg", "Python", "fs", "fgsf", "zbg"]

    # 写第一行
    for i in range(0, len(row0)):
        sheet1.write(0, i, row0[i])

    # 写第一列
    for i in range(0, len(column0)):
        sheet1.write(i + 1, 0, column0[i])

    # 保存文件为xls格式，xlsx格式不能打开
    f.save('test.xls')
</code></pre>

<h2>openpyxl</h2>

<p>xlwt的局限性是不能写入超过65535行、256列的数据（因为它只支持Excel 2003及之前的版本，在这些版本的Excel中行数和列数有此限制）。openpyxl支持07/10/13版本Excel，功能很强大，但是操作起来感觉没有xlwt方便。</p>

<h2>总结</h2>

<ol>
<li>读取Excel时，选择openpyxl和xlrd差别不大，都能满足要求</li>
<li>写入少量数据且存为xls格式文件时，用xlwt更方便</li>
<li>写入大量数据（超过xls格式限制）或者必须存为xlsx格式文件时，就要用openpyxl了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python解析XML格式文件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python/"/>
    <updated>2020-06-22T18:34:32+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/06/22/parse-xml-using-python</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Python基础教程</h2>

<p><a href="https://www.runoob.com/python/python-tutorial.html">python基础教程</a></p>

<h2>ElementTree</h2>

<p>ELementTree官方文档参考：<a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element">The ElementTree XML API</a></p>

<p>下面是一个例子：</p>

<pre><code class="python">from xml.etree import ElementTree as ET

# 读取xml文件
tree = ET.parse('gadm36_CHN_2.kml')
## 获取root节点
root = tree.getroot()

# 打印root节点的tag名称和所有的attribute
print root.tag, root.attrib

# 正常的xml文件的tag可能只是Placemark，这里是因为读进来的是一个kml文件
for placemark in root.iter('{http://www.opengis.net/kml/2.2}Placemark'):
    for simpleData in placemark.iter('{http://www.opengis.net/kml/2.2}SimpleData'):
        # 获取某一个attribute的值也可以可以使用simpleData.get('attribute name')
        print simpleData.attrib['name']
        if simpleData.attrib['name'] == 'NAME_2':
            cityName = simpleData.text
            # 创建一个tag为name的节点作为placemark的子节点
            nameEle = ET.SubElement(placemark, 'name')
            # 给新创建的节点的text属性赋值
            nameEle.text = cityName
            # 给placemark节点增加一个名为updated的attribute，其值为'yes'
            placemark.set('updated', 'yes')

# 将新修改的xml文件写入新的文件
tree.write('modifyChinaCity.kml')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[区域位置地理信息的获取、查看、和后期处理]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/05/29/quyu-bianjie-dili-weizhi-xinxi/"/>
    <updated>2020-05-29T16:53:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/05/29/quyu-bianjie-dili-weizhi-xinxi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>如果想展示一些基于地理位置信息的数据，可以考虑使用地图。比如：</p>

<p><img src="/images/%E5%8C%BA%E5%9F%9F%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B.gif" alt="区域男女比例" /></p>

<blockquote><p>注：上图是MicroStrategy产品效果。</p></blockquote>

<p>这需要在地图上显示指定区域的边界信息，比如中国国家边界信息，或者各省市的边界信息。</p>

<p>为此，首先要获得边界信息数据。下面就介绍一下我在获取中国各省边界信息的过程中用到的一些资源和工具。</p>

<h2>下载</h2>

<p><img src="/images/GADMDownload.jpg" alt="GADMDownload" /></p>

<p><a href="https://gadm.org/download_country_v3.html">GADM</a>可以下载的格式包括KMZ格式和SHP格式。</p>

<ol>
<li>KMZ格式是KML格式的压缩格式，需要用解压工具解压。</li>
<li>下载文件中中国各地区的名称都是英文名称，需要写脚本换成中文信息。</li>
<li>下载的中国各省没有包括台湾，需要手动下载台湾，整合起来。</li>
</ol>


<p>贴个我整合好的连结：<a href="/assets/resources/%E4%B8%AD%E5%9B%BD%E5%90%84%E7%9C%81%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90.zip">中国各省男女比例地图分析</a>。</p>

<h2>查看</h2>

<p><img src="/images/vscodemappreview.jpg" alt="vscodemappreview" /></p>

<p>在VSCode中使用插件VSCode Map Preview进行预览。但是该插件不支持SHP格式文件预览。</p>

<p><img src="/images/mapshaper.jpg" alt="mapshaper" /></p>

<p><a href="https://mapshaper.org/">mapshaper</a>这个地址支持SHP文件的预览，但是不支持KML格式的预览。</p>

<h2>编辑</h2>

<p>在VSCode中编辑，同时结合VSCode Map Preview插件进行预览。</p>

<p>目前为止，发现的编辑工具都只能基于文本进行编辑，还没有发现一款有UI界面的编辑工具。</p>

<p>另外，如果是KML文件，可以将其当作XML文件进行编辑修改。参考<a href="/blog/2020/06/22/parse-xml-using-python/">使用python编辑xml文件</a></p>

<h2>绘制</h2>

<p><img src="/images/geojsondraw.jpg" alt="geojsondraw" /></p>

<p><a href="http://geojson.io/">geojson.io</a>手动绘制多边形，并且导出geojson格式的文件。</p>

<h2>格式转换</h2>

<p>GDAL ogr2ogr</p>

<ol>
<li>安装GDAL

<ol>
<li>pkg安装</li>
<li>homebrew 安装</li>
</ol>
</li>
<li>添加环境变量<code>export PATH=/Library/Frameworks/GDAL.framework/Programs/:$PATH</code>到<code>～/.bash_profile</code>文件。</li>
<li>运行<code>source ~/.bash_profile</code>或者重启Terminal。</li>
</ol>


<p>现在就可以运行ogr2ogr命令进行格式转化了：</p>

<pre><code>ogr2ogr -f “KML” output.kml input.shp
</code></pre>

<h2>压缩</h2>

<h3>GDAL ogr2ogr压缩点的数量</h3>

<p>除了格式转换，GDAL ogr2ogr还可以进行压缩（ogr2ogr官方网站 <a href="https://gdal.org/programs/ogr2ogr.html%EF%BC%89%EF%BC%9A">https://gdal.org/programs/ogr2ogr.html%EF%BC%89%EF%BC%9A</a></p>

<pre><code>ogr2ogr output.kml input lml 0.0001
</code></pre>

<p>上面命令中最后一个参数对应的是压缩系数，用来控制点的数量，不代表经纬度的小数点位数。</p>

<h3>google官方工具压缩经纬度的经度</h3>

<p>如果要压缩经纬度的精度，即小数点的位数，可以使用<a href="https://www.gearthblog.com/blog/archives/2016/03/making-kml-files-smaller-reducing-precision.html">google官方工具</a>。</p>

<h3>mapshaper压缩点的数量，并实时查看效果。</h3>

<p><img src="/images/mapshapercompressor.gif" alt="mapshapercompressor" /></p>

<p><a href="https://mapshaper.org/">mapshaper</a>进行压缩很是方便。</p>

<p><strong>优点：</strong></p>

<ol>
<li>滑块调整压缩系数，同时查看压缩效果。</li>
<li>可以导出shp格式文件，还有console可以查看shp文件结构。</li>
</ol>


<h2>多边形合并融合</h2>

<p>关键字：merge dissolve</p>

<p>试图寻找中国七大区域（华北、华南、东北等）边界信息，没有找到。理论上可以通过多边形合并得到，但是没有合适的工具。</p>

<p>目前只发现了ArcGIS的desktop可以做这个事情，但是需要收费账号。</p>

<h2>中国各省份的坐标</h2>

<p><a href="https://github.com/baixuexiyang/geocoord">省市坐标</a>上面贴出了中国各省的地理坐标，可能需要用到。</p>

<h2>数据源</h2>

<p>有了各地区的边界信息，我们还需要各地区的一些有意义的数据，比如人口，GDP等，才能在地图上进行查看。这些数据怎么得到呢？</p>

<h3>国家数据网站</h3>

<p><a href="http://data.stats.gov.cn/">国家数据网站</a>提供全国各省很多类型的数据，值得好好挖掘。</p>

<p>其中：</p>

<ol>
<li><a href="http://data.stats.gov.cn/easyquery.htm?cn=C01">年度数据</a>适合查看变化趋势；</li>
<li><a href="http://data.stats.gov.cn/easyquery.htm?cn=E0103">分省年度数据</a>适合观察基于地图的地区分布趋势；</li>
<li><a href="http://www.stats.gov.cn/tjsj/pcsj/">普查数据</a>中的人口普查数据有详细的人口方面的数据。</li>
<li>&hellip;</li>
</ol>


<h3>使用脚本解析excel</h3>

<p>上面的数据有的是网页数据，有的是excel数据（普查数据），对excel内部数据的结构调整可以参考<a href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/">使用node-xlsx进行excel文件的读写</a>进行。如果对Python比较熟悉，可以参考<a href="/blog/2020/06/23/parse-excel-using-python/">使用Python解析Excel文件</a>。</p>

<p>最后贴上所有的资源，包括最后写成的文档：<a href="/assets/resources/%E4%B8%AD%E5%9B%BD%E5%90%84%E7%9C%81%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90.zip">中国各省男女比例地图分析</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移Octopress到新的机器上]]></title>
    <link href="http://hongchaozhang.github.io/blog/2020/02/26/deploy-octopress-in-a-new-machine/"/>
    <updated>2020-02-26T13:36:46+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2020/02/26/deploy-octopress-in-a-new-machine</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#%E9%97%AE%E9%A2%98">问题</a>

<ul>
<li><a href="#%E9%97%AE%E9%A2%981-rake%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98">问题1: rake版本问题</a></li>
<li><a href="#%E9%97%AE%E9%A2%982-rake-deploy%E9%94%99%E8%AF%AF">问题2: <code>rake deploy</code>错误</a></li>
<li><a href="#%E9%97%AE%E9%A2%983-bundle-install%E9%94%99%E8%AF%AF">问题3: <code>bundle install</code>错误</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-问题" name="问题"></a></p>

<h2>问题</h2>

<p>在新到Mac上面部署Octopress的时候遇到了几个问题。</p>

<p>将github上面的资源clone到本地，并切换到<code>source</code>分支：</p>

<pre><code>git clone -b source git@github.com:username/username.github.io.git octopress
cd octopress
</code></pre>

<p>然后，安装rake：</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p><a id="markdown-问题1-rake版本问题" name="问题1-rake版本问题"></a></p>

<h3>问题1: rake版本问题</h3>

<p>之后，试图执行rake命令到时候，会报错：</p>

<pre><code>rake aborted!
Gem::LoadError: You have already activated rake 12.3.2, but your Gemfile requires rake 10.5.0. Prepending `bundle exec` to your command may solve this.
/Users/hozhang/Develop/hongchaozhang.github.io/Rakefile:2:in `&lt;top (required)&gt;'
/Library/Ruby/Gems/2.6.0/gems/rake-12.3.2/exe/rake:27:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</code></pre>

<p>这个时候，可以根据提示，在rake前面加上<code>bundle exec</code>，比如<code>bundle exec rake preview</code>。每次都这样，比较麻烦。这个问题到根源是Gemfile里面定义使用到rake版本和本地安装到rake版本不一致，这样修改：</p>

<p>在octopress目录下找到我们上面第一步从远端clone下来到Gemfile，打开，将</p>

<pre><code>gem 'rake', '~&gt; 10.0'
</code></pre>

<p>修改成</p>

<pre><code>gem 'rake', '~&gt; 12.0'
</code></pre>

<p>即可。上面的<code>10.0</code>表示老版本，<code>12.0</code>表示新版本，查看本地rake的版本，如果是<code>12.3</code>，就用<code>12.0</code>。</p>

<p><a id="markdown-问题2-rake-deploy错误" name="问题2-rake-deploy错误"></a></p>

<h3>问题2: <code>rake deploy</code>错误</h3>

<p>直接执行<code>rake deploy</code>，报错<code>[rejected] master -&gt; master (non-fast-forward)</code>，这是因为_deploy这个目录下面的内容是本地生成的，和远端没有关系，不能push。执行：</p>

<pre><code>rm -rf _deploy
git clone git@github.com:username/username.github.io.git _deploy
</code></pre>

<p>解决。</p>

<p>当你在多台机器上同时工作时，经常会出现这个问题。</p>

<p><a id="markdown-问题3-bundle-install错误" name="问题3-bundle-install错误"></a></p>

<h3>问题3: <code>bundle install</code>错误</h3>

<p>运行<code>bundle install</code>的时候出现错误：
<code>
Could not find ffi-1.9.18 in any of the sources...
</code>
需要运行一下<code>bundle update</code>,再运行<code>bundle install</code>。</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="http://michal.codes/setting-up-existing-octopress-blog-on-a-new-machine/">Setting Up Existing Octopress Blog on a New Machine</a></li>
<li><a href="http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine/">Setting Up Octopress on a New Machine</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
