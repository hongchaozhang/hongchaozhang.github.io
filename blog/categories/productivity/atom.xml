<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-01-12T13:55:52+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Tips on Markdown Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage/"/>
    <updated>2017-11-21T10:13:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage</id>
    <content type="html"><![CDATA[<p>Collect some markdown usage tips.</p>

<!-- more -->


<h2>insert an image</h2>

<p>To insert the image, just use the path under the base url, for me, it is <em>/GitBlogs/images/<image_name>.png</em>, for example</p>

<pre><code>![image annotation](/images/001_ios_frameworks.png)
</code></pre>

<h2>show content while click</h2>

<p>Using the following block of code for hiding some content and show the content while click.</p>

<pre><code class="html">&lt;details&gt; 
  &lt;summary&gt;Q1: What is the best Language in the World? &lt;/summary&gt;
   A1: Swift 
&lt;/details&gt;
</code></pre>

<p>You will get:</p>

<p><details>
  <summary><em>Question: What is the best Language in the World?</em></summary>
   Answer: Swift
</details></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码查重工具]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code/"/>
    <updated>2017-05-08T17:52:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code</id>
    <content type="html"><![CDATA[<p>代码查重工具</p>

<!-- more -->


<h2>jscpd</h2>

<p><a href="https://github.com/kucherenko/jscpd">jscpd</a></p>

<p>Supported languages：</p>

<p>JavaScript  Java    YAML
CoffeeScript    C++ Haxe
PHP C#  TypeScript
Go  Python  Mixed HTML
Ruby    C   SCSS
Less    CSS erlang
<strong>Swift</strong>   xml/xslt    <strong>Objective-C</strong>
Puppet  Twig    Vue.js</p>

<h3>优点</h3>

<ul>
<li>安装使用简单</li>
<li>运行速度快。</li>
</ul>


<h3>缺点：</h3>

<ul>
<li>没有GUI</li>
<li>复制1行，修改其中的一行，就不会被认为复制。</li>
</ul>


<h2>PMD</h2>

<p><a href="https://pmd.github.io/">PMD</a></p>

<h3>Supported IDEs</h3>

<p>没有Xcode的插件，所以只能用命令行。</p>

<p>PMD is integrated with JDeveloper, Eclipse, JEdit, JBuilder, BlueJ, CodeGuide, NetBeans/Sun Java Studio Enterprise/Creator, IntelliJ IDEA, TextPad, Maven, Ant, Gel, JCreator, and Emacs.</p>

<ul>
<li>Maven PMD plugin</li>
<li>Gradle: The PMD Plugin</li>
<li>Eclipse plugin</li>
<li>NetBeans plugin</li>
<li>JBuilder plugin</li>
<li>JDeveloper plugin</li>
<li>IntelliJ IDEA plugin</li>
</ul>


<h3>Supported Languages of PMD commonded line:</h3>

<ul>
<li>java</li>
<li>ecmascript (JavaScript)</li>
<li>jsp</li>
<li>plsql</li>
<li>vm (Apache Velocity)</li>
<li>xml and xsl</li>
</ul>


<h3>Supported Languages of CPD:</h3>

<ul>
<li>cs</li>
<li>cpp</li>
<li>ecmascript (JavaScript)</li>
<li>fortran</li>
<li>go</li>
<li>java</li>
<li>jsp</li>
<li>matlab</li>
<li>objectivec</li>
<li>php</li>
<li>plsql</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
<li>swift</li>
</ul>


<h3>CPD has GUI</h3>

<p>On Mac, display the GUI by running:</p>

<pre><code>./run.sh cpdgui
</code></pre>

<p>The screen shot is like:</p>

<p><img src="/images/screenshot_cpd.png" alt="screenshot_cpd" /></p>

<h3>将CPD集成到XCode里面</h3>

<p><a href="https://habrahabr.ru/post/137875/">Интегрируем Copy-Paste-Detection в Xcode, и не только</a>将CPD集成到了XCode里面。</p>

<h2>JenkinsCI-iOS</h2>

<p><a href="https://github.com/cyupa/JenkinsCI-iOS">JenkinsCI-iOS</a></p>

<p>The CPD in PMD is the core of JenkinsCI-iOS.</p>

<h2>NiCad4 Clone Detector</h2>

<p><a href="http://www.txl.ca/nicaddownload.html">NiCad4 Clone Detector</a></p>

<p>NiCad handles a range of languages, including C, Java, Python, and C#, and provides a range of normalizations, filters and abstractions.</p>

<h2>AppCode</h2>

<h2>Code Clone Detection</h2>

<p>Visual Studio Enterprise有自己的code clone analysis，see <a href="https://msdn.microsoft.com/en-us/library/hh205279.aspx">Finding Duplicate Code by using Code Clone Detection</a>。copy一段code，然后改了某个变量名称，仍然可以被检测出重复。</p>

<h2>Simian - Similarity Analyser</h2>

<p><a href="http://www.harukizaemon.com/simian/">Simian - Similarity Analyser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用CocoaPods管理iOS的依赖库关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control/"/>
    <updated>2016-01-19T13:47:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control</id>
    <content type="html"><![CDATA[<p>就像Java有Maven，nodejs有npm一样，ios也有自己的库依赖管理工具：CocoaPods。</p>

<!-- more -->


<p>参考<a href="http://www.cnblogs.com/iyuanxiaojun/p/4465850.html">用CocoaPods做iOS程序的依赖管理</a>。</p>

<h3>安装与设置</h3>

<p>Mac下使用自带的ruby的gem命令进行安装：</p>

<pre><code>sudo gem install cocoapods
</code></pre>

<p>第一次使用之前需要设置CocoaPods：</p>

<pre><code>pod setup
</code></pre>

<p>此时需要耐心等待，因为CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有80M左右，比较慢。</p>

<blockquote><p>如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度。</p></blockquote>

<h3>使用</h3>

<h4>安装依赖库</h4>

<p>使用时需要新建Podfile文件，格式如下：</p>

<pre><code>platform :ios
pod 'JSONKit',       '~&gt; 1.4'
pod 'Reachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></pre>

<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<pre><code>cd "your project home"
pod install
</code></pre>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下两点即可：</p>

<ul>
<li>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次pod update命令。</li>
</ul>


<h4>搜索依赖库</h4>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过</p>

<pre><code>pod search
</code></pre>

<p>命令进行查找。</p>

<h3>问题</h3>

<h4>1. required a higher minimum deployment target</h4>

<p>当我在使用<em><a href="https://github.com/itsbonczek/kingpin">kingpin</a></em>第三方库的时候，出现了下面的问题：</p>

<pre><code>Specs satisfying the `kingpin` dependency were found, but they required a higher minimum deployment target.
</code></pre>

<p>通过修改Podfile的第一行：</p>

<pre><code>platform :ios
</code></pre>

<p>为</p>

<pre><code>platform :ios, '7.0'
</code></pre>

<p>解决。</p>

<p>如果问题仍然存在，将'7.0'改成'8.0'或者'9.0'，直到没有错误。</p>

<h4>2. 在Objective-C中引用swift写的CocoaPod库</h4>

<p>当我在用<em><a href="https://github.com/danielgindi/ios-charts">ios-charts</a></em>库的时候，首先出现了问题1。解决问题1之后，又出现了下面的问题：</p>

<pre><code>[!] Pods written in Swift can only be integrated as frameworks; add `use_frameworks!` to your Podfile or target to opt into using it. The Swift Pod being used is: Charts
</code></pre>

<p>于是，将Podfile从</p>

<pre><code>platform :ios, '9.0'
pod 'Charts'
</code></pre>

<p>改成</p>

<pre><code>platform :ios, '9.0'
use_frameworks!
pod 'Charts'
</code></pre>

<p>解决了这个问题。接着就是如何在Objective-C的project中使用这个swift库了。</p>

<p>首先是官方文档<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_77">Swift and Objective-C in the Same Project</a>，有点看不懂。</p>

<p>一些人说的：</p>

<pre><code class="objc">@import Charts;
</code></pre>

<p>会报错。</p>

<p>很庆幸，StackOverflow上有人遇到了相同的问题：<a href="http://stackoverflow.com/questions/33931517/module-not-found-error-when-importing-swift-pod-into-objective-c-project">Module not found error when importing Swift pod into Objective-C project</a>，在需要用到Charts库中的类的文件中，加入下面代码：</p>

<pre><code class="objc">#import "Charts-Swift.h"
</code></pre>

<p>另外，注意，在Storyboard中使用库中类的时候，在<em>Module</em>框中填上<em>Charts</em>，如下：</p>

<p><img src="/images/using_lib_class_in_storyboard.jpg" alt="using_lib_class_in_storyboard" /></p>

<p>原理参考：<a href="https://github.com/CocoaPods/CocoaPods/issues/4373">Unable to satisfy the following requirements with Podfile, but they required a higher minimum deployment target. #4373</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime的一些插件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/28/some-useful-plugins-for-sublime/"/>
    <updated>2015-11-28T23:45:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/28/some-useful-plugins-for-sublime</id>
    <content type="html"><![CDATA[<h3>Package Control</h3>

<p><a href="https://packagecontrol.io/installation#st2">Package Control</a>是Sublime中用于插件管理的工具。安装之后，其它插件基本上可以通过它进行管理：安装、删除、禁用等。</p>

<h3>JSFormat</h3>

<!-- more -->


<p>可以对Javascript和json文件进行格式化。</p>

<p>对于json，如果不想用本地插件，可以用<a href="http://jsonviewer.stack.hu/">Online Json Viewer</a>。</p>

<h3>JSHint Guntter</h3>

<ul>
<li>Run JSHint: Command+Shift+J</li>
<li>Clear Annotations: Command+Escape</li>
</ul>


<p>对于一些关键字，比如node中的<code>require</code>，在.jshintrc文件中通过设置<code>predef</code>进行排除。.jshintrc通过Preferrences->Package Settings->JSHint Gunter->Set Linting Preferences打开。</p>

<h3>Sublime ​Code​Intel</h3>

<ul>
<li><p>自动代码补全功能</p></li>
<li><p>代码间跳转</p>

<ul>
<li>Jump to definition = Control+Click</li>
<li>Go back = Control+Alt+Command+Left</li>
</ul>
</li>
</ul>


<h3>Bracket Highlighter</h3>

<p>可以对括号（圆括号，方括号，花括号，尖括号等）和标签（html tag等）进行自定义高亮。</p>

<p>自定义方法：</p>

<ul>
<li>打开Preferences->Package Settings->Bracket Highlighter->Brakets Settings - <strong>Default</strong>，复制。这个文件无法修改。</li>
<li>打开Preferences->Package Settings->Bracket Highlighter->Brakets Settings - <strong>User</strong>，粘贴。修改<code>bracket styles</code>。此文件中的设置将覆盖<strong>Default</strong>中的设置。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tools to Impromve Efficiency in Daily Life]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/19/some-tools-to-impromve-efficiency-in-daily-life/"/>
    <updated>2015-11-19T16:16:22+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/19/some-tools-to-impromve-efficiency-in-daily-life</id>
    <content type="html"><![CDATA[<h3>Everything</h3>

<p>瞬间搜索全机器文件。但是只支持文件名搜索，不支持文件内容搜索。结合DocFetcher应用，可以大大提高搜索文件的效率。</p>

<h3>DocFetcher</h3>

<p>支持文件内容搜索。但是索引文件较大，最好分目录进行索引，不要索引整台计算机。结合Everything应用，可以大大提高搜索文件的效率。</p>

<!-- more -->


<h3>RescueTime</h3>

<p>可以用来监督你一天之中分别有多少时间花在什么地方。在上淘宝的时候都想快点结束，不然一天下来数据会很难看。</p>

<h3>EuDic</h3>

<p>Mac上的这个词典好过系统自带的Dictionary很多。引用推荐人的一句话：这是Mac上最好用的词典，没有之一。</p>

<h3>Astah</h3>

<p>用<strong>Astah Community</strong>（Astah还有收费版本：Astah Professional，功能更全，不过Astah Community完全够用了。）来画UML图的class diagram和sequence diagram非常方便，尤其是sequence diagram，相比于之前用的<strong>Dia</strong>，简直是方便太多了，用<strong>Dia</strong>画sequence diagram简直就是噩梦。</p>

<p>对于Astah中定义的UML sequence diagram，参考<a href="http://www.uml.org.cn/oobject/201009081.asp">UML建模之时序图（Sequence Diagram）</a></p>

<h3>图像视频操作</h3>

<h4>LICECap</h4>

<p><a href="http://www.cockos.com/licecap/">LICECap</a>用来快速将屏幕操作等转换成gif动画，比先录屏再转换快太多了。</p>

<p>使用Mac自带的Preview是不能预览gif图片的，可以通过一下两种方式预览：</p>

<ul>
<li>在Finder中选中gif图片，在右边的预览框中预览。</li>
<li>将gif用浏览器打开预览，比如Safari。</li>
</ul>


<h4>PicGif Lite</h4>

<p>PicGif用来将视频或者图片转换成gif图片，这种工具很多，还有在线工具，比如<a href="http://www.uupoop.com/gif/">uupoop</a>。<del>我主要用这个来进行gif图的预览。</del></p>
]]></content>
  </entry>
  
</feed>
