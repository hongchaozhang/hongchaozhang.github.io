<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-01-14T00:23:10+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caution Javascript Closure in Loop]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/05/09/caution-javascript-closure-in-loop/"/>
    <updated>2015-05-09T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/05/09/caution-javascript-closure-in-loop</id>
    <content type="html"><![CDATA[<h3>Object</h3>

<p>Define a function <span style="background-color:yellow;"><em>addTimer</em></span>, to log executed time for all function-type property of an object</p>

<h3>Definition 1</h3>

<!-- more -->


<h4>Code:</h4>

<pre><code class="javascript">var addTimer = function (widget) {
    var prop;
    for (prop in widget) {
        if (typeof widget[prop] === 'function') {
            var backupFunc = widget[prop];
            // the same problem with the following code
            //backupFunc = (function () {
            //    return widget[prop];
            //})();

            // try a deep copy here to make bakcupFunc not changed with prop
            widget[prop] = function () {
                console.time("from timer " + prop);
                backupFunc.apply(this, arguments);
                console.timeEnd("from timer " + prop);
            };
            // the same problem with the following code
            //widget[prop] = (function () {
            //    return function () {
            //        console.time(prop);
            //        backupFunc.apply(this, arguments);
            //        console.timeEnd(prop);
            //    };
            //})();
        }
    }
}
</code></pre>

<h4>Problem</h4>

<p>All function type property in widget will call the last function type property</p>

<h3>Definition 2</h3>

<p>Since there is no block scope in JavaScript - only <strong>function scope</strong> - by wrapping the function creation in a new function, you ensure that the value of <code>prop</code> remains as you intended.</p>

<h4>Code:</h4>

<pre><code class="javascript">var addTimer = function (widget) {
    var prop;
    var getFuncWithTimer = function (prop) {
        return function () {
            console.time("from timer " + prop);
            widget[prop].apply(this, arguments);
            console.timeEnd("from timer " + prop);
        };
    };
    for (prop in widget) {
        if (typeof widget[prop] === 'function') {
            widget[prop] = getFuncWithTimer(prop);
        }
    }
};
</code></pre>

<h4>Problem</h4>

<p>exceed maximum call stack</p>

<h3>Definition 3</h3>

<h4>Code:</h4>

<pre><code class="javascript">var addTimer = function (widget) {
    var prop;
    var getFuncWithTimer = function (prop) {
        var backupFunc = widget[prop];
        return function () {
            console.time("from timer " + prop);
            backupFunc.apply(this, arguments);
            console.timeEnd("from timer " + prop);
        };
    };
    for (prop in widget) {
        if (typeof widget[prop] === 'function') {
            widget[prop] = getFuncWithTimer(prop);
        }
    }
};
</code></pre>

<h4>Problem</h4>

<p>All function with returned value can not work</p>

<h3>Final Definition</h3>

<h4>Code:</h4>

<pre><code class="javascript">var addTimer = function (widget) {
    var prop;
    var getFuncWithTimer = function (prop) {
        var backupFunc = widget[prop];
        return function () {
            console.time("from timer " + prop);
            var ret = backupFunc.apply(this, arguments);
            console.timeEnd("from timer " + prop);
            return ret;
        };
    };
    for (prop in widget) {
        if (typeof widget[prop] === 'function') {
            widget[prop] = getFuncWithTimer(prop);
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add a Clone Function to Function?]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/05/09/How-to-Add-a-Clone-function-to-Function/"/>
    <updated>2015-05-09T00:00:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/05/09/How-to-Add-a-Clone-function-to-Function</id>
    <content type="html"><![CDATA[<pre><code class="javascript">Function.prototype.clone = function() {
    var that = this;
    var temp = function temporary() { return that.apply(this, arguments); };
    for( key in this ) {
        temp[key] = this[key];
    }
    return temp;
};
</code></pre>
]]></content>
  </entry>
  
</feed>
