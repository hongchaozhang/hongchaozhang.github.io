<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2019-06-13T13:41:25+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Closure]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/06/04/on-swift-closure/"/>
    <updated>2019-06-04T17:24:47+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/06/04/on-swift-closure</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#function%E4%B8%8Eclosure%E7%9A%84%E5%85%B3%E7%B3%BB">Function与Closure的关系：</a></li>
<li><a href="#%E7%94%A8closure%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F">用Closure初始化一个变量</a></li>
<li><a href="#closure%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96">Closure的语法糖：</a></li>
<li><a href="#closure%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">Closure与内存管理、内存泄漏</a>

<ul>
<li><a href="#capture-list%E7%9A%84%E5%AE%9A%E4%B9%89">Capture List的定义</a></li>
<li><a href="#weak-and-unowned-references">Weak and Unowned References</a></li>
</ul>
</li>
<li><a href="#closure%E6%8D%95%E8%8E%B7%E5%8F%98%E9%87%8F">Closure捕获变量</a></li>
</ul>


<p><a href="https://medium.com/@abhimuralidharan/functional-swift-all-about-closures-310bc8af31dd">Functional swift: All about Closures</a></p>

<p>这篇全面详细易懂地介绍了Swift的Closure，包括</p>

<ul>
<li>Closure的语法，包括一些简化写法，如Trailing Closures</li>
<li>Closure与Function的区别</li>
<li>Closure与内存管理、内存泄漏，如capture list的使用，weak与unowned的区别</li>
<li>Functions和closures都是引用类型，不是值类型</li>
</ul>


<p>也可以看<a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>，但是官方文档没有上面的文章详细。</p>

<p>下面有选择地记录一下。</p>

<p><a id="markdown-function与closure的关系" name="function与closure的关系"></a></p>

<h2>Function与Closure的关系：</h2>

<p>参考<a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>里面的三句话理解一下：</p>

<blockquote><ul>
<li>Global functions are closures that have a name and do not capture any values.</li>
<li>Nested functions are closures that have a name and can capture values from their enclosing function.</li>
<li>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</li>
</ul>
</blockquote>

<p>还有一点很重要：<strong>Closures and functions are first class types in swift</strong>。</p>

<blockquote><p>Functions and closures are first-class citizens in Swift because you can treat then like a normal value. For example, you can：</p>

<ul>
<li>assign a function/closure to a local variable .</li>
<li>pass a function/closure as an argument .</li>
<li>return a function/closure .</li>
</ul>
</blockquote>

<p><a id="markdown-用closure初始化一个变量" name="用closure初始化一个变量"></a></p>

<h2>用Closure初始化一个变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">setupViewUsingClosure</span><span class="p">:</span> <span class="bp">UIView</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">()</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">.</span><span class="n">green</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'><span class="p">}()</span> <span class="c1">//IMPORTANT!!! I have added () at the end.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-closure的语法糖" name="closure的语法糖"></a></p>

<h2>Closure的语法糖：</h2>

<p><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>有个总的说明：</p>

<blockquote><p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>

<ul>
<li>Inferring parameter and return value types from context</li>
<li>Implicit returns from single-expression closures</li>
<li>Shorthand argument names</li>
<li>Trailing closure syntax</li>
</ul>
</blockquote>

<p>当你第一次看到这个写法的时候肯定很疑惑：参数、类型、函数调用时的括号都跑哪去了？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>理解了上面几点，就可以明白为什么可以这么写，下面让我们一步步看清楚。</p>

<p>Closure的定义如下：</p>

<blockquote><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>

<pre><code class="swift">{ (params) -&gt; returnType in
    statements
}
</code></pre></blockquote>

<p>举个具体的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为：</p>

<blockquote><ul>
<li><strong>Inferring parameter and return value types from context</strong></li>
</ul>


<p>Because the sorting closure is passed as an argument to a method, Swift can infer the types of its parameters and the type of the value it returns.</p></blockquote>

<p>所以，上面的代码可以写为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Implicit returns from single-expression closures</strong></li>
</ul>


<p>Single-expression closures can implicitly return the result of their single expression by omitting the return keyword from their declaration.</p></blockquote>

<p>所以，代码继续改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Shorthand argument names</strong></li>
</ul>


<p>Swift automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure’s arguments by the names $0, $1, $2, and so on.</p></blockquote>

<p>代码继续改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Trailing closure syntax</strong></li>
</ul>


<p>If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a trailing closure instead. A trailing closure is written after the function call’s parentheses, even though it is still an argument to the function. When you use the trailing closure syntax, you don’t write the argument label for the closure as part of the function call.</p></blockquote>

<p>代码就可以写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-closure与内存管理内存泄漏" name="closure与内存管理内存泄漏"></a></p>

<h2>Closure与内存管理、内存泄漏</h2>

<p>Closure带来的循环引用和内存泄漏，主要通过Capture List来解决：</p>

<blockquote><p>You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition. A capture list defines the rules to use when capturing one or more reference types within the closure’s body.</p></blockquote>

<p>详细内容参考<a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56">Resolving Strong Reference Cycles for Closures</a>。下面摘要一下。</p>

<p><a id="markdown-capture-list的定义" name="capture-list的定义"></a></p>

<h3>Capture List的定义</h3>

<blockquote><p>Each item in a capture list is a pairing of the weak or unowned keyword with a reference to a class instance (such as self) or a variable initialized with some value (such as delegate = self.delegate!). These pairings are written within a pair of square braces, separated by commas.</p></blockquote>

<p>Place the capture list before a closure’s parameter list and return type if they are provided:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">lazy</span> <span class="k">var</span> <span class="nl">someClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">,</span> <span class="k">weak</span> <span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="o">!</span><span class="p">]</span> <span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">stringToProcess</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// closure body goes here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-weak-and-unowned-references" name="weak-and-unowned-references"></a></p>

<h3>Weak and Unowned References</h3>

<blockquote><p>Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>

<p>Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated. This enables you to check for their existence within the closure’s body.</p>

<p>NOTE: If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.</p></blockquote>

<p>关于unowned的另一个解释更清楚：</p>

<blockquote><p>Like a weak reference, an unowned reference does not keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is used when the other instance has the same lifetime or a longer lifetime.</p></blockquote>

<p><a id="markdown-closure捕获变量" name="closure捕获变量"></a></p>

<h2>Closure捕获变量</h2>

<blockquote><p>Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as closing over those constants and variables.</p></blockquote>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// capturing values</span>
</span><span class='line'><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">var</span> <span class="n">closureArray</span> <span class="o">=</span> <span class="p">[()</span><span class="o">-&gt;</span><span class="p">()]()</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">closureArray</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// here i will be 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">4</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The closure captures the current address of <code>i</code> and every time we access <code>i</code> , it . returns the current value.</p>

<p>If we want to prevent this behavior (capturing values) and print the value of i even if the properties change after their capturing inside the closure, we can explicitly capture the variable with a capture list like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">closureArray2</span> <span class="o">=</span> <span class="p">[()</span><span class="o">-&gt;</span><span class="p">()]()</span>
</span><span class='line'><span class="k">var</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">closureArray2</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// here i will be 5</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span> <span class="c1">// prints 0</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span> <span class="c1">// prints 1</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span> <span class="c1">// prints 2</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span> <span class="c1">// prints 3</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">4</span><span class="p">]()</span> <span class="c1">// prints 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way, we keep an immutable copy of the variable <code>j</code>. Thanks to this copy, further changes to <code>j</code>, outside the closure, will not affect the closure. <code>j</code> is a let constant here. It is not mutable.</p>

<p>We can add multiple values to the capture list :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">closure</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(j) \(k) \(l)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>also, you can have alias names for the values captured.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">closure</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">a</span> <span class="o">=</span> <span class="n">j</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">l</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(a) \(b) \(c)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequece and Collection in Swift]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/06/03/sequece-and-collection-in-swift/"/>
    <updated>2019-06-03T16:22:33+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/06/03/sequece-and-collection-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#array-out-of-range-crash"><code>Array</code> out of Range Crash</a></li>
<li><a href="#homemade-collection">Homemade collection</a></li>
<li><a href="#sequences">Sequences</a>

<ul>
<li><a href="#how-to-conform-to-sequence-protocol">How to Conform to <code>Sequence</code> Protocol</a></li>
<li><a href="#make-our-section-conform-to-sequence-protocol">Make our <code>Section</code> Conform to <code>Sequence</code> Protocol</a></li>
<li><a href="#gifts">Gifts</a></li>
</ul>
</li>
<li><a href="#collections">Collections</a>

<ul>
<li><a href="#how-to-conform-to-collection-protocol">How to Conform to <code>Collection</code> Protocol</a></li>
<li><a href="#make-our-section-conform-to-collection-protocol">Make our <code>Section</code> Conform to <code>Collection</code> Protocol</a></li>
</ul>
</li>
<li><a href="#difference-between-array-and-collection">Difference between <code>Array</code> and <code>Collection</code></a></li>
<li><a href="#reference">Reference</a></li>
</ul>


<p>The content comes from the following posts:</p>

<ol>
<li><a href="https://medium.com/swift-programming/swift-sequences-ce22d76f120c">Swift Sequences</a></li>
<li><a href="https://medium.com/swift-programming/swift-collections-e5fff3cd6759">Swift Collections</a></li>
</ol>


<p>But some of the code inside is old and can&rsquo;t be compiled with swift 5.0. So rewritten the code using swift 5.0.</p>

<p><a id="markdown-array-out-of-range-crash" name="array-out-of-range-crash"></a></p>

<h2><code>Array</code> out of Range Crash</h2>

<p>Before diving into Swift Sequences, let’s see a strange behavior.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">array</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="err">😭</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="s">&quot;z&quot;</span><span class="p">]</span> <span class="err">😎</span>
</span><span class='line'>
</span><span class='line'><span class="err">🤔</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, when requesting an element that doesn’t exist, why arrays crash whereas dictionaries don’t?</p>

<p>Arrays and dictionaries are two base collections provided by the Swift standard library. We can access those collections elements through the [] notation, also known as subscript. Let’s see how those subscripts are defined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Element</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="nl">Key</span><span class="p">:</span> <span class="n">Hashable</span><span class="p">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">Key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Value</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What’s interesting is that arrays have a non optional return type. Subscript can’t throw errors so there are no alternatives other than a fatalError if we request an index that doesn’t exist.</p>

<p>For dictionaries, on the other hand, an optional Value is returned, which allows to gracefully return nil if the index doesn’t exist.</p>

<p>We can adopt dictionaries safer approach by overloading the arrays subscript — we can’t override them. Adding an external name to the parameter is enough.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Element</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">count</span> <span class="o">?</span> <span class="nb">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">:</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We saw how we can create a new accessor to the elements of an array, but can we do the same with a homemade collection?</p>

<p><a id="markdown-homemade-collection" name="homemade-collection"></a></p>

<h2>Homemade collection</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Internally, this ‘collection’ is based on an array. This is an implementation detail for the simplicity of the example. We could have used a linked list as in this <a href="http://austinzheng.com/2015/01/24/swift-seq/">excellent article</a> by <a href="https://twitter.com/austinzheng">Austin Zheng</a>.</p>

<p>Creating a subscript on our collection is very easy, we can even reuse the array’s extension we made earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example in practice :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">cars</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;911&quot;</span><span class="p">,</span> <span class="s">&quot;Cayman&quot;</span><span class="p">,</span> <span class="s">&quot;Cayenne&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">section</span> <span class="o">=</span> <span class="n">Section</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Porsche&quot;</span><span class="p">,</span> <span class="nl">elements</span><span class="p">:</span> <span class="n">cars</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">section</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Optional(&quot;Cayman&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! But does that make our type a collection, as Swift defines it?</p>

<p><a id="markdown-sequences" name="sequences"></a></p>

<h2>Sequences</h2>

<p>When it comes to manipulating sets, the most abstract notion given by the standard library is the Sequence, defined as</p>

<blockquote><p>A type that can be iterated with a <code>for…in</code> loop.</p></blockquote>

<p><a id="markdown-how-to-conform-to-sequence-protocol" name="how-to-conform-to-sequence-protocol"></a></p>

<h3>How to Conform to <code>Sequence</code> Protocol</h3>

<p>This section is from <a href="https://developer.apple.com/documentation/swift/sequence">Sequece official site</a>.</p>

<p>Making your own custom types conform to Sequence enables many useful operations, like for-in looping and the contains method, without much effort. To add Sequence conformance to your own custom type, add a makeIterator() method that returns an iterator.</p>

<p>Alternatively, if your type can act as its own iterator, implementing the requirements of the IteratorProtocol protocol and declaring conformance to both Sequence and IteratorProtocol are sufficient.</p>

<p>Here’s a definition of a Countdown sequence that serves as its own iterator. The makeIterator() method is provided as a default implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">Countdown</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">defer</span> <span class="p">{</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">count</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">threeToGo</span> <span class="o">=</span> <span class="n">Countdown</span><span class="p">(</span><span class="nl">count</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">threeToGo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Prints &quot;3&quot;</span>
</span><span class='line'><span class="c1">// Prints &quot;2&quot;</span>
</span><span class='line'><span class="c1">// Prints &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-make-our-section-conform-to-sequence-protocol" name="make-our-section-conform-to-sequence-protocol"></a></p>

<h3>Make our <code>Section</code> Conform to <code>Sequence</code> Protocol</h3>

<p>The <code>Section</code> struct can&rsquo;t act as its own iterator, we need to define an iterator for it, and then return an instance of the defined iterator inside <code>func makeIterator() -&gt; Section&lt;T&gt;.Iterator</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span> <span class="n">Sequence</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">Iterator</span><span class="p">:</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">currentIndex</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span> <span class="p">(</span><span class="n">_</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">tempIndex</span> <span class="o">=</span> <span class="n">currentIndex</span>
</span><span class='line'>            <span class="n">currentIndex</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">array</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">tempIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">makeIterator</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Iterator</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Iterator</span><span class="p">(</span><span class="n">elements</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-gifts" name="gifts"></a></p>

<h3>Gifts</h3>

<p>Is that all? No! By conforming to SequenceType we also get methods for free, here is some of them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">min</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 911</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">max</span><span class="p">()</span>
</span><span class='line'><span class="c1">// Cayman</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span>
</span><span class='line'><span class="c1">// [&quot;911&quot;, &quot;Cayenne&quot;, &quot;Cayman&quot;]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&quot;911&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get the min, max &amp; sort methods because the elements of our sequence, String in our case, are Comparable. Contains is available thanks to our elements being Equatable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// [&quot;Cayman&quot;, &quot;Cayenne&quot;]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// [3, 6, 7]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">+</span> <span class="err">$</span><span class="mf">1.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>And for functional programming fans, filter, map and reduce are also given.</p>

<p><a id="markdown-collections" name="collections"></a></p>

<h2>Collections</h2>

<p>Sequence is the most basic set notion given by the Swift standard library. There is a more evolved one.</p>

<p>A collection is defined as follow :</p>

<blockquote><p>A multi-pass <em>sequence</em> with addressable positions</p></blockquote>

<p>As we saw previously, a sequence is a type that can be iterated with a <code>for…in</code> loop. It doesn’t need that the elements might be iterated over several times. And it doesn’t need that we give a way to access directly an element.</p>

<p>Collections require those last two points. As a side effect, it no longer allows us to have an infinite number of elements.</p>

<p>To be a collection, a type must conform to the <code>Collection</code> protocol.</p>

<p><a id="markdown-how-to-conform-to-collection-protocol" name="how-to-conform-to-collection-protocol"></a></p>

<h3>How to Conform to <code>Collection</code> Protocol</h3>

<p>This section comes from <a href="https://developer.apple.com/documentation/swift/collection">Collection official site</a>.</p>

<p>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the Collection protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add Collection conformance to your type, you must declare at least the following requirements:</p>

<ol>
<li>The <code>startIndex</code> and <code>endIndex</code> properties</li>
<li>A subscript that provides at least read-only access to your type’s elements</li>
<li>The <code>index(after:)</code> method for advancing an index into your collection</li>
<li>Conform to <code>Sequece</code> Protocol, as <code>Collection</code> is inherited from <code>Sequence</code></li>
</ol>


<p><a id="markdown-make-our-section-conform-to-collection-protocol" name="make-our-section-conform-to-collection-protocol"></a></p>

<h3>Make our <code>Section</code> Conform to <code>Collection</code> Protocol</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span> <span class="n">Collection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// begin: required for Collection</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">startIndex</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">endIndex</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">elements</span><span class="p">.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">index</span><span class="p">(</span><span class="n">after</span> <span class="nl">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// end: required for Collection</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// begin: required for Sequence</span>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">Iterator</span><span class="p">:</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">currentIndex</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span> <span class="p">(</span><span class="n">_</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">tempIndex</span> <span class="o">=</span> <span class="n">currentIndex</span>
</span><span class='line'>            <span class="n">currentIndex</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">array</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">tempIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">makeIterator</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Iterator</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Iterator</span><span class="p">(</span><span class="n">elements</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// end: required for Sequence</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>endIndex</code> has to be after the last element. It allows to define an empty collection with <code>startIndex</code> = <code>endIndex</code>.</p>

<p>Like conforming to <code>Sequence</code>, we get some methods / properties for free:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">first</span>
</span><span class='line'><span class="c1">// 911</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">isEmpty</span>
</span><span class='line'><span class="c1">// false</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of</span><span class="p">:</span> <span class="s">&quot;911&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get indexOf thanks to our Elements being Equatable.</p>

<p><a id="markdown-difference-between-array-and-collection" name="difference-between-array-and-collection"></a></p>

<h2>Difference between <code>Array</code> and <code>Collection</code></h2>

<p>We created our own collection, which is great, but what about that difference of behavior between Arrays and Dictionaries we talked about at the beginning of the post? We saw that Array’s dangerous subscript was coming from the Indexable protocol, but what about Dictionaries?</p>

<p>Dictionaries, like Arrays, are a collection, as Swift defines it. They both conform to CollectionType. So Dictionaries are also required to provide an ‘unsafe’ subscript that takes an Index and returns a non optional Element. The one we’re used to is just a convenience subscript.</p>

<p>A simple example shows that it is also really easy to get a crash with Dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="o">:</span> <span class="s">&quot;bmw&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="o">:</span> <span class="s">&quot;audi&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="o">:</span> <span class="s">&quot;citroen&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">startIndex</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="c1">// (key: &quot;c&quot;, value: &quot;citroen&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'><span class="c1">// (key: &quot;b&quot;, value: &quot;audi&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Fatal error</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The last question that remains is why <code>Collection</code> requires a subscript that may crash? Simply for performance reason, it costs too much to check the validity of the given index. Crashing is faster :)</strong></p>

<p><a id="markdown-reference" name="reference"></a></p>

<h2>Reference</h2>

<ol>
<li><a href="https://medium.com/swift-programming/swift-sequences-ce22d76f120c">Swift Sequences</a></li>
<li><a href="https://medium.com/swift-programming/swift-collections-e5fff3cd6759">Swift Collections</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自然语言理解（NLU）综述]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/29/overview-of-nlp-and-nlu/"/>
    <updated>2019-05-29T17:27:58+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/29/overview-of-nlp-and-nlu</id>
    <content type="html"><![CDATA[<!-- more -->


<p>这篇总结有点乱，权当留作自己看。</p>

<ul>
<li><a href="#%E4%BA%BA%E6%9C%BA%E5%AF%B9%E8%AF%9D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%9E%8B">人机对话的两种模型</a></li>
<li><a href="#nlu%E4%B8%8Enlp">NLU与NLP</a>

<ul>
<li><a href="#stanford-corenlp">Stanford CoreNLP</a></li>
<li><a href="#ios-naturallanguage-framework">iOS <em>NaturalLanguage</em> framework</a>

<ul>
<li><a href="#custom-machine-learning-models">Custom Machine Learning Models</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%90%86%E8%A7%A3%E5%B9%B3%E5%8F%B0">自然语言理解平台</a></li>
<li><a href="#google%E7%9A%84dialogflow">Google的Dialogflow</a>

<ul>
<li><a href="#dialogflow%E7%9A%84%E5%8E%86%E5%8F%B2">Dialogflow的历史</a></li>
<li><a href="#dialogflow%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5">Dialogflow的一些概念</a></li>
<li><a href="#%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0intents%E4%B9%8B%E9%97%B4%E7%9A%84entities%E5%85%B1%E4%BA%AB">两种方法实现intents之间的entities共享</a></li>
<li><a href="#training-tab-in-dialogflow-platform">“Training” tab in Dialogflow platform</a></li>
<li><a href="#integrations-analytics-and-fulfillment">“Integrations”, “Analytics” and “Fulfillment”</a></li>
<li><a href="#prebuild-agent-and-small-talk">“Prebuild Agent” and “Small Talk”</a></li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8dialogflow%E7%9A%84%E4%BE%8B%E5%AD%90">一些使用Dialogflow的例子</a></li>
</ul>
</li>
<li><a href="#alexa-and-lex">Alexa and Lex</a></li>
<li><a href="#microsoft-luis-text-analytics-api">Microsoft LUIS Text Analytics API</a></li>
<li><a href="#facebook%E7%9A%84witai">Facebook的wit.ai</a></li>
<li><a href="#snips">Snips</a>

<ul>
<li><a href="#duckling">Duckling</a></li>
</ul>
</li>
<li><a href="#ibm%E7%9A%84watson">IBM的Watson</a></li>
<li><a href="#swiftnlc">SwiftNLC</a>

<ul>
<li><a href="#xunfei-command-recognition">Xunfei Command Recognition</a></li>
</ul>
</li>
<li><a href="#siri-and-sirikit">Siri and SiriKit</a>

<ul>
<li><a href="#sirikit-build-in-domain">SiriKit build-in domain</a></li>
<li><a href="#sirikit-custom-intent">SiriKit custom intent</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-人机对话的两种模型" name="人机对话的两种模型"></a></p>

<h2>人机对话的两种模型</h2>

<p>自然语言理解（NLU）的最终目的是让计算机能够理解人类的语言，实现人机对话。目前，人机对话模型基本上有两种：</p>

<ol>
<li>基于意图(Intent-based)的对话：这是当NLP算法使用intents和entities进行对话时，通过识别用户声明中的名词和动词，然后与它的dictionary交叉引用，让bot可以执行有效的操作。目前，大部分平台都是基于这种模式进行训练的，包括谷歌的Dialogflow。</li>
<li>基于流程(Flow-based)的对话：基于流程的对话是智能通信的下一个级别。在这里，我们会给予两个人之间对话的许多不同样本的RNN（循环神经网络），创建的机器人将根据你训练的ML模型进行响应。 wit.ai是在这个领域取得巨大进展的少数网站之一。但这个太超前，不是我们考虑使用的对象，接下来也不会讨论。</li>
</ol>


<p>详细讨论参考：<a href="https://chatbotsmagazine.com/bot-talks-intent-based-vs-flow-base-conversations-798788dc9cf6">Bot Talks: Intent-Based vs. Flow-Base Conversations</a>。</p>

<p><a id="markdown-nlu与nlp" name="nlu与nlp"></a></p>

<h2>NLU与NLP</h2>

<p>NLP（Natural Language Processing）是NLU（Natural Language Understanding）的一个前期步骤：NLP用于对文本或者语音进行机器学习训练和识别时的特征提取阶段。</p>

<p><a id="markdown-stanford-corenlp" name="stanford-corenlp"></a></p>

<h3>Stanford CoreNLP</h3>

<p>可以去<a href="http://nlp.stanford.edu:8080/corenlp/process">Stanford CoreNLP</a>试一下效果。使用界面可以看一下：</p>

<p><img src="http://hongchaozhang.github.io/images/NLU_Stanford_CoreNLP.png" alt="stanford CoreNLP" /></p>

<p><a id="markdown-ios-naturallanguage-framework" name="ios-naturallanguage-framework"></a></p>

<h3>iOS <em>NaturalLanguage</em> framework</h3>

<p>iOS的<em>NaturalLanguage</em>框架可以做的事情如下：</p>

<p><img src="http://hongchaozhang.github.io/images/NLU_AppleNLP.png" alt="Apple nlp framework" /></p>

<p><a id="markdown-custom-machine-learning-models" name="custom-machine-learning-models"></a></p>

<h4>Custom Machine Learning Models</h4>

<p>用户可以自己训练模型，用于下列事情：</p>

<p>NSLinguisticTagger:</p>

<ul>
<li>Language identification</li>
<li>Tokenization in Word/Sentence/Paragraph</li>
<li>Part of speech</li>
<li>Lemmatization</li>
<li>Named entity recognition</li>
</ul>


<p>With custom models:</p>

<ol>
<li>Text classification

<ul>
<li>Sentiment classification</li>
<li>Topic classification</li>
<li>Domain classification</li>
</ul>
</li>
<li>Word tagging

<ul>
<li>Part of speech</li>
<li>Named entity</li>
<li>Slot parsing

<ul>
<li>Chunking</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ol>


<p><a id="markdown-自然语言理解平台" name="自然语言理解平台"></a></p>

<h2>自然语言理解平台</h2>

<p>一些比较有名气的自然语言理解平台：</p>

<ul>
<li>Facebook’s Wit.ai,</li>
<li>IBM Watson’s Conversation Service,</li>
<li>Microsoft’s Language Understanding and Intelligence Service or</li>
<li>Google NLP API</li>
</ul>


<p>Wit.ai joined Facebook on 2015.1.5</p>

<p>一些常见产品及其背后的支撑技术：</p>

<ul>
<li>Amazon: Echo &lt;- Alexa &lt;- Lex</li>
<li>Apple: iPhone &lt;- Siri &lt;- SiriKit</li>
<li>Google: Android phone &lt;- Google Asistant &lt;- Dialogflow</li>
<li>Microsoft: Windows phone &lt;- Cortana &lt;- Luis</li>
</ul>


<p>下面选择一些平台做简单介绍。</p>

<p><a id="markdown-google的dialogflow" name="google的dialogflow"></a></p>

<h2>Google的Dialogflow</h2>

<blockquote><p><a href="https://dialogflow.com/">Google的Dialogflow</a>Give users new ways to interact with your product by building engaging voice and text-based conversational interfaces, such as voice apps and chatbots, powered by AI. Connect with users on your website, mobile app, the Google Assistant, Amazon Alexa, Facebook Messenger, and other popular platforms and devices.</p></blockquote>

<p><a id="markdown-dialogflow的历史" name="dialogflow的历史"></a></p>

<h3>Dialogflow的历史</h3>

<p>Dialogflow就是Speaktoit公司的api.ai。</p>

<ul>
<li>2011: Speaktoit developed an intelligent personal assistant for mobile phones</li>
<li>2014: Speaktoit released api.ai</li>
<li>2016: Google buys Speaktoit to power Google Assistant</li>
<li>2017: api.ai is renamed to Dialogflow</li>
</ul>


<p><a id="markdown-dialogflow的一些概念" name="dialogflow的一些概念"></a></p>

<h3>Dialogflow的一些概念</h3>

<ul>
<li>Agents: 一套module包含dialogflow及自然語言理解使用者的語義後，執行整個動作 action. Ex:如上圖 TestAgent</li>
<li>Intents: 使用者的意圖。意圖由開發人員配置。</li>
<li>Entities:重要的關鍵字眼(我真的不知道怎麼翻好，Google說這個字叫做實體?) 從用戶口中所提到的重要的關鍵字眼轉換成重要的資訊，籍此提供給Intent。例如：“訂飛機” ：這句話中還需要 城市 日期 等資訊，來能完成訂飛機這個動作，所以 城市 和 日期 就是Entities.</li>
<li>Fulfilment: 程式撰寫的地方。例如 訂飛機 還得串飛機公司的API才有可能完成訂購，所以程式邏緝就是寫在這裡。</li>
<li>Integrations: LINE, Google home etc..</li>
<li>Prebuilt Agents: dialogflow幫你預先訓練好的Agent，你可以拿來用。</li>
<li>Smalltalk: 也是dialogflow幫你預先訓練好的Agent，幫助你的chatbot對話更友善.</li>
</ul>


<p><a id="markdown-两种方法实现intents之间的entities共享" name="两种方法实现intents之间的entities共享"></a></p>

<h3>两种方法实现intents之间的entities共享</h3>

<ul>
<li>Context: 在线性对话中，完成讯息在Intent中的传送。</li>
<li>Followup Intent</li>
</ul>


<blockquote><p>对话生命周期，就是这个参数可以存多久。</p></blockquote>

<p><a id="markdown-training-tab-in-dialogflow-platform" name="training-tab-in-dialogflow-platform"></a></p>

<h3>“Training” tab in Dialogflow platform</h3>

<blockquote><p><a href="https://console.dialogflow.com/api-client/#/agent/dea6f73c-7c22-44b6-a1a8-45cdcd160bfc/training">官方关于Training的说明</a>：你将收到所有发送给agent的回覆讯息以及agent回覆的内容，如果你告诉你的agent一些回应文本，但它回应你不喜欢的输出，这就非常有用，若你稍后意识到忘记了某个关键字的同义词，并且用户正在使用这个关键字，那么也可能会有所帮助，可以去告诉你的代理在这种情况下应该做什么。</p></blockquote>

<p><a id="markdown-integrations-analytics-and-fulfillment" name="integrations-analytics-and-fulfillment"></a></p>

<h3>“Integrations”, “Analytics” and “Fulfillment”</h3>

<blockquote><p>在Training下方，你可以看到Integrations。在这里，可以管理你的agent去串接不同的服务，例如Google Assistant，Twitter，Slack，Messenger，Cortana，Alexa等等。 Integrations之后，还有Analytics，基本上用来显示建议名称，之后还有Fulfillment，如果你要调用一个API并实现一个webhook，这就是你会需要来的地方。</p></blockquote>

<p><a id="markdown-prebuild-agent-and-small-talk" name="prebuild-agent-and-small-talk"></a></p>

<h3>“Prebuild Agent” and “Small Talk”</h3>

<p>最后两个选项功能非常简单，但很有用。第一个是Prebuilt Agents，在这里，你可以import一个预先存在的代理框架，有很多例子，如食物传递机器人，音乐机器人，甚至（抱歉，但你真的需要知道这个）hotel预订机器人！最后一个选项是Small Talk，如果你将代理设计为像Siri或Google Assistant这样的每日伙伴(daily companion)，这个选项非常有用，Small Talk允许你添加常见问题的答案，我们都喜欢问我们的机器人，如”你几岁？”或”你住哪里？”，以及更热门的问题”你愿意嫁给我吗？”</p>

<p><a id="markdown-一些使用dialogflow的例子" name="一些使用dialogflow的例子"></a></p>

<h3>一些使用Dialogflow的例子</h3>

<ol>
<li>林建宏的7篇文章：如何使用Dialogflow建立Chatbot #1-#7</li>
<li><a href="https://medium.com/@wolkesau/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8dialogflow%E5%BB%BA%E7%AB%8Bchatbot-1-%E4%BB%8B%E7%B4%B9-62736bcdad95">用Dialogflow建立LINE Chatbot #1 介紹</a></li>
<li><a href="https://github.com/appcoda/ChatbotHotel">A Demo for booking hotel based on Dialogflow</a></li>
<li><a href="https://www.appcoda.com.tw/chatbot-dialogflow-ios/">聊天機器人教學：使用Dialogflow (API.AI)開發 iOS Chatbot App</a></li>
</ol>


<p><a id="markdown-alexa-and-lex" name="alexa-and-lex"></a></p>

<h2>Alexa and Lex</h2>

<blockquote><p>Echo to Alexa as iPhone to Siri
Lex is whats inside Alexa
Lex is part of AWS, but Alexa isn&rsquo;t</p>

<p>Alexa is more focusing on communication using voice. Hence it has some special requirements for utterances. For example, the number is not supported in the utterances. You need to use &lsquo;Show me three elements&rsquo; instead of &lsquo;Show me 3 elements&rsquo;. For acronym, we need to use &lsquo;n.b.a&rsquo; instead of &lsquo;NBA&rsquo;.</p>

<p>Lex is a platform which can power bot who accept text input.</p>

<p>Amazon Lex 让您可以将语音和文本聊天访问集成到现有应用程序中。Amazon Alexa 允许您使用 Amazon Echo 或任何启用 Alexa Voice Service 的设备为家庭或工作场所的用户提供免提语音接口。</p></blockquote>

<p><a id="markdown-microsoft-luis-text-analytics-api" name="microsoft-luis-text-analytics-api"></a></p>

<h2>Microsoft LUIS Text Analytics API</h2>

<ol>
<li>Detect language</li>
<li>Analyze sentiment</li>
<li>Extract key phrases

<ul>
<li>使用方法参考<a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/quickstarts/python">Python demo</a>。</li>
</ul>
</li>
<li>Identify entities

<ul>
<li>使用方法参考<a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/quickstarts/python">Python demo</a>。</li>
</ul>
</li>
</ol>


<p><a id="markdown-facebook的witai" name="facebook的witai"></a></p>

<h2>Facebook的wit.ai</h2>

<p>参见<a href="https://wit.ai/">官方文档</a>。</p>

<p><a id="markdown-snips" name="snips"></a></p>

<h2>Snips</h2>

<p>Snips的设计流程还是非常好的 ，包含基于正则表达式的确定性识别和基于机器学习的可能性识别。一些资料：</p>

<ul>
<li><a href="https://medium.com/snips-ai/an-introduction-to-snips-nlu-the-open-source-library-behind-snips-embedded-voice-platform-b12b1a60a41a">Post</a></li>
<li><a href="https://snips-nlu.readthedocs.io/en/latest/index.html">Document</a></li>
<li><a href="https://github.com/snipsco/snips-platform-swift">GitHub for iOS app demo</a></li>
<li><a href="https://console.snips.ai/assistants/proj_ageaw4b4d83">Snips assistent generation</a></li>
</ul>


<p><a id="markdown-duckling" name="duckling"></a></p>

<h3>Duckling</h3>

<p>Snips使用<a href="https://github.com/facebook/duckling">Duckling</a>进行下面的理解：</p>

<p>输入："the first Tuesday of October"
输出：{&ldquo;value&rdquo;:&ldquo;2017-10-03T00:00:00.000-07:00&rdquo;,&ldquo;grain&rdquo;:&ldquo;day&rdquo;}</p>

<blockquote><p>Note:
* Spin your own Duckling server or using wit.ai’s build entities.
* <a href="https://medium.com/wit-ai/open-sourcing-duckling-our-probabilistic-date-parser-4351ee66c4ba">Open Sourcing Duckling, our probabilistic (date) parser</a></p></blockquote>

<p><a id="markdown-ibm的watson" name="ibm的watson"></a></p>

<h2>IBM的Watson</h2>

<p>参看<a href="https://www.ibm.com/watson/services/natural-language-classifier/">官方文档</a>。</p>

<p><a id="markdown-swiftnlc" name="swiftnlc"></a></p>

<h2>SwiftNLC</h2>

<ul>
<li><a href="https://chatbotsmagazine.com/coreml-nlc-with-keras-tensorflow-and-apple-nslinguistictagger-1659021ea8e5">Offline Intent Understanding: CoreML NLC with Keras/TensorFlow and Apple NSLinguisticTagger</a></li>
<li><a href="https://heartbeat.fritz.ai/implementing-a-natural-language-classifier-in-ios-with-keras-core-ml-358f114c0b51">Implementing a Natural Language Classifier in iOS with Keras + Core ML</a></li>
</ul>


<p><a id="markdown-xunfei-command-recognition" name="xunfei-command-recognition"></a></p>

<h3>Xunfei Command Recognition</h3>

<p>例如，开发一个简单的语音拨号应用，可定义如下语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;commands&gt;:(找一下|打电话给) &lt;name&gt;;
</span><span class='line'>&lt;name&gt;: 张三|李四;</span></code></pre></td></tr></table></div></figure>


<p>该语法使识别引擎可以支持以下说法：找一下张三 、打电话给张三 、找一下李四 、打电话给李四。
凡是用户说出这个范围中的任意一句话，均可以被识别系统识别。如果用户说的话不在上述范围中，识别系统可能拒绝识别。</p>

<p><a id="markdown-siri-and-sirikit" name="siri-and-sirikit"></a></p>

<h2>Siri and SiriKit</h2>

<p><a id="markdown-sirikit-build-in-domain" name="sirikit-build-in-domain"></a></p>

<h3>SiriKit build-in domain</h3>

<p>SiriKit支持的build-in的domain包括：</p>

<ul>
<li>Messaging</li>
<li>Lists and Notes</li>
<li>Workouts</li>
<li>Payments</li>
<li>VoIP Calling</li>
<li>Visual Codes</li>
<li>Photos</li>
<li>Ride Booking</li>
<li>Car Commands</li>
<li>CarPlay</li>
<li>Restaurant Reservations</li>
</ul>


<p>基于build-in的domain，可以不经过任何机器模型训练达到下面的效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>“Hey Siri, send a UnicornChat message”
</span><span class='line'>“To whom?”
</span><span class='line'>“Celestra”
</span><span class='line'>“What do you want to say to Celestra?”
</span><span class='line'>“Let’s add more sparkle transitions” </span></code></pre></td></tr></table></div></figure>


<p>当然也可以用机器学习模型做一些事情。</p>

<blockquote><p>Domain model can be trained and used through NLP framework.</p></blockquote>

<p>我们也可以帮助Siri识别自定义的词典（WWDC2017 228_making_great_sirikit_experiences)。可以支持两种自定义的词典：</p>

<ul>
<li>App vocabulary: known to all your users and unique to your app, supplied in the plist file.</li>
<li>User vocabulary: known only to some specific users, supplied at the runtime.</li>
</ul>


<p>但是，注意：</p>

<ul>
<li>Need to update the user vocabulary if some info changes.</li>
<li>Need to reset the user vocabulary if the user reset the app, or log out.</li>
</ul>


<p><a id="markdown-sirikit-custom-intent" name="sirikit-custom-intent"></a></p>

<h3>SiriKit custom intent</h3>

<p>SiriKit的custom intent只是用来实现Siri Shortcut的，不能携带参数。</p>

<blockquote><p>Custom intent can only be used as shortcut and NO parameters will be extracted from the voice command.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Natural Language Understanding Engine on iOS]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/22/offline-natural-language-understanding-engine-on-ios/"/>
    <updated>2019-05-22T16:04:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/22/offline-natural-language-understanding-engine-on-ios</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#objective">Objective</a>

<ul>
<li><a href="#what-is-a-good-nlu-engine">What is a good NLU engine</a>

<ul>
<li><a href="#deterministic-behavior">Deterministic behavior</a></li>
<li><a href="#generalization-power">Generalization power</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#design-and-workflow">Design and Workflow</a></li>
<li><a href="#deterministic-intent-parser">Deterministic Intent Parser</a></li>
<li><a href="#probabilistic-intent-parser">Probabilistic Intent Parser</a>

<ul>
<li><a href="#intent-classification">Intent Classification</a>

<ul>
<li><a href="#model-training">Model Training</a></li>
<li><a href="#model-usage">Model Usage</a></li>
</ul>
</li>
<li><a href="#slot-filling">Slot Filling</a>

<ul>
<li><a href="#model-training-1">Model Training</a></li>
<li><a href="#model-usage-1">Model Usage</a></li>
</ul>
</li>
<li><a href="#model-size">Model Size</a></li>
<li><a href="#problems-to-be-solved">Problems to Be Solved</a>

<ul>
<li><a href="#intent-classification-model-has-no-probability-output">Intent Classification Model Has No Probability Output</a></li>
<li><a href="#slot-filling-model-tagges-the-label-by-words-not-phrase">Slot Filling Model Tagges the Label by Words, not Phrase</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a id="markdown-objective" name="objective"></a></p>

<h2>Objective</h2>

<p><img src="http://hongchaozhang.github.io/images/NLUObjective.png" alt="nlu objective" /></p>

<p>We want an NLU Engine to understand the normal text command on Mobile. We hope the engine can know the command&rsquo;s intent and the info the command needs to execute.</p>

<p>Currently, there are many NLU related tools, like Google Dialogflow, Amazon Lex, Facebook Wit.ai, Microsoft Luis. However, they are all online tools. Considering the privacy problem, we are trying to build our own offline NLU Engine.</p>

<p><a id="markdown-what-is-a-good-nlu-engine" name="what-is-a-good-nlu-engine"></a></p>

<h3>What is a good NLU engine</h3>

<p>Let’s start by looking at a simple example, and see what you would expect from a good NLU engine.</p>

<p>First, we need some examples to train the NLU engine. Consider the following dataset, used to train a simple weather assistant with a few query examples:</p>

<ul>
<li>Give me the weather for [tomorrow](date)</li>
<li>Show me the [Paris](location) weather for [Sunday](date)</li>
</ul>


<p><a id="markdown-deterministic-behavior" name="deterministic-behavior"></a></p>

<h4>Deterministic behavior</h4>

<p>The first thing you want is that all the examples you give to train the model are correctly supported by the engine. This makes the system predictable and easy to use: if a query is not correctly parsed, then add it to the dataset and it will work right away.</p>

<p><a id="markdown-generalization-power" name="generalization-power"></a></p>

<h4>Generalization power</h4>

<p>Having this deterministic behavior is great for robustness and predictability, but a powerful NLU engine also needs to have some generalization power. You want the system not only to recognize patterns provided in the training set, but also all the possible variations that come from speaking naturally. If we go back to the previous dataset, it is reasonable to expect the NLU engine to parse a query like: “What’s the weather in Beijing right now?” even though it is not one of the training examples.</p>

<p><a id="markdown-design-and-workflow" name="design-and-workflow"></a></p>

<h2>Design and Workflow</h2>

<p><img src="http://hongchaozhang.github.io/images/NLUDesign.png" alt="nlu design" /></p>

<p>In order to satisfy these objectives: deterministic behavior and generalization power, we built the processing pipeline described in the figure above. It receives a text as input, and outputs a structured response containing the intent and the list of slots. The main processing unit of the pipeline is the NLU engine. It contains two intent parsers which are called successively: a deterministic intent parser and a probabilistic one.</p>

<p>The deterministic parser relies on regular expressions to match intent and slots, which results in perfect behavior on training examples but doesn’t generalize. This parser is the first to be used because of its strictness.</p>

<p>The probabilistic parser is used whenever the first parser fails to find a match. It uses machine learning to generalize beyond the set of sentences seen at train time, thus making our NLU engine be able to cope with examples which are not in the scope of the training data set. This parser involves two successive steps: intent classification and slot filling. These two steps rely on trained machine learning models to classify intent and extract slots.</p>

<p><a id="markdown-deterministic-intent-parser" name="deterministic-intent-parser"></a></p>

<h2>Deterministic Intent Parser</h2>

<p>The Deterministic Intent Parse is the first step to be used. This parser relies on some regular expressions to match the intent and slots. If the new input has the same structure with one of the training examples, we will find its intent and slots by comparing the input with the matched regular expression.</p>

<p>The regular expressions are built based on the training examples. For a training case:</p>

<ul>
<li>What is the weather in [Alaska](location)</li>
</ul>


<p>We will build a regular expression:</p>

<ul>
<li>(what is the weather in)(?&lt;location1&gt;.+)</li>
</ul>


<p><a id="markdown-probabilistic-intent-parser" name="probabilistic-intent-parser"></a></p>

<h2>Probabilistic Intent Parser</h2>

<p>If the Deterministic Intent Parser fails to find the intent and slots, the Probabilistic Intent Parser will be used.</p>

<p>The Probabilistic Intent Parser has two steps:</p>

<ul>
<li>Intent Classification</li>
<li>Slot Filling</li>
</ul>


<p>The Intent Classification is to find the intent of the input command text, and the Slot Filling is to extract all the slots needed by the intent. These two steps are both based on trained machine models.</p>

<p>Apple has released CreateML for training natural language models, which also integrates the powerful NatrualLanguage framework functions, like Tokenization, Part of Speech, Lemmatization, Name Entity Recognition, etc. This will make the training process very simple, and the trained model will be more accurate and smaller.</p>

<p><a id="markdown-intent-classification" name="intent-classification"></a></p>

<h3>Intent Classification</h3>

<p><a id="markdown-model-training" name="model-training"></a></p>

<h4>Model Training</h4>

<p>For Intent Classification model training, we prepare the data set as follows (The size of the training data is 3282 falling into four intents.):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;I would like the forecast in cupertino california  tomorrow&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecast&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Forecast in Maine USA next week&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecast&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Will I be able to wear open-toed shoes twenty three hours and seven minutes from now in Severn?&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecastItem&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Should I bring a raincoat to the Belgrade and Loreto areas of Oman at midnight?&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecastItem&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apple has release CreateML framework for training machine learning models easily inside Swift playground and the trained model can be saved as mlmodel type. And the MLTextClassifier class from CreateML will benefit from Apple&rsquo;s NatrualLanguage framework for Tokenization, Part of Speech, Lemmatization, etc.</p>

<p>The training script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">trainingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;intentClassificationFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/train&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span>  <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">trainingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the classifier with a training data.</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLTextClassifier</span><span class="p">(</span><span class="nl">trainingData</span><span class="p">:</span> <span class="n">trainingData</span><span class="p">,</span> <span class="nl">textColumn</span><span class="p">:</span> <span class="s">&quot;text&quot;</span><span class="p">,</span> <span class="nl">labelColumn</span><span class="p">:</span> <span class="s">&quot;label&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Evaluating training &amp; validation accuracies.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">trainingMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'><span class="k">let</span> <span class="n">validationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">validationMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the properly labeled testing data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;intentClassificationFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/test&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">testingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Counting the testing evaluation.</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationMetrics</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">evaluation</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">testingData</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Confusion matrix in order to see which labels were classified wrongly.</span>
</span><span class='line'><span class="k">let</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">confusion</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Confusion matrix: \(confusionMatrix)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Metadata for saving the model.</span>
</span><span class='line'><span class="k">let</span> <span class="n">metadata</span> <span class="o">=</span> <span class="n">MLModelMetadata</span><span class="p">(</span><span class="nl">author</span><span class="p">:</span> <span class="s">&quot;Hongchao Zhang&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">shortDescription</span><span class="p">:</span> <span class="s">&quot;A model trained to classify weather related commands.&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">version</span><span class="p">:</span> <span class="s">&quot;1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Saving the model. Remember to update the path.</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">classifier</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="s">&quot;/Users/hozhang/Downloads/textClassifier.mlmodel&quot;</span><span class="p">),</span>
</span><span class='line'>                    <span class="nl">metadata</span><span class="p">:</span> <span class="n">metadata</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get 99.23% training accuracy and 98.87% validation accuracy.</p>

<p><a id="markdown-model-usage" name="model-usage"></a></p>

<h4>Model Usage</h4>

<p>For the trained model of mlmodel type, we can use it in our iOS app through NLModel (from NatrualLanguage framework). The demo swift code may be like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">modelUrl</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;Data/text/textClassifier&quot;</span><span class="p">,</span> <span class="nl">withExtension</span><span class="p">:</span> <span class="s">&quot;mlmodel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compiledModelUrl</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLModel</span><span class="p">.</span><span class="n">compileModel</span><span class="p">(</span><span class="nl">at</span><span class="p">:</span> <span class="n">modelUrl</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">NLModel</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">compiledModelUrl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="n">requestText</span>
</span><span class='line'><span class="k">let</span> <span class="n">label</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">predictedLabel</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;text: \(text)</span><span class="se">\n</span><span class="s">label:\(label ?? &quot;</span><span class="n">Not</span> <span class="n">detected</span><span class="o">!</span><span class="s">&quot;)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>How to use .mlmodel file?</strong></p>

<p>.mlmodel file needs to be compiled before using. There are two ways to do this: offline and online:</p>

<ol>
<li>offline: drag the mlmodel into your project, xcode will compile the .mlmodel for you before you build you app.</li>
<li>online: use <code>MLModel.compileModel</code> to compile your .mlmodel file at runtime. This is especially useful when your are at swift playground, where you cannot get xcode&rsquo;s help for comipling.</li>
</ol>
</blockquote>

<p><a id="markdown-slot-filling" name="slot-filling"></a></p>

<h3>Slot Filling</h3>

<p><a id="markdown-model-training-1" name="model-training-1"></a></p>

<h4>Model Training</h4>

<p>For Slot Filling model training, we prepare the data set as follows (The size of the training data is: 3282.):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;would&quot;</span><span class="p">,</span> <span class="s2">&quot;like&quot;</span><span class="p">,</span> <span class="s2">&quot;the&quot;</span><span class="p">,</span> <span class="s2">&quot;forecast&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;california&quot;</span><span class="p">,</span> <span class="s2">&quot;tomorrow&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;location&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Forecast&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;Maine&quot;</span><span class="p">,</span> <span class="s2">&quot;next week&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;location&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like Intent Classification model training, CreateML framework also makes it easy. Like MLTextClassifier, the MLWordTagger class from CreateML will also benefit from NatrualLanguage framework for Part of Speech, Lemmatization, Name Entity Recognition, etc.</p>

<p>The training script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Initializing the training data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;slotParsingFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/train&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span>  <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">trainingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the classifier with a training data.</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLWordTagger</span><span class="p">(</span><span class="nl">trainingData</span><span class="p">:</span> <span class="n">trainingData</span><span class="p">,</span> <span class="nl">tokenColumn</span><span class="p">:</span> <span class="s">&quot;tokens&quot;</span><span class="p">,</span> <span class="nl">labelColumn</span><span class="p">:</span> <span class="s">&quot;labels&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Evaluating training &amp; validation accuracies.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">trainingMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'><span class="k">let</span> <span class="n">validationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">validationMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the properly labeled testing data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;slotParsingFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/test&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">testingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Counting the testing evaluation.</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationMetrics</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">evaluation</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">testingData</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Confusion matrix in order to see which labels were classified wrongly.</span>
</span><span class='line'><span class="k">let</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">confusion</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Confusion matrix: \(confusionMatrix)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Metadata for saving the model.</span>
</span><span class='line'><span class="k">let</span> <span class="n">metadata</span> <span class="o">=</span> <span class="n">MLModelMetadata</span><span class="p">(</span><span class="nl">author</span><span class="p">:</span> <span class="s">&quot;Hongchao Zhang&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="nl">shortDescription</span><span class="p">:</span> <span class="s">&quot;A model trained to parse slots from weather related commands.&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="nl">version</span><span class="p">:</span> <span class="s">&quot;1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Saving the model. Remember to update the path.</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">classifier</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="s">&quot;/Users/hozhang/Downloads/slotParsing.mlmodel&quot;</span><span class="p">),</span>
</span><span class='line'>                        <span class="nl">metadata</span><span class="p">:</span> <span class="n">metadata</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get 99.64% training accuracy and 98.38% validation accuracy.</p>

<p><a id="markdown-model-usage-1" name="model-usage-1"></a></p>

<h4>Model Usage</h4>

<p>We can load the mlmodel into an NLTagger (from NatrualLanguage framework), and use the NLTagger to tag labels for each word of the input command text. The demo swift script is like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">weatherTagSchema</span> <span class="o">=</span> <span class="n">NLTagScheme</span><span class="p">(</span><span class="s">&quot;Weather&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">modelUrl</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;Data/text/slotParsing&quot;</span><span class="p">,</span> <span class="nl">withExtension</span><span class="p">:</span> <span class="s">&quot;mlmodel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compiledModelUrl</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLModel</span><span class="p">.</span><span class="n">compileModel</span><span class="p">(</span><span class="nl">at</span><span class="p">:</span> <span class="n">modelUrl</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">taggerModel</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">NLModel</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">compiledModelUrl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">weatherTagger</span> <span class="o">=</span> <span class="n">NLTagger</span><span class="p">(</span><span class="nl">tagSchemes</span><span class="p">:</span> <span class="p">[</span><span class="n">weatherTagSchema</span><span class="p">])</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">setModels</span><span class="p">([</span><span class="n">taggerModel</span><span class="p">],</span> <span class="nl">forTagScheme</span><span class="p">:</span> <span class="n">weatherTagSchema</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="n">requestText</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">string</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">enumerateTags</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">text</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..</span><span class="o">&lt;</span><span class="n">text</span><span class="p">.</span><span class="n">endIndex</span><span class="p">,</span> <span class="nl">unit</span><span class="p">:</span> <span class="p">.</span><span class="n">word</span><span class="p">,</span> <span class="nl">scheme</span><span class="p">:</span> <span class="n">weatherTagSchema</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[])</span> <span class="p">{</span> <span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">tokenRange</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">tag</span><span class="p">,</span> <span class="n">tag</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">!=</span> <span class="s">&quot;Whitespace&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(text[tokenRange]): \(tag.rawValue)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Reference </strong></p>

<ol>
<li><a href="https://developer.apple.com/documentation/createml/creating_a_text_classifier_model">Creating a Text Classifier Model</a>: Apple offical site for training and using machine learning models through CreateML framework.</li>
<li>WWDC video <a href="https://developer.apple.com/videos/play/wwdc2018/713/">Introducing Natural Language Framework</a>: This session introduces NLP framework and its relation with CreateML framework.</li>
</ol>


<p><a id="markdown-model-size" name="model-size"></a></p>

<h3>Model Size</h3>

<p>For the iOS app, we hope the machine learning model size is small enough. Apple&rsquo;s NatrualLanguage framework has done many optimizations on machine learning model size. The following data is from WWDC 2018 (session 713: Introducing NatrualLanguage Framework):</p>

<table>
<thead>
<tr>
<th>&ndash; </th>
<th> Open Source CRFSuite </th>
<th> Natural Language Framework</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name Entity Recognition </td>
<td> 70MB  </td>
<td> 1.4MB</td>
</tr>
<tr>
<td>Chunking </td>
<td> 30MB </td>
<td> 1.8MB</td>
</tr>
</tbody>
</table>


<p>We can see that the model will be much smaller than that trained from an open source platform.</p>

<p>The size of the two models we trained is (The training data size is: 3282):</p>

<table>
<thead>
<tr>
<th>Model </th>
<th> Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intent Classification </td>
<td> 41K</td>
</tr>
<tr>
<td>Slot Filling </td>
<td> 609K</td>
</tr>
</tbody>
</table>


<p>If your model is a neural network, you can reduce the size of your model by the following way:
<a href="https://developer.apple.com/documentation/coreml/reducing_the_size_of_your_core_ml_app">Reducing the Size of Your Core ML App</a>. You can control the precision of the neural network parameters, and thus the size of the trained model.</p>

<p>If still your model is large, you can
<a href="https://developer.apple.com/documentation/coreml/core_ml_api/downloading_and_compiling_a_model_on_the_user_s_device">Downloading and Compiling a Model on the User&rsquo;s Device</a> at runtime.</p>

<p><a id="markdown-problems-to-be-solved" name="problems-to-be-solved"></a></p>

<h3>Problems to Be Solved</h3>

<p>For Probabilistic Intent Parser, we still have some problems.</p>

<p><a id="markdown-intent-classification-model-has-no-probability-output" name="intent-classification-model-has-no-probability-output"></a></p>

<h4>Intent Classification Model Has No Probability Output</h4>

<p>We may need the probability to define the reliability of the estimated intent of an input command text.</p>

<p>However, the model trained through <code>MLTextClassifier</code> has no probability output API. If we really need the probability output, we can use other platforms to train the model, like tensorflow. That way, we will not benefit from NatrualLanguage framework and we need to consider these things by ourselves, like Tokenization, Part of Speech, Lemmatization, etc.</p>

<blockquote><p>Try other tools for training models with probability output, like Turi.</p></blockquote>

<p><a id="markdown-slot-filling-model-tagges-the-label-by-words-not-phrase" name="slot-filling-model-tagges-the-label-by-words-not-phrase"></a></p>

<h4>Slot Filling Model Tagges the Label by Words, not Phrase</h4>

<p>The NLTagger class only supply the following four tag level: word, sentence, paragraph, and document. There is no &ldquo;phrase&rdquo; tag level. For example, &ldquo;New York&rdquo; will be treated as &ldquo;New&rdquo; and &ldquo;York&rdquo;, and the tagged label will both be &ldquo;location&rdquo;. We need to compose them together manually.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何控制iOS应用的屏幕方向]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations/"/>
    <updated>2019-05-21T18:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>背景</h2>

<p>一个iOS应用默认都会支持所有的是个方向，当用户旋转屏幕的时候，应用会自动旋转。</p>

<p>有些时候，这可能不是我们想要的。比如你设计了一个只支持竖屏方向的应用，但是又想在某些时候支持Landscape模式，比如播放视频的时候。iOS应用有很多地方的设置会影响屏幕方向，iOS9之后，iPad又支持了split view，使得这个控制更加复杂。</p>

<h2>总起</h2>

<p>iPhone比较简单，因为其没有spit view的功能，iPad因为有了spilt view功能，在屏幕方向的控制上更复杂一些。</p>

<p>首先，需要明确：有哪些因素会影响到App的屏幕方向？</p>

<p><strong>1. Project设置（info.plist）</strong></p>

<p>有两个地方可以进行该项设置：</p>

<ul>
<li><p>Project->Target->General->Device Orientation</p>

<p><img src="http://hongchaozhang.github.io/images/ScreenOrientationProjectSetting.png" alt="screen orientation project setting" /></p></li>
<li><p>Project的info.plist配置文件</p>

<p><img src="http://hongchaozhang.github.io/images/ScreenOrientationInfoPlist.png" alt="screen orientation info plist" /></p></li>
</ul>


<p>这两个地方的设置是一致的：在一个地方改动，另一个地方会同步修改。其中：info.plist中的“Supported interface orientations (iPad)”属性对应于iPad的设置（Device选择iPad），info.plist中的“Supported interface orientations”属性对应于iPhone和Universal的设置（Device选择iPhone或者Universal，这两项的设置始终保持一致）。</p>

<p><strong>2. 在代码中设置应用支持的屏幕方向</strong></p>

<p>有两种方法可以在代码中设置应用支持的屏幕方向：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>每个<code>UIViewController</code>还可以通过<code>supportedInterfaceOrientations</code>方法设置自己支持的屏幕方向</li>
</ul>


<p>系统会自动将两种方法中支持的屏幕方向取交集，作为最终该view controller支持的屏幕方向。如果交集为空，那么应用将会Crash。</p>

<p><strong>3. <code>UIViewController</code>中的<code>shouldAutorotate</code>属性</strong></p>

<p>该属性是只读属性，用来控制该view controller可不可以旋转。可以在自己的view controller中将其override，返回自己的逻辑，甚至将其override为读写属性，可以在其它地方进行设置。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="n">public</span> <span class="k">var</span> <span class="nl">shouldAutorotate</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">shouldAutorotateVariable</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">set</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">shouldAutorotateVariable</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>shouldAutorotateVariable</code>为view controller中自定义的一私有变量。</p>

<h2>iPhone</h2>

<p>如果某个view controller中的<code>shouldAutorotate</code>被设置为<code>false</code>，那么系统将忽略下面的设置：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>系统只考虑用户在“Project设置（info.plist）”中的设置。</p>

<p>如果某个view controller中的<code>shouldAutorotate</code>未被重写（或者被重写为<code>true</code>），那么系统将优先考虑使用下面两个设置的交集：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>如果没有以上两个设置，再使用“Project设置（info.plist）”中的设置。</p>

<h2>iPad</h2>

<p>从iOS9开始，iPad开始支持split view功能。关于这个功能的设置说明，可以参考苹果官方文档：<a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a>。简单的说，就是：如果info.plist中的“Supported interface orientations (iPad)”属性对应的值包含了四个方向，同时<code>UIRequiresFullScreen</code>对应的值为<code>NO</code>，那么系统默认该应用支持split view属性，同时系统将忽略下面两处代码：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li><code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>以及<code>UIViewController</code>中<code>shouldAutorotate</code>的值。</p>

<p>也就是说：支持split view的应用将不能被禁止旋转，至少不能通过本文中的方法进行禁止旋转。</p>

<p>如果info.plist中的“Supported interface orientations (iPad)”属性对应的值未包含四个方向，或者“UIRequiresFullScreen”对应的值为<code>NO</code>，那么该应用不支持split view功能，其屏幕方向控制方法同iPhone相同。</p>

<blockquote><p>注意：对于“Project设置（info.plist）”设置，建议在info.plist中进行，直接设置一下三个属性的值：
* Supported interface orientations (iPad)
* Supported interface orientations
* UIRequiresFullScreen</p>

<p>在Project->Target->General->Device Orientation中进行设置，有点迷惑性：因为即使“Device”选的是“Universal”，“iPad”下面的设置也会起作用。</p></blockquote>

<h2>参考</h2>

<ol>
<li><a href="https://mobiarch.wordpress.com/2017/04/22/controlling-screen-orientation-of-ios-apps/">Controlling Screen Orientation of iOS Apps</a></li>
<li><a href="https://stackoverflow.com/questions/32782044/ios-9-supportedinterfaceorientations-not-working/32782517#32782517">iOS 9 supportedInterfaceOrientations not working</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构整洁之道总结（The Clean Architecture）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture/"/>
    <updated>2019-02-12T17:55:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E6%84%9F%E6%83%B3">总体感想</a></li>
<li><a href="#%E7%AB%A0%E8%8A%82%E5%B0%8F%E7%BB%93">章节小结</a>

<ul>
<li><a href="#%E7%AC%AC2%E7%AB%A0-%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6">第2章 两个价值维度</a></li>
<li><a href="#%E7%AC%AC14%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88">第14章 组件耦合</a></li>
<li><a href="#%E7%AC%AC15%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第15章 什么是软件架构</a></li>
<li><a href="#%E7%AC%AC17%E7%AB%A0-%E5%88%92%E5%88%86%E8%BE%B9%E7%95%8C">第17章 划分边界</a></li>
<li><a href="#%E7%AC%AC21%E7%AB%A0-%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第21章 尖叫的软件架构</a></li>
<li><a href="#%E7%AC%AC22%E7%AB%A0-%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84">第22章 整洁架构</a></li>
<li><a href="#%E7%AC%AC23%E7%AB%A0-%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1">第23章 展示器和谦卑对象</a></li>
<li><a href="#%E7%AC%AC24%E7%AB%A0-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C">第24章 不完全边界</a></li>
<li><a href="#%E7%AC%AC25%E7%AB%A0-%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C">第25章 层次与边界</a></li>
<li><a href="#%E7%AC%AC28%E7%AB%A0-%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C">第28章 测试边界</a></li>
<li><a href="#%E7%AC%AC34%E7%AB%A0-%E6%8B%BE%E9%81%97">第34章 拾遗</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93">其它人的一些读后总结</a>

<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9B%BE">为什么说我们需要软件架构图？</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93">推荐《架构整洁之道》</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-总体感想" name="总体感想"></a></p>

<h2>总体感想</h2>

<p>全书下来，印象最深、且最具有操作性的，就是：</p>

<p><strong>依赖反转</strong></p>

<p>源代码依赖方向永远是控制流方向的反转。
依赖关系必须要指向更稳定的方向：低层组件依赖高层组件，其中低层组件不稳定，高层组件稳定。
依赖关系应该指向更稳定的方向。</p>

<p>稳定抽象原则：一个组件的抽象程度应该与其稳定性保持一致。</p>

<p>系统的抽象程度和稳定性都可以量化，进而用来评测系统的质量。</p>

<p>系统在运行时的依赖关系与编译时的依赖关系是相反的：当高层组件的客户端需要调用低层组件中的服务时，我们就需要运用动态形式的多态来反转依赖关系。（第18章）</p>

<p>我们希望源码中的依赖关系与其数据流向脱钩，而与组件所在的层次挂钩。高层组件变更的原因具有“稀少而重大”的特点，低层组件变更的原因具有“频繁而不重大”的特点。（第19章）</p>

<p><a id="markdown-章节小结" name="章节小结"></a>
<a id="markdown-章节小结" name="章节小结"></a></p>

<h2>章节小结</h2>

<p><a id="markdown-第2章-两个价值维度" name="第2章-两个价值维度"></a></p>

<h3>第2章 两个价值维度</h3>

<p>系统行为，是紧急的。</p>

<p>系统架构，是重要的。</p>

<p>平衡系统架构的重要性与功能的紧急程度这件事，是软件研发人员自己的职责。因为业务部门本来就没有能力评估架构设计的重要程度。</p>

<p>请记住：如果忽视软件架构的价值，系统将会变得越来越难以维护，最终再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。</p>

<p><a id="markdown-第14章-组件耦合" name="第14章-组件耦合"></a></p>

<h3>第14章 组件耦合</h3>

<p>组件依赖关系图不是系统功能单元关系图，而是应用程序在构建性和维护性方面的一张地图。所以组件依赖关系图不能像系统功能单元关系图一样在设计之初就确定下来，而是随着开发进程中出现的维护性和构建性的需求而产生的。</p>

<p><a id="markdown-第15章-什么是软件架构" name="第15章-什么是软件架构"></a></p>

<h3>第15章 什么是软件架构</h3>

<p>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的选项。</p>

<p>如果在开发高层策略时有意识地让自己摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就拥有越多的信息来做出合理的决策。
另外，我们保留这些可选项的时间越长，实验的机会越多，我们做决策的时候就能拥有越充分的信息。</p>

<p><strong>一个优秀的软件架构师应该致力于最大化可选项数量。</strong></p>

<p><a id="markdown-第17章-划分边界" name="第17章-划分边界"></a></p>

<h3>第17章 划分边界</h3>

<p>软件架构设计本身就是一门划分边界的艺术。</p>

<p>一个系统的GUI与业务逻辑的变更原因、变更速率显然是不同的，所以二者中间应该有一条边界。同样的，一个系统的业务逻辑与依赖注入框架之间的变更原因和变更速率也会不同，它们之间也应该画边界线。</p>

<p>这其实就是单一指责原则（SRP）的具体实现。SRP的作用就是告诉我们应该在哪里画边界线。</p>

<p><strong>插件式架构</strong></p>

<p>事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。</p>

<p><a id="markdown-第21章-尖叫的软件架构" name="第21章-尖叫的软件架构"></a></p>

<h3>第21章 尖叫的软件架构</h3>

<p>架构设计的核心目标：</p>

<p>一个良好的架构设计应该围绕用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。</p>

<blockquote><p>这就好像一个住宅建筑设计的首要目的应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费很多精力来确保该架构的设计在满足用例需要的情况下，尽可能地允许用户能自由地选择建筑材料（砖头、石料或者木材）。</p></blockquote>

<p>而且，良好的架构设计应该尽可能地允许用户推迟和延后决定采用什么框架、数据库、Web服务以及其它与环境相关的工具。同时，良好的架构设计还应该让我们很容易改变这些决定。</p>

<p>总之，良好的架构设计应该只关注用例，并能将它们与其他的周边因素隔离。</p>

<p><a id="markdown-第22章-整洁架构" name="第22章-整洁架构"></a></p>

<h3>第22章 整洁架构</h3>

<p>整本书的核心总结。</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture22fig01.jpg" alt="clean architecture image" /></p>

<p>代码中的依赖关系必须指向同心圆的内层，即由低层机制指向高层机制。</p>

<p>比如下面这个例子就严格地遵守了依赖倒置原则，同时也就遵守了上面的设计原则：依赖关系指向同心圆的内层：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture22fig02.jpg" alt="clean architecture example" /></p>

<p><a id="markdown-第23章-展示器和谦卑对象" name="第23章-展示器和谦卑对象"></a></p>

<h3>第23章 展示器和谦卑对象</h3>

<p>应用程序所能控制的，要在屏幕上显示的一切东西，都应该在视图模型中以字符串、布尔值或者枚举类型的形式存在。然后，视图部分除了加载视图模型所需要的值，不应该再做任何其他事情。因此，我们才能说视图是谦卑对象。</p>

<blockquote><p>这里的视图有点像Redux模式下的View了：只负责忠实地将Model展现出来。</p></blockquote>

<p><a id="markdown-第24章-不完全边界" name="第24章-不完全边界"></a></p>

<h3>第24章 不完全边界</h3>

<p>用于管理输入输出数据结构的双向多态边界接口，以及依赖反转关系的管理都需要耗费资源。某些情况下可以采用一些折中方案，采用某种不完全边界：单向边界、门户模式、省掉最后一步…。</p>

<p><a id="markdown-第25章-层次与边界" name="第25章-层次与边界"></a></p>

<h3>第25章 层次与边界</h3>

<p>“中庸”之道：
过度设计边界不对，一点不设计也是不合理的，我们能做的就是不断观察系统演进，权衡各个位置设计边界的成本与收益。</p>

<p><a id="markdown-第28章-测试边界" name="第28章-测试边界"></a></p>

<h3>第28章 测试边界</h3>

<p>测试：
针对系统组成部分来设计的测试是紧耦合的，比如针对每个类的每个方法进行的测试。最终这些测试都会被抛弃。</p>

<p>不要依赖于多变的东西。比如GUI一般是多变的，通过GUI来验证系统的测试一定是脆弱的。因此，我们在系统设计与测试设计时，应该让业务逻辑不通过GUI也能被测试。
怎么做：让GUI成为“谦卑对象”，只是忠实地反应一些数据（Redux模式）。</p>

<p><a id="markdown-第34章-拾遗" name="第34章-拾遗"></a></p>

<h3>第34章 拾遗</h3>

<p>这一章中，作者提到了一个重要的实现细节问题：访问权限修饰符（public、private等），以及该细节对整体设计架构的影响。</p>

<p>以网上书店为例，作者按照四种方法试图对系统进行模块化：按层封装，按功能封装，端口和适配器封装，按组件封装。每种模式都有各自的优缺点，但是这不是问题的重点。重点是：如果你在实现各个模式的时候，不能严格确定每个变量和方法的访问权限，那么所有的设计都等于“没有设计”。</p>

<p>四种设计模式图应该是这个样子：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture34fig08.jpg" alt="model with access control attributes" /></p>

<p>其中虚化的部分代表只可在本包内可见的部分。</p>

<p>如果不能严格使用访问权限修饰符，那么理想中的模块化将会发生变化。极端一点，如果所有属性和方法都是public，那么这四种模式将变成下面的样子：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture34fig07.jpg" alt="model with access control attributes" /></p>

<p><strong>四种模式将完全一样！完全一样，只是由于我们没有严格地使用访问权限修饰符！</strong></p>

<p><a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a>
<a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a></p>

<h2>其它人的一些读后总结</h2>

<p><a id="markdown-为什么说我们需要软件架构图" name="为什么说我们需要软件架构图"></a>
<a id="markdown-为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph" name="为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph"></a></p>

<h3><a href="https://www.infoq.cn/article/GhprrUlOYyOqS8*FR1pH">为什么说我们需要软件架构图？</a></h3>

<p>这篇文章中肯、实用，提出的一些观点具有很大的可操作性：
1. 我们常犯的最大的一个错误是为系统中具有高波动性的部分创建详细的架构图。除非是自动生成的，否则手动维护它们对我们来说就是一种负担。
2. 在实践中，大多数利益相关者对详细架构图不感兴趣，但会对一两个反映系统模块和边界的高级架构图感兴趣。除此之外，要深入理解系统，代码才是事实的来源。
3. 请停止为代码中自解释的内容创建详细的架构图，或者当没有真正受众时。
4. 直接询问利益相关者：你们希望从文档中获得什么信息？</p>

<p><a id="markdown-推荐架构整洁之道" name="推荐架构整洁之道"></a>
<a id="markdown-推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597" name="推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597"></a></p>

<h3><a href="https://blog.csdn.net/csdnsevenn/article/details/83189597">推荐《架构整洁之道》</a></h3>

<p>简单vs.简陋、平衡vs.妥协、迭代vs.半成品</p>

<p>这些拥有工匠精神的工程师们还是难以解决某些问题，这些人渐渐地发现，这个世界上有很多问题就像翘翘板一样，只能要一边，这一边上去了，另一边就下来了。就像要么用空间换时间，要么用时间换空间一样，你很难找到同时满足空间和时间要求的“双利解”；就像CAP的三选二的理论一样，这个世界不存在完美的解决方案，无论什么方案都有好的一面和不好的一面。而且，这些工程师还渐渐发现，每当引入一个新的技术来解决一个已有的问题时，这个新的技术就会带来更多的问题，问题就像有一个生命体一样，它们会不断地繁殖和进化。渐渐地，他们发现，问题的多少和系统的复杂度呈正比，而且不仅是线性正比，还可能呈级数正比，此时就越来越难做技术决定。但是有一些资深的工程师开始站出来挑战这些问题，有的基于业务分析给出平衡的方案，有的开始尝试设计更高级的技术，有的开始设计更灵活的系统，有的则开始简化和轻量化整个系统……这些高智商、经验足、不怕难的工程师们引领着整个行业前行。他们就是架构师！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程中的SOLID原则]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming/"/>
    <updated>2018-12-04T11:31:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming</id>
    <content type="html"><![CDATA[<p>Robert C. Martin (Bob大叔)在《敏捷软件开发》中提出了编程过程中的五个原则，以适应敏捷开发（Agile）的特点：以微小增量的方式构建软件。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#solid%E5%8E%9F%E5%88%99">SOLID原则</a></li>
<li><a href="#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99the-single-responsibility-principle%E7%AE%80%E7%A7%B0srp">单一职责原则（The Single Responsibility Principle，简称SRP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%8C%E8%B4%A3">什么是职责</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li>
</ul>
</li>
<li><a href="#%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99the-open-close-principle%E7%AE%80%E7%A7%B0ocp">开放——封闭原则（The Open-Close Principle，简称OCP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E6%98%AF%E6%8A%BD%E8%B1%A1">关键是抽象</a>

<ul>
<li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
</ul>
</li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%9B%E8%A1%8C%E6%8A%BD%E8%B1%A1">什么时候进行抽象</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-1">结论</a></li>
</ul>
</li>
<li><a href="#liskov%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99the-liskov-substitution-priciple%E7%AE%80%E7%A7%B0lsp">Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">一个违反LSP的简单例子</a></li>
<li><a href="#%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%92%8C%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%85%B3%E7%B3%BB%E6%9B%B4%E5%BE%AE%E5%A6%99%E7%9A%84%E8%BF%9D%E8%A7%84">正方形和长方形的关系：更微妙的违规</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E5%AF%BC%E8%87%B4%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95">其它一些容易导致违反LSP的习惯用法</a>

<ul>
<li><a href="#%E5%AD%90%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%80%80%E5%8C%96%E5%87%BD%E6%95%B0">子类中的退化函数</a></li>
<li><a href="#%E5%AD%90%E7%B1%BB%E6%8A%9B%E5%87%BA%E5%9F%BA%E7%B1%BB%E6%B2%A1%E6%9C%89%E7%9A%84%E5%BC%82%E5%B8%B8">子类抛出基类没有的异常</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-2">结论</a></li>
</ul>
</li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99the-dependency-inversion-principle%E7%AE%80%E7%A7%B0dip">依赖倒置原则（The Dependency Inversion Principle，简称DIP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-3">定义</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E4%BA%8E%E6%8A%BD%E8%B1%A1">依赖于抽象</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90">一个例子</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-3">结论</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99the-interface-segregation-principle%E7%AE%80%E7%A7%B0isp">接口隔离原则（The Interface Segregation Principle，简称ISP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-4">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AE%9A%E6%97%B6%E9%97%A8">一个例子：定时门</a>

<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用委托对接口分组</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用多重继承对接口分组</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90atm%E7%95%8C%E9%9D%A2">一个例子：ATM界面</a>

<ul>
<li><a href="#%E5%A4%9A%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F%E4%B8%8E%E5%8D%95%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F">多参数形式与单参数形式</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-4">结论</a></li>
</ul>
</li>
</ul>


<p> <br></p>

<p><a id="markdown-solid原则" name="solid原则"></a></p>

<h2>SOLID原则</h2>

<p>SOLID是指我们编程时应该遵守的五个原则：</p>

<ol>
<li>单一职责原则（The Single Responsibility Principle，简称SRP）</li>
<li>开放——封闭原则（The Open-Close Principle，简称OCP）</li>
<li>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</li>
<li>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</li>
<li>接口隔离原则（The Interface Segregation Principle，简称ISP）</li>
</ol>


<p>每个原则取一个字母（<strong>S</strong>RP，<strong>O</strong>CP，<strong>L</strong>SP，<strong>I</strong>SP，<strong>D</strong>IP），合称SOLID原则。</p>

<p><a id="markdown-单一职责原则the-single-responsibility-principle简称srp" name="单一职责原则the-single-responsibility-principle简称srp"></a></p>

<h2>单一职责原则（The Single Responsibility Principle，简称SRP）</h2>

<p><a id="markdown-定义" name="定义"></a></p>

<h3>定义</h3>

<p><strong>就一个类而言，应该只有一个引起它变化的原因。</strong></p>

<p>一个类如果有多个职责，但是你只需要其中的一个职责，你也不得不将其它职责包括进来，还有其它职责所依赖的所有组件。</p>

<p><a id="markdown-什么是职责" name="什么是职责"></a></p>

<h3>什么是职责</h3>

<p>在SRP中，我们把职责定义为“变化的原因”（a reason for change）。如果能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p>

<p>比如Employee这个类如果同时包含了业务规则和对于持久化的控制，多数情况下，我们可以断定它们不应该放在一起：业务规则会频繁地变化，但是持久化的方式却不会如此频繁地变化，并且变化的原因也是完全不同的。</p>

<p><a id="markdown-结论" name="结论"></a></p>

<h3>结论</h3>

<p>SRP是所有原则中最简单的，也是最难运用的。软件设计很多时候要做的，就是发现职责，并把它分离出来。事实上，我们将要论述的其它原则都会以这样或者那样的方式回到这个问题上。</p>

<p><a id="markdown-开放封闭原则the-open-close-principle简称ocp" name="开放封闭原则the-open-close-principle简称ocp"></a></p>

<h2>开放——封闭原则（The Open-Close Principle，简称OCP）</h2>

<p><a id="markdown-定义-1" name="定义-1"></a></p>

<h3>定义</h3>

<p><strong>软件实体（类、模块、函数等）应该是可以扩展，但是不可修改的。</strong></p>

<p>OCP的定义，换个说法：</p>

<ul>
<li>对扩展开放（Open for extension）</li>
<li>对修改封闭（Close for modification）</li>
</ul>


<p>如果程序中的一处改动就会产生连锁反应，导致一系列相关模块的改动，OCP建议我们应该对程序进行重构。重构之后再进行同样的修改，就只需要添加新的功能模块，不需要对原有的代码进行修改。</p>

<p>如何在能在不改变模块原代码的情况下去更改它的行为或者为其添加功能呢？</p>

<p><a id="markdown-关键是抽象" name="关键是抽象"></a></p>

<h3>关键是抽象</h3>

<p>抽象一般有两种方式：
1. 接口
2. 继承</p>

<p><a id="markdown-接口" name="接口"></a></p>

<h4>接口</h4>

<p>用接口对需要的对象进行抽象，也就是所谓的“面向接口编程”。</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceProgramming.jpg" alt="interface programming" /></p>

<p>上面的a图是一个不遵循OCP的设计。Client和Server都是具体的类，Client要使用Server。如果我们希望Client使用另外一个不同的Server类，那么就需要把Client里面使用Server的地方都做响应的修改。</p>

<p>上面的b图是一个符合OCP的设计。如果需要使用一个不同的服务器类，只需要重新实现这个类，保证这个类也实现类ClientInterface接口，则Client这个类不需要做修改，同时扩展类Client的功能。</p>

<blockquote><p>这个接口为什么叫ClientInterface，而不叫ServerInterface或者AbstractServer之类？因为这个接口和Client的关系更密切。</p></blockquote>

<p><a id="markdown-继承" name="继承"></a></p>

<h4>继承</h4>

<p>继承一个抽象类（和接口类似）或者重写一个父类中的（虚）方法，也是OCP的惯用伎俩。典型的例子，就是那个图形的绘制的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">shape</span><span class="p">.</span><span class="n">draw</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想扩展drawAllShapes方法，使其可以绘制一种新的形状，只需要重新创建一个Shape类的子类，drawAllShapes函数不需要改变，即可实现功能的扩展。这就是OCP。</p>

<p><a id="markdown-什么时候进行抽象" name="什么时候进行抽象"></a></p>

<h3>什么时候进行抽象</h3>

<p>即使是上面的形状绘制的例子，也不是完全的“对扩展开放，对修改关闭。”比如，我要求所有的圆必须在正方形之前绘制，就没法在不修改drawAllShapes的情况下进行这个功能扩展。</p>

<p>我们无法准确预测未来的功能扩展需求，所以，理论上来说，我们也无法实现完全的“对扩展开放，对修改关闭。”</p>

<p>而且更重要的，遵循OCP进行抽象的代价也是昂贵的。创建正确的抽象需要花费开发时间和精力。同时，这些抽象也增加了软件的设计复杂度。开发人员有能力处理的抽象的数量也是有限的。</p>

<p>所以，不要试图在刚开始就实现OCP，可以试着遵循下面的准则：</p>

<ul>
<li>只受一次愚弄</li>
</ul>


<p>也就是说，在刚开始编写代码的时候，假设变化不会发生。当变化发生时，我们就创建抽象进行隔离，防止以后发生同类变化。</p>

<p><a id="markdown-结论-1" name="结论-1"></a></p>

<h3>结论</h3>

<p>在很多方面，OCP都是面向对象设计的核心所在。遵循这个原则，可以带来面向对象技术所声称的巨大好处（也就是，灵活性、可重用性以及可维护性）。但是，对程序的每个部分都肆意地进行抽象也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</p>

<p><a id="markdown-liskov替换原则the-liskov-substitution-priciple简称lsp" name="liskov替换原则the-liskov-substitution-priciple简称lsp"></a></p>

<h2>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</h2>

<p><a id="markdown-定义-2" name="定义-2"></a></p>

<h3>定义</h3>

<p><strong>子类型必须能够替换掉它们的基类型。</strong></p>

<p>假设一个函数f，它的参数是某个基类型B。如果将基类型B的子类D传给f，会导致f出现错误的行为，那么D就违反了LSP原则。</p>

<p>此时，f的编写者想在f内对D进行检测，以便在把D传给f时，可以使f具有正确的行为。这个行为又违反了OCP原则，因为此时f对于基类型B的所有子类都不在封闭。</p>

<p><a id="markdown-一个违反lsp的简单例子" name="一个违反lsp的简单例子"></a></p>

<h3>一个违反LSP的简单例子</h3>

<p>对于LSP的违反常常会导致以明显违反OCP的方式使用运行时类型检测。这种方式常常是使用一个显式的if语句去确定一个对象的类型，以便于能够选择针对该类型的正确行为。考虑下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawSquare</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawCircle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Square</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawSquare</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Circle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很显然，上面的drawAllShapes违反了OCP原则，它必须知道所有的Shape的子类，并且，每创建一个子类，都需要修改drawAllShapes函数。</p>

<p>Square和Circle不能替换其基类型Shape就是违反了LSP原则，这又进一步导致了drawAllShapes违反了OCP原则。因而，对于LSP的违反也潜在违反了OCP原则。</p>

<p><a id="markdown-正方形和长方形的关系更微妙的违规" name="正方形和长方形的关系更微妙的违规"></a></p>

<h3>正方形和长方形的关系：更微妙的违规</h3>

<p>下面正方形继承长方形的例子，很微妙地违反了LSP原则。</p>

<p>长方形的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getWidth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getHeight</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getArea</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="nb">self</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正方形IS-A长方形，按照面向对象分析的方法，正方形应该继承长方形。同时为了保证正方形的四个边长度一致，需要对<code>setWidth</code>和<code>setHeight</code>两个函数重写。</p>

<p>实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Square看起来工作不错，而且这个设计似乎也是自相容的，正确的。可是这个结论是错误的，一个自相容的程序未必就和所有的用户程序相容。考虑下面的函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">tempFunc</span><span class="p">(</span><span class="n">_</span> <span class="nl">rect</span><span class="p">:</span> <span class="n">Rectangle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setWidth</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setHeight</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">getArea</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果传递一个Square的实例给<code>tempFunc</code>，那么程序就会报错。</p>

<p>有人可能对<code>tempFunc</code>存在的问题进行争辩，说函数<code>tempFunc</code>的编写者不应该假设宽和长是独立变化的。这时候<code>tempFunc</code>的编写者肯定不同意：函数以Rectangle为参数，长宽独立变化就是长方形的特性，为什么不能用？</p>

<p>这时候，我们应该反过来思考一下：IS-A是不是继承的唯一标准？</p>

<p><strong>IS-A不应该成为继承的准则，“可替换性”才是。</strong></p>

<p><a id="markdown-其它一些容易导致违反lsp的习惯用法" name="其它一些容易导致违反lsp的习惯用法"></a></p>

<h3>其它一些容易导致违反LSP的习惯用法</h3>

<p><a id="markdown-子类中的退化函数" name="子类中的退化函数"></a></p>

<h4>子类中的退化函数</h4>

<p>当子类在重写基类函数的时候，如果功能不如基类完备，即出现了退化，那么这个子类在某些情况下就不能替换基类，违反了LSP原则。</p>

<blockquote><p>这也许就是一些语言在子类重写基类函数的时候必须通过super调用基类函数，这就保证了重写不会退化。但是在Swift和Objective-C中可以不调用super。</p></blockquote>

<p><a id="markdown-子类抛出基类没有的异常" name="子类抛出基类没有的异常"></a></p>

<h4>子类抛出基类没有的异常</h4>

<p>此时要遵循LSP，要么改变使用者的期望，要么子类不抛出这个异常。</p>

<p><a id="markdown-结论-2" name="结论-2"></a></p>

<h3>结论</h3>

<p>OCP是很多说法的核心，而LSP是使OCP成为可能的主要原则之一。正是子类的可替换性才使得使用基类类型的模块在无需修改的情况下就可以扩展。这种可替换性必须是开发人员可以隐式依赖的东西。</p>

<p><a id="markdown-依赖倒置原则the-dependency-inversion-principle简称dip" name="依赖倒置原则the-dependency-inversion-principle简称dip"></a></p>

<h2>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</h2>

<p><a id="markdown-定义-3" name="定义-3"></a></p>

<h3>定义</h3>

<ul>
<li><strong>高层模块不应该依赖于低级模块。二者都应该依赖于抽象。</strong></li>
<li><strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></li>
</ul>


<blockquote><p>这里的“抽象”是指接口或者抽象类。</p>

<p>为什么用”倒置“：这是相对于传统的软件开发，比如结构化分析和设计。在这些设计中，倾向于创建一些高层模块依赖于低层模块的模块，策略（Policy）依赖于细节的软件结构。而DIP要求大家都依赖于抽象，而且这个抽象绝对不会放在低层模块中，而是放在高层模块中（或者独立出来一个模块），所以，不再是高层模块依赖低层模块，而是低层模块依赖高层模块（中的抽象）。</p></blockquote>

<p>传统软件开发可能会设计出下面这样的程序结构：</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_bad_design.jpg" alt="DIP bad design" /></p>

<p>在这个设计中，高层模块依赖于低层模块，如果要重用，必须同时引入低层模块。如果高层模块能够独立于低层模块，那么，高层模块就可以非常容易地被重用。该原则是框架（framework）设计的核心原则。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_good_design.jpg" alt="DIP good design" /></p>

<p>上图展示了一个更为合适的模型。每个高层模块都为它所需要的服务声明一个独立的接口，较低的层次实现这些抽象接口，每个高层模块都通过接口使用低层模块。这样，高层模块就不依赖于低层模块，低层模块反而依赖于高层模块中定义的抽象服务接口。</p>

<blockquote><p>其实，低层模块也有重用的问题，也不应该直接依赖于高层模块。这里，应该将高层模块抽象出来的接口独立成一个模块，大家都依赖这个模块。</p></blockquote>

<p><strong>这里的倒置不仅仅是依赖关系的倒置，也是接口所有权的倒置。</strong>我们通常认为工具库应该拥有自己的接口，但是当应用了DIP之后，我们发现往往是客户拥有抽象接口，而它们的服务者则从这些抽象接口派生。</p>

<p><a id="markdown-依赖于抽象" name="依赖于抽象"></a></p>

<h3>依赖于抽象</h3>

<p>“依赖于抽象”这一启发式规则与DIP要求类似，要求我们不应该依赖具体的类，也就是说，程序中所有的依赖关系都应该终止于抽象（抽象类或者接口）。根据这一规则，可知：</p>

<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用。</li>
<li>任何类都不应该从具体类派生。</li>
<li>任何方法都不应该重写它的任何基类中的已经实现了的方法。</li>
</ul>


<p>要完全遵守这个规则几乎是不可能的。对于一些具体的类，如果比较稳定，还是可以依赖的。比如Java或者Swift中的String类型，String比较稳定，不太会变化，依赖于它不会造成损害。</p>

<p>但是如果一个类不稳定，我们最好不要直接依赖它，而要用一个抽象接口隔离这个类的不稳定性，直接使用接口，而不是这个类。</p>

<p><a id="markdown-一个例子" name="一个例子"></a></p>

<h3>一个例子</h3>

<p>依赖倒置可以应用于任何存在一个类向另一个类发送消息的地方。例如Button对Lamp的控制。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_button_lamp_design.jpg" alt="DIP button lamp design" /></p>

<p>上图中的a设计是不成熟的：Button类依赖于Lamp类，当Lamp类改变时，Button类会受到影响。此外，想要重用Button来控制另外一种对象（比如Motor）是不可能的。Button控制着Lamp对象，并且也只能控制Lamp对象。</p>

<p>这个设计违反类DIP原则：应用程序的高层策略没有和低层的实现分离，抽象没有和具体细节分离。也可以说，高层策略依赖于低层模块，抽象自动依赖于细节。</p>

<p>什么是高层策略呢？它是应用背后的抽象，是那些不随具体细节的改变而改变的真理，它是系统内部的系统——它是隐喻（metaphore）。在Button/Lamp这个例子中，背后的抽象是检测用户的开/关指令并将指令传给目标对象。用什么机制检测用户的指令呢？是直接按下GUI上的一个按钮，还是一个实体按钮，或者一个安全系统中的运动监测器？无关紧要！目标对象是什么呢？无关紧要！这些都是不会影响到抽象的具体细节。</p>

<p>改进之后的b设计则是一个遵守DIP的设计。而且，接口本身没有所有者，可以独立放在一个不同于Button，也不同于Lamp的地方。</p>

<p><a id="markdown-结论-3" name="结论-3"></a></p>

<h3>结论</h3>

<p>传统程序设计，策略依赖于细节。面向对象设计倒置了这种依赖关系，使得细节和策略都依赖于抽象，并且常常是客户拥有服务接口。</p>

<p>事实上，这种依赖关系的倒置正好是面向对象的标志所在。如果依赖关系是倒置的，就是面向对象设计；否则，就是过程化设计。</p>

<p>依赖倒置关系是实现许多面向对象技术所宣称的好处的基本底层机制。它的正确应用对于创建可重用的框架来说是必要的。同时它对于构建在变化面前富有弹性的代码也是非常重要的。</p>

<p><a id="markdown-接口隔离原则the-interface-segregation-principle简称isp" name="接口隔离原则the-interface-segregation-principle简称isp"></a></p>

<h2>接口隔离原则（The Interface Segregation Principle，简称ISP）</h2>

<p><a id="markdown-定义-4" name="定义-4"></a></p>

<h3>定义</h3>

<p><strong>不应该强迫客户依赖于它们不用的方法。</strong></p>

<p>这个原则是用来处理“胖”接口所具有的缺点。如果类的接口不是内聚（cohesive）的，就表示该类具有“胖”的接口。换句话说，类的“胖”接口可以分解成多组方法，每一组方法都服务于不同的客户程序。</p>

<p>如果客户程序依赖于一个具有“胖”接口的类，就相当于强迫客户程序依赖它们不使用的方法，那么这些客户程序就面临着由于这些未使用的方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。</p>

<p><a id="markdown-一个例子定时门" name="一个例子定时门"></a></p>

<h3>一个例子：定时门</h3>

<p><strong>问题描述：</strong></p>

<p>现在有一个Door的类，现在需要实现一个TimerDoor，如果门开的时间过长，就发出警报。为了做到这一点，TimerDoor需要跟另一个名为Timer的对象进行交互。如果一个对象希望得到超时通知，它可以调用Timer的register函数，该函数有两个参数，一个是超时时间，另一个是TimerClient对象，该对象的<code>timeout</code>函数会在超时时被Timer调用。</p>

<p>一个容易想到的实现如下图：</p>

<p><img src="http://hongchaozhang.github.io/images/door_bad_design.jpg" alt="timer door bad design" /></p>

<p>现在Door依赖TimerClient了，可是并不是所有种类的Door都需要定时功能。如果要创建无需定时功能的Door的子类，那么在子类中就必须要提供<code>timeout</code>方法的退化实现，这就有可能违反LSP原则，使得子类不能够替换父类。而且，这些子类的应用程中中也必须引入TimerClient的定义。使Door变“胖”，只是为了给其某个子类带来需要的功能，这就是接口污染。</p>

<p>下面应用接口隔离原则ISP重新设计这个TimerDoor。</p>

<p>TimerDoor应该“具有”两组接口，一组供Timer使用，一组供Door使用。如何将这两组接口分开呢？该问题的答案基于这样的事实：一个对象的客户不是必须通过该对象才能访问其接口，也可以通过委托或者该对象的基类来访问它。</p>

<p><a id="markdown-使用委托对接口分组" name="使用委托对接口分组"></a></p>

<h4>使用委托对接口分组</h4>

<p>该方案如下图所示，当TimerDoor需要向Timer对象注册一个超时请求时，它就创建一个DoorTimerAdaper，并把它注册给Timer。当Timer对象发送<code>timeout</code>消息给DoorTimerAdapter时，DoorTimerAdapter把这个消息委托给TimerDoor的<code>doorTimeout</code>方法。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_1.jpg" alt="timer door good design 1" /></p>

<p>这个设计是个比较通用的设计，在其他地方，也叫做“使用组合而非继承（Prefer Composition to Extension）”。但是这个设计略显复杂。下面基于多重继承的实现更加简洁。</p>

<p><a id="markdown-使用多重继承对接口分组" name="使用多重继承对接口分组"></a></p>

<h4>使用多重继承对接口分组</h4>

<p>不同语言的多重继承的实现是不一样的。倾向于使用Interface或者Protocol实现这一功能。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_2.jpg" alt="timer door good design 2" /></p>

<p>TimerDoor继承Door和TimerClient。尽管这两个基类的客户程序都可以使用TimerDoor，但是实际上都不需要依赖TimerDoor类。这样，它们就通过分离的接口使用同一个对象。</p>

<p>通常情况下，我们都会优先选择多重继承方法，只有当DoorTimerAdapter所做的转换是必须的时候，才考虑使用委托方案。</p>

<blockquote><p>DoorTimerAdapter将<code>timeout</code>接口转换成TimerDoor里面的<code>doorTimeout</code>接口，如果需要，在这个转换过程中还可以做些其它事情。</p></blockquote>

<p><a id="markdown-一个例子atm界面" name="一个例子atm界面"></a></p>

<h3>一个例子：ATM界面</h3>

<p>现在让我们考虑一个更有意义的例子：自动取款机ATM问题。对于ATM上面可执行的不同操作封装一个抽象接口Transaction，三种具体的操作（Deposit，Withdrawal，Transfer）都实现这个接口。每种操作对应的类都可以调用UI抽象接口中的不同方法，但是<strong>每个操作只调用自己对应的方法</strong>。</p>

<p>一个简单直接的实现如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_bad_design.jpg" width="400" alt="atm bad design" /></p>

<p>对于任何Transaction的子类的改动都有可能迫使对UI的相应改动，从而影响其它所有Transaction的子类以及所有依赖UI的类。如果要增加一种操作PayGasBillTransaction，为了处理该操作想要显示的特定消息，就必须要在UI中加入新的方法。这就导致所有其它Transaction都必须重新编译部署。</p>

<p>通过将UI接口分解成三个对应于不同操作的接口，可以避免这种耦合。设计如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_good_design.jpg" width="600" alt="atm good design" /></p>

<p>当我们需要增加一种新的Transaction时，其它Transaction都不需要重新编译部署。</p>

<p><a id="markdown-多参数形式与单参数形式" name="多参数形式与单参数形式"></a></p>

<h4>多参数形式与单参数形式</h4>

<p>考虑一个既要访问TransferUI又要访问DepositUI的函数。假设我们想把这两个UI传入该函数，是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">depositeUI</span><span class="p">:</span> <span class="n">DepositUI</span><span class="p">,</span> <span class="n">_</span> <span class="nl">transferUI</span><span class="p">:</span> <span class="n">TransferUI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">ui</span><span class="p">:</span> <span class="n">UI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以第二种方法编写函数的诱惑是很强的。毕竟，在第一种多参数形式中，两个参数应用的是同一个对象，调用起来是这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">tempFunc</span><span class="p">(</span><span class="n">ui</span><span class="p">,</span> <span class="n">ui</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上面的调用看起来有悖常理，但是我们还是应该倾向于多参数形式。单参数形式的函数依赖于UI中包含的每一个接口，如果WithDrawalUI发生了改变，那么函数及其所有客户程序都会受到影响。这更悖常理。此外，我们也不能保证传入函数的两个参数一直是同一个对象。也许以后，接口对象会因为某些原因而分离，此时，函数并不需要关注接口对象是合并还是分拆这一事实。</p>

<p><a id="markdown-结论-4" name="结论-4"></a></p>

<h3>结论</h3>

<p>“胖”类会导致其客户程序之间的耦合。当一个客户程序要求该“胖”类进行一个改动时，其它客户程序都会受到影响。因此客户程序应该仅仅依赖于它调用的方法，而不应该直接依赖于一个“胖”类。通过把“胖”类的接口分解为多个特定程序的接口，每个针对特定客户程序的接口只声明其对应客户程序需要的接口。接着，该“胖”类就可以继承所有分离出来的接口，并实现它们。这就解除了客户程序和其没有调用的方法间的依赖关系，并使客户程序之间互不依赖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在swift和Objc之间转换的一些想法]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift/"/>
    <updated>2018-11-13T10:50:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在工作中我们有时候需要在swift和objc之间进行转换，这时候有没有一些工具可以帮助我们呢？</p>

<blockquote><p>当然，大部分时候，我们不需要转换，因为swift和objc的类和方法可以互相暴露给对方。</p></blockquote>

<h2>objc转换成swfit</h2>

<p>搜索了一下，找到了两个工具可以做这个事情：</p>

<h3><a href="https://github.com/yahoojapan/objc2swift">objc2swift</a></h3>

<p>objc2swift是雅虎日本的一个工具，支持在线转换。<a href="https://github.com/dzenbot/XCSwiftr/blob/master/README.md">XCSwiftr</a>就是一个基于objc2swift的xcode插件，通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>进行管理安装，可以在Xcode里面进行objc到swift的转换。但是xcode自从8.0开始就不支持插件了。</p>

<blockquote><p>插件(plugin)只在xcode 8.0之前的版本才支持。从8.0开始，插件就不再支持，但是引入了扩展(extension)。扩展和插件不同的一点是：扩展在独立的进程里面运行，所以扩展的崩溃不会影响到xcode，但是插件的崩溃，则会导致xcode也崩溃。估计插件崩溃导致的xcode崩溃的锅都是Apple来背，Apple很不爽，就让xcode跟插件分开在不同的进程中运行。</p></blockquote>

<p>objc2swift的转换效果很一般。</p>

<p>objc源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>: <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Hello, %@.&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换之后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHelloTo</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello, \(person).&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">performSelector</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>几个问题：</p>

<ol>
<li>方法名称没有按照swift的习惯改写：应该为<code>sayHello(to person: String)</code>，而不是<code>sayHelloTo(person: String)</code>。</li>
<li><code>performSelector:</code>方法完全转换错误：方法名称错误，应该为<code>perform(_ aSelector: Selector!)</code>，而且参数也错误，不应该为<code>String</code>类型，应该为<code>Selector</code>类型。</li>
<li><code>test</code>方法前面没有加上<code>@objc</code>，所以不能作为<code>#selector</code>的参数。</li>
</ol>


<h3><a href="https://objectivec2swift.com/#/home">Swiftify</a></h3>

<p>swiftify也支持在线转换，而且转换效果明显好于objc2swift。如果愿意花钱，swiftify还可以支持很多功能，包括xcode扩展（注意，这里是“扩展extension”，不是“插件plugin”）、finder扩展、整个工程的转换、离线转换等。</p>

<p>同样用上述objc源代码，转换之后为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="n">to</span> <span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello Swift, Goodbye Obj-C!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">perform</span><span class="p">(</span><span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">MyClass</span><span class="p">.</span><span class="n">test</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">objc</span> <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>swift转换成objc</h2>

<p><a href="https://objectivec2swift.com/#/home">Swiftify</a>的作者写了一篇博客<a href="https://www.quora.com/How-can-you-convert-Swift-to-Objective-C">How can you convert Swift to Objective-C?</a>，说明了这个问题：</p>

<p>原文是：</p>

<blockquote><p>When speaking about idiomatic Swift, converting method implementations from Swift to Objective-C is the task that cannot be solved for all cases. As you might imagine, many “modern” Swift features do not have any counterparts in Objective-C and thus cannot be converted without a human brain :)</p></blockquote>

<p>结论就是：由于swift有很多objc没有的语言特性，所以swift到objc无法完成自动转换。</p>

<p>但是转换之后的objc的头文件可以从build in “Generated Interface” ([ProjectName]-Swift.h)里面找到，拷贝出来，稍作修改即可。但是仅限于swift暴漏给objc的接口和属性。那些没有暴漏给objc的接口和属性，就需要手动去转换啦。</p>

<blockquote><p>[ProjectName]-Swift.h如果不能通过cmd+shift+O找到，可以从引用这个头文件的objc文件中通过“go to declaration"找到。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读朱光潜《谈修养》]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang/"/>
    <updated>2018-11-05T12:44:57+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang</id>
    <content type="html"><![CDATA[<p>《谈修养》的一点读书杂想和摘抄。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#%E8%B0%88%E5%A4%84%E7%BE%A4%E4%B8%8A%E4%B8%AD%E4%B8%8B">谈处群（上、中、下）</a></li>
<li><a href="#%E8%B0%88%E5%AD%A6%E9%97%AE">谈学问</a></li>
<li><a href="#%E8%B0%88%E8%AF%BB%E4%B9%A6">谈读书</a>

<ul>
<li><a href="#%E5%A5%BD%E4%B9%A6%E4%B8%8D%E5%8E%8C%E7%99%BE%E5%9B%9E%E8%AF%BB">好书不厌百回读</a></li>
<li><a href="#%E7%9F%A5%E8%AF%86%E7%B3%BB%E7%BB%9F%E5%8C%96">知识系统化</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E8%8B%B1%E9%9B%84%E5%B4%87%E6%8B%9C">谈英雄崇拜</a>

<ul>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E5%8E%86%E5%8F%B2">英雄与历史</a></li>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E4%BA%BA%E6%A0%BC%E6%8F%90%E5%8D%87">英雄与人格提升</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E4%BA%A4%E5%8F%8B">谈交友</a></li>
<li><a href="#%E8%B0%88%E9%9D%92%E5%B9%B4%E4%B8%8E%E6%81%8B%E7%88%B1%E7%BB%93%E5%A9%9A">谈青年与恋爱结婚</a></li>
<li><a href="#%E8%B0%88%E4%BC%91%E6%81%AF">谈休息</a></li>
<li><a href="#%E8%B0%88%E6%B6%88%E9%81%A3">谈消遣</a></li>
<li><a href="#%E8%B0%88%E4%BD%93%E8%82%B2">谈体育</a></li>
<li><a href="#%E8%B0%88%E7%BE%8E%E6%84%9F%E6%95%99%E8%82%B2">谈美感教育</a>

<ul>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E6%9C%AC%E8%83%BD%E5%86%B2%E5%8A%A8%E5%92%8C%E6%83%85%E6%84%9F%E7%9A%84%E8%A7%A3%E6%94%BE">美育是本能冲动和情感的解放。</a></li>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E7%9C%BC%E7%95%8C%E7%9A%84%E8%A7%A3%E6%94%BE">美育是眼界的解放。</a></li>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E8%87%AA%E7%84%B6%E9%99%90%E5%88%B6%E7%9A%84%E8%A7%A3%E6%94%BE">美育是自然限制的解放。</a></li>
<li><a href="#%E7%88%B1%E7%BE%8E%E7%9A%84%E5%A4%A9%E6%80%A7%E9%9C%80%E8%A6%81%E5%9F%B9%E5%85%BB">爱美的天性需要培养</a></li>
</ul>
</li>
<li><a href="#%E7%BB%99%E7%94%B3%E6%8A%A5%E9%9D%92%E5%B9%B4%E7%9A%84%E9%9D%92%E5%B9%B4%E8%AF%BB%E8%80%85">给《申报青年》的青年读者</a></li>
</ul>


<p><br></p>

<p><a id="markdown-谈处群上中下" name="谈处群上中下"></a></p>

<h2>谈处群（上、中、下）</h2>

<p>说了很多，也颇有感触，但是没能总结出来。</p>

<p><a id="markdown-谈学问" name="谈学问"></a></p>

<h2>谈学问</h2>

<p>做学问不等同于“读书”。读书只是做学问的一种方式。</p>

<p>孔子那句“学而不思则罔，思而不学则怠”道出了学问的真谛。不能空想，也不能死读书。</p>

<p>学校教育的两个作用应该是：</p>

<ul>
<li>启发兴趣</li>
<li>指点门径</li>
</ul>


<p>而现在的学校不在这两个方面努力，只尽量在灌输知识。这种教育对于学问不仅无裨益，而且是障碍。</p>

<p><a id="markdown-谈读书" name="谈读书"></a></p>

<h2>谈读书</h2>

<p><a id="markdown-好书不厌百回读" name="好书不厌百回读"></a></p>

<h3>好书不厌百回读</h3>

<p>“好书不厌百回读，熟读深思子自知。”</p>

<p>多读不能算作荣誉，少读也不能算是耻辱。少读如果彻底，必能养成深思熟虑的习惯，涵泳优游，以至于变化气质；多读而不求甚解，则如驰骋十里洋场，虽珍奇满目，徒惹得心花意乱，空手而归。世间许多读书人只为装点门面，如暴发户炫耀家私，以多为贵。这在治学方面是自欺欺人，在做人方面是趣味低劣。</p>

<p><a id="markdown-知识系统化" name="知识系统化"></a></p>

<h3>知识系统化</h3>

<p>一书做几遍看，每一遍只着重某一方面。也就是说读书要有中心，有中心才易有系统组织。</p>

<p>一个人心中可以有多个系统中心，将看到的知识归到不同的系统框架中去。大凡零星片段的知识，不但易忘，而且无用。每次所得的新知识必须与旧有的知识联络贯穿，这就是说，必须围绕一个中心归聚到一个系统里去，才会生根，才会开花结果。</p>

<p><a id="markdown-谈英雄崇拜" name="谈英雄崇拜"></a></p>

<h2>谈英雄崇拜</h2>

<p><a id="markdown-英雄与历史" name="英雄与历史"></a></p>

<h3>英雄与历史</h3>

<p><strong>英雄造时势</strong></p>

<p>卡莱尔在《英雄崇拜》中说“人类在这世界上所成就的事业的历史，骨子里就是在当中工作的几个伟大任务的历史。”
尼采的超人主义，也是为英雄崇拜涂上了哲学色彩。</p>

<p><strong>时势造英雄</strong></p>

<p>托尔斯泰的《战争与和平》在传达“时势造英雄”的理念。</p>

<p><a id="markdown-英雄与人格提升" name="英雄与人格提升"></a></p>

<h3>英雄与人格提升</h3>

<p>撇开英雄和历史的关系不说，但是对人的教育感化的作用，就不能否定英雄崇拜。正所谓“高山仰止，景行行止。虽不能至，然心向往之。”</p>

<p>尤其在青少年时代，意向的力量大于概念，与其向他们说仁义道德，不如指点几个有血有肉的具有仁义道德的人给他们看。教育重人格感化，必须是一个具体的人格才真正有感化力。</p>

<p><a id="markdown-谈交友" name="谈交友"></a></p>

<h2>谈交友</h2>

<p>近朱者赤近墨者黑</p>

<p>与善人交，如入芝兰之室，久而不闻其香；与恶人交，如入鲍鱼之市，久而不闻其臭。</p>

<p>诤友难得</p>

<p><a id="markdown-谈青年与恋爱结婚" name="谈青年与恋爱结婚"></a></p>

<h2>谈青年与恋爱结婚</h2>

<p>青年人不宜过早恋爱和结婚，需要自然的方法引导，而非暴力禁止。自然的方法包括：</p>

<ol>
<li>精力有所发挥，精神有所委托。青年人精力旺盛，要他闲着，难免泛滥横流。假如他在工作里发生兴趣，在文艺里发生兴趣，甚至在游戏运动里发生兴趣，这就可以垄断他的心神，不叫它旁迁他涉。</li>
<li>改善社交生活，使同情心得到滋养。青年最需要的是同情，最怕的是寂寞，愈寂寞就愈感觉异性需要的迫切。一般青年追求异性，与其说是迫于性的冲动，毋宁说是迫于同情的需要。要满足这需要，社会生活如果丰富也就够了。一个青年如果有亲热的家庭生活，加上温暖的团体生活，不感觉到孤寂，他虽然还有“遇”恋爱的可能，却无“谋”恋爱的必要。交谊愈广泛，发生恋爱的可能性也就愈少。一个青年最危险的遭遇莫过于向来没有和一个女子有较深的接触，一碰见第一个女子就爱上了她。</li>
</ol>


<p><a id="markdown-谈休息" name="谈休息"></a></p>

<h2>谈休息</h2>

<p>节奏，优游涵泳</p>

<p>休息不仅为蓄力，也为整理酝酿，让筋肉技巧在潜意识中酝酿凝固。</p>

<p>我（朱光潜）生平最爱陶渊明在自祭文里所说的两句话：“勤靡余劳，心有常闲”，这是修养的极境，人事算尽了，而神仙福分也就在尽人事中享着。现代人的毛病是“勤有余劳，心无偶闲”。这使人心地驳杂，缺乏冲和弘毅的气象，日日困于名缰利锁，叫整个世界日趋于干枯黑暗。</p>

<p><a id="markdown-谈消遣" name="谈消遣"></a></p>

<h2>谈消遣</h2>

<p>身和心到活动都有有节奏到周期。此所谓“一张一弛文武之道”。</p>

<p>更番瓜代：脑力工作者要时不时地做些体力活动。</p>

<p>儒家六艺：诗书礼乐射御，其中后四项都带有消遣娱乐到意味。孔子谈修养，“局于人”之后即继以“游于艺”。</p>

<p>世间欢喜消遣的人，无论他们到嗜好如何不同，都有一个共同点，就是他们必都有强旺的生活力，运动家和艺术家如此，嫖客赌徒乃至于烟鬼也是如此。他们到生活力强旺，发泄到需求也就急迫。他们所不同者只在发泄方式。这有如大水，可以灌田、发电或推动机器，也可以泛滥横流，淹毙人畜草木。同是强旺到生活力，用在运动可以健身，用在艺术可以怡情养性，用在吃喝嫖赌就可以劳民伤财，为非作歹。“浪子回头是个宝”，也是这个道理。浪子必是生活力强旺到人，如果可以用于正道，也必是人上之人。</p>

<p><a id="markdown-谈体育" name="谈体育"></a></p>

<h2>谈体育</h2>

<p>德、智、体、美均衡发展。</p>

<p>健康有先天因素，也有后天因素。先天因素我们能做的就是优生优育，母亲的体格康健比父亲更重要。后天健康要注意三个方面。一是营养适宜，二是生活规律，三是心境要宽和冲淡，少动气，少存杂念。</p>

<blockquote><p>我国古代特别看中上述的第三点。“养生莫善于寡欲。”近代社会复杂，刺激特多，愈近于文明，愈远于自然，处处都是扰乱心智的事物，就是处处逼我们打消耗战。我们必须淡泊宁静，以逸待劳。这不但可以养生，也可以使学问事业得到较大的成就。</p></blockquote>

<p>要训练互助、尊重纪律的精神，最好的运动场所是运动场。</p>

<p><a id="markdown-谈美感教育" name="谈美感教育"></a></p>

<h2>谈美感教育</h2>

<p>朱子诗云：“半亩方塘一鉴开，天光云影共徘徊。问渠哪得清如许？为有源头活水来。”这诗所写的是一种修养的胜境。美感教育给我们的是“源头活水”。</p>

<p><a id="markdown-美育是本能冲动和情感的解放" name="美育是本能冲动和情感的解放"></a></p>

<h4>美育是本能冲动和情感的解放。</h4>

<p>宗教、法律、道德约束下的欲望，可以在美育中得到解放。</p>

<p><a id="markdown-美育是眼界的解放" name="美育是眼界的解放"></a></p>

<h4>美育是眼界的解放。</h4>

<p>美育可以培养发现生活美的眼睛。</p>

<p><a id="markdown-美育是自然限制的解放" name="美育是自然限制的解放"></a></p>

<h4>美育是自然限制的解放。</h4>

<p>这是德国唯心派哲学家康德、席勒、叔本华、尼采诸人所最看重的一点，现在我们用浅近语来说明它。</p>

<p>自然世界是有限的，受因果律支配的，其中毫末细故都有他的必然性。社会由历史铸就，人由遗传和环境造成。人的活动 寸步离不开物质生存条件的支配，没有翅膀就不能飞，绝饮食就会饿死。由此类推，人在自然中是极不自由的。动植物和非生物一味顺从自然，接受它的限制，没有过分希冀，也就没有失望和痛苦。人却不同，他有心灵，有不可压制的欲望。人可以说是两重奴隶，第一服从自然的限制，其次要受自己的欲望驱使。<strong>以无穷欲望处有限自然，人便觉得处处不如意，不自由，烦闷苦恼都由此起。</strong></p>

<p>专就物质说，人在自然面前是十分渺小的。但在精神方面，人可以跳开自然的圈套而征服自然，他可以在自然世界之外另在想象中造出较能合理慰情的世界。这就是艺术的创造。</p>

<p>多接受美感教育，就是多学会如何从自然限制中解放出来，由奴隶变成上帝，充分地感觉人的尊严。</p>

<p><a id="markdown-爱美的天性需要培养" name="爱美的天性需要培养"></a></p>

<h3>爱美的天性需要培养</h3>

<p>爱美是人的天性，虽是天性，仍需要培养，否则，便会凋零。</p>

<p>美育必须从年轻时入手，年纪愈大，外务愈纷繁，习惯的牢笼愈坚固，感觉愈迟钝，心里愈复杂，欣赏艺术力也就愈薄弱。</p>

<p>我时常想，无论学哪一科专门学问，干哪一行职业，每个人都应该会听音乐，不断地读文学作品，偶尔有欣赏图画、雕刻的机会。</p>

<p>从历史看，一个民族在最兴旺的时候，艺术成就必伟大，美育必发达。史诗悲剧时代的希腊、文艺复兴时代的意大利、莎士比亚时代的英国、歌德和贝多芬时代的德国都可以作证。现在我们要想复兴民族，必须恢复周以前歌乐舞的盛况，这就是说，必须提倡普及的美感教育。</p>

<p><a id="markdown-给申报青年的青年读者" name="给申报青年的青年读者"></a></p>

<h2>给《申报青年》的青年读者</h2>

<p>我很佩服英国人，他们总是事到头来，才想办法。事没有来到头来，他们总是冷静地等待着，观察着，今天决不打明天的计算。但是他们也决不肯放弃现在的机会，觉得一件事应该去做，就马上去做，不张皇也不迟疑。他们的国家内政外交如此，个人经营的事业也是如此。他们不幻想未来，他们的老谋深算都费在抓住现在和认清现在上面。他们出死力抓住现在，事到头来时，他们总是不慌不忙地处理的很妥当。这种冷静沉着的态度就是值得我们观摩的。</p>

<p>“三此”：此身，此时，此地。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于AR的一些使用场景]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/17/some-ideas-on-ar-usage/"/>
    <updated>2018-08-17T15:13:58+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/17/some-ideas-on-ar-usage</id>
    <content type="html"><![CDATA[<p>搜集一些有意思的AR应用。</p>

<!-- more -->


<p>主要参考：<a href="https://github.com/olucurious/Awesome-ARKit">Awesome ARKit</a>。这篇post里面还有很多实用的AR Tutorial和Resouces，如果自己动手，可以参考。</p>

<ul>
<li><a href="#app-store%E4%B8%8A%E9%9D%A2%E7%9A%84app">App Store上面的App</a>

<ul>
<li><a href="#%E7%A5%9E%E5%A5%87ar">神奇AR</a></li>
<li><a href="#ikea-place">IKEA Place</a></li>
<li><a href="#wallr">Wallr</a></li>
<li><a href="#horizon-explorer">Horizon Explorer</a></li>
<li><a href="#weare">WeAre</a></li>
<li><a href="#waazy---magic-ar-video-maker">Waazy - Magic AR Video Maker</a></li>
<li><a href="#human-anatomy-atlas-2019">Human Anatomy Atlas 2019</a></li>
</ul>
</li>
<li><a href="#github%E4%B8%8A%E9%9D%A2%E7%9A%84%E9%A1%B9%E7%9B%AE">Github上面的项目</a>

<ul>
<li><a href="#arkit-occlusion-demo">arkit-occlusion-demo</a></li>
<li><a href="#arvideokit">[ARVideoKit]()</a></li>
<li><a href="#arkit-smb-homage">arkit-smb-homage</a></li>
<li><a href="#arkit-corelocation">ARKit-CoreLocation</a></li>
<li><a href="#arkitnavigationdemo">ARKitNavigationDemo</a></li>
<li><a href="#fineme">FineMe</a></li>
<li><a href="#arkitspitfire">ARKitSpitfire</a></li>
</ul>
</li>
<li><a href="#resources">Resources</a>

<ul>
<li><a href="#poly">Poly</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-app-store上面的app" name="app-store上面的app"></a></p>

<h2>App Store上面的App</h2>

<p><a id="markdown-神奇arhttpsitunesapplecomcnappar-arid1327719623mt8" name="神奇ar"></a></p>

<h3><a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a></h3>

<p>这个AR应用非常棒，号称“中国第一AR平台”。打开App，以为自己是打开了“抖音”呢。其模仿抖音的痕迹很重，但是神奇AR的视频不同于抖音里面的视频：都是真实世界和虚拟世界的深入互动。支持下载很多3D模型。</p>

<p><a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a>还有一个很好的应用：可以让你将照片在真实场景中打开，支持默认的排列方式，也可以自由摆放多张照片。但是图片一圈都会默认带有一圈白色的过渡带和阴影，无法去除。对于不是标准长方形的图片（比如圆形的图片，圆形之外都是透明的），显示效果不佳。</p>

<p>而且，是免费的。也许是因为其主打段视频社交吧，所以免费。</p>

<p>看官方介绍：</p>

<blockquote><p>AR视频:
用户可以利用AR模型、特效、图片、视频等拍摄一段30秒的短视频，发布在神奇AR的视频流中，或者分享到各大媒体平台，将自己的创意展现给更多的人，告诉大家如何使用AR。
玩转AR:
用户可以打开AR摄像头，通过简单的操作，将AR模型放在真实世界中，创造各种神奇的景象，用AR就能创造电影里才能出现的特技。
丰富的模型:
神奇AR是一个开放内容平台，直接对接优质的AR内容提供者，他可以通过神奇AR把自己的作品第一时间开放给用户，所以我们拥有全世界最丰富的AR内容。</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/shenqiar.jpg" alt="神奇 AR" /></p>

<p><a id="markdown-ikea-placehttpsitunesapplecomusappikea-placeid1279244498mt8" name="ikea-place"></a></p>

<h3><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">IKEA Place</a></h3>

<p>宜家的官方App，有丰富的宜家家具的3D模型，真实尺寸，可以提前放置到自己的房间，看看效果。</p>

<blockquote><p>IKEA Place lets you virtually &lsquo;place&rsquo; IKEA products in your space. The app includes 3D and true-to-scale models of everything from sofas and armchairs to footstools and coffee tables. IKEA Place gives you an accurate impression of the furniture’s size, design and functionality in your home so you can stop wondering and start doing.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/IKEAPlace.jpg" alt="ikea place" /></p>

<p><a id="markdown-wallrhttpsitunesapplecomusappwallrid1278372745" name="wallr"></a></p>

<h3><a href="https://itunes.apple.com/us/app/wallr/id1278372745">Wallr</a></h3>

<p>Wallr可以让你将图片放置到真实场景的墙面上。如果你想买画装饰墙面，可以试试。不过这个功能已经在<a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a>中实现了，而且是免费的。</p>

<p>同时放置多张图片需要花钱购买。</p>

<p><img src="http://hongchaozhang.github.io/images/wallr.jpg" alt="wallr" /></p>

<p><a id="markdown-horizon-explorerhttpsitunesapplecomgbapphorizon-explorerid1326860431platformipadpreservescrollpositiontrueplatformipad" name="horizon-explorer"></a></p>

<h3><a href="https://itunes.apple.com/gb/app/horizon-explorer/id1326860431?platform=ipad&amp;preserveScrollPosition=true#platform/ipad">Horizon Explorer</a></h3>

<p>AR和地图、地理位置结合的一个应用。</p>

<p>展示你设备看到的地理位置的信息，包括距离、建筑物名称、地点名称等。并把路线在一张地图上面展示给你。</p>

<p>还可以将3D的地图展示给你，让你看看某个景点或者建筑物周围等地理信息。</p>

<p>来看官方介绍：</p>

<blockquote><p>Horizon Explorer shows you the horizon and skyline around you &amp; tells you what you&rsquo;re looking at.</p>

<p>Point your camera at a hill, village, lake or landmark and Horizon Explorer will tell you what you are looking at, how far away it is, and show you a map, and information about the point you&rsquo;re aiming at.</p>

<p>ARKit technology makes the labels and alignment much more stable than used to be possible.</p>

<p>Fly up high and see the terrain laid out below you to see what is over the hills around you, and get the lay of the land, then see the scale-model 3D map that you can walk around &amp; explore to find out what&rsquo;s behind hills, or investigate up close.</p>

<p>Tracking works best on top of a hill with an unobstructed view of your surroundings (close up trees, buildings, rocks etc. can confuse the tracking). You can drag the terrain with your finger to line up with the camera if the automatic tracking is not working very well. Or try waving your phone around in the air in a figure 8 to calibrate the compass.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/HorizonExplorer.jpg" alt="Horizon Explorer" /></p>

<p><a id="markdown-wearehttpsitunesapplecomcnappweareid1304227680platformiphonepreservescrollpositiontrueplatformiphoneplatformiphoneplatformiphone" name="weare"></a></p>

<h3><a href="https://itunes.apple.com/cn/app/weare/id1304227680?platform=iphone&amp;preserveScrollPosition=true&amp;platform=iphone#platform/iphone&amp;platform=iphone">WeAre</a></h3>

<p>这个应用可以让你选择一些照片，以设备为中心围成一圈，并缓慢移动。还可以播放视频、背景音乐和编辑3D文字。用作者的话说，“可以打造一个或温馨浪漫的回忆相册,或缥缈遥远的世界.”</p>

<p>同时还是源码可以参考：<a href="https://github.com/SherlockQi/HeavenMemoirs">HeavenMemoirs - AR相册</a></p>

<p><img src="http://hongchaozhang.github.io/images/weare.jpg" alt="WeAre" /></p>

<p><a id="markdown-waazy---magic-ar-video-makerhttpsitunesapplecomusappwaazy-magic-ar-video-makerid1286992749" name="waazy---magic-ar-video-maker"></a></p>

<h3><a href="https://itunes.apple.com/us/app/waazy-magic-ar-video-maker/id1286992749">Waazy - Magic AR Video Maker</a></h3>

<p>没太看懂这个应用。感觉主要做社交视频分享。录制视频还需要AR Lens。直接看官方介绍吧：</p>

<blockquote><p>Waazy is an augmented reality short video clips shooting and sharing social network, making it possible to bring virtual characters and objects to the real world.</p>

<p>Features:
- Record cool moments with AR Lens
- Tons of free and awesome AR effects
- Can add multiple AR characters at the same time
- One tap to make all the characters dance together
- Easily move and rotate a virtual character with control pad
- Themes include fantasy, monster, fun, and landmarks
- Show your original AR videos to the world</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/wazzy.jpg" alt="wazzy" /></p>

<p><a id="markdown-human-anatomy-atlas-2019httpsitunesapplecomappid1117998129" name="human-anatomy-atlas-2019"></a></p>

<h3><a href="https://itunes.apple.com/app/id1117998129">Human Anatomy Atlas 2019</a></h3>

<p>其实这个主要是展示人体内部结构的3D素材，借助AR技术投射到真实场景，没有很新鲜的AR应用场景。</p>

<p>这个应用非常专业，下载需要钱，App内还要购买。</p>

<blockquote><p>Human Anatomy Atlas offers thousands of models to help understand and communicate how the human body looks and works&ndash;and includes textbook-level definitions. Use it as a reference, instead of an anatomy textbook, or to create virtual lab experiences.
Includes over 10,000 anatomical models with descriptions in English, Spanish, French, German, Italian, Japanese, and Simplified Chinese.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/HumanAnatomyAtlas2019_1.jpg" alt="Human Anatomy Atlas 2019 1" /></p>

<p><img src="http://hongchaozhang.github.io/images/HumanAnatomyAtlas2019_2.jpg" alt="Human Anatomy Atlas 2019 2" /></p>

<p><a id="markdown-github上面的项目" name="github上面的项目"></a></p>

<h2>Github上面的项目</h2>

<p><a id="markdown-arkit-occlusion-demohttpsgithubcombjarnelarkit-occlusion" name="arkit-occlusion-demo"></a></p>

<h3><a href="https://github.com/bjarnel/arkit-occlusion">arkit-occlusion-demo</a></h3>

<p>事先用一些虚拟平面将真实的墙面、柜子面、门等标记出来，就可以让虚拟的小球在房间里面来回反弹，就像撞到真实的墙上返回来一样。</p>

<p><img src="http://hongchaozhang.github.io/images/occlusiongame.jpg" width="600" alt="occlusion game" /></p>

<p><a id="markdown-arvideokit" name="arvideokit"></a></p>

<h3><a href="">ARVideoKit</a></h3>

<p>一个用来录制AR视频的框架。</p>

<blockquote><p>An iOS Framework that enables developers to capture videos, photos, Live Photos, and GIFs with ARKit content.</p>

<p>In other words, you NO LONGER have to screen record/screenshot to capture videos and photos of your awesome ARKit apps!</p></blockquote>

<p>其实录屏/截屏不是也挺好的吗？！</p>

<blockquote><p>Key Features:</p>

<p>✅ Capture Photos from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Capture Live Photos &amp; GIFs from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Record Videos from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Pause/Resume video</p>

<p>✅ Allow device&rsquo;s Music playing in the background while recording a video</p>

<p>✅ Returns rendered and raw buffers in a protocol method for additional Image &amp; Video processing</p></blockquote>

<p><a id="markdown-arkit-smb-homagehttpsgithubcombjarnelarkit-smb-homage" name="arkit-smb-homage"></a></p>

<h3><a href="https://github.com/bjarnel/arkit-smb-homage">arkit-smb-homage</a></h3>

<p>在现实场景中玩超级玛丽。非常粗糙，但是创意还不错。</p>

<p><img src="http://hongchaozhang.github.io/images/supermario_beginning.jpg" width="600" alt="super mario beginning" /></p>

<p><img src="http://hongchaozhang.github.io/images/supermario_flag.jpg" width="600" alt="super mario flag" /></p>

<p><a id="markdown-arkit-corelocationhttpsgithubcomprojectdentarkit-corelocation" name="arkit-corelocation"></a></p>

<h3><a href="https://github.com/ProjectDent/ARKit-CoreLocation">ARKit-CoreLocation</a></h3>

<p>功能：</p>

<ol>
<li>这个库最主要的工作，是在试图整合ARKit和CoreLocation，以得到更加准确的定位，从而更好地应用于AR场景。</li>
<li>基于真实地理位置，标注出摄像头中某个建筑物或者景点的标注。这个功能类似于<a href="https://itunes.apple.com/gb/app/horizon-explorer/id1326860431?platform=ipad&amp;preserveScrollPosition=true#platform/ipad">Horizon Explorer</a>。</li>
</ol>


<p>TODO: 可以仔细看看此库附带的demo：</p>

<blockquote><p>The library and demo come with a bunch of additional features for configuration. It’s all fully documented to be sure to have a look around.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/arkit+corelocation.jpg" width="600" alt="arkit + corelocation" /></p>

<p><a id="markdown-arkitnavigationdemohttpsgithubcomchriswebb09arkitnavigationdemo" name="arkitnavigationdemo"></a></p>

<h3><a href="https://github.com/chriswebb09/ARKitNavigationDemo">ARKitNavigationDemo</a></h3>

<p>在地图上选择目的地，然后在真实场景中进行AR导航。</p>

<p>但是，这个项目也只是Demo一下，作者也很谦虚：</p>

<blockquote><p>When it loads to the map, tap a place on the map where you want to navigate to and press okay. The tap can be sluggish, so you might have to try once or twice before you get it. When the navigation screen loads, tap the screen, then give it a few seconds. You should see the nodes render.</p></blockquote>

<p>TODO: 这个项目中推荐的一些参考文献还是值得看一看的。</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitNavigationDemo.gif" alt="ARKitNavigationDemo" /></p>

<p><a id="markdown-finemehttpsgithubcommmoaayfindme" name="fineme"></a></p>

<h3><a href="https://github.com/mmoaay/Findme">FineMe</a></h3>

<p>可以让你的朋友根据你录制的路线图找到你：</p>

<ol>
<li>通过各种方法，记录你的起点，并让另一个人知道你的起点。比如可以通过分享起点照片，或者分享起点位置。</li>
<li>通过ARKit记录你走过的路线，并将路线分享给另一个人。</li>
<li>另一个人如果找到了你的起点，就可以根据你分享的路径找到你。</li>
</ol>


<p>但是，由于ARKit不稳定，此方法也不一定奏效。</p>

<p>作者试图通过定位和距离提高路线的稳定性，但不知效果如何，分别见于以下两个分支：</p>

<ul>
<li><a href="https://github.com/mmoaay/Findme/tree/feature/location_optimize">According to location</a></li>
<li><a href="https://github.com/mmoaay/Findme/tree/feature/distance_optimize">According to distance</a></li>
</ul>


<p><a id="markdown-arkitspitfirehttpsgithubcomchriswebb09arkitspitfire" name="arkitspitfire"></a></p>

<h3><a href="https://github.com/chriswebb09/ARKitSpitfire">ARKitSpitfire</a></h3>

<p>可以让一架3D飞机模型，根据提供的地理位置经纬度，调整姿态，并飞向那里。</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitSpitfire.gif" alt="ARKitSpitfire" /></p>

<p><a id="markdown-resources" name="resources"></a></p>

<h2>Resources</h2>

<p><a id="markdown-polyhttpsgithubcompiemontepoly" name="poly"></a></p>

<h3><a href="https://github.com/piemonte/Poly">Poly</a></h3>

<p><a href="https://github.com/piemonte/Poly">Poly</a>是一个iOS库，用来从<a href="https://developers.google.com/poly/">Google Poly</a>上下载3D模型，包含搜索、下载管理和缓存功能。</p>

<p><a href="https://developers.google.com/poly/develop/ios">iOS Quickstart</a>展示了如何在iOS中下载使用<a href="https://developers.google.com/poly/">Google Poly</a>上面的3D资源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将代码查重工具CPD集成到Xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode/"/>
    <updated>2018-08-02T18:34:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="http://hongchaozhang.github.io/images/copy_and_paste_image.jpeg" alt="copy and paster image" /></p>

<h2>DRY准则</h2>

<p>编程的一个基本准则就是DRY（Don&rsquo;t Repeat Yourself)，不写重复代码。简单来说，就是不要复制黏贴。</p>

<p>在开始之前，我们先讨论一下什么叫做“复制黏贴”？首先，如果你有相同的文件，肯定是极其糟糕的“复制黏贴”。如果你有两个类只是类名不同，但是做着相同或者类似的事情，也是很严重的“复制黏贴”。即使只有10行代码的重复，也是”复制黏贴“。根据作者个人经验，一个100000行的工程，完全不需要复制黏贴。</p>

<h3>复制黏贴的坏处</h3>

<p>在重复的代码处修改bug，还需要手动找到另外一处，做相同的修改。</p>

<h2>如何避免复制黏贴</h2>

<p>避免重复代码的传统方法是代码审查，但是对于代码审查者来说，找到重复代码是一件很困难的事情。</p>

<p>我们能不能在编译阶段就查找出重复代码，并要求这些重复代码移除掉之后才可以继续进行编译。</p>

<h2>安装CPD</h2>

<p>对于Swift代码，有两个工具可以做代码查重：</p>

<ul>
<li><a href="https://github.com/kucherenko/jscpd">jscpd</a></li>
<li><a href="https://pmd.github.io/">pmd</a></li>
</ul>


<h3><a href="https://pmd.github.io/">pmd</a></h3>

<p>其中，pmd可定制，并且比较稳定。开始之前，先通过homebrew进行安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install pmd</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择<a href="https://github.com/realm/SwiftLint">SwiftLint</a>。</p></blockquote>

<h2>集成到Xcode</h2>

<p>为了将CPD功能集成到编译阶段，我们在Build Phase里新添加一个运行脚本（Run Script），并添加以下脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Running CPD
</span><span class='line'>pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true
</span><span class='line'># Running script
</span><span class='line'>php ./cpd_script.php -cpd-xml cpd-output.xml</span></code></pre></td></tr></table></div></figure>


<p>让我们来看一下这一段脚本做了什么事情。</p>

<p>第一部分是说我们在项目根目录下对所有的文件进行代码查重：</p>

<ul>
<li><code>--minimum-tokens</code>指定重复代码的最少token数量。这里的token是一个比较抽象的概念，不是字符，不是单词，也不是短语的意思。根据经验来说，Swift语言的最优值是50：太大，会漏掉重复代码；太小，会将一些代码误判为重复代码。</li>
<li><code>--formant</code>指定输出格式，这里指定为xml文件。</li>
<li><code>--failOnViolation</code>标识为设置为<code>true</code>，意思是只要检测到重复代码，就不继续进行编译。</li>
</ul>


<blockquote><p>经测试，无论<code>--failOnViolation</code>设置成<code>true</code>，还是<code>false</code>，都不能阻断编译的正常运行。所有的warning都能正常地输出。</p></blockquote>

<p>第一部分脚本执行的结果，是一个xml文件，里面包含了整个工程里面的重复代码及其位置、行数等信息。下面让我们看看，怎么将这个难读的xml文件以warning的形式展示给开发者。</p>

<p>为了将xml文件转换成更好读的warning，需要在工程根目录下创建一个php文件，我们叫做cpd_script.php，拷贝下面的脚本到该文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nb">simplexml_load_file</span><span class="p">(</span><span class="s1">&#39;cpd-output.xml&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">duplication</span> <span class="k">as</span> <span class="nv">$duplication</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$duplication</span><span class="o">-&gt;</span><span class="na">xpath</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$file</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$file</span><span class="p">[</span><span class="s1">&#39;line&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:1: warning: &#39;</span><span class="o">.</span><span class="nv">$duplication</span><span class="p">[</span><span class="s1">&#39;lines&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39; copy-pasted lines from: &#39;</span>
</span><span class='line'>            <span class="o">.</span><span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$otherFile</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$otherFile</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$otherFile</span><span class="p">[</span><span class="s1">&#39;line&#39;</span><span class="p">];</span> <span class="p">},</span>
</span><span class='line'>            <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$files</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$f</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$file</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$f</span> <span class="o">!=</span> <span class="nv">$file</span><span class="p">;</span> <span class="p">})))</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在Build Phase中添加的脚本的第二部分就是运行这一段脚本，将生成的xml文件中的所有重复代码信息以warning的形式展示在Xcode中。如果你想了解如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</p>

<blockquote><p>我试了<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>中说的方法，脚本有错误，为了将comment中有TODO:和FIXME:的地方标记为warning，将有ERROR:的地方标记为error，可以尝试将下面的脚本写到Build Phase的运行脚本（Run Script）中（参考<a href="https://medium.com/ios-os-x-development/highlight-warnings-in-xcode-521125121a75">Highlight Warnings in Xcode</a>）：</p>

<pre><code>TAGS="TODO:|FIXME:|WARNING:"
ERRORTAG="ERROR:"
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" -or -name "*.swift" \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching "($TAGS).*\$|($ERRORTAG).*\$" | perl -p -e "s/($TAGS)/ warning: \$1/"| perl -p -e "s/($ERRORTAG)/ error: \$1/"
</code></pre>

<p>其实不用这么复杂：以“#warning”开头，接下来跟上warning信息就可以了，Xcode会在左侧导航栏里面生成一种叫做User-Defined Issues的warning。</p></blockquote>

<p>现在编译工程，可以在Xcode左侧导航窗口看到所有的warning：</p>

<p><img src="http://hongchaozhang.github.io/images/cpd_warnings_in_navigation.jpg" alt="cpd warnings in navigation" /></p>

<p>在相应的文件中，也可以看到该文件所包含的重复代码的warning：</p>

<p><img src="http://hongchaozhang.github.io/images/cpd_warnings_in_file.jpg" alt="cpd warnings in file" /></p>

<p>这个warning的意思是说：从54行往下的41行代码和ErrorHandleTester.swift中从96行往下的41行代码重复。</p>

<blockquote><p>如果是刚安装的pmd，可能需要重启Xcode，让pmd命令生效。</p></blockquote>

<h3><a href="https://github.com/kucherenko/jscpd">jscpd</a></h3>

<p>生成的中间结果文件格式和pmd是一样的，节点名字也叫做<code>pmd-cpd</code>。</p>

<p>但是：<strong>jscpd支持yaml格式的配置文件。</strong>这一点很重要，我在工作中也是用jscpd，而不是pmd的cpd。jscpd的安装和使用方法同pmd的cpd基本一样，不再重复。</p>

<p>yaml语法参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a>。</p>

<h2>什么时候使用</h2>

<p>Finding clones is typically useful in the following cases:</p>

<ul>
<li><p><strong>When updating existing code</strong>. When you are fixing a bug, or responding to changes in requirements, you usually start by finding the location in the code that you need to change. Before you make the change, search for clones of that code segment. If clones are discovered:</p>

<ul>
<li>Consider whether you need to make the same change to each clone.</li>
<li>Consider also whether this is a good opportunity to refactor the cloned code into a shared method or class.</li>
</ul>
</li>
<li><p><strong>Architectural cleanup</strong>. Towards the end of every iteration, use Analyze Solution for Code Clones on the Analyze menu.</p></li>
<li><p><strong>When you create code</strong>. When you have written new code, use the tool to find similar code that already existed.</p></li>
</ul>


<h2>结论</h2>

<p>作者：重复代码清理刻不容缓。这个工具可以帮助我们做这件事情，而且，几乎没有任何副作用。</p>

<h2>参考</h2>

<ul>
<li>翻译部分<a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>。</li>
<li>如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</li>
<li>如何编写jscpd的yaml配置文件，参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Create ML]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/06/15/introducing-create-ml/"/>
    <updated>2018-06-15T17:39:30+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/06/15/introducing-create-ml</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#background">Background</a></li>
<li><a href="#create-ml">Create ML</a></li>
<li><a href="#main-advantage-easy-to-use">Main Advantage: Easy to Use</a>

<ul>
<li><a href="#create-ml%E5%92%8Cturi-create">Create ML和Turi Create</a></li>
</ul>
</li>
<li><a href="#transfer-learning">Transfer Learning</a></li>
<li><a href="#improving-accuracy">Improving Accuracy</a></li>
<li><a href="#references-and-materials">References and Materials</a></li>
</ul>


<p>Apple released Core ML in WWDC2017, and I took a note on <a href="../../../../2017/12/28/coreml-usage/">CoreML Usage</a>, including mlmodel training using Microsoft <a href="https://www.customvision.ai/">Custom Vision</a>.</p>

<p>This post is about the background of Create ML, its advantages, its relations with Turi. There is no code in this post. If you are looking for the usage of Create ML, refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a>.</p>

<p><a id="markdown-background" name="background"></a></p>

<h2>Background</h2>

<p>Before 2018, where can we get the mlmodel file used in iOS and macOS?</p>

<ul>
<li><a href="https://github.com/tf-coreml/tf-coreml">TensorFlow</a>: Train machine learning models and easily convert them to the Core ML Model format.</li>
<li><a href="https://www.customvision.ai/">Custom Vision</a> from Microsoft</li>
<li><a href="https://pypi.org/project/coremltools/">Core ML Tools</a>: Use this python package to convert models from machine learning toolboxes into the Core ML format.</li>
<li><a href="https://github.com/apache/incubator-mxnet/tree/master/tools/coreml">Apache MXNet</a>: Train machine learning models and convert them to the Core ML format.</li>
<li><a href="https://github.com/onnx/onnx-coreml">ONNX</a>: Convert ONNX models you have created to the Core ML Model format.</li>
<li>&hellip;</li>
</ul>


<p>TensorFlow doesn&rsquo;t support GPU on macOS from version 1.2.</p>

<p><img src="http://hongchaozhang.github.io/images/tensorflow_not_support_gpu_on_macos.jpg" alt="tensor flow not support gpu on macos" /></p>

<p><strong>Core ML</strong>: Announced at WWDC 2017, and already supported by every major ML platform to convert existing models. But the existing models tend to be too big and/or too general.</p>

<p><strong>Turi Create</strong>: Acquired by Apple in 2016 ($200M), it lets you customize existing models with your own data. But … Python :[.</p>

<p><a id="markdown-create-ml" name="create-ml"></a></p>

<h2>Create ML</h2>

<p>Finally in WWDC2018, Apple announced <strong>Create ML</strong>, which can train machine learning models on macOS, able to use the GPU on macOS. The Create ML session and Turi Create session did not mention any word on each other, but obviousely, Create ML is based on Turi Create.</p>

<p>Based on Trui&rsquo;s model training, Create ML can make model training on macOS using GPU (maybe through Metal), and come up with models which can be used by Core ML framework.</p>

<p>With XCode Playground&rsquo;s updates, Apple gives CreateMLUI, a very easy way for model training: just need to drag your training data and test data into Playground.</p>

<p><a id="markdown-main-advantage-easy-to-use" name="main-advantage-easy-to-use"></a></p>

<h2>Main Advantage: Easy to Use</h2>

<p>Do model training using Swift in XCode.</p>

<blockquote><p><strong>Create ML</strong> is proof that Apple is committed to making it easier for you to use machine learning models in your apps. In this Create ML tutorial, you’ll learn how Create ML speeds up the workflow for improving your model by improving your data while also flattening the learning curve by doing it all in the comfort of Xcode and Swift.</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p>

<p><strong>Create ML</strong>: Announced at WWDC 2018. ML in Xcode &amp; Swift! Currently includes only two of Turi Create’s seven task-focused toolkits, plus a generic classifier and regressor, and data tables. I see it as a trail of breadcrumbs leading you to the Turi Create gingerbread house, inhabited by a “good dog” instead of a witch! (Turi Create’s logo is a dog silhouette.)</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p></blockquote>

<p>Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> to see how easy it is to use Create ML. There are some code comparasion between Create ML and Turi Create.</p>

<p><a id="markdown-create-ml和turi-create" name="create-ml和turi-create"></a></p>

<h3>Create ML和Turi Create</h3>

<p>Currently Create ML includes only two of Turi Create’s seven task-focused toolkits, plus a generic classifier and regressor, and data tables. Turi Create has five task-focused toolkits that aren’t (yet?) in Create ML:</p>

<ul>
<li>Recommender systems</li>
<li>Image similarity</li>
<li>Object detection</li>
<li>Style transfer</li>
<li>Activity classification</li>
</ul>


<p><a id="markdown-transfer-learning" name="transfer-learning"></a></p>

<h2>Transfer Learning</h2>

<p>The description of Transfer Learning from Apple Turi:</p>

<blockquote><p>It’s not uncommon for the task you want to solve to be related to something that has already been solved. Take, for example, the task of distinguishing cats from dogs. The famous ImageNet Challenge, for which CNN’s are the state-of-the-art, asks the trained model to categorize input into one of 1000 classes. Shouldn&rsquo;t features that distinguish between categories like lions and wolves also be useful for discriminating between cats and dogs?</p>

<p>The answer is a definitive yes. It is accomplished by simply removing the output layer of the Deep Neural Network for 1000 categories, and taking the signals that would have been propagating to the output layer and feeding them as features to a classifier for our new cats vs dogs task.</p>

<p>So, when you run the Turi Create image classifier, it breaks things down into something like this:</p>

<p>Stage 1: Create a CNN classifier on a large, general dataset. A good example is ImageNet, with 1000 categories and 1.2 million images. The models are already trained by researchers and are available for us to use.</p>

<p>Stage 2: The outputs of each layer in the CNN can be viewed as a meaningful vector representation of each image. Extract these feature vectors from the layer prior to the output layer on each image of your task.</p>

<p>Stage 3: Create a new classifier with those features as input for your own task.</p>

<p>At first glance, this seems even more complicated than just training the deep learning model. However, Stage 1 is reusable for many different problems, and once done, it doesn&rsquo;t have to be changed often.</p>

<p>In the end, this pipeline results in not needing to adjust hyper-parameters, faster training, and better performance even in cases where you don&rsquo;t have enough data to create a convention deep learning model. What&rsquo;s more, this technique is effective even if your Stage 3 classification task is relatively unrelated to the task Stage 1 is trained on. This idea was first explored by Donahue et al. (2013), and has since become one of the best ways to create image classifier models.</p>

<p>&ndash;Refer to <a href="https://apple.github.io/turicreate/docs/userguide/image_classifier/how-it-works.html#transfer-learning">truicreate transfer learning</a></p></blockquote>

<p>Some comments on transfer learning from web:</p>

<blockquote><p>What’s happening here? It’s called transfer learning, if you want to look it up. The underlying model — VisionFeaturePrint_Screen, which backs the Vision framework — was pre-trained on a ginormous dataset to recognize an enormous number of classes. It did this by learning what features to look for in an image, and how to combine these features to classify the image. Almost all of the training time for your dataset is the model extracting around 1000 features from your images. These could include low-level shapes and textures and higher-level shape of ears, distance between eyes, shape of snout. Then it spends a relatively tiny amount of time training a logistic regression model to separate your images into two classes. It’s similar to fitting a straight line to scattered points, but in 1000 dimensions instead of 2. But it’s still very quick to do: my run 1m 15s for feature extraction and 0.177886 seconds to train and apply the logistic regression.</p>

<p>Transfer learning only works successfully when features of your dataset are reasonably similar to features of the dataset that was used to train the model. A model pre-trained on ImageNet — a large collection of photos — might not transfer well to pencil drawings or microscopy images.</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p></blockquote>

<p><a id="markdown-improving-accuracy" name="improving-accuracy"></a></p>

<h2>Improving Accuracy</h2>

<p>Refer to <a href="https://developer.apple.com/documentation/create_ml/improving_your_model_s_accuracy">Improving Your Model’s Accuracy</a> from Apple for improving training accuracy.</p>

<p>How to improve the model&rsquo;s training accuracy, validation accuracy and evaluation accuracy. <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> describes the three &lsquo;accuracy&rsquo;s.</p>

<p><a id="markdown-references-and-materials" name="references-and-materials"></a></p>

<h2>References and Materials</h2>

<ol>
<li><p>You might like to browse two fascinating articles about features from (mostly) Google Brain/Research:</p>

<ul>
<li><p><a href="https://distill.pub/2018/building-blocks/">The Building Blocks of Interpretability</a>: image feature extracting</p></li>
<li><p><a href="https://distill.pub/2017/feature-visualization/">Feature Visualization</a></p></li>
</ul>
</li>
<li><p><a href="https://www.kaggle.com/">Kaggle</a> is a repository of datasets contributed by members, often supplemented by notebooks that analyze and visualize the data. It runs model prediction competitions, which leads to the next link:</p>

<ul>
<li>Machine Learning Zero-to-Hero: Everything you need in order to compete on Kaggle for the first time, step-by-step!</li>
</ul>
</li>
<li><p><a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> describes the usage of Create ML and Turi Create, including the history, code, data preparation, improving model accuracy and so on.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in ARKit 2]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/06/13/what-is-new-in-n-arkit-2/"/>
    <updated>2018-06-13T13:24:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/06/13/what-is-new-in-n-arkit-2</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#new-features-in-arkit-2">New Features in ARKit 2</a>

<ul>
<li><a href="#saving-and-loading-maps">Saving and Loading Maps</a>

<ul>
<li><a href="#world-tracking-recap">World Tracking Recap:</a></li>
<li><a href="#world-tracking-enhancement">World Tracking Enhancement:</a></li>
<li><a href="#saving-and-loading-maps">Saving and loading maps:</a></li>
<li><a href="#how-to-get-a-good-map">How to get a good map</a></li>
</ul>
</li>
<li><a href="#environment-texturing">Environment Texturing</a></li>
<li><a href="#image-tracking">Image Tracking</a></li>
<li><a href="#3d-object-detection">3D Object Detection</a></li>
<li><a href="#face-tracking-enhancements">Face Tracking Enhancements</a></li>
</ul>
</li>
<li><a href="#some-other-wwdc-sessions-related-to-ar">Some other WWDC Sessions Related to AR</a>

<ul>
<li><a href="#integrating-apps-and-content-with-ar-quick-look">Integrating Apps and Content with AR Quick Look</a></li>
<li><a href="#inside-swiftshot-creating-an-ar-game">Inside SwiftShot: Creating an AR Game</a></li>
<li><a href="#creating-great-ar-experiences">Creating Great AR Experiences</a></li>
<li><a href="#understanding-arkit-tracking-and-detection">Understanding ARKit Tracking and Detection</a></li>
</ul>
</li>
<li><a href="#some-other-materials-for-a-better-ar-app">Some other materials for a better AR app:</a>

<ul>
<li><a href="#building-your-first-ar-experience">Building Your First AR Experience</a></li>
<li><a href="#managing-session-lifecycle-and-tracking-quality">Managing Session Lifecycle and Tracking Quality</a></li>
<li><a href="#human-interface-guidelines---augmented-reality">Human Interface Guidelines - Augmented Reality</a></li>
<li><a href="#handling-3d-interaction-and-ui-controls-in-augmented-reality">Handling 3D Interaction and UI Controls in Augmented Reality</a></li>
<li><a href="#creating-a-multiuser-ar-experience">Creating a Multiuser AR Experience</a></li>
<li><a href="#swiftshot-creating-a-game-for-augmented-reality">SwiftShot: Creating a Game for Augmented Reality</a></li>
<li><a href="#recognizing-images-in-an-ar-experience">Recognizing Images in an AR Experience</a></li>
<li><a href="#scanning-and-detecting-3d-objects">Scanning and Detecting 3D Objects</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-overview" name="overview"></a></p>

<h2>Overview</h2>

<p>In ARKit 1, we have:</p>

<ul>
<li>Device positioning from world tracking process</li>
<li>Horizontal and vertical plane detection from world tracking process</li>
<li>Lighting estimation</li>
<li>AR face tracking</li>
</ul>


<p>In ARKit 2, we have:</p>

<ul>
<li>Saving and loading maps</li>
<li>Environment Texturing</li>
<li>Image detection and tracking</li>
<li>3D object tracking</li>
<li>Improved face tracking</li>
</ul>


<p><a id="markdown-new-features-in-arkit-2" name="new-features-in-arkit-2"></a></p>

<h2>New Features in ARKit 2</h2>

<p><a id="markdown-saving-and-loading-maps" name="saving-and-loading-maps"></a></p>

<h3>Saving and Loading Maps</h3>

<p><a id="markdown-world-tracking-recap" name="world-tracking-recap"></a></p>

<h4>World Tracking Recap:</h4>

<ul>
<li>Position and orientation of the device.</li>
<li>Physical scale in the scene.</li>
<li>3D feature points.</li>
<li>Relocalization (iOS 11.3): we can relocalize objects when your AR session is interrupted, like phone coming or going from background. This feature is implemented by storing the mapping <code>ARWorldMap</code> between real world and the coordinate system. However the mapping is not exposed to developers.</li>
</ul>


<p><a id="markdown-world-tracking-enhancement" name="world-tracking-enhancement"></a></p>

<h4>World Tracking Enhancement:</h4>

<ul>
<li><strong>Saving and loading maps</strong>: expose the <code>ARWorldMap</code> to developers.</li>
<li>Faster initialization and plane detection</li>
<li>Robust tracking and plane detection</li>
<li>More accurate extent and boundary Continuous autofocus</li>
<li>New 4:3 video formats (iPad is also 4:3)</li>
</ul>


<p><a id="markdown-saving-and-loading-maps" name="saving-and-loading-maps"></a></p>

<h4>Saving and loading maps:</h4>

<p><code>ARWorldmap</code> contains:</p>

<ul>
<li>Mapping of physical 3D space: for representing 3D feature points in the coordinate system.</li>
<li>Mutable list of named anchors: for restoring previous 3D environment (like lighting node anchor), and relocalizing previously added virtual objects.</li>
<li>Raw feature points and extent: for debugging and visualization.</li>
<li>Serialization: for storing and recovering from an file.</li>
</ul>


<p><img src="http://hongchaozhang.github.io/images/arkit2_arworldmap.jpg" width="500" alt="arkit arworldmap" /></p>

<p>We can use the map in two different ways:</p>

<ul>
<li>Persistent: Restore previous AR scene for a new AR session. For example, you go to another room and come back or close the AR app and open it some time later.</li>
<li>Multiuser experience: We can share the map among devices through WiFi or bluetooth.</li>
</ul>


<p>The SwiftShot is an multiuser experience AR game:</p>

<p><img src="http://hongchaozhang.github.io/images/swiftshot.jpg" alt="arkit2 swiftshot" /></p>

<p>and the following is a small piece of the demo:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_multiuser_experience_demo.gif" alt="swift shot game" /></p>

<p><a id="markdown-how-to-get-a-good-map" name="how-to-get-a-good-map"></a></p>

<h4>How to get a good map</h4>

<p>In order to share or restore the map, we need to get a good one first. A good map should be:</p>

<!-- * Important for relocalization -->


<ul>
<li>Multiple points of view: If we record the mapping from one point of view, and try to restore the coordinate system from another point of view, it will fail.</li>
<li>Static, well-textured environment.</li>
<li>Dense feature points on the map.</li>
</ul>


<p>We can use the <code>WorldMappingStatus</code> status from <code>ARFrame</code> to decide if the current map is good enough for sharing or storing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">WorldMappingStatus</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">notAvailable</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">limited</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">extending</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">mapped</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-environment-texturing" name="environment-texturing"></a></p>

<h3>Environment Texturing</h3>

<p>With the help of Environment Texturing, AR scene objects can reflect the environment texture on the surface of themselves, just like:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_environment_texturing_demo.jpg" alt="arkit2 environment texturing demo" /></p>

<p><a id="markdown-image-tracking" name="image-tracking"></a></p>

<h3>Image Tracking</h3>

<p>Moving objects can not be positioned in ARKit 1. In ARKit 2, specified images can be tracked in AR scene.</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking.gif" alt="arkit 2 image tracking" /></p>

<p>The classes in ARKit 2 for image tracking are:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking_classes.jpg" alt="arkit 2 image tracking classes" /></p>

<p>The detected <code>ARImageAnchor</code>s have properties like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARImageAnchor</span> <span class="p">:</span> <span class="n">ARAnchor</span><span class="p">,</span> <span class="n">ARTrackable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">isTracked</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">simd_float4x4</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">referenceImage</span><span class="p">:</span> <span class="n">ARReferenceImage</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The specified image should:</p>

<ul>
<li>Histogram should be broad</li>
<li>Not have multiple uniform color regions</li>
<li>Not have repeated structures</li>
</ul>


<p>The following is the demo:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking_demo.gif" alt="arkit 2 image tracking demo" /></p>

<p>The inputs of the above demo are:</p>

<ul>
<li>an static image of the cat, the same as it is in the picture frame</li>
<li>an video of the cat</li>
</ul>


<p>The video is played at the position of the specified picture frame, with the same orientation of the picture frame.</p>

<p>There are two classes related to image tracking:</p>

<table>
<thead>
<tr>
<th>ARImageTrackingConfiguration </th>
<th> ARWorldTrackingConfiguration</th>
</tr>
</thead>
<tbody>
<tr>
<td>Has No World Origin </td>
<td> Has World Origin</td>
</tr>
<tr>
<td>After detecting the image, only do things inside the place of the image. </td>
<td> After detecting the image, place some virtual objects outside the detected image plane.</td>
</tr>
</tbody>
</table>


<p><a id="markdown-3d-object-detection" name="3d-object-detection"></a></p>

<h3>3D Object Detection</h3>

<p>3D object detection workflow is:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_tracking_classes.jpg" alt="arkit2 3D object tracking classes" /></p>

<p>The <code>ARObjectAnchor</code> contains properties like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARObjectAnchor</span> <span class="p">:</span> <span class="n">ARAnchor</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">simd_float4x4</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">referenceObject</span><span class="p">:</span> <span class="n">ARReferenceObject</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>ARReferenceObject</code> is the scanned 3D object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARReferenceObject</span>
</span><span class='line'>    <span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">NSCopying</span><span class="p">,</span> <span class="bp">NSSecureCoding</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">center</span><span class="p">:</span> <span class="n">simd_float3</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">extent</span><span class="p">:</span> <span class="n">simd_float3</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">rawFeaturePoints</span><span class="p">:</span> <span class="n">ARPointCloud</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>An <code>ARReferenceObject</code> contains only the spatial feature information needed for ARKit to recognize the real-world object, and is not a displayable 3D reconstruction of that object.</p></blockquote>

<p>In order to get the <code>ARReferenceObject</code>, we should scan the real object, and store the result as an file (.arobject) or an xcode asset catalog for ARKit to use. Fortunately, Apple supplies a demo for scanning 3D object to get the <code>ARReferenceObject</code>. Refer to: <a href="https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects">Scanning and Detecting 3D Objects</a> for detail and the rough steps of object scanning are:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_scan.jpg" alt="arkit2 3D object scan" /></p>

<p>For scanned object in the real world, we can dynamically add some info around it (Museum is a good use case.), like the demo does:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_tracking_demo.gif" alt="arkit2 object tracking demo" /></p>

<p><a id="markdown-face-tracking-enhancements" name="face-tracking-enhancements"></a></p>

<h3>Face Tracking Enhancements</h3>

<p>With face tracking, we can place something on it or around it.</p>

<p>Enhancements in ARKit 2:</p>

<ul>
<li>Gaze tracking</li>
<li>Tongue support</li>
</ul>


<blockquote><p>Gaze and Tongue can be input of the AR app.</p></blockquote>

<p>New changes in one screenshot:</p>

<p><img src="http://hongchaozhang.github.io/images/what-is-new-in-arkit-2.jpg" alt="what-is-new-in-arkit-2" /></p>

<p><a id="markdown-some-other-wwdc-sessions-related-to-ar" name="some-other-wwdc-sessions-related-to-ar"></a></p>

<h2>Some other WWDC Sessions Related to AR</h2>

<p><a id="markdown-integrating-apps-and-content-with-ar-quick-lookhttpsdeveloperapplecomvideosplaywwdc2018603" name="integrating-apps-and-content-with-ar-quick-lookhttpsdeveloperapplecomvideosplaywwdc2018603"></a></p>

<h3><a href="https://developer.apple.com/videos/play/wwdc2018/603/">Integrating Apps and Content with AR Quick Look</a></h3>

<p>A deeper dive into a new feature in iOS that provides a way to preview any AR object from a USDZ file.</p>

<p><img src="http://hongchaozhang.github.io/images/QLPreviewController.png" alt="QLPreviewController" /></p>

<ul>
<li>There’s a great sequence diagram presented (see above) (I wish more sessions would have these!) for previewing USDZ objects, of which the <code>QLPreviewController</code> plays a central role.</li>
<li>For web developers, it covers HTML samples for how to preview USDZ objects in Safari.</li>
<li>Then it goes into a deep dive on how to create the actual USDZ objects, with more examples on new AR texturing capabilities.</li>
<li>There’s also a quick overview on how to optimize the files, to keep the size down, and there’s a breakdown of the files that make up the USDZ format.</li>
</ul>


<p><a id="markdown-inside-swiftshot-creating-an-ar-gamehttpsdeveloperapplecomvideosplaywwdc2018605" name="inside-swiftshot-creating-an-ar-gamehttpsdeveloperapplecomvideosplaywwdc2018605"></a></p>

<h3><a href="https://developer.apple.com/videos/play/wwdc2018/605/">Inside SwiftShot: Creating an AR Game</a></h3>

<p>Covers world map sharing, networking, and the physics of how to build an AR game, as well as some design insight (I have limited game dev experience so I’ll do the best I can below).</p>

<ul>
<li>Pointers to remember with designing an AR game, such as “encouraging” the user to slowly move the device for world mapping!</li>
<li>It demonstrates the usage of image &amp; object detection, world map sharing, and iBeacons for the game.</li>
<li>Integrating <code>ARKit</code> with <code>SceneKit</code> and <code>Metal</code>, including the translation of physics data between each — position, velocity, and orientation.</li>
<li>Performance enhancement with the <code>BitStreamCodable</code> protocol.</li>
<li>A small look at how audio was integrated into the game.</li>
</ul>


<p><a id="markdown-creating-great-ar-experienceshttpsdeveloperapplecomvideosplaywwdc2018805" name="creating-great-ar-experienceshttpsdeveloperapplecomvideosplaywwdc2018805"></a></p>

<h3><a href="https://developer.apple.com/videos/play/wwdc2018/805/">Creating Great AR Experiences</a></h3>

<p>Best practises mainly from a UX &amp; design perspective (there are no code samples in this session).</p>

<ul>
<li>Logical dos and don’ts that may be useful, if you need help with thought towards product and empathy towards the user.</li>
<li>They emphasize the importance of using transitions between AR scapes.</li>
<li>Why AR is a special combination of touch and movement.</li>
<li>They advise that minimal battery impact should be a huge focus! This is a challenge, given that they recommend to render the FPS at 60 to avoid latency.</li>
<li>There’s a lengthy demonstration of creating an AR fireplace, with complex texturing, etc. It looks great, but unfortunately there were no coding samples accompanying the demo.</li>
</ul>


<p><a id="markdown-understanding-arkit-tracking-and-detectionhttpsdeveloperapplecomvideosplaywwdc2018610" name="understanding-arkit-tracking-and-detectionhttpsdeveloperapplecomvideosplaywwdc2018610"></a></p>

<h3><a href="https://developer.apple.com/videos/play/wwdc2018/610/">Understanding ARKit Tracking and Detection</a></h3>

<p>A good broad overview of all of the main AR concepts.</p>

<ul>
<li>This is such a good intro into not only AR on iOS, but AR in general, that it should have been part of 2017’s sessions when ARKit was first introduced. Better late than never. If you’re only going to watch one session, watch this one!</li>
<li>It recaps the main features of ARKit — <strong>orientation</strong>, <strong>world tracking</strong>, and <strong>plane detection</strong>, and demos all of these in depth with coding samples.</li>
<li>It then demos the new features of ARKit 2 — <strong>shared world mapping</strong>, <strong>image tracking</strong>, and <strong>object detection</strong> (which has been available in the Vision framework recapped above, but is now also accessible in ARKit).</li>
<li>A good explanation on a core AR principle, <strong>Visual Inertial Odometry</strong>, is given. Short of going into the actual physics equations behind it, this should give you a great understanding of VIO.</li>
</ul>


<p><a id="markdown-some-other-materials-for-a-better-ar-app" name="some-other-materials-for-a-better-ar-app"></a></p>

<h2>Some other materials for a better AR app:</h2>

<p><a id="markdown-building-your-first-ar-experiencehttpsdeveloperapplecomdocumentationarkitbuilding_your_first_ar_experience" name="building-your-first-ar-experiencehttpsdeveloperapplecomdocumentationarkitbuilding_your_first_ar_experience"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/building_your_first_ar_experience">Building Your First AR Experience</a></h3>

<p>This document demos an app for basic usage of ARKit.</p>

<p><a id="markdown-managing-session-lifecycle-and-tracking-qualityhttpsdeveloperapplecomdocumentationarkitmanaging_session_lifecycle_and_tracking_quality" name="managing-session-lifecycle-and-tracking-qualityhttpsdeveloperapplecomdocumentationarkitmanaging_session_lifecycle_and_tracking_quality"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/managing_session_lifecycle_and_tracking_quality">Managing Session Lifecycle and Tracking Quality</a></h3>

<p>Make your AR experience more robust by</p>

<ul>
<li>providing clear feedback, using <code>ARCamera.TrackingState</code>.</li>
<li>recovering from interruptions, using <code>ARCamera.TrackingState.Reason.relocalizing</code>.</li>
<li>resuming previous sessions, using <code>ARWorldMap</code>.</li>
</ul>


<p><a id="markdown-human-interface-guidelines---augmented-realityhttpsdeveloperapplecomdesignhuman-interface-guidelinesiossystem-capabilitiesaugmented-reality" name="human-interface-guidelines---augmented-realityhttpsdeveloperapplecomdesignhuman-interface-guidelinesiossystem-capabilitiesaugmented-reality"></a></p>

<h3><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/augmented-reality/">Human Interface Guidelines - Augmented Reality</a></h3>

<p>This post describes how to rendering virtual objects, how to interact with virtual objects, how to handling interruptions. It is for UX.</p>

<p><a id="markdown-handling-3d-interaction-and-ui-controls-in-augmented-realityhttpsdeveloperapplecomdocumentationarkithandling_3d_interaction_and_ui_controls_in_augmented_reality" name="handling-3d-interaction-and-ui-controls-in-augmented-realityhttpsdeveloperapplecomdocumentationarkithandling_3d_interaction_and_ui_controls_in_augmented_reality"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/handling_3d_interaction_and_ui_controls_in_augmented_reality">Handling 3D Interaction and UI Controls in Augmented Reality</a></h3>

<p>This document describes the best practices for visual feedback, gesture interactions, and realistic rendering in AR experiences. And a demo app is supplied.</p>

<p><img src="http://hongchaozhang.github.io/images/arkit_demo_screenshot.jpg" alt="arkit demo" /></p>

<p><a id="markdown-creating-a-multiuser-ar-experiencehttpsdeveloperapplecomdocumentationarkitcreating_a_multiuser_ar_experience" name="creating-a-multiuser-ar-experiencehttpsdeveloperapplecomdocumentationarkitcreating_a_multiuser_ar_experience"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/creating_a_multiuser_ar_experience">Creating a Multiuser AR Experience</a></h3>

<p>This document demos an app (with source code) on how to transmit ARKit world-mapping data between nearby devices with the <a href="https://developer.apple.com/documentation/multipeerconnectivity">MultipeerConnectivity</a> framework (introduced in iOS 7.0) to create a shared basis for AR experiences. MultipeerConnectivity supports peer-to-peer connectivity and the discovery of nearby devices. With MultipeerConnectivity, you can not only share <code>ARWorldMap</code>, but also some actions. This makes multiuser AR game possible.</p>

<p>However:</p>

<ul>
<li>Recording and transmitting a world map and relocalizing to a world map are time-consuming, bandwidth-intensive operations. A good design is needed for better performance.</li>
<li>The persons received the world map data need to move their device so they see a similar perspective (also sent by the host) helps ARKit process the received map and establish a shared frame of reference for the multiuser experience.</li>
</ul>


<p><a id="markdown-swiftshot-creating-a-game-for-augmented-realityhttpsdeveloperapplecomdocumentationarkitswiftshot_creating_a_game_for_augmented_reality" name="swiftshot-creating-a-game-for-augmented-realityhttpsdeveloperapplecomdocumentationarkitswiftshot_creating_a_game_for_augmented_reality"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/swiftshot_creating_a_game_for_augmented_reality">SwiftShot: Creating a Game for Augmented Reality</a></h3>

<p>This document demos the SwiftShot game shown on WWDC 2018, including:</p>

<ul>
<li>Designing Gameplay for AR</li>
<li>Using Local Multipeer Networking and Sharing World Maps</li>
<li>Synchronizing Gameplay Actions</li>
<li>Solving Multiplayer Physics</li>
</ul>


<p><a id="markdown-recognizing-images-in-an-ar-experiencehttpsdeveloperapplecomdocumentationarkitrecognizing_images_in_an_ar_experience" name="recognizing-images-in-an-ar-experiencehttpsdeveloperapplecomdocumentationarkitrecognizing_images_in_an_ar_experience"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/recognizing_images_in_an_ar_experience">Recognizing Images in an AR Experience</a></h3>

<p>Detect known 2D images in the user’s environment, and use their positions to place AR content.</p>

<p><a id="markdown-scanning-and-detecting-3d-objectshttpsdeveloperapplecomdocumentationarkitscanning_and_detecting_3d_objects" name="scanning-and-detecting-3d-objectshttpsdeveloperapplecomdocumentationarkitscanning_and_detecting_3d_objects"></a></p>

<h3><a href="https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects">Scanning and Detecting 3D Objects</a></h3>

<p>Record spatial features of real-world objects, then use the results to find those objects in the user’s environment and trigger AR content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CNN与图像识别]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/05/02/cnn-and-image-classification/"/>
    <updated>2018-05-02T18:55:44+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/05/02/cnn-and-image-classification</id>
    <content type="html"><![CDATA[<ol>
<li>卷积神经网络用于图像识别的现状。</li>
<li>卷积与图像处理基础知识。</li>
<li>卷积神经网络每一层的可视化，了解神经网络内部的物理意义。</li>
<li>图像卷积滤波器与神经元和权重的关系。</li>
</ol>


<!-- more -->


<p><br></p>

<!-- TOC -->


<ul>
<li><a href="#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%83%8C%E6%99%AF">卷积神经网络与图像识别背景</a>

<ul>
<li><a href="#lenet%E6%A6%82%E8%BF%B0">LeNet概述</a></li>
<li><a href="#imagenet%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E8%B5%9B">ImageNet大规模图像识别挑战赛</a></li>
</ul>
</li>
<li><a href="#%E5%8D%B7%E7%A7%AF%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86">卷积与图像处理</a>

<ul>
<li><a href="#%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%AE%9A%E4%B9%89">卷积的定义</a></li>
<li><a href="#%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF%E7%9A%84%E7%89%A9%E7%90%86%E6%84%8F%E4%B9%89">图像卷积的物理意义</a></li>
</ul>
</li>
<li><a href="#lenet%E8%AF%A6%E8%A7%A3">LeNet详解</a></li>
<li><a href="#%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E8%BF%87%E7%A8%8B%E5%8F%AF%E8%A7%86%E5%8C%96">手写数字识别过程可视化</a></li>
<li><a href="#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E7%A5%9E%E7%BB%8F%E5%85%83%E5%92%8C%E6%9D%83%E9%87%8D%E5%9C%A8%E5%93%AA%E9%87%8C">神经网络中的“神经元”和“权重”在哪里？</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-卷积神经网络与图像识别背景" name="卷积神经网络与图像识别背景"></a></p>

<h2>卷积神经网络与图像识别背景</h2>

<p><a id="markdown-lenet概述" name="lenet概述"></a></p>

<h3>LeNet概述</h3>

<p>LeNet是最早用于深度学习了领域的卷积神经网络之一。Yann LeCun的这一杰作得名于他自1988年以来的系列成功迭代。彼时LeNet架构还主要被用于识别邮政编码等任务。LeNet的基本架构如下：</p>

<p><img src="http://hongchaozhang.github.io/images/201805lenet.jpg" alt="lenet" /></p>

<p>近几年已经出现了很多建立在LeNet之上的新架构，但是基本概念还是来自于LeNet。</p>

<p>卷积神经网络始自1990年代起，我们已经认识了最早的LeNet，其他一些很有影响力的架构列举如下：</p>

<ul>
<li>1990s至2012：从90年代到2010年代早期，卷积神经网络都处于孵化阶段。随着数据量增大和计算能力提高，卷积神经网络能搞定的问题也越来越有意思了。</li>
<li>AlexNet(2012)：2012年，Alex Krizhevsky发布了AlexNet，是LeNet的更深、更宽版本，并且大比分赢得了当年的ImageNet大规模图像识别挑战赛(ILSVRC)。这是一次非常重要的大突破，现在普及的卷积神经网络应用都要感谢这一壮举。</li>
<li>ZF Net(2013)：2013年的ILSVRC赢家是Matthew Zeiler和Rob Fergus的卷积网络，被称作ZF Net，这是调整过架构超参数的AlexNet改进型。</li>
<li>GoogleNet(2014)：2014的ILSVRC胜者是来自Google的Szegedy et al.。其主要贡献是研发了Inception Module，它<strong>大幅减少了网络中的参数数量（四百万，相比AlexNet的六千万）</strong>。</li>
<li>VGGNet(2014)：当年的ILSVRC亚军是VGGNet，突出贡献是展示了网络的深度（层次数量）是良好表现的关键因素。</li>
<li>ResNet(2015)： Kaiming He研发的Residual Network是2015年的ILSVRC冠军，也代表了卷积神经网络的最高水平，同时还是实践的默认选择（2016年5月）。</li>
<li>DenseNet（2016年8月）： 由Gao Huang发表，Densely Connected Convolutional Network的每一层都直接与其他各层前向连接。DenseNet已经在五个高难度的物体识别基础集上，显式出非凡的进步。</li>
</ul>


<p><a id="markdown-imagenet大规模图像识别挑战赛" name="imagenet大规模图像识别挑战赛"></a></p>

<h3>ImageNet大规模图像识别挑战赛</h3>

<p>参考<a href="http://www.sohu.com/a/143751643_473283">一个时代的终结：ImageNet竞赛2017是最后一届，WebVision 竞赛或接</a>。</p>

<p>上面的变种卷积神经网络基本上都来自一项比赛（DenseNet除外）：<strong>ImageNet大规模图像识别挑战赛</strong>(ImageNet Large Scale Visual Recognition Competition，ILSVRC)。</p>

<p>ILSVRC是基于ImageNet图像库的一个图像识别比赛。ImageNet可以说是计算机视觉研究人员进行大规模物体识别和检测时，最先想到的视觉大数据来源。ImageNet 数据集最初由斯坦福大学李飞飞等人在CVPR 2009的一篇论文中推出，并被用于替代 PASCAL数据集（后者在数据规模和多样性上都不如 ImageNet）和LabelMe数据集（在标准化上不如ImageNet）。</p>

<p>ImageNet不但是计算机视觉发展的重要推动者，也是这一波深度学习热潮的关键驱动力之一。截至2016年，ImageNet中含有超过1500万由人手工注释的图片网址，也就是带标签的图片，标签说明了图片中的内容，超过2.2万个类别。</p>

<p>CVPR2017研讨会“超越ILSVRC”将宣布今年是 ImageNet 竞赛正式组织的最后一年，2016年ILSVRC 的图像识别错误率已经达到约2.9%，不仅远远超越人类（5.1%），今后再进行这类竞赛意义也不大了。这无疑标志着一个时代的结束，但也是新征程的开始：未来，计算机视觉的重点在图像理解，而作为ILSVRC替代者的候选人之一是苏黎世理工大学和谷歌等联合提出的 WebVision Challenge，也将于CVPR2017同期举办，内容侧重于学习和理解网络数据。</p>

<p>历届ILSVRC的作品，可以参考<a href="https://blog.csdn.net/kangroger/article/details/56522132">ILSVRC历届冠军论文笔记</a>，包含模型框架和识别率等。</p>

<p><a id="markdown-卷积与图像处理" name="卷积与图像处理"></a></p>

<h2>卷积与图像处理</h2>

<p><a id="markdown-卷积的定义" name="卷积的定义"></a></p>

<h3>卷积的定义</h3>

<p><img src="http://hongchaozhang.github.io/images/201805convolution_definition.gif" alt="convolution definition demo" /></p>

<p>参考<a href="https://en.wikipedia.org/wiki/Convolution">Convolution</a>。</p>

<p><a id="markdown-图像卷积的物理意义" name="图像卷积的物理意义"></a></p>

<h3>图像卷积的物理意义</h3>

<p>卷积矩阵也叫“滤波器”、“核”或“特征探测器”。</p>

<p><img src="http://hongchaozhang.github.io/images/201805kernel_convolution.jpg" alt="image convolution" /></p>

<p><img src="http://hongchaozhang.github.io/images/201805image_convolution.jpg" alt="image convolutioon" /></p>

<p>参考<a href="https://en.wikipedia.org/wiki/Kernel_(image_processing">Kernel (image processing)</a>)。
￼</p>

<p><a id="markdown-lenet详解" name="lenet详解"></a></p>

<h2>LeNet详解</h2>

<p>参考<a href="http://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/">Basics of Convolutional Neural network (CNN)</a>。</p>

<ol>
<li>Convolutional Layer</li>
<li>Pooling Layer</li>
<li>Fully Connected Layer</li>
<li>Understanding Training Process</li>
</ol>


<p><a href="https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/">An Intuitive Explanation of Convolutional Neural Networks</a>的讲解也不错，中文版在<a href="https://blog.csdn.net/lcy7289786/article/details/68958111">这里</a>。</p>

<p><a id="markdown-手写数字识别过程可视化" name="手写数字识别过程可视化"></a></p>

<h2>手写数字识别过程可视化</h2>

<p><img src="http://hongchaozhang.github.io/images/201805cnn_visualization.jpg" alt="cnn visualization" /></p>

<p>官方网站：
<a href="http://scs.ryerson.ca/~aharley/vis/">http://scs.ryerson.ca/~aharley/vis/</a></p>

<p>3D可视化：
<a href="http://scs.ryerson.ca/~aharley/vis/conv/">http://scs.ryerson.ca/~aharley/vis/conv/</a></p>

<p>2D可视化：
<a href="http://scs.ryerson.ca/~aharley/vis/conv/flat.html">http://scs.ryerson.ca/~aharley/vis/conv/flat.html</a></p>

<p>相关论文：
<a href="http://scs.ryerson.ca/~aharley/vis/harley_vis_isvc15.pdf">http://scs.ryerson.ca/~aharley/vis/harley_vis_isvc15.pdf</a></p>

<p><a id="markdown-神经网络中的神经元和权重在哪里" name="神经网络中的神经元和权重在哪里"></a></p>

<h2>神经网络中的“神经元”和“权重”在哪里？</h2>

<p><img src="http://hongchaozhang.github.io/images/201805convolution_weights.jpg" alt="convolution and weights" /></p>

<p>各个卷机滤波器的里面的每个位置的值，即是我们需要训练的权重（卷积滤波器的尺寸是需要我们提前指定好的），每个像素对应于一个神经元。</p>

<p>其中神经网络的基本概念可以参考<a href="http://playground.tensorflow.org/">TensorFlow Playground</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Coding Conventions]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention/"/>
    <updated>2018-01-26T11:37:05+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention</id>
    <content type="html"><![CDATA[<p>Collection of some Swift coding conventions, which will make Swift code more maintainable, more readable.</p>

<!-- more -->


<p>The following is conventions I like or I will likely misuse. For a complete version, go to:</p>

<ol>
<li><a href="https://github.com/raywenderlich/swift-style-guide/">The Official raywenderlich.com Swift Style Guide.</a></li>
<li>Swift <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a></li>
</ol>


<!-- TOC -->


<ul>
<li><a href="#naming">Naming</a>

<ul>
<li><a href="#try-to-form-grammatical-english-phrases">Try to Form Grammatical English Phrases</a></li>
<li><a href="#mutatingnonmutating-methods-naming">Mutating/Nonmutating Methods Naming</a></li>
<li><a href="#boolean-methods-naming">Boolean Methods Naming</a></li>
<li><a href="#protocol-naming">Protocol Naming</a></li>
<li><a href="#avoid-abbreviations">Avoid Abbreviations</a></li>
<li><a href="#delegates">Delegates</a></li>
</ul>
</li>
<li><a href="#code-organization">Code Organization</a>

<ul>
<li><a href="#protocol-conformance">Protocol Conformance</a></li>
</ul>
</li>
<li><a href="#classes-and-structures">Classes and Structures</a>

<ul>
<li><a href="#use-of-self">Use of Self</a></li>
<li><a href="#constants">Constants</a></li>
</ul>
</li>
<li><a href="#control-flow">Control Flow</a>

<ul>
<li><a href="#golden-path">Golden Path</a>

<ul>
<li><a href="#failing-guards">Failing Guards</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#argument-labels">Argument Labels</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-naming" name="naming"></a></p>

<h2>Naming</h2>

<p>Descriptive and consistent naming makes software easier to read and understand. Use the Swift naming conventions described in the <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a>. Some key principles include:</p>

<ol>
<li>prioritizing clarity over brevity</li>
<li>striving for fluent usage</li>
<li>using uppercase for types (and protocols), lowercase for everything else</li>
<li>boolean types should read like assertions</li>
<li>choosing good parameter names that serve as documentation</li>
<li>generally avoiding abbreviations</li>
<li>taking advantage of default parameters</li>
<li>labeling closure and tuple parameters</li>
<li>verb methods follow the -ed, -ing rule for the non-mutating version</li>
<li>noun methods follow the formX rule for the mutating version</li>
<li>protocols that describe what something is should read as nouns</li>
<li>protocols that describe a capability should end in -able or -ible</li>
<li>striving for clarity at the call site</li>
</ol>


<p><a id="markdown-try-to-form-grammatical-english-phrases" name="try-to-form-grammatical-english-phrases"></a></p>

<h3>Try to Form Grammatical English Phrases</h3>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nl">at</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span>          <span class="c1">// “x, insert y at z”</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">subViews</span><span class="p">(</span><span class="nl">havingColor</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>  <span class="c1">// “x&#39;s subviews having color y”</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">capitalizingNouns</span><span class="p">()</span>       <span class="c1">// “x, capitalizing nouns”</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nl">position</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">subViews</span><span class="p">(</span><span class="nl">color</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">nounCapitalize</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-mutatingnonmutating-methods-naming" name="mutatingnonmutating-methods-naming"></a></p>

<h3>Mutating/Nonmutating Methods Naming</h3>

<p>When the operation is naturally described by a verb, use the verb’s imperative for the mutating method and apply the “ed” or “ing” suffix to name its nonmutating counterpart.</p>

<table>
<thead>
<tr>
<th> Mutating  </th>
<th> Nonmutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x.sort()</code>    </td>
<td> <code>z = x.sorted()</code> </td>
</tr>
<tr>
<td> <code>x.append(y)</code> </td>
<td> <code>z = x.appending(y)</code> </td>
</tr>
</tbody>
</table>


<p><br>
When the operation is naturally described by a noun, use the noun for the nonmutating method and apply the “form” prefix to name its mutating counterpart.</p>

<table>
<thead>
<tr>
<th> Nonmutating   </th>
<th> Mutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x = y.union(z)</code>  </td>
<td> <code>y.formUnion(z)</code> </td>
</tr>
<tr>
<td> <code>j = c.successor(i)</code>  </td>
<td> <code>c.formSuccessor(&amp;i)</code> </td>
</tr>
</tbody>
</table>


<p><a id="markdown-boolean-methods-naming" name="boolean-methods-naming"></a></p>

<h3>Boolean Methods Naming</h3>

<p>Uses of Boolean methods and properties should read as assertions about the receiver when the use is nonmutating, e.g. <code>x.isEmpty</code>, <code>line1.intersects(line2)</code>.</p>

<p><a id="markdown-protocol-naming" name="protocol-naming"></a></p>

<h3>Protocol Naming</h3>

<p>Protocols that describe what something is should read as nouns (e.g. <code>Collection</code>).</p>

<p>Protocols that describe a capability should be named using the suffixes -able, -ible, or -ing (e.g. <code>Equatable</code>, <code>ProgressReporting</code>).</p>

<p><a id="markdown-avoid-abbreviations" name="avoid-abbreviations"></a></p>

<h3>Avoid Abbreviations</h3>

<blockquote><p>The intended meaning for any abbreviation you use should be easily found by a <strong>web search</strong>.</p></blockquote>

<p><a id="markdown-delegates" name="delegates"></a></p>

<h3>Delegates</h3>

<p>When creating custom delegate methods, an unnamed first parameter should be the delegate source. (UIKit contains numerous examples of this.)</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">namePickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">namePickerView</span><span class="p">:</span> <span class="n">NamePickerView</span><span class="p">,</span> <span class="n">didSelectName</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="k">func</span> <span class="n">namePickerViewShouldReload</span><span class="p">(</span><span class="n">_</span> <span class="nl">namePickerView</span><span class="p">:</span> <span class="n">NamePickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">didSelectName</span><span class="p">(</span><span class="nl">namePicker</span><span class="p">:</span> <span class="n">NamePickerViewController</span><span class="p">,</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="k">func</span> <span class="n">namePickerShouldReload</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-code-organization" name="code-organization"></a></p>

<h2>Code Organization</h2>

<p>Use extensions to organize your code into logical blocks of functionality. Each extension should be set off with a <code>// MARK: - comment</code> to keep things well-organized.</p>

<p><a id="markdown-protocol-conformance" name="protocol-conformance"></a></p>

<h3>Protocol Conformance</h3>

<p>In particular, when adding protocol conformance to a model, prefer adding a separate extension for the protocol methods. This keeps the related methods grouped together with the protocol and can simplify instructions to add a protocol to a class with its associated methods.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// class stuff here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - UITableViewDataSource</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UITableViewDataSource</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// table view data source methods</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - UIScrollViewDelegate</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// scroll view delegate methods</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// all methods</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For UIKit view controllers, consider grouping lifecycle, custom accessors, and IBAction in separate class extensions.</p>

<p><a id="markdown-classes-and-structures" name="classes-and-structures"></a></p>

<h2>Classes and Structures</h2>

<p><a id="markdown-use-of-self" name="use-of-self"></a></p>

<h3>Use of Self</h3>

<p>For conciseness, avoid using <code>self</code> since Swift does not require it to access an object&rsquo;s properties or invoke its methods.</p>

<p>Use <code>self</code> only when required by the compiler (in <code>@escaping</code> closures, or in initializers to disambiguate properties from arguments). In other words, if it compiles without <code>self</code> then omit it.</p>

<p><a id="markdown-constants" name="constants"></a></p>

<h3>Constants</h3>

<p>Constants are defined using the <code>let</code> keyword, and variables with the <code>var</code> keyword. Always use <code>let</code> instead of <code>var</code> if the value of the variable will not change.</p>

<blockquote><p>Tip: A good technique is to define everything using <code>let</code> and only change it to <code>var</code> if the compiler complains!</p></blockquote>

<p>You can define constants on a type rather than on an instance of that type using type properties. To declare a type property as a constant simply use <code>static let</code>. Type properties declared in this way are generally preferred over global constants because they are easier to distinguish from instance properties.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Math</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281828459045235360287</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">let</span> <span class="n">root2</span> <span class="o">=</span> <span class="mf">1.41421356237309504880168872</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">hypotenuse</span> <span class="o">=</span> <span class="n">side</span> <span class="o">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">root2</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281828459045235360287</span>  <span class="c1">// pollutes global namespace</span>
</span><span class='line'><span class="k">let</span> <span class="n">root2</span> <span class="o">=</span> <span class="mf">1.41421356237309504880168872</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">hypotenuse</span> <span class="o">=</span> <span class="n">side</span> <span class="o">*</span> <span class="n">root2</span> <span class="c1">// what is root2?</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-control-flow" name="control-flow"></a></p>

<h2>Control Flow</h2>

<p><a id="markdown-golden-path" name="golden-path"></a></p>

<h3>Golden Path</h3>

<p>When coding with conditionals, the left-hand margin of the code should be the &ldquo;golden&rdquo; or &ldquo;happy&rdquo; path. That is, don&rsquo;t nest <code>if</code> statements. Multiple return statements are OK. The <code>guard</code> statement is built for this.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">computeFFT</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="n">Context</span><span class="o">?</span><span class="p">,</span> <span class="nl">inputData</span><span class="p">:</span> <span class="n">InputData</span><span class="o">?</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Frequencies</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="n">context</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noContext</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">inputData</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noInputData</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// use context and input to compute the frequencies</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">frequencies</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">computeFFT</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="n">Context</span><span class="o">?</span><span class="p">,</span> <span class="nl">inputData</span><span class="p">:</span> <span class="n">InputData</span><span class="o">?</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Frequencies</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="n">context</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">inputData</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// use context and input to compute the frequencies</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">frequencies</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noInputData</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noContext</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When multiple optionals are unwrapped either with <code>guard</code> or <code>if let</code>, minimize nesting by using the compound version when possible. Example:</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">number1</span> <span class="o">=</span> <span class="n">number1</span><span class="p">,</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">number2</span> <span class="o">=</span> <span class="n">number2</span><span class="p">,</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">number3</span> <span class="o">=</span> <span class="n">number3</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// do something with numbers</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">number1</span> <span class="o">=</span> <span class="n">number1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">number2</span> <span class="o">=</span> <span class="n">number2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">number3</span> <span class="o">=</span> <span class="n">number3</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something with numbers</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-failing-guards" name="failing-guards"></a></p>

<h4>Failing Guards</h4>

<p><code>guard</code> statements are required to exit in some way. Generally, this should be simple one line statement such as <code>return</code>, <code>throw</code>, <code>break</code>, <code>continue</code>, and <code>fatalError()</code>. Large code blocks should be avoided. If cleanup code is required for multiple exit points, consider using a <code>defer</code> block to avoid cleanup code duplication.</p>

<p><a id="markdown-argument-labels" name="argument-labels"></a></p>

<h2>Argument Labels</h2>

<ol>
<li>Good practice</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">move</span><span class="p">(</span><span class="n">from</span> <span class="nl">start</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="n">to</span> <span class="nl">end</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">to</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Omit all labels when arguments can’t be usefully distinguished, e.g. <code>min(number1, number2)</code>, <code>zip(sequence1, sequence2)</code>.</p></li>
<li><p>When the first argument forms part of a prepositional phrase, give it an argument label. The argument label should normally begin at the preposition, e.g. <code>x.removeBoxes(havingLength: 12)</code>.</p>

<ul>
<li>An exception for the principle above arises when the first two arguments represent parts of a single abstraction. In such cases, begin the argument label after the preposition, to keep the abstraction clear.</li>
</ul>
</li>
</ol>


<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">fadeFrom</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">toX</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">fade</span><span class="p">(</span><span class="nl">fromRed</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DR Project]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/02/dr-project/"/>
    <updated>2018-01-02T13:39:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/02/dr-project</id>
    <content type="html"><![CDATA[<p>Key words: ARKit, CoreML, SceneKit</p>

<!-- more -->


<p><a href="https://github.com/hongchaozhang/ProjectDataToReality">DR (Data to Reality)</a> is a demo for projecting data into reality: Using <strong>CoreML</strong> for object recognition, and then get the recognized object data and project the data to reality, just above the recognized object. In this process, <strong>ARKit</strong> helps us to get the real world object coordinate to put the data at, and <strong>SceneKit</strong> helps us to render the data in reality.</p>

<p>This is a screenshot in demo:</p>

<p><img src="http://hongchaozhang.github.io/images/DR-Screenshot-1.jpg" alt="project chart to reality" /></p>

<p>Refer to github <a href="https://github.com/hongchaozhang/ProjectDataToReality">Project Data to Reality</a> for demo project. In the github page, the following are told:</p>

<ol>
<li>Requirement</li>
<li>How to Run the Project</li>
<li>How to Use the Demo

<ol>
<li>Project Chart to Reality</li>
<li>Face Detection</li>
<li>Face Recognition</li>
</ol>
</li>
</ol>


<h2>Related techniques used</h2>

<ol>
<li><a href="../../../../2017/12/28/arkit-usage/">ARKit</a></li>
<li><a href="../../../../2017/12/28/coreml-usage/">CoreML</a></li>
<li><a href="../../../../2018/01/02/scenekit-usage/">SceneKit</a></li>
</ol>


<h2>Notes on the Demo</h2>

<p>As this is a rough demo, it need some enhancements:</p>

<ol>
<li>Only four kinds of fruits are supported: banana, orange, cucumber and strawberry. But for anything recognized by Inceptionv3.mlmodel, we can add a sphere and the name just at the world position of the object. (Set <code>showRecognizedResultNearby</code> to <code>true</code>.)</li>
<li>The chart data of the four kinds of fruits are images exported from other apps.</li>
<li>For face detection on iphone, rotate the device to left by 90 degrees to make it work on landscape. This is an issue need to be fixed.</li>
<li>Face recognition needs a trained face recognition model, called FaceRecognition.mlmodel.</li>
<li>Face recognition request doesn&rsquo;t crop the image from camera according to the face detection result. This should be done to make face recognition more robust.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreML Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage/"/>
    <updated>2017-12-28T17:25:39+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#about-coreml">About CoreML</a></li>
<li><a href="#coreml-and-vision">CoreML and Vision</a></li>
<li><a href="#model-usage">Model Usage</a></li>
<li><a href="#model-training">Model Training</a>

<ul>
<li><a href="#basic">Basic</a></li>
<li><a href="#advanced">Advanced</a></li>
</ul>
</li>
<li><a href="#coreml-pros-and-cons">CoreML Pros and Cons</a>

<ul>
<li><a href="#pros">Pros</a></li>
<li><a href="#cons">Cons</a></li>
</ul>
</li>
</ul>


<!-- /TOC -->


<p><a id="markdown-about-coreml" name="about-coreml"></a></p>

<h2>About CoreML</h2>

<ol>
<li>Support image processing for <em>Vision</em>.</li>
<li>Support NPL (natural language processing) for <em>Foundation</em>.</li>
<li>Support learned decision tree analyzing for <em>GameplayKit</em>.</li>
</ol>


<p><a id="markdown-coreml-and-vision" name="coreml-and-vision"></a></p>

<h2>CoreML and Vision</h2>

<ol>
<li>CoreML makes it even easier to use trained models in your apps.</li>
<li>Vision gives you easy access to Apple’s models for detecting faces, face landmarks, text, rectangles, barcodes, and objects.</li>
</ol>


<p>Because these two frameworks are built on Metal, they run efficiently on the device, so you don’t need to send your users’ data to a server.</p>

<p><a id="markdown-model-usage" name="model-usage"></a></p>

<h2>Model Usage</h2>

<p>When you load a trained machine learning model (.mlmodel) into xcode, the screenshot is like (take inceptionv3.mlmodel as an example):</p>

<p><img src="http://hongchaozhang.github.io/images/mlmodel_in_xcode.png" alt="machine learning model imported to xcode" /></p>

<p>From <em>Model Class</em> (section A), we can see that xcode has <em>Automatically generated Swift model calss</em>. Click the right arrow to view the generated model class.</p>

<p>If the model class is not generated successfully, double check <em>Target Membership</em> (section B) to make sure the mlmodel file is added into the correct target.</p>

<p>From <em>Model Evaluation Parameters</em>(section C), we can see the input and output of the trained model.</p>

<p>The following is a sample usage of image classification model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create request</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">selectedModel</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">VNCoreMLModel</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">Inceptionv3</span><span class="p">().</span><span class="n">model</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Could not load model. Ensure model has been drag and dropped (copied) to XCode Project. Also ensure the model is part of a target.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">classificationRequest</span> <span class="o">=</span> <span class="n">VNCoreMLRequest</span><span class="p">(</span><span class="nl">model</span><span class="p">:</span> <span class="n">selectedModel</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="n">classificationCompleteHandler</span><span class="p">)</span>
</span><span class='line'><span class="n">classificationRequest</span><span class="p">.</span><span class="n">imageCropAndScaleOption</span> <span class="o">=</span> <span class="n">VNImageCropAndScaleOption</span><span class="p">.</span><span class="n">centerCrop</span> <span class="c1">// Crop from centre of images and scale to appropriate size.</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run request against an image</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">pixbuff</span> <span class="o">=</span> <span class="p">(</span><span class="n">sceneView</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">currentFrame</span><span class="o">?</span><span class="p">.</span><span class="n">capturedImage</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">ciImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">cvPixelBuffer</span><span class="p">:</span> <span class="n">pixbuff</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Note1: Not entirely sure if the ciImage is being interpreted as RGB, but for now it works with the Inception model.</span>
</span><span class='line'><span class="c1">// Note2: Also uncertain if the pixelBuffer should be rotated before handing off to Vision (VNImageRequestHandler) - regardless, for now, it still works well with the Inception model.</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">imageRequestHandler</span> <span class="o">=</span> <span class="n">VNImageRequestHandler</span><span class="p">(</span><span class="nl">ciImage</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">imageRequestHandler</span><span class="p">.</span><span class="n">perform</span><span class="p">([</span><span class="n">classificationRequest</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// completion handler for coping with image classification results.</span>
</span><span class='line'><span class="k">func</span> <span class="n">classificationCompleteHandler</span><span class="p">(</span><span class="nl">request</span><span class="p">:</span> <span class="n">VNRequest</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">Error</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Error: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">observations</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">results</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;No results&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get Classifications</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">classifications</span> <span class="o">=</span> <span class="n">observations</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mf">.1</span><span class="p">]</span> <span class="c1">// top 2 results</span>
</span><span class='line'>        <span class="p">.</span><span class="n">flatMap</span><span class="p">({</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="n">VNClassificationObservation</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">filter</span><span class="p">({</span> <span class="err">$</span><span class="mf">0.</span><span class="n">confidence</span> <span class="o">&gt;</span> <span class="mf">0.2</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="s">&quot;\($0.identifier) \(String(format:&quot;</span><span class="o">-</span> <span class="o">%</span><span class="mf">.2f</span><span class="s">&quot;, $0.confidence))&quot;</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="nl">separator</span><span class="p">:</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;image recognition: &quot;</span> <span class="o">+</span> <span class="n">classifications</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refer to <a href="https://developer.apple.com/machine-learning/">Build more intelligent apps with machine learning</a> for some official materials.</p>

<p>For some detailed usage step by step, refer to <a href="https://www.raywenderlich.com/164213/coreml-and-vision-machine-learning-in-ios-11-tutorial">Core ML and Vision: Machine Learning in iOS 11 Tutorial</a>.</p>

<p><a id="markdown-model-training" name="model-training"></a></p>

<h2>Model Training</h2>

<p><a id="markdown-basic" name="basic"></a></p>

<h3>Basic</h3>

<p><img src="http://hongchaozhang.github.io/images/CustomVisionFromMicroSoft.png" alt="Custom Vision From MicroSoft" /></p>

<p>Microsoft <a href="https://www.customvision.ai/">Custom Vision</a> supplies a very friendly UI interface. You can upload you images and label them very easily. After training is done, you can export the model for mobile devices, including: mlmodel file for iOS platform, and TensorFlow model on Android platform.</p>

<p>Friendly UI Interface:</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceOfCustomVision.png" alt="interface of microsoft custom vision" /></p>

<p>But there are some limitations, as <a href="https://www.customvision.ai/">Custom Vision</a> is still in preview process.</p>

<p><img src="http://hongchaozhang.github.io/images/MicroSoftCustomVisionLimitation.png" alt="limitation of microsoft custom vision" /></p>

<p><a id="markdown-advanced" name="advanced"></a></p>

<h3>Advanced</h3>

<p><a href="https://github.com/apple/turicreate/tree/master/userguide/image_classifier">apple turicreate image classification</a> supplies more configurations for model training, like the partition of trainning data and verification data. But some Python experience is needed.</p>

<p><a id="markdown-coreml-pros-and-cons" name="coreml-pros-and-cons"></a></p>

<h2>CoreML Pros and Cons</h2>

<p><a id="markdown-pros" name="pros"></a></p>

<h3>Pros</h3>

<ol>
<li><p><strong>Easy to use.</strong> As described at the beginning of the post.</p></li>
<li><p><strong>High performance.</strong> As is said:</p>

<blockquote><p>“It was amazing to see the prediction results immediately without any time interval.”</p></blockquote></li>
</ol>


<p><a id="markdown-cons" name="cons"></a></p>

<h3>Cons</h3>

<p><strong>Lack of federated learning.</strong> As is said:</p>

<blockquote><p>There are no provisions within Core ML for model retraining or federated learning, where data collected from the field is used to improve the accuracy of the model. That’s something you would have to implement by hand, most likely by asking app users to opt in for data collection and using that data to retrain the model for a future edition of the app.</p></blockquote>

<p>Refer to <a href="https://www.infoworld.com/article/3200885/machine-learning/apples-core-ml-the-pros-and-cons.html">Apple’s Core ML: The pros and cons</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARKit Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage/"/>
    <updated>2017-12-28T17:25:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<p><!-- TOC -->autoauto- <a href="#cool-ar-apps-in-app-store">Cool AR Apps in App Store</a>auto    - <a href="#world-brush">World Brush</a>auto    - <a href="#ikea-place">IKEA Place</a>auto    - <a href="#ar-measurekit">AR MeasureKit</a>auto- <a href="#requirement">Requirement</a>auto- <a href="#arkit-usage">ARKit Usage</a>auto    - <a href="#arkit-related-techniques">ARKit Related Techniques</a>auto    - <a href="#arkit-in-ios-system">ARKit in iOS System</a>auto    - <a href="#arkit-key-classes">ARKit Key Classes</a>auto    - <a href="#arsession"><code>ARSession</code></a>auto    - <a href="#arconfiguration"><code>ARConfiguration</code></a>auto    - <a href="#more-on-arworldtrackingconfiguration">More on <code>ARWorldTrackingConfiguration</code></a>auto        - <a href="#tracking-quality">Tracking Quality</a>auto    - <a href="#arframe"><code>ARFrame</code></a>auto    - <a href="#hittest-for-real-world-position">HitTest for Real World Position</a>auto        - <a href="#existingplane"><code>existingPlane</code></a>auto        - <a href="#existingplaneusingextent"><code>existingPlaneUsingExtent</code></a>auto        - <a href="#estimatedhorizontalplane"><code>estimatedHorizontalPlane</code></a>auto        - <a href="#featurepoint"><code>featurePoint</code></a>auto    - <a href="#display-virtual-object-in-real-world">Display Virtual Object in Real World</a>auto        - <a href="#standard-view">Standard View</a>auto        - <a href="#custom-view">Custom View</a>auto- <a href="#best-practices-and-limitations">Best Practices and Limitations</a>auto    - <a href="#best-practices">Best Practices</a>auto    - <a href="#limitations">Limitations</a>auto- <a href="#ar-from-google">AR from Google</a>autoauto<!-- /TOC --></p>

<p><a id="markdown-cool-ar-apps-in-app-store" name="cool-ar-apps-in-app-store"></a></p>

<h2>Cool AR Apps in App Store</h2>

<p><a id="markdown-world-brush" name="world-brush"></a></p>

<h3>World Brush</h3>

<p><a href="https://itunes.apple.com/us/app/world-brush/id1277410449?mt=8">World Brush</a> is an AR experience where users can paint with brushes on the world around them. Every painting is saved at the approximate GPS location where it was created, and will be recommended to the user around.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_WorldBrush.png" width="300" alt="world brush" /></p>

<p><a id="markdown-ikea-place" name="ikea-place"></a></p>

<h3>IKEA Place</h3>

<p><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">IKEA Place</a> lets you virtually &lsquo;place&rsquo; IKEA products in your space.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_IkeaPlace.png" width="300" alt="ikea place" /></p>

<p><a id="markdown-ar-measurekit" name="ar-measurekit"></a></p>

<h3>AR MeasureKit</h3>

<p><a href="https://itunes.apple.com/us/app/ar-measurekit/id1258270451?mt=8">AR MeasureKit</a> makes it really easy to measure different things in the world using your iPhone’s or iPad’s camera.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_MeasureKit.png" width="300" alt="ar measure kit" /></p>

<p><a id="markdown-requirement" name="requirement"></a></p>

<h2>Requirement</h2>

<ul>
<li>iOS 11 and above system.</li>
<li>iOS device with an A9 or later processor.</li>
</ul>


<p>To make your app available only on devices supporting ARKit, use the arkit key in the <code>UIRequiredDeviceCapabilities</code> section of your app&rsquo;s Info.plist. If augmented reality is a secondary feature of your app, use the <code>ARWorldTrackingSessionConfiguration.isSupported</code> property to determine whether the current device supports the session configuration you want to use.</p>

<p><a id="markdown-arkit-usage" name="arkit-usage"></a></p>

<h2>ARKit Usage</h2>

<p><a id="markdown-arkit-related-techniques" name="arkit-related-techniques"></a></p>

<h3>ARKit Related Techniques</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitRelatedTechs.png" alt="arkit related techs" /></p>

<p><a id="markdown-arkit-in-ios-system" name="arkit-in-ios-system"></a></p>

<h3>ARKit in iOS System</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitFramework.png" alt="arkit in ios system" /></p>

<p><a id="markdown-arkit-key-classes" name="arkit-key-classes"></a></p>

<h3>ARKit Key Classes</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitUsage.png" alt="arkit usage" /></p>

<p><a id="markdown-arsession" name="arsession"></a></p>

<h3><code>ARSession</code></h3>

<p>An <a href="https://developer.apple.com/documentation/arkit/arsession"><code>ARSession</code></a> object coordinates the major processes that ARKit performs on your behalf to create an augmented reality experience. These processes include reading data from the device&rsquo;s motion sensing hardware, controlling the device&rsquo;s built-in camera, and performing image analysis on captured camera images. The session synthesizes all of these results to establish a correspondence between the real-world space the device inhabits and a virtual space where you model AR content.</p>

<p>Every AR experience built with ARKit requires a single <code>ARSession</code>object. If you use an <code>ARSCNView</code> or <code>ARSKView</code> object to easily build the visual part of your AR experience, the view object includes an <code>ARSession</code> instance. If you build your own renderer for AR content, you&rsquo;ll need to instantiate and maintain an ARSession object yourself.</p>

<p>Running a session requires a session configuration: an instance of the <code>ARConfiguration</code> class, or its subclass <code>ARWorldTrackingConfiguration</code>. These classes determine how ARKit tracks a device&rsquo;s position and motion relative to the real world, and thus affect the kinds of AR experiences you can create.</p>

<p><a id="markdown-arconfiguration" name="arconfiguration"></a></p>

<h3><code>ARConfiguration</code></h3>

<p><a href="https://developer.apple.com/documentation/arkit/arconfiguration"><code>ARConfiguration</code></a> is an abstract class; you do not create or work with instances of this class.</p>

<p>To run an AR session, create an instance of the concrete <code>ARConfiguration</code> subclass that provides the kind of augmented reality experience you want to use in your app or game. Then, set up the configuration object&rsquo;s properties and pass the configuration to your session&rsquo;s <code>run(_:options:)</code> method. ARKit includes the following concrete configuration classes:</p>

<ul>
<li><p><a href="https://developer.apple.com/documentation/arkit/arworldtrackingconfiguration"><code>ARWorldTrackingConfiguration</code></a>
Provides high-quality AR experiences that use the rear-facing camera precisely track a device&rsquo;s position and orientation and allow plane detection and hit testing. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>ARWorldTrackingConfiguration</code> class tracks the device&rsquo;s movement with six degrees of freedom (6DOF): specifically, the three rotation axes (roll, pitch, and yaw), and three translation axes (movement in x, y, and z).</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arorientationtrackingconfiguration"><code>AROrientationTrackingConfiguration</code></a>
Provides basic AR experiences that use the rear-facing camera and track only a device&rsquo;s orientation. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>AROrientationTrackingConfiguration</code> class tracks the device&rsquo;s movement with three degrees of freedom (3DOF): specifically, the three rotation axes (roll, pitch, and yaw).</p>

<p>  <code>AROrientationTrackingConfiguration</code> cannot track movement of the device, and 3DOF tracking does not support plane detection or hit testing.</p>

<p>  Use 3DOF tracking only as a fallback in situations where 6DOF tracking is temporarily unavailable.</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arfacetrackingconfiguration"><code>ARFaceTrackingConfiguration</code></a>
Provides AR experiences that use the front-facing camera and track the movement and expressions of the user&rsquo;s face.</p></li>
</ul>


<p>Face tracking is available only on iOS devices with a front-facing TrueDepth camera.</p>

<p>An official example <a href="https://developer.apple.com/documentation/arkit/creating_face_based_ar_experiences">Creating Face-Based AR Experiences</a> demonstrates that you can place and animate 3D content that follows the user’s face and matches facial expressions, using the TrueDepth camera on iPhone X.</p>

<p><a id="markdown-more-on-arworldtrackingconfiguration" name="more-on-arworldtrackingconfiguration"></a></p>

<h3>More on <code>ARWorldTrackingConfiguration</code></h3>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a> for an official explanation of the world tracking things.</p>

<p>World tracking process can be illustrated as:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTracking.gif" alt="arkit world tracking" /></p>

<blockquote><p>One question here: <em>How does ARKit know how long is 1 meter in the real world?</em> <a href="https://www.quora.com/How-can-Apple%E2%80%99s-ARKit-Augmented-Reality-do-precise-measurement-with-just-one-camera">How can Apple’s ARKit (Augmented Reality) do precise measurement with just one camera?</a> is trying to figure this out:</p>

<p>&ldquo;When an iPhone camera is turned on, it doesn’t have two different images with which to calculate distances. However, a moment after the first image is taken it does have a second image. <strong>Thanks to data from the iPhone accelerometer sensors, it can also estimate the difference - from the first image to the second - of the iPhone camera’s 3D position and aim.</strong> Now we go back to those “known features” being tracked. For each image the iPhone doesn’t just do this for a single feature, it maps as many features as it can. Aside from doing the triangulation on each of the features in the images, it also does a comparison between the differences in each feature’s relationship to other features in the image. So now, like your brain, the iPhone has two different views of something, knows the approximate angles of focus, knows the distance between the lens position, is tracking known features and their relationship to each other. From this, the iPhone can get a very good approximation of how each feature is positioned in space with relation to the other features, essentially producing a 3D mapping of the space.&rdquo;</p></blockquote>

<p><a id="markdown-tracking-quality" name="tracking-quality"></a></p>

<h4>Tracking Quality</h4>

<p>To get better tracking quality:</p>

<ol>
<li>Uninterrupted sensor data</li>
<li>Textured environments</li>
<li>Static scenes</li>
</ol>


<p>If tracking quality changes, the tracking state will also change:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTrackingState.png" alt="arkit tracing state transition" /></p>

<p>And the tracking state changes will be notified by:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">session</span><span class="p">(</span><span class="n">_</span> <span class="nl">session</span><span class="p">:</span> <span class="n">ARSession</span><span class="p">,</span> <span class="n">cameraDidChangeTrackingState</span> <span class="nl">camera</span><span class="p">:</span> <span class="n">ARCamera</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">case</span> <span class="p">.</span><span class="n">limited</span><span class="p">(</span><span class="k">let</span> <span class="n">reason</span><span class="p">)</span> <span class="o">=</span> <span class="n">camera</span><span class="p">.</span><span class="n">trackingState</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Notify user of limited tracking state</span>
</span><span class='line'>        <span class="p">&hellip;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a id="markdown-arframe" name="arframe"></a></p>

<h3><code>ARFrame</code></h3>

<p>After world tracking, we can get the 6 DOF of the camera, used for the upcoming rendering. These infos are stored in each <code>ARFrame</code>.</p>

<p><code>ARFrame</code> owns video image and position tracking information captured as part of an AR session. There are two ways to access <code>ARFrame</code> objects produced by an AR session, depending on whether your app favors a pull or a push design pattern.</p>

<ul>
<li><em>Pull Pattern</em>: get <code>currentFrame</code> from <code>ARSession</code>.</li>
<li><em>Push Pattern</em>: implement the <code>session(_:didUpdate:)</code> delegate method, and the session will call it once for each video frame it captures (at 60 frames per second by default).</li>
</ul>


<p>Key infos in <code>ARFrame</code>:</p>

<ol>
<li><p><strong><code>ARCamera</code></strong>: Information about the camera position and imaging characteristics for a captured video frame in an AR session. Get <code>camera</code> from <code>ARFrame</code>.</p></li>
<li><p><strong><code>ARLightEstimate</code></strong>: Estimated scene lighting information associated with a captured video frame in an AR session. Get <code>lightEstimate</code> from <code>ARFrame</code>.</p>

<p> Refer to <a href="https://blog.markdaws.net/arkit-by-example-part-4-realism-lighting-pbr-b9a0bedb013e">ARKit by Example — Part 4: Realism - Lighting &amp; PBR</a> for mimicing the environment light.</p></li>
</ol>


<p><a id="markdown-hittest-for-real-world-position" name="hittest-for-real-world-position"></a></p>

<h3>HitTest for Real World Position</h3>

<p>By calling the following method on <code>ARSCNView</code>,</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">func</span> <span class="n">hitTest</span><span class="p">(</span><span class="n">_</span> <span class="nl">point</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">,</span> <span class="nl">types</span><span class="p">:</span> <span class="n">ARHitTestResult</span><span class="p">.</span><span class="n">ResultType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">ARHitTestResult</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>we can get an array of <code>ARHitTestResult</code>, which stay at the very position point indicates. The <code>ARHitTestResult</code>s are sorted by distance. To call the method, you need to specify the <code>ARHitTestResult.ResultType</code>. There are four kinds of hitTest types:</p>

<p><a id="markdown-existingplane" name="existingplane"></a></p>

<h4><code>existingPlane</code></h4>

<p>Return the result type from intersecting with an existing plane anchor.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestExistingPlane.gif" alt="arkit hittest existing plane" /></p>

<p><a id="markdown-existingplaneusingextent" name="existingplaneusingextent"></a></p>

<h4><code>existingPlaneUsingExtent</code></h4>

<p>Return the result type from intersecting with an existing plane anchor, taking into account the plane’s extent.</p>

<p><a id="markdown-estimatedhorizontalplane" name="estimatedhorizontalplane"></a></p>

<h4><code>estimatedHorizontalPlane</code></h4>

<p>Return the result type from intersecting a horizontal plane estimate, determined for the current frame.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestEstimatedPlane.gif" alt="arkit hittest estimated plane" /></p>

<p><a id="markdown-featurepoint" name="featurepoint"></a></p>

<h4><code>featurePoint</code></h4>

<p>Return the result type from intersecting the nearest feature point.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestFeaturePoints.gif" alt="" /></p>

<p><a id="markdown-display-virtual-object-in-real-world" name="display-virtual-object-in-real-world"></a></p>

<h3>Display Virtual Object in Real World</h3>

<p><a id="markdown-standard-view" name="standard-view"></a></p>

<h4>Standard View</h4>

<ul>
<li><strong><code>ARSCNView</code></strong>: A view for displaying AR experiences that augment the camera view with 3D SceneKit content.</li>
<li><strong><code>ARSKView</code></strong>: A view for displaying AR experiences that augment the camera view with 2D SpriteKit content.</li>
</ul>


<p><a id="markdown-custom-view" name="custom-view"></a></p>

<h4>Custom View</h4>

<p>To display your AR experience in a custom view, you’ll need to:</p>

<ol>
<li>Retrieve video frames and tracking information from the session.</li>
<li>Render those frame images as the backdrop for your view.</li>
<li>Use the tracking information to position and draw AR content atop the camera image.</li>
</ol>


<p>Refer to <a href="https://developer.apple.com/documentation/arkit/displaying_an_ar_experience_with_metal">Displaying an AR Experience with Metal</a>.</p>

<p><a id="markdown-best-practices-and-limitations" name="best-practices-and-limitations"></a></p>

<h2>Best Practices and Limitations</h2>

<p><a id="markdown-best-practices" name="best-practices"></a></p>

<h3>Best Practices</h3>

<p>World tracking is an inexact science. This process can often produce impressive accuracy, leading to realistic AR experiences. However, it relies on details of the device’s physical environment that are not always consistent or are difficult to measure in real time without some degree of error. To build high-quality AR experiences, be aware of these caveats and tips.</p>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a>.</p>

<p><strong>Design AR experiences for predictable lighting conditions.</strong></p>

<p> World tracking involves image analysis, which requires a clear image. Tracking quality is reduced when the camera can’t see details, such as when the camera is pointed at a blank wall or the scene is too dark.</p>

<p><strong>Use tracking quality information to provide user feedback.</strong></p>

<p> World tracking correlates image analysis with device motion. ARKit develops a better understanding of the scene if the device is moving, even if the device moves only subtly. Excessive motion—too far, too fast, or shaking too vigorously—results in a blurred image or too much distance for tracking features between video frames, reducing tracking quality. The ARCamera class provides tracking state reason information, which you can use to develop UI that tells a user how to resolve low-quality tracking situations.</p>

<p><strong>Allow time for plane detection to produce clear results, and disable plane detection when you have the results you need.</strong></p>

<p> Plane detection results vary over time—when a plane is first detected, its position and extent may be inaccurate. As the plane remains in the scene over time, ARKit refines its estimate of position and extent. When a large flat surface is in the scene, ARKit may continue changing the plane anchor’s position, extent, and transform after you’ve already used the plane to place content.</p>

<p><a id="markdown-limitations" name="limitations"></a></p>

<h3>Limitations</h3>

<ol>
<li>For a moving object, ARKit can not give an usable world position of it.</li>
<li>You can not put a virtual object behind a real object. This leads to some problems, like:

<ol>
<li>When an real object move in front of an virtual object, the virtual object will still be displayed in front of the real object.</li>
<li>You can not hold a virtual object coolly, as the virtual object you are trying to hold can not be behind your fingers.</li>
</ol>
</li>
</ol>


<p>Two thoughts that may be help on the second limitation:</p>

<ul>
<li>Segment the camera image based on the feature point with world position. Draw further real object, and then virtual object, and at last, the nearest real object. However, as the feature point is sparse (performance consideration), some edge detection algorithms are needed for accurate edges of objects.</li>
<li>Based on the dual camera, we can get depth of each pixel of the camera image. This will help on image segmentation.</li>
</ul>


<p><a id="markdown-ar-from-google" name="ar-from-google"></a></p>

<h2>AR from Google</h2>

<p><a href="https://developers.google.com/tango/?hl=zh-cn">Tango</a> is a platform that uses computer vision to give devices the ability to understand their position relative to the world around them. But Tango requires very special hardware to run on. So <a href="https://developers.google.com/ar/">ARCore</a> comes.</p>

<blockquote><p>The Tango project will be deprecated on March 1st, 2018. Google is continuing AR development with ARCore, a new platform designed for building augmented reality apps for a broad range of devices without the requirement for specialized hardware.</p></blockquote>

<p>ARCore is a platform for building augmented reality apps on Android. ARCore is designed to work on a wide variety of qualified Android phones running N and later. During the developer <strong>preview</strong>, ARCore supports the following devices:</p>

<ul>
<li>Google Pixel, Pixel XL, Pixel 2, Pixel 2 XL</li>
<li>Samsung Galaxy S8 (SM-G950U, SM-G950N, SM-G950F, SM-G950FD, SM-G950W, SM-G950U1)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some tips on markdown usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage/"/>
    <updated>2017-11-21T10:13:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage</id>
    <content type="html"><![CDATA[<p>Collect some markdown usage tips.</p>

<!-- more -->


<h2>insert an image</h2>

<p>To insert the image, just use the path under the base url, for me, it is <em>/GitBlogs/images/<image_name>.png</em>, for example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png)</span></code></pre></td></tr></table></div></figure>


<p>To define the size of the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png =200x300)</span></code></pre></td></tr></table></div></figure>


<p>Or you can omit the <code>height</code> of the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png =200x)</span></code></pre></td></tr></table></div></figure>


<p>If the aspect ratio you define is not consistent with the original image, the height will be omitted automatically. That is to say, just define the <code>width</code> you want, and the system will calculate the <code>height</code> for it.</p>

<h2>show content while click</h2>

<p>Using the following block of code for hiding some content and show the content while click.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;details&gt;</span>
</span><span class='line'>  <span class="nt">&lt;summary&gt;</span>Q1: What is the best Language in the World? <span class="nt">&lt;/summary&gt;</span>
</span><span class='line'>   A1: Swift
</span><span class='line'><span class="nt">&lt;/details&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will get:</p>

<p><details>
  <summary><em>Question: What is the best Language in the World?</em></summary>
   Answer: Swift
</details></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的Error]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift/"/>
    <updated>2017-10-20T16:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC depthFrom:1 depthTo:3 insertAnchor:true -->


<ul>
<li><a href="#swift-error%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">Swift Error基本使用</a>

<ul>
<li><a href="#throws-in-swift-1x"><code>throws</code> in Swift 1.x</a></li>
<li><a href="#throws-in-swift-2"><code>throws</code> in Swift 2</a></li>
<li><a href="#throws%E7%9A%84%E4%BD%BF%E7%94%A8"><code>throws</code>的使用</a></li>
<li><a href="#throws%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86"><code>throws</code>抛出错误的处理</a></li>
</ul>
</li>
<li><a href="#throws%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5"><code>throws</code>的一些实践</a>

<ul>
<li><a href="#throws%E7%9A%84%E8%B0%83%E8%AF%95%E5%92%8C%E6%96%AD%E7%82%B9"><code>throws</code>的调试和断点</a></li>
<li><a href="#throws%E4%BB%8D%E7%84%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"><code>throws</code>仍然存在的问题</a></li>
</ul>
</li>
<li><a href="#swift-%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A7%8D%E7%B1%BB">Swift 错误类型的种类</a>

<ul>
<li><a href="#simple-domain-error">Simple domain error</a></li>
<li><a href="#recoverable-error">Recoverable error</a></li>
<li><a href="#universal-error">Universal error</a></li>
<li><a href="#logic-failure">Logic failure</a></li>
</ul>
</li>
<li><a href="#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">几种常见场景下的错误处理</a>

<ul>
<li><a href="#app%E5%86%85%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD">app内资源加载</a></li>
<li><a href="#%E5%8A%A0%E8%BD%BD%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%97%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF">加载当前用户信息时发生错误</a></li>
<li><a href="#%E8%BF%98%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81">还没有实现的代码</a></li>
<li><a href="#%E8%B0%83%E7%94%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84%E4%BC%A0%E6%84%9F%E5%99%A8%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE">调用设备上的传感器收集数据</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
<li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95">错误处理相关的辅助方法</a>

<ul>
<li><a href="#use-custom-errors">Use Custom Errors</a></li>
<li><a href="#do-cleanup-work-using-defer">Do Cleanup Work Using <code>defer</code></a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-swift-error基本使用" name="swift-error基本使用"></a></p>

<h2>Swift Error基本使用</h2>

<p><a id="markdown-throws-in-swift-1x" name="throws-in-swift-1x"></a></p>

<h3><code>throws</code> in Swift 1.x</h3>

<p>在Objective-C中，<code>FileManager</code>的copy接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">copyItemAtPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">srcPath</span> <span class="nf">toPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dstPath</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用该方法时，写法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">fileManager</span> <span class="nl">copyItemAtPath</span><span class="p">:</span><span class="n">srcPath</span> <span class="nl">toPath</span><span class="p">:</span><span class="n">toPath</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Swift 1.x中，与Objective-C类似。方法接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">_</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，因为这个 API 仅会在极其特定的条件下 (比如磁盘空间不足) 会出错，所以开发者为了方便，有时会直接传入 nil 来忽视掉这个错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 不关心是否发生错误</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-throws-in-swift-2" name="throws-in-swift-2"></a></p>

<h3><code>throws</code> in Swift 2</h3>

<p>这种做法无形中降低了应用的可靠性以及从错误中恢复的能力。为了解决这个问题，Swift 2 中在编译器层级就对<code>throws</code>进行了限定。上面提到的copy接口在Swift 2中的形式为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItem</span><span class="p">(</span><span class="n">atPath</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>被标记为<code>throws</code>的API，必须被处理，否则编译器就会报错。这就在编译器层面对错误的处理进行了强制执行，保证了代码的可靠性。</p>

<p><a id="markdown-throws的使用" name="throws的使用"></a></p>

<h3><code>throws</code>的使用</h3>

<p>下面是包含<code>throws</code>的一个自动售货机实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">VendingMachineError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidSelection</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">outOfStock</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Item</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">price</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">VendingMachine</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">inventory</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;Candy Bar&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Chips&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">4</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Pretzels&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">11</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vend(itemNamed:)</code>方法的实现通过<code>guard</code>抛出购买过程中相应的错误。</p>

<p><a id="markdown-throws抛出错误的处理" name="throws抛出错误的处理"></a></p>

<h3><code>throws</code>抛出错误的处理</h3>

<p>被标记为<code>throws</code>的API，我们必须采用下面几种处理方式中的一种来处理，否则，编译器会报错。</p>

<h4><code>do catch</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">vendingMachine</span> <span class="o">=</span> <span class="n">VendingMachine</span><span class="p">()</span>
</span><span class='line'><span class="n">vendingMachine</span><span class="p">.</span><span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">vendingMachine</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Invalid Selection.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Out of Stock.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="k">let</span> <span class="n">coinsNeeded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Insufficient funds. Please insert an additional \(coinsNeeded) coins.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try?</code></h4>

<p>使用<code>try?</code>来处理错误，将其返回值变为Optional：如果在执行过程中出现错误，接口返回<code>nil</code>，同时错误停止继续传播。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">fetchDataFromDisk</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromDisk</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try!</code></h4>

<p>如果你非常确信一个被标记为<code>throws</code>的接口，在你的环境中不会抛出错误，可以通过<code>try!</code>来强制终止错误的继续传播。如果在执行的时候出现了错误，那么抛出运行时错误，导致程序崩溃。</p>

<p>比如，<code>loadImage(atPath:)</code>方法加载指定目录下面的一张图片到内存中，如果加载异常，会抛出错误。在下面的使用中，我们希望加载一张应用中包含的图片，这种情况下，可以通过<code>try!</code>来终止错误的继续传播。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">photo</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">loadImage</span><span class="p">(</span><span class="nl">atPath</span><span class="p">:</span> <span class="s">&quot;./Resources/John Appleseed.jpg&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try</code></h4>

<p>也可以直接使用<code>try</code>来调用被标记为<code>throws</code>的接口，但是这种情况下，错误会继续传播，包含该调用的方法也必须被标记为<code>throws</code>才行，否则，编译器会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">favoriteSnacks</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;Alice&quot;</span><span class="o">:</span> <span class="s">&quot;Chips&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Bob&quot;</span><span class="o">:</span> <span class="s">&quot;Licorice&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Eve&quot;</span><span class="o">:</span> <span class="s">&quot;Pretzels&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="k">func</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">VendingMachine</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，因为<code>buyFavoriteSnack(person: vendingMachine:)</code>使用<code>try</code>调用了一个被标记为throws的接口<code>vend(itemNamed:)</code>，错误会继续传播，因此，该方法也需要标记为thorws。</p>

<p><a id="markdown-throws的一些实践" name="throws的一些实践"></a></p>

<h2><code>throws</code>的一些实践</h2>

<p><a id="markdown-throws的调试和断点" name="throws的调试和断点"></a></p>

<h3><code>throws</code>的调试和断点</h3>

<p>Swift的错误抛出并不是传统意义的exception，在调试时抛出错误并不会触发Exception断点。另外，throw本身是语言的关键字，而不是一个symbol，它也不能触发Symbolic类型的断点。如果我们希望在所有throw语句执行的时候让程序停住的话，需要一些额外的技巧。在之前 throw 的汇编实现中，可以看到所有throw语句在返回前都会进行一次<code>swift_willThrow</code>的调用，这就是一个有效的 Symbolic语句，我们设置一个<code>swift_willThrow</code>的Symbolic断点，就可以让程序在throw的时候停住，并使用调用栈信息来获知程序在哪里抛出了错误。</p>

<p>补充，在最新版本的Xcode中，Apple直接为我们在断点类型中加上了 “Swift Error Breakpoint”的选项，它背后做的就是在<code>swift_willThrow</code>上添加一个断点。不过因为有了更直接的方法，我们现在不再需要手动去添加这个符号断点了。我们可以通过设置“Swift Error Breakpoint”对throws进行断点设置和调试。设置方法如下：</p>

<p><img src="http://hongchaozhang.github.io/images/Swift-Error-Breakpoint.png" alt="swift error breakpoint" /></p>

<p><a id="markdown-throws仍然存在的问题" name="throws仍然存在的问题"></a></p>

<h3><code>throws</code>仍然存在的问题</h3>

<p>不能从接口直接看出有哪些可能抛出的Error，必须看Document才行，带来了一些不便。比如，只通过接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们没有办法知道这个接口可能返回哪些错误。此时，要么阅读文档，获得确切的抛出错误，分别进行处理；或者将所有的错误统一处理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 错误抛出</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-swift-错误类型的种类" name="swift-错误类型的种类"></a></p>

<h2>Swift 错误类型的种类</h2>

<p>参考Swift官方文档<a href="https://github.com/apple/swift/blob/master/docs/ErrorHandling.rst">Error Handling in Swift<!-- 2.0--></a>，Swift中的错误有下面四种：</p>

<ol>
<li>Simple domain error</li>
<li>Recoverable error</li>
<li>Universal error</li>
<li>Logic failure</li>
</ol>


<p><a id="markdown-simple-domain-error" name="simple-domain-error"></a></p>

<h3>Simple domain error</h3>

<p>简单的，显而易见的错误。这类错误的最大特点是我们不需要知道原因，只需要知道错误发生，并且想要进行处理。用来表示这种错误发生的方法一般就是返回一个<code>nil</code>值。在Swift中，这类错误最常见的情况就是将某个字符串转换为整数，或者在字典尝试用某个不存在的 key 获取元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Simple Domain Error 的例子</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span> <span class="c1">// nil</span>
</span><span class='line'><span class="k">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;key_not_exist&quot;</span><span class="p">]</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>可能出现这种错误的接口，不需要使用<code>throws</code>来标记，只需要将接口的返回类型设置为Optional即可。</strong>在使用层面 (或者说应用逻辑) 上，这类错误一般用<code>if let</code>的可选值绑定或者是<code>guard let</code>提前进行返回处理即可。</p>

<p><a id="markdown-recoverable-error" name="recoverable-error"></a></p>

<h3>Recoverable error</h3>

<p>正如其名，这类错误应该是被容许，并且是可以恢复的。可恢复错误的发生是正常的程序路径之一，而作为开发者，我们应当去检出这类错误发生的情况，并进一步对它们进行处理，让它们恢复到我们期望的程序路径上。</p>

<p><strong>这类错误在Objective-C的时代通常用NSError类型来表示，而在Swift里则是通过throws来实现。</strong>一般我们需要检查错误的类型，并作出合理的响应。而选择忽视这类错误往往是不明智的，因为它们是用户正常使用过程中可能会出现的情况，我们应该尝试对其恢复，或者至少向用户给出合理的提示，让他们知道发生了什么。像是网络请求超时，或者写入文件时磁盘空间不足：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 网络请求</span>
</span><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;https://www.example.com/&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 提示用户</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 写入文件</span>
</span><span class='line'><span class="k">func</span> <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">to</span> <span class="nl">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">data</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="kt">as</span> <span class="bp">NSError</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span><span class="p">.</span><span class="n">code</span> <span class="o">==</span> <span class="n">NSFileWriteOutOfSpaceError</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 尝试通过释放空间自动恢复</span>
</span><span class='line'>            <span class="n">removeUnusedFiles</span><span class="p">()</span>
</span><span class='line'>            <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 其他错误，提示用户</span>
</span><span class='line'>            <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-universal-error" name="universal-error"></a></p>

<h3>Universal error</h3>

<p>这类错误理论上可以恢复，但是由于语言本身的特性所决定，我们难以得知这类错误的来源，所以一般来说也不会去处理这种错误。这类错误包括类似下面这些情形：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 内存不足</span>
</span><span class='line'><span class="p">[</span><span class="n">Int</span><span class="p">](</span><span class="nl">repeating</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用栈溢出</span>
</span><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span> <span class="n">foo</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="n">foo</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过设计一些手段来对这些错误进行处理，比如：检测当前的内存占用并在超过一定值后警告，或者监视栈frame数进行限制等。但是一般来说这是不必要的，也不可能涵盖全部的错误情况。更多情况下，这是由于代码触碰到了设备的物理限制和边界情况所造成的，一般我们也不去进行处理（除非是人为造成的bug）。</p>

<p>在 Swift 中，各种被使用<code>fatalError</code>进行强制终止的错误一般都可以归类到 Universal error。</p>

<p><a id="markdown-logic-failure" name="logic-failure"></a></p>

<h3>Logic failure</h3>

<p>逻辑错误是程序员的失误所造成的错误，它们应该在开发时通过代码进行修正并完全避免，而不是等到运行时再进行恢复和处理。</p>

<p>常见的 Logic failure 包括有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 强制解包一个 `nil` 可选值</span>
</span><span class='line'><span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">name</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 数组越界访问</span>
</span><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 计算溢出</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Int</span><span class="p">.</span><span class="n">max</span>
</span><span class='line'><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 强制 try 但是出现错误</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">JSONDecoder</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="n">Foo</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="n">Data</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类错误在实现中触发的一般是<code>assert</code>或者<code>precondition</code>。</p>

<p>和<code>fatalError</code>不同，<code>assert</code>只在进行编译优化的<code>-O</code>配置下是不触发的，而如果更进一步，将编译优化选项配置为<code>-Ounchecked</code>的话，<code>precondition</code>也将不触发。此时，各方法中的<code>precondition</code>将被跳过，因此我们可以得到最快的运行速度。但是相对地代码的安全性也将降低，因为对于越界访问或者计算溢出等错误，我们得到的将是不确定的行为。</p>

<table>
<thead>
<tr>
<th>函数 </th>
<th> fatalError </th>
<th> precondition </th>
<th> assert</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Onone </td>
<td> 触发 </td>
<td> 触发 </td>
<td> 触发</td>
</tr>
<tr>
<td>-O </td>
<td> 触发 </td>
<td> 触发 </td>
<td> -</td>
</tr>
<tr>
<td>-Ounchecked </td>
<td> 触发 </td>
<td> - </td>
<td> -</td>
</tr>
</tbody>
</table>


<p>对于Universal error一般使用<code>fatalError</code>，而对于<code>Logic failure</code>一般使用<code>assert</code>或者<code>precondition</code>。遵守这个规则会有助于我们在编码时对错误进行界定。而有时候我们也希望能尽可能多地在开发的时候捕获Logic failure，而在产品发布后尽量减少crash比例。这种情况下，相比于直接将Logic failure转换为可恢复的错误，我们最好是使用<code>assert</code>在内部进行检查，来让程序在开发时崩溃。</p>

<p><a id="markdown-几种常见场景下的错误处理" name="几种常见场景下的错误处理"></a></p>

<h2>几种常见场景下的错误处理</h2>

<p>光说不练假把式。让我们来实际判断一下下面这些情况下我们都应该选择用哪种错误处理方式吧~</p>

<p><a id="markdown-app内资源加载" name="app内资源加载"></a></p>

<h3>app内资源加载</h3>

<p>假设我们在处理一个机器学习的模型，需要从磁盘读取一份预先训练好的模型。该模型以文件的方式存储在 app bundle 中，如果读取时没有找到该模型，我们应该如何处理这个错误？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">AppError</span><span class="p">.</span><span class="n">FileNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model file not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model corrupted.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案应该是方案 4，使用Logic failure让代码直接崩溃。</p>

<p>作为内建的存在于app bundle中模型或者配置文件，如果不存在或者无法初始化，在不考虑极端因素的前提下，一定是开发方面出现了问题，这不应该是一个可恢复的错误，无论重试多少次结果肯定是一样的。也许是开发者忘了将文件放到合适的位置，也许是文件本身出现了问题。不论是哪种情况，我们都会希望尽早发现并强制我们修正错误，而让代码崩溃可以很好地做到这一点。</p>

<p>使用Universal error同样可以让代码崩溃，但是Universal error更多是用在语言的边界情况下。而这里并非这种情况。
</details></p>

<p><a id="markdown-加载当前用户信息时发生错误" name="加载当前用户信息时发生错误"></a></p>

<h3>加载当前用户信息时发生错误</h3>

<p>我们在用户登录后会将用户信息存储在本地，每次重新打开app时我们检测并使用用户信息。当用户信息不存在时，应该进行的处理：</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">AppError</span><span class="p">.</span><span class="n">UsernameNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;User name not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>首先肯定排除方案3和4。“用户名不存在”是一个正常的现象，肯定不能直接crash。所以我们应该在方案1和方案2中选择。</p>

<p>对于这种情况，选择方案1 Simple domain error会更好。因为用户信息不存在是很简单的一个状况，如果用户不存在，那么我们直接让用户登录即可，这并不需要知道额外的错误信息，返回<code>nil</code>就能够很好地表达意图了。</p>

<p>当然，我们不排除今后随着情况越来越复杂，会需要区分用户信息缺失的原因 (比如是否是新用户还没有注册，还是由于原用户注销等)。但是在当前的情况下来看，这属于过度设计，暂时并不需要考虑。如果之后业务复杂到这个程度，在编译器的帮助下将Simple domain error修改为Recoverable error也不是什么难事儿。
</details></p>

<p><a id="markdown-还没有实现的代码" name="还没有实现的代码"></a></p>

<h3>还没有实现的代码</h3>

<p>假设你在为你的服务开发一个iOS框架，但是由于工期有限，有一些功能只定义了接口，没有进行具体实现。这些接口会在正式版中完成，但是我们需要预先发布给友商内测。所以除了在文档中明确标明这些内容，这些方法内部应该如何处理呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FrameworkError</span><span class="p">.</span><span class="n">NotImplemented</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assertionFailure</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案是方案3 Universal error。对于没有实现的方法，返回<code>nil</code>或者抛出错误期待用户恢复都是没有道理的，这会进一步增加框架用户的迷惑。这里的问题是语言层面的边界情况，由于没有实现，我们需要给出强力的提醒。在任意build设定下，都不应该期待用户可以成功调用这个函数，所以<code>fatalError</code>是最佳选择。</p>

<p>其实在swift继承的时候，编译器会给我们添加一个默认的未实现的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></details></p>

<p><a id="markdown-调用设备上的传感器收集数据" name="调用设备上的传感器收集数据"></a></p>

<h3>调用设备上的传感器收集数据</h3>

<p>调用传感器的app最有意思了！不管是相机还是陀螺仪，传感器相关的app总是能带给我们很多乐趣。那么，如果想要调用传感器获取数据时，发生了错误，应该怎么办呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">SensorError</span><span class="p">.</span><span class="n">stateError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Sensor get data failed!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="s">&quot;The sensor state is not normal&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>传感器由于种种原因暂时不能使用 (比如正在被其他进程占用，或者甚至设备上不存在对应的传感器)，是很有可能发生的情况。即使这个传感器的数据对应用是至关重要，不可或缺的，我们可能也会希望至少能给用户一些提示。基于这种考虑，使用方案2 Recoverable error是比较合理的选择。</p>

<p>方案1在传感器数据无关紧要的时候可能也会是一个更简单的选项。但是方案3和4会直接让程序崩溃，而且这实际上也并不是代码边界或者开发者的错误，所以不应该被考虑。
</details></p>

<p><a id="markdown-总结" name="总结"></a></p>

<h3>总结</h3>

<p>可以看到，其实在错误处理的时候，选用哪种错误是根据情景和处理需求而定的，我在参考答案也使用了很多诸如“可能”，“相较而言”等语句。虽然对于特定的场景，我们可以进行直观的考虑和决策，但这并不是教条主义般的一成不变。错误类型之间可以很容易地通过代码互相转换，这让我们在处理错误的时候可以自由选择使用的策略：比如API即使提供给我们的是Recoverable的throws形式，我们也还是可以按照需要，通过<code>try?</code>将其转为Simple domain error，或者用<code>try!</code>将其转为Logic failure。</p>

<p>能切实理解使用情景，利用这些错误类型转换的方式，灵活选取使用场景下最合适的错误类型，才能说是真正理解了这四种错误的分类依据。</p>

<p><a id="markdown-错误处理相关的辅助方法" name="错误处理相关的辅助方法"></a></p>

<h2>错误处理相关的辅助方法</h2>

<p>For custom errors in swift, refer to <a href="https://developer.apple.com/documentation/swift/error">Error</a> official document.</p>

<p><a id="markdown-use-custom-errors" name="use-custom-errors"></a></p>

<h3>Use Custom Errors</h3>

<h4>Using Enumerations as Errors</h4>

<p>Swift’s enumerations are well suited to represent simple errors. Create an enumeration that conforms to the Error protocol with a case for each possible error. If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</p>

<p>The following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">IntParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">overflow</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidInput</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Including More Data in Errors</h4>

<p>The following XMLParsingError conforms to Error and supply line and column position of the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">XMLParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">ErrorKind</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">invalidCharacter</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">mismatchedTag</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">internalError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">line</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">column</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">kind</span><span class="p">:</span> <span class="n">ErrorKind</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">parse</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">XMLDoc</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">XMLParsingError</span><span class="p">(</span><span class="nl">line</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="nl">column</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nl">kind</span><span class="p">:</span> <span class="p">.</span><span class="n">mismatchedTag</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s how you can catch any XMLParsingError errors thrown by the parse(_:) function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">xmlDoc</span> <span class="o">=</span> <span class="n">try</span> <span class="n">parse</span><span class="p">(</span><span class="n">myXMLData</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">e</span> <span class="kt">as</span> <span class="n">XMLParsingError</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Parsing error: \(e.kind) [\(e.line):\(e.column)]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Other error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &quot;Parsing error: mismatchedTag [19:5]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-do-cleanup-work-using-defer" name="do-cleanup-work-using-defer"></a></p>

<h3>Do Cleanup Work Using <code>defer</code></h3>

<p>You use a <code>defer</code> statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as <code>return</code> or <code>break</code>. For example, you can use a <code>defer</code> statement to ensure that file descriptors are closed and manually allocated memory is freed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">processFile</span><span class="p">(</span><span class="nl">filename</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="k">let</span> <span class="n">line</span> <span class="o">=</span> <span class="n">try</span> <span class="n">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Work with the file.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// close(file) is called here, at the end of the scope.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do some clean work</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example uses a <code>defer</code> statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="https://onevcat.com/2017/10/swift-error-category/">关于 Swift Error 的分类</a></li>
<li><a href="https://onevcat.com/2016/03/swift-throws/">Swift 2 throws 全解析 - 从原理到实践</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508">Error Handling Official Site</a></li>
<li><a href="https://developer.apple.com/documentation/swift/error">Error from Apple Document</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
