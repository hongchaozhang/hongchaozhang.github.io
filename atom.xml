<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-12-10T18:16:34+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编程中的SOLID原则]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming/"/>
    <updated>2018-12-04T11:31:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming</id>
    <content type="html"><![CDATA[<p>Robert C. Martin (Bob大叔)在《敏捷软件开发》中提出了编程过程中的五个原则，以适应敏捷开发（Agile）的特点：以微小增量的方式构建软件。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#solid%E5%8E%9F%E5%88%99">SOLID原则</a></li>
<li><a href="#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99the-single-responsibility-principle%E7%AE%80%E7%A7%B0srp">单一职责原则（The Single Responsibility Principle，简称SRP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%8C%E8%B4%A3">什么是职责</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li>
</ul>
</li>
<li><a href="#%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99the-open-close-principle%E7%AE%80%E7%A7%B0ocp">开放——封闭原则（The Open-Close Principle，简称OCP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E6%98%AF%E6%8A%BD%E8%B1%A1">关键是抽象</a>

<ul>
<li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
</ul>
</li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%9B%E8%A1%8C%E6%8A%BD%E8%B1%A1">什么时候进行抽象</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-1">结论</a></li>
</ul>
</li>
<li><a href="#liskov%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99the-liskov-substitution-priciple%E7%AE%80%E7%A7%B0lsp">Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">一个违反LSP的简单例子</a></li>
<li><a href="#%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%92%8C%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%85%B3%E7%B3%BB%E6%9B%B4%E5%BE%AE%E5%A6%99%E7%9A%84%E8%BF%9D%E8%A7%84">正方形和长方形的关系：更微妙的违规</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E5%AF%BC%E8%87%B4lsp%E7%9A%84%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95">其它一些容易导致LSP的习惯用法</a>

<ul>
<li><a href="#%E5%AD%90%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%80%80%E5%8C%96%E5%87%BD%E6%95%B0">子类中的退化函数</a></li>
<li><a href="#%E5%AD%90%E7%B1%BB%E6%8A%9B%E5%87%BA%E5%9F%BA%E7%B1%BB%E6%B2%A1%E6%9C%89%E7%9A%84%E5%BC%82%E5%B8%B8">子类抛出基类没有的异常</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-2">结论</a></li>
</ul>
</li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99the-dependency-inversion-principle%E7%AE%80%E7%A7%B0dip">依赖倒置原则（The Dependency Inversion Principle，简称DIP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-3">定义</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E4%BA%8E%E6%8A%BD%E8%B1%A1">依赖于抽象</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90">一个例子</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-3">结论</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99the-interface-segregation-principle%E7%AE%80%E7%A7%B0isp">接口隔离原则（The Interface Segregation Principle，简称ISP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-4">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AE%9A%E6%97%B6%E9%97%A8">一个例子：定时门</a>

<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用委托对接口分组</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用多重继承对接口分组</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90atm%E7%95%8C%E9%9D%A2">一个例子：ATM界面</a>

<ul>
<li><a href="#%E5%A4%9A%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F%E4%B8%8E%E5%8D%95%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F">多参数形式与单参数形式</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-4">结论</a></li>
</ul>
</li>
</ul>


<p> <br></p>

<h2>SOLID原则</h2>

<p>SOLID是指我们编程时应该遵守的五个原则：</p>

<ol>
<li>单一职责原则（The Single Responsibility Principle，简称SRP）</li>
<li>开放——封闭原则（The Open-Close Principle，简称OCP）</li>
<li>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</li>
<li>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</li>
<li>接口隔离原则（The Interface Segregation Principle，简称ISP）</li>
</ol>


<p>每个原则取一个字母（<strong>S</strong>RP，<strong>O</strong>CP，<strong>L</strong>SP，<strong>I</strong>SP，<strong>D</strong>IP），合称SOLID原则。</p>

<h2>单一职责原则（The Single Responsibility Principle，简称SRP）</h2>

<h3>定义</h3>

<p><strong>就一个类而言，应该只有一个引起它变化的原因。</strong></p>

<p>一个类如果有多个职责，但是你只需要其中的一个职责，你也不得不将其它职责包括进来，还有其它职责所依赖的所有组件。</p>

<h3>什么是职责</h3>

<p>在SRP中，我们把职责定义为“变化的原因”（a reason for change）。如果能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p>

<p>比如Employee这个类如果同时包含了业务规则和对于持久化的控制，多数情况下，我们可以断定它们不应该放在一起：业务规则会频繁地变化，但是持久化的方式却不会如此频繁地变化，并且变化的原因也是完全不同的。</p>

<h3>结论</h3>

<p>SRP是所有原则中最简单的，也是最难运用的。软件设计很多时候要做的，就是发现职责，并把它分离出来。事实上，我们将要论述的其它原则都会以这样或者那样的方式回到这个问题上。</p>

<h2>开放——封闭原则（The Open-Close Principle，简称OCP）</h2>

<h3>定义</h3>

<p><strong>软件实体（类、模块、函数等）应该是可以扩展，但是不可修改的。</strong></p>

<p>OCP的定义，换个说法：</p>

<ul>
<li>对扩展开放（Open for extension）</li>
<li>对修改封闭（Close for modification）</li>
</ul>


<p>如果程序中的一处改动就会产生连锁反应，导致一系列相关模块的改动，OCP建议我们应该对程序进行重构。重构之后再进行同样的修改，就只需要添加新的功能模块，不需要对原有的代码进行修改。</p>

<p>如何在能在不改变模块原代码的情况下去更改它的行为或者为其添加功能呢？</p>

<h3>关键是抽象</h3>

<p>抽象一般有两种方式：
1. 接口
2. 继承</p>

<h4>接口</h4>

<p>用接口对需要的对象进行抽象，也就是所谓的“面向接口编程”。</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceProgramming.jpg" alt="interface programming" /></p>

<p>上面的a图是一个不遵循OCP的设计。Client和Server都是具体的类，Client要使用Server。如果我们希望Client使用另外一个不同的Server类，那么就需要把Client里面使用Server的地方都做响应的修改。</p>

<p>上面的b图是一个符合OCP的设计。如果需要使用一个不同的服务器类，只需要重新实现这个类，保证这个类也实现类ClientInterface接口，则Client这个类不需要做修改，同时扩展类Client的功能。</p>

<blockquote><p>这个接口为什么叫ClientInterface，而不叫ServerInterface或者AbstractServer之类？因为这个接口和Client的关系更密切。</p></blockquote>

<h4>继承</h4>

<p>继承一个抽象类（和接口类似）或者重写一个父类中的（虚）方法，也是OCP的惯用伎俩。典型的例子，就是那个图形的绘制的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">shape</span><span class="p">.</span><span class="n">draw</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想扩展drawAllShapes方法，使其可以绘制一种新的形状，只需要重新创建一个Shape类的子类，drawAllShapes函数不需要改变，即可实现功能的扩展。这就是OCP。</p>

<h3>什么时候进行抽象</h3>

<p>即使是上面的形状绘制的例子，也不是完全的“对扩展开放，对修改关闭。”比如，我要求所有的圆必须在正方形之前绘制，就没法在不修改drawAllShapes的情况下进行这个功能扩展。</p>

<p>我们无法准确预测未来的功能扩展需求，所以，理论上来说，我们也无法实现完全的“对扩展开放，对修改关闭。”</p>

<p>而且更重要的，遵循OCP进行抽象的代价也是昂贵的。创建正确的抽象需要花费开发时间和精力。同时，这些抽象也增加了软件的设计复杂度。开发人员有能力处理的抽象的数量也是有限的。</p>

<p>所以，不要试图在刚开始就实现OCP，可以试着遵循下面的准则：</p>

<ul>
<li>只受一次愚弄</li>
</ul>


<p>也就是说，在刚开始编写代码的时候，假设变化不会发生。当变化发生时，我们就创建抽象进行隔离，防止以后发生同类变化。</p>

<h3>结论</h3>

<p>在很多方面，OCP都是面向对象设计的核心所在。遵循这个原则，可以带来面向对象技术所声称的巨大好处（也就是，灵活性、可重用性以及可维护性）。但是，对程序的每个部分都肆意地进行抽象也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</p>

<h2>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</h2>

<h3>定义</h3>

<p><strong>子类型必须能够替换掉它们的基类型。</strong></p>

<p>假设一个函数f，它的参数是某个基类型B。如果将基类型B的子类D传给f，会导致f出现错误的行为，那么D就违反了LSP原则。</p>

<p>此时，f的编写者想在f内对D进行检测，以便在把D传给f时，可以使f具有正确的行为。这个行为又违反了OCP原则，因为此时f对于基类型B的所有子类都不在封闭。</p>

<h3>一个违反LSP的简单例子</h3>

<p>对于LSP的违反常常会导致以明显违反OCP的方式使用运行时类型检测。这种方式常常是使用一个显式的if语句去确定一个对象的类型，以便于能够选择针对该类型的正确行为。考虑下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawSquare</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawCircle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Square</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawSquare</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Circle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很显然，上面的drawAllShapes违反了OCP原则，它必须知道所有的Shape的子类，并且，每创建一个子类，都需要修改drawAllShapes函数。</p>

<p>Square和Circle不能替换其基类型Shape就是违反了LSP原则，这又进一步导致了drawAllShapes违反了OCP原则。因而，对于LSP的违反也潜在违反了OCP原则。</p>

<h3>正方形和长方形的关系：更微妙的违规</h3>

<p>下面正方形继承长方形的例子，很微妙地违反了LSP原则。</p>

<p>长方形的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getWidth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getHeight</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getArea</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="nb">self</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正方形IS-A长方形，按照面向对象分析的方法，正方形应该继承长方形。同时为了保证正方形的四个边长度一致，需要对<code>setWidth</code>和<code>setHeight</code>两个函数重写。</p>

<p>实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Square看起来工作不错，而且这个设计似乎也是自相容的，正确的。可是这个结论是错误的，一个自相容的程序未必就和所有的用户程序相容。考虑下面的函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">tempFunc</span><span class="p">(</span><span class="n">_</span> <span class="nl">rect</span><span class="p">:</span> <span class="n">Rectangle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setWidth</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setHeight</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">getArea</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果传递一个Square的实例给<code>tempFunc</code>，那么程序就会报错。</p>

<p>有人可能对<code>tempFunc</code>存在的问题进行争辩，说函数<code>tempFunc</code>的编写者不应该假设宽和长是独立变化的。这时候<code>tempFunc</code>的编写者肯定不同意：函数以Rectangle为参数，长宽独立变化就是长方形的特性，为什么不能用？</p>

<p>这时候，我们应该反过来思考一下：IS-A是不是继承的唯一标准？</p>

<p><strong>IS-A不应该成为继承的准则，“可替换性”才是。</strong></p>

<h3>其它一些容易导致LSP的习惯用法</h3>

<h4>子类中的退化函数</h4>

<p>当子类在重写基类函数的时候，如果功能不如基类完备，即出现了退化，那么这个子类在某些情况下就不能替换基类，违反了LSP原则。</p>

<blockquote><p>这也许就是一些语言在子类重写基类函数的时候必须通过super调用基类函数，这就保证了重写不会退化。但是在Swift和Objective-C中可以不调用super。</p></blockquote>

<h4>子类抛出基类没有的异常</h4>

<p>此时要遵循LSP，要么改变使用者的期望，要么子类不抛出这个异常。</p>

<h3>结论</h3>

<p>OCP是很多说法的核心，而LSP是使OCP成为可能的主要原则之一。正是子类的可替换性才使得使用基类类型的模块在无需修改的情况下就可以扩展。这种可替换性必须是开发人员可以隐式依赖的东西。</p>

<h2>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</h2>

<h3>定义</h3>

<ul>
<li><strong>高层模块不应该依赖于低级模块。二者都应该依赖于抽象。</strong></li>
<li><strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></li>
</ul>


<blockquote><p>这里的“抽象”是指接口或者抽象类。</p>

<p>为什么用”倒置“：这是相对于传统的软件开发，比如结构化分析和设计。在这些设计中，倾向于创建一些高层模块依赖于低层模块的模块，策略（Policy）依赖于细节的软件结构。而DIP要求大家都依赖于抽象，而且这个抽象绝对不会放在低层模块中，而是放在高层模块中（或者独立出来一个模块），所以，不再是高层模块依赖低层模块，而是低层模块依赖高层模块（中的抽象）。</p></blockquote>

<p>传统软件开发可能会设计出下面这样的程序结构：</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_bad_design.jpg" alt="DIP bad design" /></p>

<p>在这个设计中，高层模块依赖于低层模块，如果要重用，必须同时引入低层模块。如果高层模块能够独立于低层模块，那么，高层模块就可以非常容易地被重用。该原则是框架（framework）设计的核心原则。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_good_design.jpg" alt="DIP good design" /></p>

<p>上图展示了一个更为合适的模型。每个高层模块都为它所需要的服务声明一个独立的接口，较低的层次实现这些抽象接口，每个高层模块都通过接口使用低层模块。这样，高层模块就不依赖于低层模块，低层模块反而依赖于高层模块中定义的抽象服务接口。</p>

<blockquote><p>其实，低层模块也有重用的问题，也不应该直接依赖于高层模块。这里，应该将高层模块抽象出来的接口独立成一个模块，大家都依赖这个模块。</p></blockquote>

<p><strong>这里的倒置不仅仅是依赖关系的倒置，也是接口所有权的倒置。</strong>我们通常认为工具库应该拥有自己的接口，但是当应用了DIP之后，我们发现往往是客户拥有抽象接口，而它们的服务者则从这些抽象接口派生。</p>

<h3>依赖于抽象</h3>

<p>“依赖于抽象”这一启发式规则与DIP要求类似，要求我们不应该依赖具体的类，也就是说，程序中所有的依赖关系都应该终止于抽象（抽象类或者接口）。根据这一规则，可知：</p>

<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用。</li>
<li>任何类都不应该从具体类派生。</li>
<li>任何方法都不应该重写它的任何基类中的已经实现了的方法。</li>
</ul>


<p>要完全遵守这个规则几乎是不可能的。对于一些具体的类，如果比较稳定，还是可以依赖的。比如Java或者Swift中的String类型，String比较稳定，不太会变化，依赖于它不会造成损害。</p>

<p>但是如果一个类不稳定，我们最好不要直接依赖它，而要用一个抽象接口隔离这个类的不稳定性，直接使用接口，而不是这个类。</p>

<h3>一个例子</h3>

<p>依赖倒置可以应用于任何存在一个类向另一个类发送消息的地方。例如Button对Lamp的控制。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_button_lamp_design.jpg" alt="DIP button lamp design" /></p>

<p>上图中的a设计是不成熟的：Button类依赖于Lamp类，当Lamp类改变时，Button类会受到影响。此外，想要重用Button来控制另外一种对象（比如Motor）是不可能的。Button控制着Lamp对象，并且也只能控制Lamp对象。</p>

<p>这个设计违反类DIP原则：应用程序的高层策略没有和低层的实现分离，抽象没有和具体细节分离。也可以说，高层策略依赖于低层模块，抽象自动依赖于细节。</p>

<p>什么是高层策略呢？它是应用背后的抽象，是那些不随具体细节的改变而改变的真理，它是系统内部的系统——它是隐喻（metaphore）。在Button/Lamp这个例子中，背后的抽象是检测用户的开/关指令并将指令传给目标对象。用什么机制检测用户的指令呢？是直接按下GUI上的一个按钮，还是一个实体按钮，或者一个安全系统中的运动监测器？无关紧要！目标对象是什么呢？无关紧要！这些都是不会影响到抽象的具体细节。</p>

<p>改进之后的b设计则是一个遵守DIP的设计。而且，接口本身没有所有者，可以独立放在一个不同于Button，也不同于Lamp的地方。</p>

<h3>结论</h3>

<p>传统程序设计，策略依赖于细节。面向对象设计倒置了这种依赖关系，使得细节和策略都依赖于抽象，并且常常是客户拥有服务接口。</p>

<p>事实上，这种依赖关系的倒置正好是面向对象的标志所在。如果依赖关系是倒置的，就是面向对象设计；否则，就是过程化设计。</p>

<p>依赖倒置关系是实现许多面向对象技术所宣称的好处的基本底层机制。它的正确应用对于创建可重用的框架来说是必要的。同时它对于构建在变化面前富有弹性的代码也是非常重要的。</p>

<h2>接口隔离原则（The Interface Segregation Principle，简称ISP）</h2>

<h3>定义</h3>

<p><strong>不应该强迫客户依赖于它们不用的方法。</strong></p>

<p>这个原则是用来处理“胖”接口所具有的缺点。如果类的接口不是内聚（cohesive）的，就表示该类具有“胖”的接口。换句话说，类的“胖”接口可以分解成多组方法，每一组方法都服务于不同的客户程序。</p>

<p>如果客户程序依赖于一个具有“胖”接口的类，就相当于强迫客户程序依赖它们不使用的方法，那么这些客户程序就面临着由于这些未使用的方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。</p>

<h3>一个例子：定时门</h3>

<p><strong>问题描述：</strong></p>

<p>现在有一个Door的类，现在需要实现一个TimerDoor，如果门开的时间过长，就发出警报。为了做到这一点，TimerDoor需要跟另一个名为Timer的对象进行交互。如果一个对象希望得到超时通知，它可以调用Timer的register函数，该函数有两个参数，一个是超时时间，另一个是TimerClient对象，该对象的timeout函数会在超时时被Timer调用。</p>

<p>一个容易想到的实现如下图：</p>

<p><img src="http://hongchaozhang.github.io/images/door_bad_design.jpg" alt="timer door bad design" /></p>

<p>现在Door依赖TimerClient了，可是并不是所有种类的Door都需要定时功能。如果要创建无需定时功能的Door的子类，那么在子类中就必须要提供timeout方法的退化实现，这就有可能违反LSP原则，使得子类不能够替换父类。而且，这些子类的应用程中中也必须引入TimerClient的定义。使Door变“胖”，只是为了给其某个子类带来需要的功能，这就是接口污染。</p>

<p>下面应用接口隔离原则ISP重新设计这个TimerDoor。</p>

<p>TimerDoor应该“具有”两组接口，一组供Timer使用，一组供Door使用。如何将这两组接口分开呢？该问题的答案基于这样的事实：一个对象的客户不是必须通过该对象才能访问其接口，也可以通过委托或者该对象的基类来访问它。</p>

<h4>使用委托对接口分组</h4>

<p>该方案如下图所示，当TimerDoor需要向Timer对象注册一个超时请求时，它就创建一个DoorTimerAdaper，并把它注册给Timer。当Timer对象发送timeout消息给DoorTimerAdapter时，DoorTimerAdapter把这个消息委托给TimerDoor的doortimeout方法。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_1.jpg" alt="timer door good design 1" /></p>

<p>这个设计是个比较通用的设计，在其他地方，也叫做“使用组合而非继承（Prefer Composition to Extension）”。但是这个设计略显复杂。下面基于多重继承的实现更加简洁。</p>

<h4>使用多重继承对接口分组</h4>

<p>不同语言的多重继承的实现是不一样的。倾向于使用Interface或者Protocol实现这一功能。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_2.jpg" alt="timer door good design 2" /></p>

<p>TimerDoor继承Door和TimerClient。尽管这两个基类的客户程序都可以使用TimerDoor，但是实际上都不需要依赖TimerDoor类。这样，它们就通过分离的接口使用同一个对象。</p>

<p>通常情况下，我们都会优先选择多重继承方法，只有当DoorTimerAdapter所做的转换是必须的时候，才考虑使用委托方案。</p>

<blockquote><p>DoorTimerAdapter将timeout接口转换成TimerDoor里面的doortimeout接口，如果需要，在这个转换过程中还可以做些其它事情。</p></blockquote>

<h3>一个例子：ATM界面</h3>

<p>现在让我们考虑一个更有意义的例子：自动取款机ATM问题。对于ATM上面可执行的不同操作封装一个抽象接口Transaction，三种具体的操作（Deposit，Withdrawal，Transfer）都实现这个接口。每种操作对应的类都可以调用UI抽象接口中的不同方法，但是<strong>每个操作只调用自己对应的方法</strong>。</p>

<p>一个简单直接的实现如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_bad_design.jpg" width="400" alt="atm bad design" /></p>

<p>对于任何Transaction的子类的改动都有可能迫使对UI的相应改动，从而影响其它所有Transaction的子类以及所有依赖UI的类。如果要增加一种操作PayGasBillTransaction，为了处理该操作想要显示的特定消息，就必须要在UI中加入新的方法。这就导致所有其它Transaction都必须重新编译部署。</p>

<p>通过将UI接口分解成三个对应于不同操作的接口，可以避免这种耦合。设计如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_good_design.jpg" width="600" alt="atm good design" /></p>

<p>当我们需要增加一种新的Transaction时，其它Transaction都不需要重新编译部署。</p>

<h4>多参数形式与单参数形式</h4>

<p>考虑一个既要访问TransferUI又要访问DepositUI的函数。假设我们想把这两个UI传入该函数，是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">depositeUI</span><span class="p">:</span> <span class="n">DepositUI</span><span class="p">,</span> <span class="n">_</span> <span class="nl">transferUI</span><span class="p">:</span> <span class="n">TransferUI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">ui</span><span class="p">:</span> <span class="n">UI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以第二种方法编写函数的诱惑是很强的。毕竟，在第一种多参数形式中，两个参数应用的是同一个对象，调用起来是这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">tempFunc</span><span class="p">(</span><span class="n">ui</span><span class="p">,</span> <span class="n">ui</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上面的调用看起来有悖常理，但是我们还是应该倾向于多参数形式。单参数形式的函数依赖于UI中包含的每一个接口，如果WithDrawalUI发生了改变，那么函数及其所有客户程序都会受到影响。这更悖常理。此外，我们也不能保证传入函数的两个参数一直是同一个对象。也许以后，接口对象会因为某些原因而分离，此时，函数并不需要关注接口对象是合并还是分拆这一事实。</p>

<h3>结论</h3>

<p>“胖”类会导致其客户程序之间的耦合。当一个客户程序要求该“胖”类进行一个改动时，其它客户程序都会受到影响。因此客户程序应该仅仅依赖于它调用的方法，而不应该直接依赖于一个“胖”类。通过把“胖”类的接口分解为多个特定程序的接口，每个针对特定客户程序的接口只声明其对应客户程序需要的接口。接着，该“胖”类就可以继承所有分离出来的接口，并实现它们。这就解除了客户程序和其没有调用的方法间的依赖关系，并使客户程序之间互不依赖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在swift和Objc之间转换的一些想法]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift/"/>
    <updated>2018-11-13T10:50:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在工作中我们有时候需要在swift和objc之间进行转换，这时候有没有一些工具可以帮助我们呢？</p>

<blockquote><p>当然，大部分时候，我们不需要转换，因为swift和objc的类和方法可以互相暴露给对方。</p></blockquote>

<h2>objc转换成swfit</h2>

<p>搜索了一下，找到了两个工具可以做这个事情：</p>

<h3><a href="https://github.com/yahoojapan/objc2swift">objc2swift</a></h3>

<p>objc2swift是雅虎日本的一个工具，支持在线转换。<a href="https://github.com/dzenbot/XCSwiftr/blob/master/README.md">XCSwiftr</a>就是一个基于objc2swift的xcode插件，通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>进行管理安装，可以在Xcode里面进行objc到swift的转换。但是xcode自从8.0开始就不支持插件了。</p>

<blockquote><p>插件(plugin)只在xcode 8.0之前的版本才支持。从8.0开始，插件就不再支持，但是引入了扩展(extension)。扩展和插件不同的一点是：扩展在独立的进程里面运行，所以扩展的崩溃不会影响到xcode，但是插件的崩溃，则会导致xcode也崩溃。估计插件崩溃导致的xcode崩溃的锅都是Apple来背，Apple很不爽，就让xcode跟插件分开在不同的进程中运行。</p></blockquote>

<p>objc2swift的转换效果很一般。</p>

<p>objc源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>: <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Hello, %@.&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换之后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHelloTo</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello, \(person).&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">performSelector</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>几个问题：</p>

<ol>
<li>方法名称没有按照swift的习惯改写：应该为<code>sayHello(to person: String)</code>，而不是<code>sayHelloTo(person: String)</code>。</li>
<li><code>performSelector:</code>方法完全转换错误：方法名称错误，应该为<code>perform(_ aSelector: Selector!)</code>，而且参数也错误，不应该为<code>String</code>类型，应该为<code>Selector</code>类型。</li>
<li><code>test</code>方法前面没有加上<code>@objc</code>，所以不能作为<code>#selector</code>的参数。</li>
</ol>


<h3><a href="https://objectivec2swift.com/#/home">Swiftify</a></h3>

<p>swiftify也支持在线转换，而且转换效果明显好于objc2swift。如果愿意花钱，swiftify还可以支持很多功能，包括xcode扩展（注意，这里是“扩展extension”，不是“插件plugin”）、finder扩展、整个工程的转换、离线转换等。</p>

<p>同样用上述objc源代码，转换之后为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="n">to</span> <span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello Swift, Goodbye Obj-C!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">perform</span><span class="p">(</span><span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">MyClass</span><span class="p">.</span><span class="n">test</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">objc</span> <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>swift转换成objc</h2>

<p><a href="https://objectivec2swift.com/#/home">Swiftify</a>的作者写了一篇博客<a href="https://www.quora.com/How-can-you-convert-Swift-to-Objective-C">How can you convert Swift to Objective-C?</a>，说明了这个问题：</p>

<p>原文是：</p>

<blockquote><p>When speaking about idiomatic Swift, converting method implementations from Swift to Objective-C is the task that cannot be solved for all cases. As you might imagine, many “modern” Swift features do not have any counterparts in Objective-C and thus cannot be converted without a human brain :)</p></blockquote>

<p>结论就是：由于swift有很多objc没有的语言特性，所以swift到objc无法完成自动转换。</p>

<p>但是转换之后的objc的头文件可以从build in “Generated Interface” ([ProjectName]-Swift.h)里面找到，拷贝出来，稍作修改即可。但是仅限于swift暴漏给objc的接口和属性。那些没有暴漏给objc的接口和属性，就需要手动去转换啦。</p>

<blockquote><p>[ProjectName]-Swift.h如果不能通过cmd+shift+O找到，可以从引用这个头文件的objc文件中通过“go to declaration"找到。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读朱光潜《谈修养》]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang/"/>
    <updated>2018-11-05T12:44:57+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang</id>
    <content type="html"><![CDATA[<p>《谈修养》的一点读书杂想和摘抄。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#%E8%B0%88%E5%A4%84%E7%BE%A4%E4%B8%8A%E4%B8%AD%E4%B8%8B">谈处群（上、中、下）</a></li>
<li><a href="#%E8%B0%88%E5%AD%A6%E9%97%AE">谈学问</a></li>
<li><a href="#%E8%B0%88%E8%AF%BB%E4%B9%A6">谈读书</a>

<ul>
<li><a href="#%E5%A5%BD%E4%B9%A6%E4%B8%8D%E5%8E%8C%E7%99%BE%E5%9B%9E%E8%AF%BB">好书不厌百回读</a></li>
<li><a href="#%E7%9F%A5%E8%AF%86%E7%B3%BB%E7%BB%9F%E5%8C%96">知识系统化</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E8%8B%B1%E9%9B%84%E5%B4%87%E6%8B%9C">谈英雄崇拜</a>

<ul>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E5%8E%86%E5%8F%B2">英雄与历史</a></li>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E4%BA%BA%E6%A0%BC%E6%8F%90%E5%8D%87">英雄与人格提升</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E4%BA%A4%E5%8F%8B">谈交友</a></li>
<li><a href="#%E8%B0%88%E9%9D%92%E5%B9%B4%E4%B8%8E%E6%81%8B%E7%88%B1%E7%BB%93%E5%A9%9A">谈青年与恋爱结婚</a></li>
<li><a href="#%E8%B0%88%E4%BC%91%E6%81%AF">谈休息</a></li>
<li><a href="#%E8%B0%88%E6%B6%88%E9%81%A3">谈消遣</a></li>
<li><a href="#%E8%B0%88%E4%BD%93%E8%82%B2">谈体育</a></li>
<li><a href="#%E8%B0%88%E7%BE%8E%E6%84%9F%E6%95%99%E8%82%B2">谈美感教育</a>

<pre><code>  - [美育是本能冲动和情感的解放。](#美育是本能冲动和情感的解放)
  - [美育是眼界的解放。](#美育是眼界的解放)
  - [美育是自然限制的解放。](#美育是自然限制的解放)
</code></pre>

<ul>
<li><a href="#%E7%88%B1%E7%BE%8E%E7%9A%84%E5%A4%A9%E6%80%A7%E9%9C%80%E8%A6%81%E5%9F%B9%E5%85%BB">爱美的天性需要培养</a></li>
</ul>
</li>
<li><a href="#%E7%BB%99%E7%94%B3%E6%8A%A5%E9%9D%92%E5%B9%B4%E7%9A%84%E9%9D%92%E5%B9%B4%E8%AF%BB%E8%80%85%E4%B8%80">给《申报青年》的青年读者一</a></li>
</ul>


<p><br></p>

<h2>谈处群（上、中、下）</h2>

<p>说了很多，也颇有感触，但是没能总结出来。</p>

<h2>谈学问</h2>

<p>做学问不等同于“读书”。读书只是做学问的一种方式。</p>

<p>孔子那句“学而不思则罔，思而不学则怠”道出了学问的真谛。不能空想，也不能死读书。</p>

<p>学校教育的两个作用应该是：</p>

<ul>
<li>启发兴趣</li>
<li>指点门径</li>
</ul>


<p>而现在的学校不在这两个方面努力，只尽量在灌输知识。这种教育对于学问不仅无裨益，而且是障碍。</p>

<h2>谈读书</h2>

<h3>好书不厌百回读</h3>

<p>“好书不厌百回读，熟读深思子自知。”</p>

<p>多读不能算作荣誉，少读也不能算是耻辱。少读如果彻底，必能养成深思熟虑的习惯，涵泳优游，以至于变化气质；多读而不求甚解，则如驰骋十里洋场，虽珍奇满目，徒惹得心花意乱，空手而归。世间许多读书人只为装点门面，如暴发户炫耀家私，以多为贵。这在治学方面是自欺欺人，在做人方面是趣味低劣。</p>

<h3>知识系统化</h3>

<p>一书做几遍看，每一遍只着重某一方面。也就是说读书要有中心，有中心才易有系统组织。</p>

<p>一个人心中可以有多个系统中心，将看到的知识归到不同的系统框架中去。大凡零星片段的知识，不但易忘，而且无用。每次所得的新知识必须与旧有的知识联络贯穿，这就是说，必须围绕一个中心归聚到一个系统里去，才会生根，才会开花结果。</p>

<h2>谈英雄崇拜</h2>

<h3>英雄与历史</h3>

<p><strong>英雄造时势</strong></p>

<p>卡莱尔在《英雄崇拜》中说“人类在这世界上所成就的事业的历史，骨子里就是在当中工作的几个伟大任务的历史。”
尼采的超人主义，也是为英雄崇拜涂上了哲学色彩。</p>

<p><strong>时势造英雄</strong></p>

<p>托尔斯泰的《战争与和平》在传达“时势造英雄”的理念。</p>

<h3>英雄与人格提升</h3>

<p>撇开英雄和历史的关系不说，但是对人的教育感化的作用，就不能否定英雄崇拜。正所谓“高山仰止，景行行止。虽不能至，然心向往之。”</p>

<p>尤其在青少年时代，意向的力量大于概念，与其向他们说仁义道德，不如指点几个有血有肉的具有仁义道德的人给他们看。教育重人格感化，必须是一个具体的人格才真正有感化力。</p>

<h2>谈交友</h2>

<p>近朱者赤近墨者黑</p>

<p>与善人交，如入芝兰之室，久而不闻其香；与恶人交，如入鲍鱼之市，久而不闻其臭。</p>

<p>诤友难得</p>

<h2>谈青年与恋爱结婚</h2>

<p>青年人不宜过早恋爱和结婚，需要自然的方法引导，而非暴力禁止。自然的方法包括：</p>

<ol>
<li>精力有所发挥，精神有所委托。青年人精力旺盛，要他闲着，难免泛滥横流。假如他在工作里发生兴趣，在文艺里发生兴趣，甚至在游戏运动里发生兴趣，这就可以垄断他的心神，不叫它旁迁他涉。</li>
<li>改善社交生活，使同情心得到滋养。青年最需要的是同情，最怕的是寂寞，愈寂寞就愈感觉异性需要的迫切。一般青年追求异性，与其说是迫于性的冲动，毋宁说是迫于同情的需要。要满足这需要，社会生活如果丰富也就够了。一个青年如果有亲热的家庭生活，加上温暖的团体生活，不感觉到孤寂，他虽然还有“遇”恋爱的可能，却无“谋”恋爱的必要。交谊愈广泛，发生恋爱的可能性也就愈少。一个青年最危险的遭遇莫过于向来没有和一个女子有较深的接触，一碰见第一个女子就爱上了她。</li>
</ol>


<h2>谈休息</h2>

<p>节奏，优游涵泳</p>

<p>休息不仅为蓄力，也为整理酝酿，让筋肉技巧在潜意识中酝酿凝固。</p>

<p>我（朱光潜）生平最爱陶渊明在自祭文里所说的两句话：“勤靡余劳，心有常闲”，这是修养的极境，人事算尽了，而神仙福分也就在尽人事中享着。现代人的毛病是“勤有余劳，心无偶闲”。这使人心地驳杂，缺乏冲和弘毅的气象，日日困于名缰利锁，叫整个世界日趋于干枯黑暗。</p>

<h2>谈消遣</h2>

<p>身和心到活动都有有节奏到周期。此所谓“一张一弛文武之道”。</p>

<p>更番瓜代：脑力工作者要时不时地做些体力活动。</p>

<p>儒家六艺：诗书礼乐射御，其中后四项都带有消遣娱乐到意味。孔子谈修养，“局于人”之后即继以“游于艺”。</p>

<p>世间欢喜消遣的人，无论他们到嗜好如何不同，都有一个共同点，就是他们必都有强旺的生活力，运动家和艺术家如此，嫖客赌徒乃至于烟鬼也是如此。他们到生活力强旺，发泄到需求也就急迫。他们所不同者只在发泄方式。这有如大水，可以灌田、发电或推动机器，也可以泛滥横流，淹毙人畜草木。同是强旺到生活力，用在运动可以健身，用在艺术可以怡情养性，用在吃喝嫖赌就可以劳民伤财，为非作歹。“浪子回头是个宝”，也是这个道理。浪子必是生活力强旺到人，如果可以用于正道，也必是人上之人。</p>

<h2>谈体育</h2>

<p>德、智、体、美均衡发展。</p>

<p>健康有先天因素，也有后天因素。先天因素我们能做的就是优生优育，母亲的体格康健比父亲更重要。后天健康要注意三个方面。一是营养适宜，二是生活规律，三是心境要宽和冲淡，少动气，少存杂念。</p>

<blockquote><p>我国古代特别看中上述的第三点。“养生莫善于寡欲。”近代社会复杂，刺激特多，愈近于文明，愈远于自然，处处都是扰乱心智的事物，就是处处逼我们打消耗战。我们必须淡泊宁静，以逸待劳。这不但可以养生，也可以使学问事业得到较大的成就。</p></blockquote>

<p>要训练互助、尊重纪律的精神，最好的运动场所是运动场。</p>

<h2>谈美感教育</h2>

<p>朱子诗云：“半亩方塘一鉴开，天光云影共徘徊。问渠哪得清如许？为有源头活水来。”这诗所写的是一种修养的胜境。美感教育给我们的是“源头活水”。</p>

<h4>美育是本能冲动和情感的解放。</h4>

<p>宗教、法律、道德约束下的欲望，可以在美育中得到解放。</p>

<h4>美育是眼界的解放。</h4>

<p>美育可以培养发现生活美的眼睛。</p>

<h4>美育是自然限制的解放。</h4>

<p>这是德国唯心派哲学家康德、席勒、叔本华、尼采诸人所最看重的一点，现在我们用浅近语来说明它。</p>

<p>自然世界是有限的，受因果律支配的，其中毫末细故都有他的必然性。社会由历史铸就，人由遗传和环境造成。人的活动 寸步离不开物质生存条件的支配，没有翅膀就不能飞，绝饮食就会饿死。由此类推，人在自然中是极不自由的。动植物和非生物一味顺从自然，接受它的限制，没有过分希冀，也就没有失望和痛苦。人却不同，他有心灵，有不可压制的欲望。人可以说是两重奴隶，第一服从自然的限制，其次要受自己的欲望驱使。<strong>以无穷欲望处有限自然，人便觉得处处不如意，不自由，烦闷苦恼都由此起。</strong></p>

<p>专就物质说，人在自然面前是十分渺小的。但在精神方面，人可以跳开自然的圈套而征服自然，他可以在自然世界之外另在想象中造出较能合理慰情的世界。这就是艺术的创造。</p>

<p>多接受美感教育，就是多学会如何从自然限制中解放出来，由奴隶变成上帝，充分地感觉人的尊严。</p>

<h3>爱美的天性需要培养</h3>

<p>爱美是人的天性，虽是天性，仍需要培养，否则，便会凋零。</p>

<p>美育必须从年轻时入手，年纪愈大，外务愈纷繁，习惯的牢笼愈坚固，感觉愈迟钝，心里愈复杂，欣赏艺术力也就愈薄弱。</p>

<p>我时常想，无论学哪一科专门学问，干哪一行职业，每个人都应该会听音乐，不断地读文学作品，偶尔有欣赏图画、雕刻的机会。</p>

<p>从历史看，一个民族在最兴旺的时候，艺术成就必伟大，美育必发达。史诗悲剧时代的希腊、文艺复兴时代的意大利、莎士比亚时代的英国、歌德和贝多芬时代的德国都可以作证。现在我们要想复兴民族，必须恢复周以前歌乐舞的盛况，这就是说，必须提倡普及的美感教育。</p>

<h2>给《申报青年》的青年读者一</h2>

<p>我很佩服英国人，他们总是事到头来，才想办法。事没有来到头来，他们总是冷静地等待着，观察着，今天决不打明天的计算。但是他妈呢也决不肯放弃现在的机会，觉得一件事应该去做，就马上去做，不张皇也不迟疑。他们的国家内政外交如此，个人经营的事业也是如此。他们不幻想未来，他们的老谋深算都费在抓住现在和认清现在上面。他们出死力抓住现在，事到头来时，他们总是不慌不忙地处理的很妥当。这种冷静沉着的态度就是值得我们观摩的。</p>

<p>“三此”：此身，此时，此地。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于AR的一些使用场景]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/17/some-ideas-on-ar-usage/"/>
    <updated>2018-08-17T15:13:58+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/17/some-ideas-on-ar-usage</id>
    <content type="html"><![CDATA[<p>搜集一些有意思的AR应用。</p>

<!-- more -->


<p>主要参考：<a href="https://github.com/olucurious/Awesome-ARKit">Awesome ARKit</a>。这篇post里面还有很多实用的AR Tutorial和Resouces，如果自己动手，可以参考。</p>

<ul>
<li><a href="#app-store%E4%B8%8A%E9%9D%A2%E7%9A%84app">App Store上面的App</a>

<ul>
<li><a href="#%E7%A5%9E%E5%A5%87ar">神奇AR</a></li>
<li><a href="#ikea-place">IKEA Place</a></li>
<li><a href="#wallr">Wallr</a></li>
<li><a href="#horizon-explorer">Horizon Explorer</a></li>
<li><a href="#weare">WeAre</a></li>
<li><a href="#waazy---magic-ar-video-maker">Waazy - Magic AR Video Maker</a></li>
<li><a href="#human-anatomy-atlas-2019">Human Anatomy Atlas 2019</a></li>
</ul>
</li>
<li><a href="#github%E4%B8%8A%E9%9D%A2%E7%9A%84%E9%A1%B9%E7%9B%AE">Github上面的项目</a>

<ul>
<li><a href="#arkit-occlusion-demo">arkit-occlusion-demo</a></li>
<li><a href="#arvideokit">[ARVideoKit]()</a></li>
<li><a href="#arkit-smb-homage">arkit-smb-homage</a></li>
<li><a href="#arkit-corelocation">ARKit-CoreLocation</a></li>
<li><a href="#arkitnavigationdemo">ARKitNavigationDemo</a></li>
<li><a href="#fineme">FineMe</a></li>
<li><a href="#arkitspitfire">ARKitSpitfire</a></li>
</ul>
</li>
<li><a href="#resources">Resources</a>

<ul>
<li><a href="#poly">Poly</a></li>
</ul>
</li>
</ul>


<h2>App Store上面的App</h2>

<h3><a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a></h3>

<p>这个AR应用非常棒，号称“中国第一AR平台”。打开App，以为自己是打开了“抖音”呢。其模仿抖音的痕迹很重，但是神奇AR的视频不同于抖音里面的视频：都是真实世界和虚拟世界的深入互动。支持下载很多3D模型。</p>

<p><a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a>还有一个很好的应用：可以让你将照片在真实场景中打开，支持默认的排列方式，也可以自由摆放多张照片。但是图片一圈都会默认带有一圈白色的过渡带和阴影，无法去除。对于不是标准长方形的图片（比如圆形的图片，圆形之外都是透明的），显示效果不佳。</p>

<p>而且，是免费的。也许是因为其主打段视频社交吧，所以免费。</p>

<p>看官方介绍：</p>

<blockquote><p>AR视频:
用户可以利用AR模型、特效、图片、视频等拍摄一段30秒的短视频，发布在神奇AR的视频流中，或者分享到各大媒体平台，将自己的创意展现给更多的人，告诉大家如何使用AR。
玩转AR:
用户可以打开AR摄像头，通过简单的操作，将AR模型放在真实世界中，创造各种神奇的景象，用AR就能创造电影里才能出现的特技。
丰富的模型:
神奇AR是一个开放内容平台，直接对接优质的AR内容提供者，他可以通过神奇AR把自己的作品第一时间开放给用户，所以我们拥有全世界最丰富的AR内容。</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/shenqiar.jpg" alt="神奇 AR" /></p>

<h3><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">IKEA Place</a></h3>

<p>宜家的官方App，有丰富的宜家家具的3D模型，真实尺寸，可以提前放置到自己的房间，看看效果。</p>

<blockquote><p>IKEA Place lets you virtually &lsquo;place&rsquo; IKEA products in your space. The app includes 3D and true-to-scale models of everything from sofas and armchairs to footstools and coffee tables. IKEA Place gives you an accurate impression of the furniture’s size, design and functionality in your home so you can stop wondering and start doing.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/IKEAPlace.jpg" alt="ikea place" /></p>

<h3><a href="https://itunes.apple.com/us/app/wallr/id1278372745">Wallr</a></h3>

<p>Wallr可以让你将图片放置到真实场景的墙面上。如果你想买画装饰墙面，可以试试。不过这个功能已经在<a href="https://itunes.apple.com/cn/app/%E7%A5%9E%E5%A5%87ar-%E7%89%B9%E6%95%88ar%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E7%A5%9E%E5%99%A8/id1327719623?mt=8">神奇AR</a>中实现了，而且是免费的。</p>

<p>同时放置多张图片需要花钱购买。</p>

<p><img src="http://hongchaozhang.github.io/images/wallr.jpg" alt="wallr" /></p>

<h3><a href="https://itunes.apple.com/gb/app/horizon-explorer/id1326860431?platform=ipad&amp;preserveScrollPosition=true#platform/ipad">Horizon Explorer</a></h3>

<p>AR和地图、地理位置结合的一个应用。</p>

<p>展示你设备看到的地理位置的信息，包括距离、建筑物名称、地点名称等。并把路线在一张地图上面展示给你。</p>

<p>还可以将3D的地图展示给你，让你看看某个景点或者建筑物周围等地理信息。</p>

<p>来看官方介绍：</p>

<blockquote><p>Horizon Explorer shows you the horizon and skyline around you &amp; tells you what you&rsquo;re looking at.</p>

<p>Point your camera at a hill, village, lake or landmark and Horizon Explorer will tell you what you are looking at, how far away it is, and show you a map, and information about the point you&rsquo;re aiming at.</p>

<p>ARKit technology makes the labels and alignment much more stable than used to be possible.</p>

<p>Fly up high and see the terrain laid out below you to see what is over the hills around you, and get the lay of the land, then see the scale-model 3D map that you can walk around &amp; explore to find out what&rsquo;s behind hills, or investigate up close.</p>

<p>Tracking works best on top of a hill with an unobstructed view of your surroundings (close up trees, buildings, rocks etc. can confuse the tracking). You can drag the terrain with your finger to line up with the camera if the automatic tracking is not working very well. Or try waving your phone around in the air in a figure 8 to calibrate the compass.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/HorizonExplorer.jpg" alt="Horizon Explorer" /></p>

<h3><a href="https://itunes.apple.com/cn/app/weare/id1304227680?platform=iphone&amp;preserveScrollPosition=true&amp;platform=iphone#platform/iphone&amp;platform=iphone">WeAre</a></h3>

<p>这个应用可以让你选择一些照片，以设备为中心围成一圈，并缓慢移动。还可以播放视频、背景音乐和编辑3D文字。用作者的话说，“可以打造一个或温馨浪漫的回忆相册,或缥缈遥远的世界.”</p>

<p>同时还是源码可以参考：<a href="https://github.com/SherlockQi/HeavenMemoirs">HeavenMemoirs - AR相册</a></p>

<p><img src="http://hongchaozhang.github.io/images/weare.jpg" alt="WeAre" /></p>

<h3><a href="https://itunes.apple.com/us/app/waazy-magic-ar-video-maker/id1286992749">Waazy - Magic AR Video Maker</a></h3>

<p>没太看懂这个应用。感觉主要做社交视频分享。录制视频还需要AR Lens。直接看官方介绍吧：</p>

<blockquote><p>Waazy is an augmented reality short video clips shooting and sharing social network, making it possible to bring virtual characters and objects to the real world.</p>

<p>Features:
- Record cool moments with AR Lens
- Tons of free and awesome AR effects
- Can add multiple AR characters at the same time
- One tap to make all the characters dance together
- Easily move and rotate a virtual character with control pad
- Themes include fantasy, monster, fun, and landmarks
- Show your original AR videos to the world</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/wazzy.jpg" alt="wazzy" /></p>

<h3><a href="https://itunes.apple.com/app/id1117998129">Human Anatomy Atlas 2019</a></h3>

<p>其实这个主要是展示人体内部结构的3D素材，借助AR技术投射到真实场景，没有很新鲜的AR应用场景。</p>

<p>这个应用非常专业，下载需要钱，App内还要购买。</p>

<blockquote><p>Human Anatomy Atlas offers thousands of models to help understand and communicate how the human body looks and works&ndash;and includes textbook-level definitions. Use it as a reference, instead of an anatomy textbook, or to create virtual lab experiences.
Includes over 10,000 anatomical models with descriptions in English, Spanish, French, German, Italian, Japanese, and Simplified Chinese.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/HumanAnatomyAtlas2019_1.jpg" alt="Human Anatomy Atlas 2019 1" /></p>

<p><img src="http://hongchaozhang.github.io/images/HumanAnatomyAtlas2019_2.jpg" alt="Human Anatomy Atlas 2019 2" /></p>

<h2>Github上面的项目</h2>

<h3><a href="https://github.com/bjarnel/arkit-occlusion">arkit-occlusion-demo</a></h3>

<p>事先用一些虚拟平面将真实的墙面、柜子面、门等标记出来，就可以让虚拟的小球在房间里面来回反弹，就像撞到真实的墙上返回来一样。</p>

<p><img src="http://hongchaozhang.github.io/images/occlusiongame.jpg" width="600" alt="occlusion game" /></p>

<h3><a href="">ARVideoKit</a></h3>

<p>一个用来录制AR视频的框架。</p>

<blockquote><p>An iOS Framework that enables developers to capture videos, photos, Live Photos, and GIFs with ARKit content.</p>

<p>In other words, you NO LONGER have to screen record/screenshot to capture videos and photos of your awesome ARKit apps!</p></blockquote>

<p>其实录屏/截屏不是也挺好的吗？！</p>

<blockquote><p>Key Features:</p>

<p>✅ Capture Photos from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Capture Live Photos &amp; GIFs from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Record Videos from <code>ARSCNView</code>, <code>ARSKView</code>, and <code>SCNView</code></p>

<p>✅ Pause/Resume video</p>

<p>✅ Allow device&rsquo;s Music playing in the background while recording a video</p>

<p>✅ Returns rendered and raw buffers in a protocol method for additional Image &amp; Video processing</p></blockquote>

<h3><a href="https://github.com/bjarnel/arkit-smb-homage">arkit-smb-homage</a></h3>

<p>在现实场景中玩超级玛丽。非常粗糙，但是创意还不错。</p>

<p><img src="http://hongchaozhang.github.io/images/supermario_beginning.jpg" width="600" alt="super mario beginning" /></p>

<p><img src="http://hongchaozhang.github.io/images/supermario_flag.jpg" width="600" alt="super mario flag" /></p>

<h3><a href="https://github.com/ProjectDent/ARKit-CoreLocation">ARKit-CoreLocation</a></h3>

<p>功能：</p>

<ol>
<li>这个库最主要的工作，是在试图整合ARKit和CoreLocation，以得到更加准确的定位，从而更好地应用于AR场景。</li>
<li>基于真实地理位置，标注出摄像头中某个建筑物或者景点的标注。这个功能类似于<a href="https://itunes.apple.com/gb/app/horizon-explorer/id1326860431?platform=ipad&amp;preserveScrollPosition=true#platform/ipad">Horizon Explorer</a>。</li>
</ol>


<p>TODO: 可以仔细看看此库附带的demo：</p>

<blockquote><p>The library and demo come with a bunch of additional features for configuration. It’s all fully documented to be sure to have a look around.</p></blockquote>

<p><img src="http://hongchaozhang.github.io/images/arkit+corelocation.jpg" width="600" alt="arkit + corelocation" /></p>

<h3><a href="https://github.com/chriswebb09/ARKitNavigationDemo">ARKitNavigationDemo</a></h3>

<p>在地图上选择目的地，然后在真实场景中进行AR导航。</p>

<p>但是，这个项目也只是Demo一下，作者也很谦虚：</p>

<blockquote><p>When it loads to the map, tap a place on the map where you want to navigate to and press okay. The tap can be sluggish, so you might have to try once or twice before you get it. When the navigation screen loads, tap the screen, then give it a few seconds. You should see the nodes render.</p></blockquote>

<p>TODO: 这个项目中推荐的一些参考文献还是值得看一看的。</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitNavigationDemo.gif" alt="ARKitNavigationDemo" /></p>

<h3><a href="https://github.com/mmoaay/Findme">FineMe</a></h3>

<p>可以让你的朋友根据你录制的路线图找到你：</p>

<ol>
<li>通过各种方法，记录你的起点，并让另一个人知道你的起点。比如可以通过分享起点照片，或者分享起点位置。</li>
<li>通过ARKit记录你走过的路线，并将路线分享给另一个人。</li>
<li>另一个人如果找到了你的起点，就可以根据你分享的路径找到你。</li>
</ol>


<p>但是，由于ARKit不稳定，此方法也不一定奏效。</p>

<p>作者试图通过定位和距离提高路线的稳定性，但不知效果如何，分别见于以下两个分支：</p>

<ul>
<li><a href="https://github.com/mmoaay/Findme/tree/feature/location_optimize">According to location</a></li>
<li><a href="https://github.com/mmoaay/Findme/tree/feature/distance_optimize">According to distance</a></li>
</ul>


<h3><a href="https://github.com/chriswebb09/ARKitSpitfire">ARKitSpitfire</a></h3>

<p>可以让一架3D飞机模型，根据提供的地理位置经纬度，调整姿态，并飞向那里。</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitSpitfire.gif" alt="ARKitSpitfire" /></p>

<h2>Resources</h2>

<h3><a href="https://github.com/piemonte/Poly">Poly</a></h3>

<p><a href="https://github.com/piemonte/Poly">Poly</a>是一个iOS库，用来从<a href="https://developers.google.com/poly/">Google Poly</a>上下载3D模型，包含搜索、下载管理和缓存功能。</p>

<p><a href="https://developers.google.com/poly/develop/ios">iOS Quickstart</a>展示了如何在iOS中下载使用<a href="https://developers.google.com/poly/">Google Poly</a>上面的3D资源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将代码查重工具CPD集成到Xcode]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode/"/>
    <updated>2018-08-02T18:34:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/08/02/integrate-copy-and-paste-detector-into-xcode</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img src="http://hongchaozhang.github.io/images/copy_and_paste_image.jpeg" alt="copy and paster image" /></p>

<h2>DRY准则</h2>

<p>编程的一个基本准则就是DRY（Don&rsquo;t Repeat Yourself)，不写重复代码。简单来说，就是不要复制黏贴。</p>

<p>在开始之前，我们先讨论一下什么叫做“复制黏贴”？首先，如果你有相同的文件，肯定是极其糟糕的“复制黏贴”。如果你有两个类只是类名不同，但是做着相同或者类似的事情，也是很严重的“复制黏贴”。即使只有10行代码的重复，也是”复制黏贴“。根据作者个人经验，一个100000行的工程，完全不需要复制黏贴。</p>

<h3>复制黏贴的坏处</h3>

<p>在重复的代码处修改bug，还需要手动找到另外一处，做相同的修改。</p>

<h2>如何避免复制黏贴</h2>

<p>避免重复代码的传统方法是代码审查，但是对于代码审查者来说，找到重复代码是一件很困难的事情。</p>

<p>我们能不能在编译阶段就查找出重复代码，并要求这些重复代码移除掉之后才可以继续进行编译。</p>

<h2>安装CPD</h2>

<p>对于Swift代码，有两个工具可以做代码查重：</p>

<ul>
<li><a href="https://github.com/kucherenko/jscpd">jscpd</a></li>
<li><a href="https://pmd.github.io/">pmd</a></li>
</ul>


<h3><a href="https://pmd.github.io/">pmd</a></h3>

<p>其中，pmd可定制，并且比较稳定。开始之前，先通过homebrew进行安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install pmd</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择<a href="https://github.com/realm/SwiftLint">SwiftLint</a>。</p></blockquote>

<h2>集成到Xcode</h2>

<p>为了将CPD功能集成到编译阶段，我们在Build Phase里新添加一个运行脚本（Run Script），并添加以下脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Running CPD
</span><span class='line'>pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true
</span><span class='line'># Running script
</span><span class='line'>php ./cpd_script.php -cpd-xml cpd-output.xml</span></code></pre></td></tr></table></div></figure>


<p>让我们来看一下这一段脚本做了什么事情。</p>

<p>第一部分是说我们在项目根目录下对所有的文件进行代码查重：</p>

<ul>
<li><code>--minimum-tokens</code>指定重复代码的最少token数量。这里的token是一个比较抽象的概念，不是字符，不是单词，也不是短语的意思。根据经验来说，Swift语言的最优值是50：太大，会漏掉重复代码；太小，会将一些代码误判为重复代码。</li>
<li><code>--formant</code>指定输出格式，这里指定为xml文件。</li>
<li><code>--failOnViolation</code>标识为设置为<code>true</code>，意思是只要检测到重复代码，就不继续进行编译。</li>
</ul>


<blockquote><p>经测试，无论<code>--failOnViolation</code>设置成<code>true</code>，还是<code>false</code>，都不能阻断编译的正常运行。所有的warning都能正常地输出。</p></blockquote>

<p>第一部分脚本执行的结果，是一个xml文件，里面包含了整个工程里面的重复代码及其位置、行数等信息。下面让我们看看，怎么将这个难读的xml文件以warning的形式展示给开发者。</p>

<p>为了将xml文件转换成更好读的warning，需要在工程根目录下创建一个php文件，我们叫做cpd_script.php，拷贝下面的脚本到该文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nb">simplexml_load_file</span><span class="p">(</span><span class="s1">&#39;cpd-output.xml&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">duplication</span> <span class="k">as</span> <span class="nv">$duplication</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$duplication</span><span class="o">-&gt;</span><span class="na">xpath</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$file</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$file</span><span class="p">[</span><span class="s1">&#39;line&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:1: warning: &#39;</span><span class="o">.</span><span class="nv">$duplication</span><span class="p">[</span><span class="s1">&#39;lines&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39; copy-pasted lines from: &#39;</span>
</span><span class='line'>            <span class="o">.</span><span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$otherFile</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$otherFile</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$otherFile</span><span class="p">[</span><span class="s1">&#39;line&#39;</span><span class="p">];</span> <span class="p">},</span>
</span><span class='line'>            <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$files</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$f</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$file</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$f</span> <span class="o">!=</span> <span class="nv">$file</span><span class="p">;</span> <span class="p">})))</span><span class="o">.</span><span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在Build Phase中添加的脚本的第二部分就是运行这一段脚本，将生成的xml文件中的所有重复代码信息以warning的形式展示在Xcode中。如果你想了解如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</p>

<blockquote><p>我试了<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>中说的方法，脚本有错误，为了将comment中有TODO:和FIXME:的地方标记为warning，将有ERROR:的地方标记为error，可以尝试将下面的脚本写到Build Phase的运行脚本（Run Script）中（参考<a href="https://medium.com/ios-os-x-development/highlight-warnings-in-xcode-521125121a75">Highlight Warnings in Xcode</a>）：</p>

<pre><code>TAGS="TODO:|FIXME:|WARNING:"
ERRORTAG="ERROR:"
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" -or -name "*.swift" \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching "($TAGS).*\$|($ERRORTAG).*\$" | perl -p -e "s/($TAGS)/ warning: \$1/"| perl -p -e "s/($ERRORTAG)/ error: \$1/"
</code></pre>

<p>其实不用这么复杂：以“#warning”开头，接下来跟上warning信息就可以了，Xcode会在左侧导航栏里面生成一种叫做User-Defined Issues的warning。</p></blockquote>

<p>现在编译工程，可以在Xcode左侧导航窗口看到所有的warning：</p>

<p><img src="http://hongchaozhang.github.io/images/cpd_warnings_in_navigation.jpg" alt="cpd warnings in navigation" /></p>

<p>在相应的文件中，也可以看到该文件所包含的重复代码的warning：</p>

<p><img src="http://hongchaozhang.github.io/images/cpd_warnings_in_file.jpg" alt="cpd warnings in file" /></p>

<p>这个warning的意思是说：从54行往下的41行代码和ErrorHandleTester.swift中从96行往下的41行代码重复。</p>

<blockquote><p>如果是刚安装的pmd，可能需要重启Xcode，让pmd命令生效。</p></blockquote>

<h3><a href="https://github.com/kucherenko/jscpd">jscpd</a></h3>

<p>生成的中间结果文件格式和pmd是一样的，节点名字也叫做<code>pmd-cpd</code>。</p>

<p>但是：<strong>jscpd支持yaml格式的配置文件。</strong>这一点很重要，我在工作中也是用jscpd，而不是pmd的cpd。jscpd的安装和使用方法同pmd的cpd基本一样，不再重复。</p>

<p>yaml语法参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a>。</p>

<h2>什么时候使用</h2>

<p>Finding clones is typically useful in the following cases:</p>

<ul>
<li><p><strong>When updating existing code</strong>. When you are fixing a bug, or responding to changes in requirements, you usually start by finding the location in the code that you need to change. Before you make the change, search for clones of that code segment. If clones are discovered:</p>

<ul>
<li>Consider whether you need to make the same change to each clone.</li>
<li>Consider also whether this is a good opportunity to refactor the cloned code into a shared method or class.</li>
</ul>
</li>
<li><p><strong>Architectural cleanup</strong>. Towards the end of every iteration, use Analyze Solution for Code Clones on the Analyze menu.</p></li>
<li><p><strong>When you create code</strong>. When you have written new code, use the tool to find similar code that already existed.</p></li>
</ul>


<h2>结论</h2>

<p>作者：重复代码清理刻不容缓。这个工具可以帮助我们做这件事情，而且，几乎没有任何副作用。</p>

<h2>参考</h2>

<ul>
<li>翻译部分<a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>。</li>
<li>如何在Xcode中生成warning，参考<a href="https://krakendev.io/blog/generating-warnings-in-xcode">Generating Warnings in Xcode</a>。</li>
<li>如何编写jscpd的yaml配置文件，参考<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Create ML]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/06/15/introducing-create-ml/"/>
    <updated>2018-06-15T17:39:30+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/06/15/introducing-create-ml</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Apple released Core ML in WWDC2017, and I took a note on <a href="../../../../2017/12/28/coreml-usage/">CoreML Usage</a>, including mlmodel training using Microsoft <a href="https://www.customvision.ai/">Custom Vision</a>.</p>

<p>This post is about the background of Create ML, its advantages, its relations with Turi. There is no code in this post. If you are looking for the usage of Create ML, refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a>.</p>

<h2>Background</h2>

<p>Before 2018, where can we get the mlmodel file used in iOS and macOS?</p>

<ul>
<li><a href="https://github.com/tf-coreml/tf-coreml">TensorFlow</a>: Train machine learning models and easily convert them to the Core ML Model format.</li>
<li><a href="https://www.customvision.ai/">Custom Vision</a> from Microsoft</li>
<li><a href="https://pypi.org/project/coremltools/">Core ML Tools</a>: Use this python package to convert models from machine learning toolboxes into the Core ML format.</li>
<li><a href="https://github.com/apache/incubator-mxnet/tree/master/tools/coreml">Apache MXNet</a>: Train machine learning models and convert them to the Core ML format.</li>
<li><a href="https://github.com/onnx/onnx-coreml">ONNX</a>: Convert ONNX models you have created to the Core ML Model format.</li>
<li>&hellip;</li>
</ul>


<p>TensorFlow doesn&rsquo;t support GPU on macOS from version 1.2.</p>

<p><img src="http://hongchaozhang.github.io/images/tensorflow_not_support_gpu_on_macos.jpg" alt="tensor flow not support gpu on macos" /></p>

<p><strong>Core ML</strong>: Announced at WWDC 2017, and already supported by every major ML platform to convert existing models. But the existing models tend to be too big and/or too general.</p>

<p><strong>Turi Create</strong>: Acquired by Apple in 2016 ($200M), it lets you customize existing models with your own data. But … Python :[.</p>

<h2>Create ML</h2>

<p>Finally in WWDC2018, Apple announced <strong>Create ML</strong>, which can train machine learning models on macOS, able to use the GPU on macOS. The Create ML session and Turi Create session did not mention any word on each other, but obviousely, Create ML is based on Turi Create.</p>

<p>Based on Trui&rsquo;s model training, Create ML can make model training on macOS using GPU (maybe through Metal), and come up with models which can be used by Core ML framework.</p>

<p>With XCode Playground&rsquo;s updates, Apple gives CreateMLUI, a very easy way for model training: just need to drag your training data and test data into Playground.</p>

<h2>Main Advantage: Easy to Use</h2>

<p>Do model training using Swift in XCode.</p>

<blockquote><p><strong>Create ML</strong> is proof that Apple is committed to making it easier for you to use machine learning models in your apps. In this Create ML tutorial, you’ll learn how Create ML speeds up the workflow for improving your model by improving your data while also flattening the learning curve by doing it all in the comfort of Xcode and Swift.</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p>

<p><strong>Create ML</strong>: Announced at WWDC 2018. ML in Xcode &amp; Swift! Currently includes only two of Turi Create’s seven task-focused toolkits, plus a generic classifier and regressor, and data tables. I see it as a trail of breadcrumbs leading you to the Turi Create gingerbread house, inhabited by a “good dog” instead of a witch! (Turi Create’s logo is a dog silhouette.)</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p></blockquote>

<p>Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> to see how easy it is to use Create ML. There are some code comparasion between Create ML and Turi Create.</p>

<h3>Create ML和Turi Create</h3>

<p>Currently Create ML includes only two of Turi Create’s seven task-focused toolkits, plus a generic classifier and regressor, and data tables. Turi Create has five task-focused toolkits that aren’t (yet?) in Create ML:</p>

<ul>
<li>Recommender systems</li>
<li>Image similarity</li>
<li>Object detection</li>
<li>Style transfer</li>
<li>Activity classification</li>
</ul>


<h2>Transfer Learning</h2>

<p>The description of Transfer Learning from Apple Turi:</p>

<blockquote><p>It’s not uncommon for the task you want to solve to be related to something that has already been solved. Take, for example, the task of distinguishing cats from dogs. The famous ImageNet Challenge, for which CNN’s are the state-of-the-art, asks the trained model to categorize input into one of 1000 classes. Shouldn&rsquo;t features that distinguish between categories like lions and wolves also be useful for discriminating between cats and dogs?</p>

<p>The answer is a definitive yes. It is accomplished by simply removing the output layer of the Deep Neural Network for 1000 categories, and taking the signals that would have been propagating to the output layer and feeding them as features to a classifier for our new cats vs dogs task.</p>

<p>So, when you run the Turi Create image classifier, it breaks things down into something like this:</p>

<p>Stage 1: Create a CNN classifier on a large, general dataset. A good example is ImageNet, with 1000 categories and 1.2 million images. The models are already trained by researchers and are available for us to use.</p>

<p>Stage 2: The outputs of each layer in the CNN can be viewed as a meaningful vector representation of each image. Extract these feature vectors from the layer prior to the output layer on each image of your task.</p>

<p>Stage 3: Create a new classifier with those features as input for your own task.</p>

<p>At first glance, this seems even more complicated than just training the deep learning model. However, Stage 1 is reusable for many different problems, and once done, it doesn&rsquo;t have to be changed often.</p>

<p>In the end, this pipeline results in not needing to adjust hyper-parameters, faster training, and better performance even in cases where you don&rsquo;t have enough data to create a convention deep learning model. What&rsquo;s more, this technique is effective even if your Stage 3 classification task is relatively unrelated to the task Stage 1 is trained on. This idea was first explored by Donahue et al. (2013), and has since become one of the best ways to create image classifier models.</p>

<p>&ndash;Refer to <a href="https://apple.github.io/turicreate/docs/userguide/image_classifier/how-it-works.html#transfer-learning">truicreate transfer learning</a></p></blockquote>

<p>Some comments on transfer learning from web:</p>

<blockquote><p>What’s happening here? It’s called transfer learning, if you want to look it up. The underlying model — VisionFeaturePrint_Screen, which backs the Vision framework — was pre-trained on a ginormous dataset to recognize an enormous number of classes. It did this by learning what features to look for in an image, and how to combine these features to classify the image. Almost all of the training time for your dataset is the model extracting around 1000 features from your images. These could include low-level shapes and textures and higher-level shape of ears, distance between eyes, shape of snout. Then it spends a relatively tiny amount of time training a logistic regression model to separate your images into two classes. It’s similar to fitting a straight line to scattered points, but in 1000 dimensions instead of 2. But it’s still very quick to do: my run 1m 15s for feature extraction and 0.177886 seconds to train and apply the logistic regression.</p>

<p>Transfer learning only works successfully when features of your dataset are reasonably similar to features of the dataset that was used to train the model. A model pre-trained on ImageNet — a large collection of photos — might not transfer well to pencil drawings or microscopy images.</p>

<p>&ndash;Refer to <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a></p></blockquote>

<h2>Improving Accuracy</h2>

<p>Refer to <a href="https://developer.apple.com/documentation/create_ml/improving_your_model_s_accuracy">Improving Your Model’s Accuracy</a> from Apple for improving training accuracy.</p>

<p>How to improve the model&rsquo;s training accuracy, validation accuracy and evaluation accuracy. <a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> describes the three &lsquo;accuracy&rsquo;s.</p>

<h2>References and Materials</h2>

<ol>
<li><p>You might like to browse two fascinating articles about features from (mostly) Google Brain/Research:</p>

<ul>
<li><p><a href="https://distill.pub/2018/building-blocks/">The Building Blocks of Interpretability</a>: image feature extracting</p></li>
<li><p><a href="https://distill.pub/2017/feature-visualization/">Feature Visualization</a></p></li>
</ul>
</li>
<li><p><a href="https://www.kaggle.com/">Kaggle</a> is a repository of datasets contributed by members, often supplemented by notebooks that analyze and visualize the data. It runs model prediction competitions, which leads to the next link:</p>

<ul>
<li>Machine Learning Zero-to-Hero: Everything you need in order to compete on Kaggle for the first time, step-by-step!</li>
</ul>
</li>
<li><p><a href="https://www.raywenderlich.com/196233/create-ml-tutorial-getting-started">Create ML Tutorial: Getting Started</a> describes the usage of Create ML and Turi Create, including the history, code, data preparation, improving model accuracy and so on.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is new in ARKit 2]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/06/13/what-is-new-in-n-arkit-2/"/>
    <updated>2018-06-13T13:24:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/06/13/what-is-new-in-n-arkit-2</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Overview</h2>

<p>In ARKit 1, we have:</p>

<ul>
<li>Device positioning from world tracking process</li>
<li>Horizontal and vertical plane detection from world tracking process</li>
<li>Lighting estimation</li>
<li>AR face tracking</li>
</ul>


<p>In ARKit 2, we have:</p>

<ul>
<li>Saving and loading maps</li>
<li>Environment Texturing</li>
<li>Image detection and tracking</li>
<li>3D object tracking</li>
<li>Improved face tracking</li>
</ul>


<h2>New Features in ARKit 2</h2>

<h3>Saving and Loading Maps</h3>

<h4>World Tracking Recap:</h4>

<ul>
<li>Position and orientation of the device.</li>
<li>Physical scale in the scene.</li>
<li>3D feature points.</li>
<li>Relocalization (iOS 11.3): we can relocalize objects when your AR session is interrupted, like phone coming or going from background. This feature is implemented by storing the mapping <code>ARWorldMap</code> between real world and the coordinate system. However the mapping is not exposed to developers.</li>
</ul>


<h4>World Tracking Enhancement:</h4>

<ul>
<li><strong>Saving and loading maps</strong>: expose the <code>ARWorldMap</code> to developers.</li>
<li>Faster initialization and plane detection</li>
<li>Robust tracking and plane detection</li>
<li>More accurate extent and boundary Continuous autofocus</li>
<li>New 4:3 video formats (iPad is also 4:3)</li>
</ul>


<h4>Saving and loading maps:</h4>

<p><code>ARWorldmap</code> contains:</p>

<ul>
<li>Mapping of physical 3D space: for representing 3D feature points in the coordinate system.</li>
<li>Mutable list of named anchors: for restoring previous 3D environment (like lighting node anchor), and relocalizing previously added virtual objects.</li>
<li>Raw feature points and extent: for debugging and visualization.</li>
<li>Serialization: for storing and recovering from an file.</li>
</ul>


<p><img src="http://hongchaozhang.github.io/images/arkit2_arworldmap.jpg" width="500" alt="arkit arworldmap" /></p>

<p>We can use the map in two different ways:</p>

<ul>
<li>Persistent: Restore previous AR scene for a new AR session. For example, you go to another room and come back or close the AR app and open it some time later.</li>
<li>Multiuser experience: We can share the map among devices through WiFi or bluetooth.</li>
</ul>


<p>The SwiftShot is an multiuser experience AR game:</p>

<p><img src="http://hongchaozhang.github.io/images/swiftshot.jpg" alt="arkit2 swiftshot" /></p>

<p>and the following is a small piece of the demo:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_multiuser_experience_demo.gif" alt="swift shot game" /></p>

<h4>How to get a good map</h4>

<p>In order to share or restore the map, we need to get a good one first. A good map should be:</p>

<!-- * Important for relocalization -->


<ul>
<li>Multiple points of view: If we record the mapping from one point of view, and try to restore the coordinate system from another point of view, it will fail.</li>
<li>Static, well-textured environment.</li>
<li>Dense feature points on the map.</li>
</ul>


<p>We can use the <code>WorldMappingStatus</code> status from <code>ARFrame</code> to decide if the current map is good enough for sharing or storing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">WorldMappingStatus</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">notAvailable</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">limited</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">extending</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">mapped</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Environment Texturing</h3>

<p>With the help of Environment Texturing, AR scene objects can reflect the environment texture on the surface of themselves, just like:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_environment_texturing_demo.jpg" alt="arkit2 environment texturing demo" /></p>

<h3>Image Tracking</h3>

<p>Moving objects can not be positioned in ARKit 1. In ARKit 2, specified images can be tracked in AR scene.</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking.gif" alt="arkit 2 image tracking" /></p>

<p>The classes in ARKit 2 for image tracking are:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking_classes.jpg" alt="arkit 2 image tracking classes" /></p>

<p>The detected <code>ARImageAnchor</code>s have properties like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARImageAnchor</span> <span class="p">:</span> <span class="n">ARAnchor</span><span class="p">,</span> <span class="n">ARTrackable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">isTracked</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">simd_float4x4</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">referenceImage</span><span class="p">:</span> <span class="n">ARReferenceImage</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The specified image should:</p>

<ul>
<li>Histogram should be broad</li>
<li>Not have multiple uniform color regions</li>
<li>Not have repeated structures</li>
</ul>


<p>The following is the demo:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_image_tracking_demo.gif" alt="arkit 2 image tracking demo" /></p>

<p>The inputs of the above demo are:</p>

<ul>
<li>an static image of the cat, the same as it is in the picture frame</li>
<li>an video of the cat</li>
</ul>


<p>The video is played at the position of the specified picture frame, with the same orientation of the picture frame.</p>

<p>There are two classes related to image tracking:</p>

<table>
<thead>
<tr>
<th>ARImageTrackingConfiguration </th>
<th> ARWorldTrackingConfiguration</th>
</tr>
</thead>
<tbody>
<tr>
<td>Has No World Origin </td>
<td> Has World Origin</td>
</tr>
<tr>
<td>After detecting the image, only do things inside the place of the image. </td>
<td> After detecting the image, place some virtual objects outside the detected image plane.</td>
</tr>
</tbody>
</table>


<h3>3D Object Detection</h3>

<p>3D object detection workflow is:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_tracking_classes.jpg" alt="arkit2 3D object tracking classes" /></p>

<p>The <code>ARObjectAnchor</code> contains properties like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARObjectAnchor</span> <span class="p">:</span> <span class="n">ARAnchor</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">simd_float4x4</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">referenceObject</span><span class="p">:</span> <span class="n">ARReferenceObject</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>ARReferenceObject</code> is the scanned 3D object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">class</span> <span class="nl">ARReferenceObject</span>
</span><span class='line'>    <span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">NSCopying</span><span class="p">,</span> <span class="bp">NSSecureCoding</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">center</span><span class="p">:</span> <span class="n">simd_float3</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">extent</span><span class="p">:</span> <span class="n">simd_float3</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">open</span> <span class="k">var</span> <span class="nl">rawFeaturePoints</span><span class="p">:</span> <span class="n">ARPointCloud</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>An <code>ARReferenceObject</code> contains only the spatial feature information needed for ARKit to recognize the real-world object, and is not a displayable 3D reconstruction of that object.</p></blockquote>

<p>In order to get the <code>ARReferenceObject</code>, we should scan the real object, and store the result as an file (.arobject) or an xcode asset catalog for ARKit to use. Fortunately, Apple supplies a demo for scanning 3D object to get the <code>ARReferenceObject</code>. Refer to: <a href="https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects">Scanning and Detecting 3D Objects</a> for detail and the rough steps of object scanning are:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_scan.jpg" alt="arkit2 3D object scan" /></p>

<p>For scanned object in the real world, we can dynamically add some info around it (Museum is a good use case.), like the demo does:</p>

<p><img src="http://hongchaozhang.github.io/images/arkit2_3D_object_tracking_demo.gif" alt="arkit2 object tracking demo" /></p>

<h3>Face Tracking Enhancements</h3>

<p>With face tracking, we can place something on it or around it.</p>

<p>Enhancements in ARKit 2:</p>

<ul>
<li>Gaze tracking</li>
<li>Tongue support</li>
</ul>


<blockquote><p>Gaze and Tongue can be input of the AR app.</p></blockquote>

<p>New changes in one screenshot:</p>

<p><img src="http://hongchaozhang.github.io/images/what-is-new-in-arkit-2.jpg" alt="what-is-new-in-arkit-2" /></p>

<h2>Some other WWDC Sessions Related to AR</h2>

<h3><a href="https://developer.apple.com/videos/play/wwdc2018/603/">Integrating Apps and Content with AR Quick Look</a></h3>

<p>A deeper dive into a new feature in iOS that provides a way to preview any AR object from a USDZ file.</p>

<p><img src="http://hongchaozhang.github.io/images/QLPreviewController.png" alt="QLPreviewController" /></p>

<ul>
<li>There’s a great sequence diagram presented (see above) (I wish more sessions would have these!) for previewing USDZ objects, of which the <code>QLPreviewController</code> plays a central role.</li>
<li>For web developers, it covers HTML samples for how to preview USDZ objects in Safari.</li>
<li>Then it goes into a deep dive on how to create the actual USDZ objects, with more examples on new AR texturing capabilities.</li>
<li>There’s also a quick overview on how to optimize the files, to keep the size down, and there’s a breakdown of the files that make up the USDZ format.</li>
</ul>


<h3><a href="https://developer.apple.com/videos/play/wwdc2018/605/">Inside SwiftShot: Creating an AR Game</a></h3>

<p>Covers world map sharing, networking, and the physics of how to build an AR game, as well as some design insight (I have limited game dev experience so I’ll do the best I can below).</p>

<ul>
<li>Pointers to remember with designing an AR game, such as “encouraging” the user to slowly move the device for world mapping!</li>
<li>It demonstrates the usage of image &amp; object detection, world map sharing, and iBeacons for the game.</li>
<li>Integrating <code>ARKit</code> with <code>SceneKit</code> and <code>Metal</code>, including the translation of physics data between each — position, velocity, and orientation.</li>
<li>Performance enhancement with the <code>BitStreamCodable</code> protocol.</li>
<li>A small look at how audio was integrated into the game.</li>
</ul>


<h3><a href="https://developer.apple.com/videos/play/wwdc2018/805/">Creating Great AR Experiences</a></h3>

<p>Best practises mainly from a UX &amp; design perspective (there are no code samples in this session).</p>

<ul>
<li>Logical dos and don’ts that may be useful, if you need help with thought towards product and empathy towards the user.</li>
<li>They emphasize the importance of using transitions between AR scapes.</li>
<li>Why AR is a special combination of touch and movement.</li>
<li>They advise that minimal battery impact should be a huge focus! This is a challenge, given that they recommend to render the FPS at 60 to avoid latency.</li>
<li>There’s a lengthy demonstration of creating an AR fireplace, with complex texturing, etc. It looks great, but unfortunately there were no coding samples accompanying the demo.</li>
</ul>


<h3><a href="https://developer.apple.com/videos/play/wwdc2018/610/">Understanding ARKit Tracking and Detection</a></h3>

<p>A good broad overview of all of the main AR concepts.</p>

<ul>
<li>This is such a good intro into not only AR on iOS, but AR in general, that it should have been part of 2017’s sessions when ARKit was first introduced. Better late than never. If you’re only going to watch one session, watch this one!</li>
<li>It recaps the main features of ARKit — <strong>orientation</strong>, <strong>world tracking</strong>, and <strong>plane detection</strong>, and demos all of these in depth with coding samples.</li>
<li>It then demos the new features of ARKit 2 — <strong>shared world mapping</strong>, <strong>image tracking</strong>, and <strong>object detection</strong> (which has been available in the Vision framework recapped above, but is now also accessible in ARKit).</li>
<li>A good explanation on a core AR principle, <strong>Visual Inertial Odometry</strong>, is given. Short of going into the actual physics equations behind it, this should give you a great understanding of VIO.</li>
</ul>


<h2>Some other materials for a better AR app:</h2>

<h3><a href="https://developer.apple.com/documentation/arkit/building_your_first_ar_experience">Building Your First AR Experience</a></h3>

<p>This document demos an app for basic usage of ARKit.</p>

<h3><a href="https://developer.apple.com/documentation/arkit/managing_session_lifecycle_and_tracking_quality">Managing Session Lifecycle and Tracking Quality</a></h3>

<p>Make your AR experience more robust by</p>

<ul>
<li>providing clear feedback, using <code>ARCamera.TrackingState</code>.</li>
<li>recovering from interruptions, using <code>ARCamera.TrackingState.Reason.relocalizing</code>.</li>
<li>resuming previous sessions, using <code>ARWorldMap</code>.</li>
</ul>


<h3><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/augmented-reality/">Human Interface Guidelines - Augmented Reality</a></h3>

<p>This post describes how to rendering virtual objects, how to interact with virtual objects, how to handling interruptions. It is for UX.</p>

<h3><a href="https://developer.apple.com/documentation/arkit/handling_3d_interaction_and_ui_controls_in_augmented_reality">Handling 3D Interaction and UI Controls in Augmented Reality</a></h3>

<p>This document describes the best practices for visual feedback, gesture interactions, and realistic rendering in AR experiences. And a demo app is supplied.</p>

<p><img src="http://hongchaozhang.github.io/images/arkit_demo_screenshot.jpg" alt="arkit demo" /></p>

<h3><a href="https://developer.apple.com/documentation/arkit/creating_a_multiuser_ar_experience">Creating a Multiuser AR Experience</a></h3>

<p>This document demos an app (with source code) on how to transmit ARKit world-mapping data between nearby devices with the <a href="https://developer.apple.com/documentation/multipeerconnectivity">MultipeerConnectivity</a> framework (introduced in iOS 7.0) to create a shared basis for AR experiences. MultipeerConnectivity supports peer-to-peer connectivity and the discovery of nearby devices. With MultipeerConnectivity, you can not only share <code>ARWorldMap</code>, but also some actions. This makes multiuser AR game possible.</p>

<p>However:</p>

<ul>
<li>Recording and transmitting a world map and relocalizing to a world map are time-consuming, bandwidth-intensive operations. A good design is needed for better performance.</li>
<li>The persons received the world map data need to move their device so they see a similar perspective (also sent by the host) helps ARKit process the received map and establish a shared frame of reference for the multiuser experience.</li>
</ul>


<h3><a href="https://developer.apple.com/documentation/arkit/swiftshot_creating_a_game_for_augmented_reality">SwiftShot: Creating a Game for Augmented Reality</a></h3>

<p>This document demos the SwiftShot game shown on WWDC 2018, including:</p>

<ul>
<li>Designing Gameplay for AR</li>
<li>Using Local Multipeer Networking and Sharing World Maps</li>
<li>Synchronizing Gameplay Actions</li>
<li>Solving Multiplayer Physics</li>
</ul>


<h3><a href="https://developer.apple.com/documentation/arkit/recognizing_images_in_an_ar_experience">Recognizing Images in an AR Experience</a></h3>

<p>Detect known 2D images in the user’s environment, and use their positions to place AR content.</p>

<h3><a href="https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects">Scanning and Detecting 3D Objects</a></h3>

<p>Record spatial features of real-world objects, then use the results to find those objects in the user’s environment and trigger AR content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CNN与图像识别]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/05/02/cnn-and-image-classification/"/>
    <updated>2018-05-02T18:55:44+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/05/02/cnn-and-image-classification</id>
    <content type="html"><![CDATA[<ol>
<li>卷积神经网络用于图像识别的现状。</li>
<li>卷积与图像处理基础知识。</li>
<li>卷积神经网络每一层的可视化，了解神经网络内部的物理意义。</li>
<li>图像卷积滤波器与神经元和权重的关系。</li>
</ol>


<!-- more -->


<p><br></p>

<!-- TOC -->


<ul>
<li><a href="#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%83%8C%E6%99%AF">卷积神经网络与图像识别背景</a>

<ul>
<li><a href="#lenet%E6%A6%82%E8%BF%B0">LeNet概述</a></li>
<li><a href="#imagenet%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E6%8C%91%E6%88%98%E8%B5%9B">ImageNet大规模图像识别挑战赛</a></li>
</ul>
</li>
<li><a href="#%E5%8D%B7%E7%A7%AF%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86">卷积与图像处理</a>

<ul>
<li><a href="#%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%AE%9A%E4%B9%89">卷积的定义</a></li>
<li><a href="#%E5%9B%BE%E5%83%8F%E5%8D%B7%E7%A7%AF%E7%9A%84%E7%89%A9%E7%90%86%E6%84%8F%E4%B9%89">图像卷积的物理意义</a></li>
</ul>
</li>
<li><a href="#lenet%E8%AF%A6%E8%A7%A3">LeNet详解</a></li>
<li><a href="#%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E8%BF%87%E7%A8%8B%E5%8F%AF%E8%A7%86%E5%8C%96">手写数字识别过程可视化</a></li>
<li><a href="#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E7%A5%9E%E7%BB%8F%E5%85%83%E5%92%8C%E6%9D%83%E9%87%8D%E5%9C%A8%E5%93%AA%E9%87%8C">神经网络中的“神经元”和“权重”在哪里？</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-卷积神经网络与图像识别背景" name="卷积神经网络与图像识别背景"></a></p>

<h2>卷积神经网络与图像识别背景</h2>

<p><a id="markdown-lenet概述" name="lenet概述"></a></p>

<h3>LeNet概述</h3>

<p>LeNet是最早用于深度学习了领域的卷积神经网络之一。Yann LeCun的这一杰作得名于他自1988年以来的系列成功迭代。彼时LeNet架构还主要被用于识别邮政编码等任务。LeNet的基本架构如下：</p>

<p><img src="http://hongchaozhang.github.io/images/201805lenet.jpg" alt="lenet" /></p>

<p>近几年已经出现了很多建立在LeNet之上的新架构，但是基本概念还是来自于LeNet。</p>

<p>卷积神经网络始自1990年代起，我们已经认识了最早的LeNet，其他一些很有影响力的架构列举如下：</p>

<ul>
<li>1990s至2012：从90年代到2010年代早期，卷积神经网络都处于孵化阶段。随着数据量增大和计算能力提高，卷积神经网络能搞定的问题也越来越有意思了。</li>
<li>AlexNet(2012)：2012年，Alex Krizhevsky发布了AlexNet，是LeNet的更深、更宽版本，并且大比分赢得了当年的ImageNet大规模图像识别挑战赛(ILSVRC)。这是一次非常重要的大突破，现在普及的卷积神经网络应用都要感谢这一壮举。</li>
<li>ZF Net(2013)：2013年的ILSVRC赢家是Matthew Zeiler和Rob Fergus的卷积网络，被称作ZF Net，这是调整过架构超参数的AlexNet改进型。</li>
<li>GoogleNet(2014)：2014的ILSVRC胜者是来自Google的Szegedy et al.。其主要贡献是研发了Inception Module，它<strong>大幅减少了网络中的参数数量（四百万，相比AlexNet的六千万）</strong>。</li>
<li>VGGNet(2014)：当年的ILSVRC亚军是VGGNet，突出贡献是展示了网络的深度（层次数量）是良好表现的关键因素。</li>
<li>ResNet(2015)： Kaiming He研发的Residual Network是2015年的ILSVRC冠军，也代表了卷积神经网络的最高水平，同时还是实践的默认选择（2016年5月）。</li>
<li>DenseNet（2016年8月）： 由Gao Huang发表，Densely Connected Convolutional Network的每一层都直接与其他各层前向连接。DenseNet已经在五个高难度的物体识别基础集上，显式出非凡的进步。</li>
</ul>


<p><a id="markdown-imagenet大规模图像识别挑战赛" name="imagenet大规模图像识别挑战赛"></a></p>

<h3>ImageNet大规模图像识别挑战赛</h3>

<p>参考<a href="http://www.sohu.com/a/143751643_473283">一个时代的终结：ImageNet竞赛2017是最后一届，WebVision 竞赛或接</a>。</p>

<p>上面的变种卷积神经网络基本上都来自一项比赛（DenseNet除外）：<strong>ImageNet大规模图像识别挑战赛</strong>(ImageNet Large Scale Visual Recognition Competition，ILSVRC)。</p>

<p>ILSVRC是基于ImageNet图像库的一个图像识别比赛。ImageNet可以说是计算机视觉研究人员进行大规模物体识别和检测时，最先想到的视觉大数据来源。ImageNet 数据集最初由斯坦福大学李飞飞等人在CVPR 2009的一篇论文中推出，并被用于替代 PASCAL数据集（后者在数据规模和多样性上都不如 ImageNet）和LabelMe数据集（在标准化上不如ImageNet）。</p>

<p>ImageNet不但是计算机视觉发展的重要推动者，也是这一波深度学习热潮的关键驱动力之一。截至2016年，ImageNet中含有超过1500万由人手工注释的图片网址，也就是带标签的图片，标签说明了图片中的内容，超过2.2万个类别。</p>

<p>CVPR2017研讨会“超越ILSVRC”将宣布今年是 ImageNet 竞赛正式组织的最后一年，2016年ILSVRC 的图像识别错误率已经达到约2.9%，不仅远远超越人类（5.1%），今后再进行这类竞赛意义也不大了。这无疑标志着一个时代的结束，但也是新征程的开始：未来，计算机视觉的重点在图像理解，而作为ILSVRC替代者的候选人之一是苏黎世理工大学和谷歌等联合提出的 WebVision Challenge，也将于CVPR2017同期举办，内容侧重于学习和理解网络数据。</p>

<p>历届ILSVRC的作品，可以参考<a href="https://blog.csdn.net/kangroger/article/details/56522132">ILSVRC历届冠军论文笔记</a>，包含模型框架和识别率等。</p>

<p><a id="markdown-卷积与图像处理" name="卷积与图像处理"></a></p>

<h2>卷积与图像处理</h2>

<p><a id="markdown-卷积的定义" name="卷积的定义"></a></p>

<h3>卷积的定义</h3>

<p><img src="http://hongchaozhang.github.io/images/201805convolution_definition.gif" alt="convolution definition demo" /></p>

<p>参考<a href="https://en.wikipedia.org/wiki/Convolution">Convolution</a>。</p>

<p><a id="markdown-图像卷积的物理意义" name="图像卷积的物理意义"></a></p>

<h3>图像卷积的物理意义</h3>

<p>卷积矩阵也叫“滤波器”、“核”或“特征探测器”。</p>

<p><img src="http://hongchaozhang.github.io/images/201805kernel_convolution.jpg" alt="image convolution" /></p>

<p><img src="http://hongchaozhang.github.io/images/201805image_convolution.jpg" alt="image convolutioon" /></p>

<p>参考<a href="https://en.wikipedia.org/wiki/Kernel_(image_processing">Kernel (image processing)</a>)。
￼</p>

<p><a id="markdown-lenet详解" name="lenet详解"></a></p>

<h2>LeNet详解</h2>

<p>参考<a href="http://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/">Basics of Convolutional Neural network (CNN)</a>。</p>

<ol>
<li>Convolutional Layer</li>
<li>Pooling Layer</li>
<li>Fully Connected Layer</li>
<li>Understanding Training Process</li>
</ol>


<p><a href="https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/">An Intuitive Explanation of Convolutional Neural Networks</a>的讲解也不错，中文版在<a href="https://blog.csdn.net/lcy7289786/article/details/68958111">这里</a>。</p>

<p><a id="markdown-手写数字识别过程可视化" name="手写数字识别过程可视化"></a></p>

<h2>手写数字识别过程可视化</h2>

<p><img src="http://hongchaozhang.github.io/images/201805cnn_visualization.jpg" alt="cnn visualization" /></p>

<p>官方网站：
<a href="http://scs.ryerson.ca/~aharley/vis/">http://scs.ryerson.ca/~aharley/vis/</a></p>

<p>3D可视化：
<a href="http://scs.ryerson.ca/~aharley/vis/conv/">http://scs.ryerson.ca/~aharley/vis/conv/</a></p>

<p>2D可视化：
<a href="http://scs.ryerson.ca/~aharley/vis/conv/flat.html">http://scs.ryerson.ca/~aharley/vis/conv/flat.html</a></p>

<p>相关论文：
<a href="http://scs.ryerson.ca/~aharley/vis/harley_vis_isvc15.pdf">http://scs.ryerson.ca/~aharley/vis/harley_vis_isvc15.pdf</a></p>

<p><a id="markdown-神经网络中的神经元和权重在哪里" name="神经网络中的神经元和权重在哪里"></a></p>

<h2>神经网络中的“神经元”和“权重”在哪里？</h2>

<p><img src="http://hongchaozhang.github.io/images/201805convolution_weights.jpg" alt="convolution and weights" /></p>

<p>各个卷机滤波器的里面的每个位置的值，即是我们需要训练的权重（卷积滤波器的尺寸是需要我们提前指定好的），每个像素对应于一个神经元。</p>

<p>其中神经网络的基本概念可以参考<a href="http://playground.tensorflow.org/">TensorFlow Playground</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Coding Conventions]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention/"/>
    <updated>2018-01-26T11:37:05+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/26/swift-coding-convention</id>
    <content type="html"><![CDATA[<p>Collection of some Swift coding conventions, which will make Swift code more maintainable, more readable.</p>

<!-- more -->


<p>The following is conventions I like or I will likely misuse. For a complete version, go to:</p>

<ol>
<li><a href="https://github.com/raywenderlich/swift-style-guide/">The Official raywenderlich.com Swift Style Guide.</a></li>
<li>Swift <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a></li>
</ol>


<!-- TOC -->


<ul>
<li><a href="#naming">Naming</a>

<ul>
<li><a href="#try-to-form-grammatical-english-phrases">Try to Form Grammatical English Phrases</a></li>
<li><a href="#mutatingnonmutating-methods-naming">Mutating/Nonmutating Methods Naming</a></li>
<li><a href="#boolean-methods-naming">Boolean Methods Naming</a></li>
<li><a href="#protocol-naming">Protocol Naming</a></li>
<li><a href="#avoid-abbreviations">Avoid Abbreviations</a></li>
<li><a href="#delegates">Delegates</a></li>
</ul>
</li>
<li><a href="#code-organization">Code Organization</a>

<ul>
<li><a href="#protocol-conformance">Protocol Conformance</a></li>
</ul>
</li>
<li><a href="#classes-and-structures">Classes and Structures</a>

<ul>
<li><a href="#use-of-self">Use of Self</a></li>
<li><a href="#constants">Constants</a></li>
</ul>
</li>
<li><a href="#control-flow">Control Flow</a>

<ul>
<li><a href="#golden-path">Golden Path</a>

<ul>
<li><a href="#failing-guards">Failing Guards</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#argument-labels">Argument Labels</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-naming" name="naming"></a></p>

<h2>Naming</h2>

<p>Descriptive and consistent naming makes software easier to read and understand. Use the Swift naming conventions described in the <a href="https://swift.org/documentation/api-design-guidelines/">API Design Guidelines</a>. Some key principles include:</p>

<ol>
<li>prioritizing clarity over brevity</li>
<li>striving for fluent usage</li>
<li>using uppercase for types (and protocols), lowercase for everything else</li>
<li>boolean types should read like assertions</li>
<li>choosing good parameter names that serve as documentation</li>
<li>generally avoiding abbreviations</li>
<li>taking advantage of default parameters</li>
<li>labeling closure and tuple parameters</li>
<li>verb methods follow the -ed, -ing rule for the non-mutating version</li>
<li>noun methods follow the formX rule for the mutating version</li>
<li>protocols that describe what something is should read as nouns</li>
<li>protocols that describe a capability should end in -able or -ible</li>
<li>striving for clarity at the call site</li>
</ol>


<p><a id="markdown-try-to-form-grammatical-english-phrases" name="try-to-form-grammatical-english-phrases"></a></p>

<h3>Try to Form Grammatical English Phrases</h3>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nl">at</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span>          <span class="c1">// “x, insert y at z”</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">subViews</span><span class="p">(</span><span class="nl">havingColor</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>  <span class="c1">// “x&#39;s subviews having color y”</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">capitalizingNouns</span><span class="p">()</span>       <span class="c1">// “x, capitalizing nouns”</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nl">position</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">subViews</span><span class="p">(</span><span class="nl">color</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">nounCapitalize</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-mutatingnonmutating-methods-naming" name="mutatingnonmutating-methods-naming"></a></p>

<h3>Mutating/Nonmutating Methods Naming</h3>

<p>When the operation is naturally described by a verb, use the verb’s imperative for the mutating method and apply the “ed” or “ing” suffix to name its nonmutating counterpart.</p>

<table>
<thead>
<tr>
<th> Mutating  </th>
<th> Nonmutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x.sort()</code>    </td>
<td> <code>z = x.sorted()</code> </td>
</tr>
<tr>
<td> <code>x.append(y)</code> </td>
<td> <code>z = x.appending(y)</code> </td>
</tr>
</tbody>
</table>


<p><br>
When the operation is naturally described by a noun, use the noun for the nonmutating method and apply the “form” prefix to name its mutating counterpart.</p>

<table>
<thead>
<tr>
<th> Nonmutating   </th>
<th> Mutating </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x = y.union(z)</code>  </td>
<td> <code>y.formUnion(z)</code> </td>
</tr>
<tr>
<td> <code>j = c.successor(i)</code>  </td>
<td> <code>c.formSuccessor(&amp;i)</code> </td>
</tr>
</tbody>
</table>


<p><a id="markdown-boolean-methods-naming" name="boolean-methods-naming"></a></p>

<h3>Boolean Methods Naming</h3>

<p>Uses of Boolean methods and properties should read as assertions about the receiver when the use is nonmutating, e.g. <code>x.isEmpty</code>, <code>line1.intersects(line2)</code>.</p>

<p><a id="markdown-protocol-naming" name="protocol-naming"></a></p>

<h3>Protocol Naming</h3>

<p>Protocols that describe what something is should read as nouns (e.g. <code>Collection</code>).</p>

<p>Protocols that describe a capability should be named using the suffixes -able, -ible, or -ing (e.g. <code>Equatable</code>, <code>ProgressReporting</code>).</p>

<p><a id="markdown-avoid-abbreviations" name="avoid-abbreviations"></a></p>

<h3>Avoid Abbreviations</h3>

<blockquote><p>The intended meaning for any abbreviation you use should be easily found by a <strong>web search</strong>.</p></blockquote>

<p><a id="markdown-delegates" name="delegates"></a></p>

<h3>Delegates</h3>

<p>When creating custom delegate methods, an unnamed first parameter should be the delegate source. (UIKit contains numerous examples of this.)</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">namePickerView</span><span class="p">(</span><span class="n">_</span> <span class="nl">namePickerView</span><span class="p">:</span> <span class="n">NamePickerView</span><span class="p">,</span> <span class="n">didSelectName</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="k">func</span> <span class="n">namePickerViewShouldReload</span><span class="p">(</span><span class="n">_</span> <span class="nl">namePickerView</span><span class="p">:</span> <span class="n">NamePickerView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">didSelectName</span><span class="p">(</span><span class="nl">namePicker</span><span class="p">:</span> <span class="n">NamePickerViewController</span><span class="p">,</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="k">func</span> <span class="n">namePickerShouldReload</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-code-organization" name="code-organization"></a></p>

<h2>Code Organization</h2>

<p>Use extensions to organize your code into logical blocks of functionality. Each extension should be set off with a <code>// MARK: - comment</code> to keep things well-organized.</p>

<p><a id="markdown-protocol-conformance" name="protocol-conformance"></a></p>

<h3>Protocol Conformance</h3>

<p>In particular, when adding protocol conformance to a model, prefer adding a separate extension for the protocol methods. This keeps the related methods grouped together with the protocol and can simplify instructions to add a protocol to a class with its associated methods.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// class stuff here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - UITableViewDataSource</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UITableViewDataSource</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// table view data source methods</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MARK: - UIScrollViewDelegate</span>
</span><span class='line'><span class="k">extension</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// scroll view delegate methods</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// all methods</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For UIKit view controllers, consider grouping lifecycle, custom accessors, and IBAction in separate class extensions.</p>

<p><a id="markdown-classes-and-structures" name="classes-and-structures"></a></p>

<h2>Classes and Structures</h2>

<p><a id="markdown-use-of-self" name="use-of-self"></a></p>

<h3>Use of Self</h3>

<p>For conciseness, avoid using <code>self</code> since Swift does not require it to access an object&rsquo;s properties or invoke its methods.</p>

<p>Use <code>self</code> only when required by the compiler (in <code>@escaping</code> closures, or in initializers to disambiguate properties from arguments). In other words, if it compiles without <code>self</code> then omit it.</p>

<p><a id="markdown-constants" name="constants"></a></p>

<h3>Constants</h3>

<p>Constants are defined using the <code>let</code> keyword, and variables with the <code>var</code> keyword. Always use <code>let</code> instead of <code>var</code> if the value of the variable will not change.</p>

<blockquote><p>Tip: A good technique is to define everything using <code>let</code> and only change it to <code>var</code> if the compiler complains!</p></blockquote>

<p>You can define constants on a type rather than on an instance of that type using type properties. To declare a type property as a constant simply use <code>static let</code>. Type properties declared in this way are generally preferred over global constants because they are easier to distinguish from instance properties.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Math</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281828459045235360287</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">let</span> <span class="n">root2</span> <span class="o">=</span> <span class="mf">1.41421356237309504880168872</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">hypotenuse</span> <span class="o">=</span> <span class="n">side</span> <span class="o">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">root2</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281828459045235360287</span>  <span class="c1">// pollutes global namespace</span>
</span><span class='line'><span class="k">let</span> <span class="n">root2</span> <span class="o">=</span> <span class="mf">1.41421356237309504880168872</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">hypotenuse</span> <span class="o">=</span> <span class="n">side</span> <span class="o">*</span> <span class="n">root2</span> <span class="c1">// what is root2?</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-control-flow" name="control-flow"></a></p>

<h2>Control Flow</h2>

<p><a id="markdown-golden-path" name="golden-path"></a></p>

<h3>Golden Path</h3>

<p>When coding with conditionals, the left-hand margin of the code should be the &ldquo;golden&rdquo; or &ldquo;happy&rdquo; path. That is, don&rsquo;t nest <code>if</code> statements. Multiple return statements are OK. The <code>guard</code> statement is built for this.</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">computeFFT</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="n">Context</span><span class="o">?</span><span class="p">,</span> <span class="nl">inputData</span><span class="p">:</span> <span class="n">InputData</span><span class="o">?</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Frequencies</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="n">context</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noContext</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">guard</span> <span class="k">let</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">inputData</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noInputData</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// use context and input to compute the frequencies</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">frequencies</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">computeFFT</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="n">Context</span><span class="o">?</span><span class="p">,</span> <span class="nl">inputData</span><span class="p">:</span> <span class="n">InputData</span><span class="o">?</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Frequencies</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="n">context</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">inputData</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// use context and input to compute the frequencies</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">frequencies</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noInputData</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FFTError</span><span class="p">.</span><span class="n">noContext</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When multiple optionals are unwrapped either with <code>guard</code> or <code>if let</code>, minimize nesting by using the compound version when possible. Example:</p>

<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">number1</span> <span class="o">=</span> <span class="n">number1</span><span class="p">,</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">number2</span> <span class="o">=</span> <span class="n">number2</span><span class="p">,</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">number3</span> <span class="o">=</span> <span class="n">number3</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// do something with numbers</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">number1</span> <span class="o">=</span> <span class="n">number1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">number2</span> <span class="o">=</span> <span class="n">number2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">number3</span> <span class="o">=</span> <span class="n">number3</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something with numbers</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;impossible&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-failing-guards" name="failing-guards"></a></p>

<h4>Failing Guards</h4>

<p><code>guard</code> statements are required to exit in some way. Generally, this should be simple one line statement such as <code>return</code>, <code>throw</code>, <code>break</code>, <code>continue</code>, and <code>fatalError()</code>. Large code blocks should be avoided. If cleanup code is required for multiple exit points, consider using a <code>defer</code> block to avoid cleanup code duplication.</p>

<p><a id="markdown-argument-labels" name="argument-labels"></a></p>

<h2>Argument Labels</h2>

<ol>
<li>Good practice</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">move</span><span class="p">(</span><span class="n">from</span> <span class="nl">start</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="n">to</span> <span class="nl">end</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">to</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Omit all labels when arguments can’t be usefully distinguished, e.g. <code>min(number1, number2)</code>, <code>zip(sequence1, sequence2)</code>.</p></li>
<li><p>When the first argument forms part of a prepositional phrase, give it an argument label. The argument label should normally begin at the preposition, e.g. <code>x.removeBoxes(havingLength: 12)</code>.</p>

<ul>
<li>An exception for the principle above arises when the first two arguments represent parts of a single abstraction. In such cases, begin the argument label after the preposition, to keep the abstraction clear.</li>
</ul>
</li>
</ol>


<p><strong>Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">fadeFrom</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Not Preferred:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">toX</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">fade</span><span class="p">(</span><span class="nl">fromRed</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DR Project]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/01/02/dr-project/"/>
    <updated>2018-01-02T13:39:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/01/02/dr-project</id>
    <content type="html"><![CDATA[<p>Key words: ARKit, CoreML, SceneKit</p>

<!-- more -->


<p><a href="https://github.com/hongchaozhang/ProjectDataToReality">DR (Data to Reality)</a> is a demo for projecting data into reality: Using <strong>CoreML</strong> for object recognition, and then get the recognized object data and project the data to reality, just above the recognized object. In this process, <strong>ARKit</strong> helps us to get the real world object coordinate to put the data at, and <strong>SceneKit</strong> helps us to render the data in reality.</p>

<p>This is a screenshot in demo:</p>

<p><img src="http://hongchaozhang.github.io/images/DR-Screenshot-1.jpg" alt="project chart to reality" /></p>

<p>Refer to github <a href="https://github.com/hongchaozhang/ProjectDataToReality">Project Data to Reality</a> for demo project. In the github page, the following are told:</p>

<ol>
<li>Requirement</li>
<li>How to Run the Project</li>
<li>How to Use the Demo

<ol>
<li>Project Chart to Reality</li>
<li>Face Detection</li>
<li>Face Recognition</li>
</ol>
</li>
</ol>


<h2>Related techniques used</h2>

<ol>
<li><a href="../../../../2017/12/28/arkit-usage/">ARKit</a></li>
<li><a href="../../../../2017/12/28/coreml-usage/">CoreML</a></li>
<li><a href="../../../../2018/01/02/scenekit-usage/">SceneKit</a></li>
</ol>


<h2>Notes on the Demo</h2>

<p>As this is a rough demo, it need some enhancements:</p>

<ol>
<li>Only four kinds of fruits are supported: banana, orange, cucumber and strawberry. But for anything recognized by Inceptionv3.mlmodel, we can add a sphere and the name just at the world position of the object. (Set <code>showRecognizedResultNearby</code> to <code>true</code>.)</li>
<li>The chart data of the four kinds of fruits are images exported from other apps.</li>
<li>For face detection on iphone, rotate the device to left by 90 degrees to make it work on landscape. This is an issue need to be fixed.</li>
<li>Face recognition needs a trained face recognition model, called FaceRecognition.mlmodel.</li>
<li>Face recognition request doesn&rsquo;t crop the image from camera according to the face detection result. This should be done to make face recognition more robust.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreML Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage/"/>
    <updated>2017-12-28T17:25:39+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#about-coreml">About CoreML</a></li>
<li><a href="#coreml-and-vision">CoreML and Vision</a></li>
<li><a href="#model-usage">Model Usage</a></li>
<li><a href="#model-training">Model Training</a>

<ul>
<li><a href="#basic">Basic</a></li>
<li><a href="#advanced">Advanced</a></li>
</ul>
</li>
<li><a href="#coreml-pros-and-cons">CoreML Pros and Cons</a>

<ul>
<li><a href="#pros">Pros</a></li>
<li><a href="#cons">Cons</a></li>
</ul>
</li>
</ul>


<!-- /TOC -->


<p><a id="markdown-about-coreml" name="about-coreml"></a></p>

<h2>About CoreML</h2>

<ol>
<li>Support image processing for <em>Vision</em>.</li>
<li>Support NPL (natural language processing) for <em>Foundation</em>.</li>
<li>Support learned decision tree analyzing for <em>GameplayKit</em>.</li>
</ol>


<p><a id="markdown-coreml-and-vision" name="coreml-and-vision"></a></p>

<h2>CoreML and Vision</h2>

<ol>
<li>CoreML makes it even easier to use trained models in your apps.</li>
<li>Vision gives you easy access to Apple’s models for detecting faces, face landmarks, text, rectangles, barcodes, and objects.</li>
</ol>


<p>Because these two frameworks are built on Metal, they run efficiently on the device, so you don’t need to send your users’ data to a server.</p>

<p><a id="markdown-model-usage" name="model-usage"></a></p>

<h2>Model Usage</h2>

<p>When you load a trained machine learning model (.mlmodel) into xcode, the screenshot is like (take inceptionv3.mlmodel as an example):</p>

<p><img src="http://hongchaozhang.github.io/images/mlmodel_in_xcode.png" alt="machine learning model imported to xcode" /></p>

<p>From <em>Model Class</em> (section A), we can see that xcode has <em>Automatically generated Swift model calss</em>. Click the right arrow to view the generated model class.</p>

<p>If the model class is not generated successfully, double check <em>Target Membership</em> (section B) to make sure the mlmodel file is added into the correct target.</p>

<p>From <em>Model Evaluation Parameters</em>(section C), we can see the input and output of the trained model.</p>

<p>The following is a sample usage of image classification model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create request</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">selectedModel</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">VNCoreMLModel</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">Inceptionv3</span><span class="p">().</span><span class="n">model</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Could not load model. Ensure model has been drag and dropped (copied) to XCode Project. Also ensure the model is part of a target.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">classificationRequest</span> <span class="o">=</span> <span class="n">VNCoreMLRequest</span><span class="p">(</span><span class="nl">model</span><span class="p">:</span> <span class="n">selectedModel</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="n">classificationCompleteHandler</span><span class="p">)</span>
</span><span class='line'><span class="n">classificationRequest</span><span class="p">.</span><span class="n">imageCropAndScaleOption</span> <span class="o">=</span> <span class="n">VNImageCropAndScaleOption</span><span class="p">.</span><span class="n">centerCrop</span> <span class="c1">// Crop from centre of images and scale to appropriate size.</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run request against an image</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">pixbuff</span> <span class="o">=</span> <span class="p">(</span><span class="n">sceneView</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">currentFrame</span><span class="o">?</span><span class="p">.</span><span class="n">capturedImage</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">ciImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">cvPixelBuffer</span><span class="p">:</span> <span class="n">pixbuff</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Note1: Not entirely sure if the ciImage is being interpreted as RGB, but for now it works with the Inception model.</span>
</span><span class='line'><span class="c1">// Note2: Also uncertain if the pixelBuffer should be rotated before handing off to Vision (VNImageRequestHandler) - regardless, for now, it still works well with the Inception model.</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">imageRequestHandler</span> <span class="o">=</span> <span class="n">VNImageRequestHandler</span><span class="p">(</span><span class="nl">ciImage</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">imageRequestHandler</span><span class="p">.</span><span class="n">perform</span><span class="p">([</span><span class="n">classificationRequest</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// completion handler for coping with image classification results.</span>
</span><span class='line'><span class="k">func</span> <span class="n">classificationCompleteHandler</span><span class="p">(</span><span class="nl">request</span><span class="p">:</span> <span class="n">VNRequest</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">Error</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Error: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">observations</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">results</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;No results&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get Classifications</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">classifications</span> <span class="o">=</span> <span class="n">observations</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mf">.1</span><span class="p">]</span> <span class="c1">// top 2 results</span>
</span><span class='line'>        <span class="p">.</span><span class="n">flatMap</span><span class="p">({</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="n">VNClassificationObservation</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">filter</span><span class="p">({</span> <span class="err">$</span><span class="mf">0.</span><span class="n">confidence</span> <span class="o">&gt;</span> <span class="mf">0.2</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="s">&quot;\($0.identifier) \(String(format:&quot;</span><span class="o">-</span> <span class="o">%</span><span class="mf">.2f</span><span class="s">&quot;, $0.confidence))&quot;</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="nl">separator</span><span class="p">:</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;image recognition: &quot;</span> <span class="o">+</span> <span class="n">classifications</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refer to <a href="https://developer.apple.com/machine-learning/">Build more intelligent apps with machine learning</a> for some official materials.</p>

<p>For some detailed usage step by step, refer to <a href="https://www.raywenderlich.com/164213/coreml-and-vision-machine-learning-in-ios-11-tutorial">Core ML and Vision: Machine Learning in iOS 11 Tutorial</a>.</p>

<p><a id="markdown-model-training" name="model-training"></a></p>

<h2>Model Training</h2>

<p><a id="markdown-basic" name="basic"></a></p>

<h3>Basic</h3>

<p><img src="http://hongchaozhang.github.io/images/CustomVisionFromMicroSoft.png" alt="Custom Vision From MicroSoft" /></p>

<p>Microsoft <a href="https://www.customvision.ai/">Custom Vision</a> supplies a very friendly UI interface. You can upload you images and label them very easily. After training is done, you can export the model for mobile devices, including: mlmodel file for iOS platform, and TensorFlow model on Android platform.</p>

<p>Friendly UI Interface:</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceOfCustomVision.png" alt="interface of microsoft custom vision" /></p>

<p>But there are some limitations, as <a href="https://www.customvision.ai/">Custom Vision</a> is still in preview process.</p>

<p><img src="http://hongchaozhang.github.io/images/MicroSoftCustomVisionLimitation.png" alt="limitation of microsoft custom vision" /></p>

<p><a id="markdown-advanced" name="advanced"></a></p>

<h3>Advanced</h3>

<p><a href="https://github.com/apple/turicreate/tree/master/userguide/image_classifier">apple turicreate image classification</a> supplies more configurations for model training, like the partition of trainning data and verification data. But some Python experience is needed.</p>

<p><a id="markdown-coreml-pros-and-cons" name="coreml-pros-and-cons"></a></p>

<h2>CoreML Pros and Cons</h2>

<p><a id="markdown-pros" name="pros"></a></p>

<h3>Pros</h3>

<ol>
<li><p><strong>Easy to use.</strong> As described at the beginning of the post.</p></li>
<li><p><strong>High performance.</strong> As is said:</p>

<blockquote><p>“It was amazing to see the prediction results immediately without any time interval.”</p></blockquote></li>
</ol>


<p><a id="markdown-cons" name="cons"></a></p>

<h3>Cons</h3>

<p><strong>Lack of federated learning.</strong> As is said:</p>

<blockquote><p>There are no provisions within Core ML for model retraining or federated learning, where data collected from the field is used to improve the accuracy of the model. That’s something you would have to implement by hand, most likely by asking app users to opt in for data collection and using that data to retrain the model for a future edition of the app.</p></blockquote>

<p>Refer to <a href="https://www.infoworld.com/article/3200885/machine-learning/apples-core-ml-the-pros-and-cons.html">Apple’s Core ML: The pros and cons</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARKit Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage/"/>
    <updated>2017-12-28T17:25:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#cool-ar-apps-in-app-store">Cool AR Apps in App Store</a>

<ul>
<li><a href="#world-brush">World Brush</a></li>
<li><a href="#ikea-place">IKEA Place</a></li>
<li><a href="#ar-measurekit">AR MeasureKit</a></li>
</ul>
</li>
<li><a href="#requirement">Requirement</a></li>
<li><a href="#arkit-usage">ARKit Usage</a>

<ul>
<li><a href="#arkit-related-techniques">ARKit Related Techniques</a></li>
<li><a href="#arkit-in-ios-system">ARKit in iOS System</a></li>
<li><a href="#arkit-key-classes">ARKit Key Classes</a></li>
<li><a href="#arsession"><code>ARSession</code></a></li>
<li><a href="#arconfiguration"><code>ARConfiguration</code></a></li>
<li><a href="#more-on-arworldtrackingconfiguration">More on <code>ARWorldTrackingConfiguration</code></a>

<ul>
<li><a href="#tracking-quality">Tracking Quality</a></li>
</ul>
</li>
<li><a href="#arframe"><code>ARFrame</code></a></li>
<li><a href="#hittest-for-real-world-position">HitTest for Real World Position</a>

<ul>
<li><a href="#existingplane"><code>existingPlane</code></a></li>
<li><a href="#existingplaneusingextent"><code>existingPlaneUsingExtent</code></a></li>
<li><a href="#estimatedhorizontalplane"><code>estimatedHorizontalPlane</code></a></li>
<li><a href="#featurepoint"><code>featurePoint</code></a></li>
</ul>
</li>
<li><a href="#display-virtual-object-in-real-world">Display Virtual Object in Real World</a>

<ul>
<li><a href="#standard-view">Standard View</a></li>
<li><a href="#custom-view">Custom View</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#best-practices-and-limitations">Best Practices and Limitations</a>

<ul>
<li><a href="#best-practices">Best Practices</a></li>
<li><a href="#limitations">Limitations</a></li>
</ul>
</li>
<li><a href="#ar-from-google">AR from Google</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-cool-ar-apps-in-app-store" name="cool-ar-apps-in-app-store"></a></p>

<h2>Cool AR Apps in App Store</h2>

<p><a id="markdown-world-brush" name="world-brush"></a></p>

<h3>World Brush</h3>

<p><a href="https://itunes.apple.com/us/app/world-brush/id1277410449?mt=8">World Brush</a> is an AR experience where users can paint with brushes on the world around them. Every painting is saved at the approximate GPS location where it was created, and will be recommended to the user around.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_WorldBrush.png" width="300" alt="world brush" /></p>

<p><a id="markdown-ikea-place" name="ikea-place"></a></p>

<h3>IKEA Place</h3>

<p><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">IKEA Place</a> lets you virtually &lsquo;place&rsquo; IKEA products in your space.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_IkeaPlace.png" width="300" alt="ikea place" /></p>

<p><a id="markdown-ar-measurekit" name="ar-measurekit"></a></p>

<h3>AR MeasureKit</h3>

<p><a href="https://itunes.apple.com/us/app/ar-measurekit/id1258270451?mt=8">AR MeasureKit</a> makes it really easy to measure different things in the world using your iPhone’s or iPad’s camera.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKit_MeasureKit.png" width="300" alt="ar measure kit" /></p>

<p><a id="markdown-requirement" name="requirement"></a></p>

<h2>Requirement</h2>

<ul>
<li>iOS 11 and above system.</li>
<li>iOS device with an A9 or later processor.</li>
</ul>


<p>To make your app available only on devices supporting ARKit, use the arkit key in the <code>UIRequiredDeviceCapabilities</code> section of your app&rsquo;s Info.plist. If augmented reality is a secondary feature of your app, use the <code>ARWorldTrackingSessionConfiguration.isSupported</code> property to determine whether the current device supports the session configuration you want to use.</p>

<p><a id="markdown-arkit-usage" name="arkit-usage"></a></p>

<h2>ARKit Usage</h2>

<p><a id="markdown-arkit-related-techniques" name="arkit-related-techniques"></a></p>

<h3>ARKit Related Techniques</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitRelatedTechs.png" alt="arkit related techs" /></p>

<p><a id="markdown-arkit-in-ios-system" name="arkit-in-ios-system"></a></p>

<h3>ARKit in iOS System</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitFramework.png" alt="arkit in ios system" /></p>

<p><a id="markdown-arkit-key-classes" name="arkit-key-classes"></a></p>

<h3>ARKit Key Classes</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitUsage.png" alt="arkit usage" /></p>

<p><a id="markdown-arsession" name="arsession"></a></p>

<h3><code>ARSession</code></h3>

<p>An <a href="https://developer.apple.com/documentation/arkit/arsession"><code>ARSession</code></a> object coordinates the major processes that ARKit performs on your behalf to create an augmented reality experience. These processes include reading data from the device&rsquo;s motion sensing hardware, controlling the device&rsquo;s built-in camera, and performing image analysis on captured camera images. The session synthesizes all of these results to establish a correspondence between the real-world space the device inhabits and a virtual space where you model AR content.</p>

<p>Every AR experience built with ARKit requires a single <code>ARSession</code>object. If you use an <code>ARSCNView</code> or <code>ARSKView</code> object to easily build the visual part of your AR experience, the view object includes an <code>ARSession</code> instance. If you build your own renderer for AR content, you&rsquo;ll need to instantiate and maintain an ARSession object yourself.</p>

<p>Running a session requires a session configuration: an instance of the <code>ARConfiguration</code> class, or its subclass <code>ARWorldTrackingConfiguration</code>. These classes determine how ARKit tracks a device&rsquo;s position and motion relative to the real world, and thus affect the kinds of AR experiences you can create.</p>

<p><a id="markdown-arconfiguration" name="arconfiguration"></a></p>

<h3><code>ARConfiguration</code></h3>

<p><a href="https://developer.apple.com/documentation/arkit/arconfiguration"><code>ARConfiguration</code></a> is an abstract class; you do not create or work with instances of this class.</p>

<p>To run an AR session, create an instance of the concrete <code>ARConfiguration</code> subclass that provides the kind of augmented reality experience you want to use in your app or game. Then, set up the configuration object&rsquo;s properties and pass the configuration to your session&rsquo;s <code>run(_:options:)</code> method. ARKit includes the following concrete configuration classes:</p>

<ul>
<li><p><a href="https://developer.apple.com/documentation/arkit/arworldtrackingconfiguration"><code>ARWorldTrackingConfiguration</code></a>
Provides high-quality AR experiences that use the rear-facing camera precisely track a device&rsquo;s position and orientation and allow plane detection and hit testing. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>ARWorldTrackingConfiguration</code> class tracks the device&rsquo;s movement with six degrees of freedom (6DOF): specifically, the three rotation axes (roll, pitch, and yaw), and three translation axes (movement in x, y, and z).</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arorientationtrackingconfiguration"><code>AROrientationTrackingConfiguration</code></a>
Provides basic AR experiences that use the rear-facing camera and track only a device&rsquo;s orientation. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>AROrientationTrackingConfiguration</code> class tracks the device&rsquo;s movement with three degrees of freedom (3DOF): specifically, the three rotation axes (roll, pitch, and yaw).</p>

<p>  <code>AROrientationTrackingConfiguration</code> cannot track movement of the device, and 3DOF tracking does not support plane detection or hit testing.</p>

<p>  Use 3DOF tracking only as a fallback in situations where 6DOF tracking is temporarily unavailable.</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arfacetrackingconfiguration"><code>ARFaceTrackingConfiguration</code></a>
Provides AR experiences that use the front-facing camera and track the movement and expressions of the user&rsquo;s face.</p></li>
</ul>


<p>Face tracking is available only on iOS devices with a front-facing TrueDepth camera.</p>

<p>An official example <a href="https://developer.apple.com/documentation/arkit/creating_face_based_ar_experiences">Creating Face-Based AR Experiences</a> demonstrates that you can place and animate 3D content that follows the user’s face and matches facial expressions, using the TrueDepth camera on iPhone X.</p>

<p><a id="markdown-more-on-arworldtrackingconfiguration" name="more-on-arworldtrackingconfiguration"></a></p>

<h3>More on <code>ARWorldTrackingConfiguration</code></h3>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a> for an official explanation of the world tracking things.</p>

<p>World tracking process can be illustrated as:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTracking.gif" alt="arkit world tracking" /></p>

<blockquote><p>One question here: <em>How does ARKit know how long is 1 meter in the real world?</em> <a href="https://www.quora.com/How-can-Apple%E2%80%99s-ARKit-Augmented-Reality-do-precise-measurement-with-just-one-camera">How can Apple’s ARKit (Augmented Reality) do precise measurement with just one camera?</a> is trying to figure this out:</p>

<p>&ldquo;When an iPhone camera is turned on, it doesn’t have two different images with which to calculate distances. However, a moment after the first image is taken it does have a second image. <strong>Thanks to data from the iPhone accelerometer sensors, it can also estimate the difference - from the first image to the second - of the iPhone camera’s 3D position and aim.</strong> Now we go back to those “known features” being tracked. For each image the iPhone doesn’t just do this for a single feature, it maps as many features as it can. Aside from doing the triangulation on each of the features in the images, it also does a comparison between the differences in each feature’s relationship to other features in the image. So now, like your brain, the iPhone has two different views of something, knows the approximate angles of focus, knows the distance between the lens position, is tracking known features and their relationship to each other. From this, the iPhone can get a very good approximation of how each feature is positioned in space with relation to the other features, essentially producing a 3D mapping of the space.&rdquo;</p></blockquote>

<p><a id="markdown-tracking-quality" name="tracking-quality"></a></p>

<h4>Tracking Quality</h4>

<p>To get better tracking quality:</p>

<ol>
<li>Uninterrupted sensor data</li>
<li>Textured environments</li>
<li>Static scenes</li>
</ol>


<p>If tracking quality changes, the tracking state will also change:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTrackingState.png" alt="arkit tracing state transition" /></p>

<p>And the tracking state changes will be notified by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">session</span><span class="p">(</span><span class="n">_</span> <span class="nl">session</span><span class="p">:</span> <span class="n">ARSession</span><span class="p">,</span> <span class="n">cameraDidChangeTrackingState</span> <span class="nl">camera</span><span class="p">:</span> <span class="n">ARCamera</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">case</span> <span class="p">.</span><span class="n">limited</span><span class="p">(</span><span class="k">let</span> <span class="n">reason</span><span class="p">)</span> <span class="o">=</span> <span class="n">camera</span><span class="p">.</span><span class="n">trackingState</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Notify user of limited tracking state</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-arframe" name="arframe"></a></p>

<h3><code>ARFrame</code></h3>

<p>After world tracking, we can get the 6 DOF of the camera, used for the upcoming rendering. These infos are stored in each <code>ARFrame</code>.</p>

<p><code>ARFrame</code> owns video image and position tracking information captured as part of an AR session. There are two ways to access <code>ARFrame</code> objects produced by an AR session, depending on whether your app favors a pull or a push design pattern.</p>

<ul>
<li><em>Pull Pattern</em>: get <code>currentFrame</code> from <code>ARSession</code>.</li>
<li><em>Push Pattern</em>: implement the <code>session(_:didUpdate:)</code> delegate method, and the session will call it once for each video frame it captures (at 60 frames per second by default).</li>
</ul>


<p>Key infos in <code>ARFrame</code>:</p>

<ol>
<li><p><strong><code>ARCamera</code></strong>: Information about the camera position and imaging characteristics for a captured video frame in an AR session. Get <code>camera</code> from <code>ARFrame</code>.</p></li>
<li><p><strong><code>ARLightEstimate</code></strong>: Estimated scene lighting information associated with a captured video frame in an AR session. Get <code>lightEstimate</code> from <code>ARFrame</code>.</p>

<p> Refer to <a href="https://blog.markdaws.net/arkit-by-example-part-4-realism-lighting-pbr-b9a0bedb013e">ARKit by Example — Part 4: Realism - Lighting &amp; PBR</a> for mimicing the environment light.</p></li>
</ol>


<p><a id="markdown-hittest-for-real-world-position" name="hittest-for-real-world-position"></a></p>

<h3>HitTest for Real World Position</h3>

<p>By calling the following method on <code>ARSCNView</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">func</span> <span class="n">hitTest</span><span class="p">(</span><span class="n">_</span> <span class="nl">point</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">,</span> <span class="nl">types</span><span class="p">:</span> <span class="n">ARHitTestResult</span><span class="p">.</span><span class="n">ResultType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">ARHitTestResult</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>we can get an array of <code>ARHitTestResult</code>, which stay at the very position point indicates. The <code>ARHitTestResult</code>s are sorted by distance. To call the method, you need to specify the <code>ARHitTestResult.ResultType</code>. There are four kinds of hitTest types:</p>

<p><a id="markdown-existingplane" name="existingplane"></a></p>

<h4><code>existingPlane</code></h4>

<p>Return the result type from intersecting with an existing plane anchor.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestExistingPlane.gif" alt="arkit hittest existing plane" /></p>

<p><a id="markdown-existingplaneusingextent" name="existingplaneusingextent"></a></p>

<h4><code>existingPlaneUsingExtent</code></h4>

<p>Return the result type from intersecting with an existing plane anchor, taking into account the plane’s extent.</p>

<p><a id="markdown-estimatedhorizontalplane" name="estimatedhorizontalplane"></a></p>

<h4><code>estimatedHorizontalPlane</code></h4>

<p>Return the result type from intersecting a horizontal plane estimate, determined for the current frame.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestEstimatedPlane.gif" alt="arkit hittest estimated plane" /></p>

<p><a id="markdown-featurepoint" name="featurepoint"></a></p>

<h4><code>featurePoint</code></h4>

<p>Return the result type from intersecting the nearest feature point.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestFeaturePoints.gif" alt="" /></p>

<p><a id="markdown-display-virtual-object-in-real-world" name="display-virtual-object-in-real-world"></a></p>

<h3>Display Virtual Object in Real World</h3>

<p><a id="markdown-standard-view" name="standard-view"></a></p>

<h4>Standard View</h4>

<ul>
<li><strong><code>ARSCNView</code></strong>: A view for displaying AR experiences that augment the camera view with 3D SceneKit content.</li>
<li><strong><code>ARSKView</code></strong>: A view for displaying AR experiences that augment the camera view with 2D SpriteKit content.</li>
</ul>


<p><a id="markdown-custom-view" name="custom-view"></a></p>

<h4>Custom View</h4>

<p>To display your AR experience in a custom view, you’ll need to:</p>

<ol>
<li>Retrieve video frames and tracking information from the session.</li>
<li>Render those frame images as the backdrop for your view.</li>
<li>Use the tracking information to position and draw AR content atop the camera image.</li>
</ol>


<p>Refer to <a href="https://developer.apple.com/documentation/arkit/displaying_an_ar_experience_with_metal">Displaying an AR Experience with Metal</a>.</p>

<p><a id="markdown-best-practices-and-limitations" name="best-practices-and-limitations"></a></p>

<h2>Best Practices and Limitations</h2>

<p><a id="markdown-best-practices" name="best-practices"></a></p>

<h3>Best Practices</h3>

<p>World tracking is an inexact science. This process can often produce impressive accuracy, leading to realistic AR experiences. However, it relies on details of the device’s physical environment that are not always consistent or are difficult to measure in real time without some degree of error. To build high-quality AR experiences, be aware of these caveats and tips.</p>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a>.</p>

<p><strong>Design AR experiences for predictable lighting conditions.</strong></p>

<p> World tracking involves image analysis, which requires a clear image. Tracking quality is reduced when the camera can’t see details, such as when the camera is pointed at a blank wall or the scene is too dark.</p>

<p><strong>Use tracking quality information to provide user feedback.</strong></p>

<p> World tracking correlates image analysis with device motion. ARKit develops a better understanding of the scene if the device is moving, even if the device moves only subtly. Excessive motion—too far, too fast, or shaking too vigorously—results in a blurred image or too much distance for tracking features between video frames, reducing tracking quality. The ARCamera class provides tracking state reason information, which you can use to develop UI that tells a user how to resolve low-quality tracking situations.</p>

<p><strong>Allow time for plane detection to produce clear results, and disable plane detection when you have the results you need.</strong></p>

<p> Plane detection results vary over time—when a plane is first detected, its position and extent may be inaccurate. As the plane remains in the scene over time, ARKit refines its estimate of position and extent. When a large flat surface is in the scene, ARKit may continue changing the plane anchor’s position, extent, and transform after you’ve already used the plane to place content.</p>

<p><a id="markdown-limitations" name="limitations"></a></p>

<h3>Limitations</h3>

<ol>
<li>For a moving object, ARKit can not give an usable world position of it.</li>
<li>You can not put a virtual object behind a real object. This leads to some problems, like:

<ol>
<li>When an real object move in front of an virtual object, the virtual object will still be displayed in front of the real object.</li>
<li>You can not hold a virtual object coolly, as the virtual object you are trying to hold can not be behind your fingers.</li>
</ol>
</li>
</ol>


<p>Two thoughts that may be help on the second limitation:</p>

<ul>
<li>Segment the camera image based on the feature point with world position. Draw further real object, and then virtual object, and at last, the nearest real object. However, as the feature point is sparse (performance consideration), some edge detection algorithms are needed for accurate edges of objects.</li>
<li>Based on the dual camera, we can get depth of each pixel of the camera image. This will help on image segmentation.</li>
</ul>


<p><a id="markdown-ar-from-google" name="ar-from-google"></a></p>

<h2>AR from Google</h2>

<p><a href="https://developers.google.com/tango/?hl=zh-cn">Tango</a> is a platform that uses computer vision to give devices the ability to understand their position relative to the world around them. But Tango requires very special hardware to run on. So <a href="https://developers.google.com/ar/">ARCore</a> comes.</p>

<blockquote><p>The Tango project will be deprecated on March 1st, 2018. Google is continuing AR development with ARCore, a new platform designed for building augmented reality apps for a broad range of devices without the requirement for specialized hardware.</p></blockquote>

<p>ARCore is a platform for building augmented reality apps on Android. ARCore is designed to work on a wide variety of qualified Android phones running N and later. During the developer <strong>preview</strong>, ARCore supports the following devices:</p>

<ul>
<li>Google Pixel, Pixel XL, Pixel 2, Pixel 2 XL</li>
<li>Samsung Galaxy S8 (SM-G950U, SM-G950N, SM-G950F, SM-G950FD, SM-G950W, SM-G950U1)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some tips on markdown usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage/"/>
    <updated>2017-11-21T10:13:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage</id>
    <content type="html"><![CDATA[<p>Collect some markdown usage tips.</p>

<!-- more -->


<h2>insert an image</h2>

<p>To insert the image, just use the path under the base url, for me, it is <em>/GitBlogs/images/<image_name>.png</em>, for example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png)</span></code></pre></td></tr></table></div></figure>


<p>To define the size of the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png =200x300)</span></code></pre></td></tr></table></div></figure>


<p>Or you can omit the <code>height</code> of the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png =200x)</span></code></pre></td></tr></table></div></figure>


<p>If the aspect ratio you define is not consistent with the original image, the height will be omitted automatically. That is to say, just define the <code>width</code> you want, and the system will calculate the <code>height</code> for it.</p>

<h2>show content while click</h2>

<p>Using the following block of code for hiding some content and show the content while click.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;details&gt;</span>
</span><span class='line'>  <span class="nt">&lt;summary&gt;</span>Q1: What is the best Language in the World? <span class="nt">&lt;/summary&gt;</span>
</span><span class='line'>   A1: Swift
</span><span class='line'><span class="nt">&lt;/details&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will get:</p>

<p><details>
  <summary><em>Question: What is the best Language in the World?</em></summary>
   Answer: Swift
</details></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的Error]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift/"/>
    <updated>2017-10-20T16:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC depthFrom:1 depthTo:3 insertAnchor:true -->


<ul>
<li><a href="#swift-error%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">Swift Error基本使用</a>

<ul>
<li><a href="#throws-in-swift-1x"><code>throws</code> in Swift 1.x</a></li>
<li><a href="#throws-in-swift-2"><code>throws</code> in Swift 2</a></li>
<li><a href="#throws%E7%9A%84%E4%BD%BF%E7%94%A8"><code>throws</code>的使用</a></li>
<li><a href="#throws%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86"><code>throws</code>抛出错误的处理</a></li>
</ul>
</li>
<li><a href="#throws%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5"><code>throws</code>的一些实践</a>

<ul>
<li><a href="#throws%E7%9A%84%E8%B0%83%E8%AF%95%E5%92%8C%E6%96%AD%E7%82%B9"><code>throws</code>的调试和断点</a></li>
<li><a href="#throws%E4%BB%8D%E7%84%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"><code>throws</code>仍然存在的问题</a></li>
</ul>
</li>
<li><a href="#swift-%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A7%8D%E7%B1%BB">Swift 错误类型的种类</a>

<ul>
<li><a href="#simple-domain-error">Simple domain error</a></li>
<li><a href="#recoverable-error">Recoverable error</a></li>
<li><a href="#universal-error">Universal error</a></li>
<li><a href="#logic-failure">Logic failure</a></li>
</ul>
</li>
<li><a href="#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">几种常见场景下的错误处理</a>

<ul>
<li><a href="#app%E5%86%85%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD">app内资源加载</a></li>
<li><a href="#%E5%8A%A0%E8%BD%BD%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%97%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF">加载当前用户信息时发生错误</a></li>
<li><a href="#%E8%BF%98%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81">还没有实现的代码</a></li>
<li><a href="#%E8%B0%83%E7%94%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84%E4%BC%A0%E6%84%9F%E5%99%A8%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE">调用设备上的传感器收集数据</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
<li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95">错误处理相关的辅助方法</a>

<ul>
<li><a href="#use-custom-errors">Use Custom Errors</a></li>
<li><a href="#do-cleanup-work-using-defer">Do Cleanup Work Using <code>defer</code></a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-swift-error基本使用" name="swift-error基本使用"></a></p>

<h2>Swift Error基本使用</h2>

<p><a id="markdown-throws-in-swift-1x" name="throws-in-swift-1x"></a></p>

<h3><code>throws</code> in Swift 1.x</h3>

<p>在Objective-C中，<code>FileManager</code>的copy接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">copyItemAtPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">srcPath</span> <span class="nf">toPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dstPath</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用该方法时，写法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">fileManager</span> <span class="nl">copyItemAtPath</span><span class="p">:</span><span class="n">srcPath</span> <span class="nl">toPath</span><span class="p">:</span><span class="n">toPath</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Swift 1.x中，与Objective-C类似。方法接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">_</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，因为这个 API 仅会在极其特定的条件下 (比如磁盘空间不足) 会出错，所以开发者为了方便，有时会直接传入 nil 来忽视掉这个错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 不关心是否发生错误</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-throws-in-swift-2" name="throws-in-swift-2"></a></p>

<h3><code>throws</code> in Swift 2</h3>

<p>这种做法无形中降低了应用的可靠性以及从错误中恢复的能力。为了解决这个问题，Swift 2 中在编译器层级就对<code>throws</code>进行了限定。上面提到的copy接口在Swift 2中的形式为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItem</span><span class="p">(</span><span class="n">atPath</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>被标记为<code>throws</code>的API，必须被处理，否则编译器就会报错。这就在编译器层面对错误的处理进行了强制执行，保证了代码的可靠性。</p>

<p><a id="markdown-throws的使用" name="throws的使用"></a></p>

<h3><code>throws</code>的使用</h3>

<p>下面是包含<code>throws</code>的一个自动售货机实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">VendingMachineError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidSelection</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">outOfStock</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Item</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">price</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">VendingMachine</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">inventory</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;Candy Bar&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Chips&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">4</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Pretzels&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">11</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vend(itemNamed:)</code>方法的实现通过<code>guard</code>抛出购买过程中相应的错误。</p>

<p><a id="markdown-throws抛出错误的处理" name="throws抛出错误的处理"></a></p>

<h3><code>throws</code>抛出错误的处理</h3>

<p>被标记为<code>throws</code>的API，我们必须采用下面几种处理方式中的一种来处理，否则，编译器会报错。</p>

<h4><code>do catch</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">vendingMachine</span> <span class="o">=</span> <span class="n">VendingMachine</span><span class="p">()</span>
</span><span class='line'><span class="n">vendingMachine</span><span class="p">.</span><span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">vendingMachine</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Invalid Selection.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Out of Stock.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="k">let</span> <span class="n">coinsNeeded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Insufficient funds. Please insert an additional \(coinsNeeded) coins.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try?</code></h4>

<p>使用<code>try?</code>来处理错误，将其返回值变为Optional：如果在执行过程中出现错误，接口返回<code>nil</code>，同时错误停止继续传播。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">fetchDataFromDisk</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromDisk</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try!</code></h4>

<p>如果你非常确信一个被标记为<code>throws</code>的接口，在你的环境中不会抛出错误，可以通过<code>try!</code>来强制终止错误的继续传播。如果在执行的时候出现了错误，那么抛出运行时错误，导致程序崩溃。</p>

<p>比如，<code>loadImage(atPath:)</code>方法加载指定目录下面的一张图片到内存中，如果加载异常，会抛出错误。在下面的使用中，我们希望加载一张应用中包含的图片，这种情况下，可以通过<code>try!</code>来终止错误的继续传播。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">photo</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">loadImage</span><span class="p">(</span><span class="nl">atPath</span><span class="p">:</span> <span class="s">&quot;./Resources/John Appleseed.jpg&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try</code></h4>

<p>也可以直接使用<code>try</code>来调用被标记为<code>throws</code>的接口，但是这种情况下，错误会继续传播，包含该调用的方法也必须被标记为<code>throws</code>才行，否则，编译器会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">favoriteSnacks</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;Alice&quot;</span><span class="o">:</span> <span class="s">&quot;Chips&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Bob&quot;</span><span class="o">:</span> <span class="s">&quot;Licorice&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Eve&quot;</span><span class="o">:</span> <span class="s">&quot;Pretzels&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="k">func</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">VendingMachine</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，因为<code>buyFavoriteSnack(person: vendingMachine:)</code>使用<code>try</code>调用了一个被标记为throws的接口<code>vend(itemNamed:)</code>，错误会继续传播，因此，该方法也需要标记为thorws。</p>

<p><a id="markdown-throws的一些实践" name="throws的一些实践"></a></p>

<h2><code>throws</code>的一些实践</h2>

<p><a id="markdown-throws的调试和断点" name="throws的调试和断点"></a></p>

<h3><code>throws</code>的调试和断点</h3>

<p>Swift的错误抛出并不是传统意义的exception，在调试时抛出错误并不会触发Exception断点。另外，throw本身是语言的关键字，而不是一个symbol，它也不能触发Symbolic类型的断点。如果我们希望在所有throw语句执行的时候让程序停住的话，需要一些额外的技巧。在之前 throw 的汇编实现中，可以看到所有throw语句在返回前都会进行一次<code>swift_willThrow</code>的调用，这就是一个有效的 Symbolic语句，我们设置一个<code>swift_willThrow</code>的Symbolic断点，就可以让程序在throw的时候停住，并使用调用栈信息来获知程序在哪里抛出了错误。</p>

<p>补充，在最新版本的Xcode中，Apple直接为我们在断点类型中加上了 “Swift Error Breakpoint”的选项，它背后做的就是在<code>swift_willThrow</code>上添加一个断点。不过因为有了更直接的方法，我们现在不再需要手动去添加这个符号断点了。我们可以通过设置“Swift Error Breakpoint”对throws进行断点设置和调试。设置方法如下：</p>

<p><img src="http://hongchaozhang.github.io/images/Swift-Error-Breakpoint.png" alt="swift error breakpoint" /></p>

<p><a id="markdown-throws仍然存在的问题" name="throws仍然存在的问题"></a></p>

<h3><code>throws</code>仍然存在的问题</h3>

<p>不能从接口直接看出有哪些可能抛出的Error，必须看Document才行，带来了一些不便。比如，只通过接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们没有办法知道这个接口可能返回哪些错误。此时，要么阅读文档，获得确切的抛出错误，分别进行处理；或者将所有的错误统一处理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 错误抛出</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-swift-错误类型的种类" name="swift-错误类型的种类"></a></p>

<h2>Swift 错误类型的种类</h2>

<p>参考Swift官方文档<a href="https://github.com/apple/swift/blob/master/docs/ErrorHandling.rst">Error Handling in Swift<!-- 2.0--></a>，Swift中的错误有下面四种：</p>

<ol>
<li>Simple domain error</li>
<li>Recoverable error</li>
<li>Universal error</li>
<li>Logic failure</li>
</ol>


<p><a id="markdown-simple-domain-error" name="simple-domain-error"></a></p>

<h3>Simple domain error</h3>

<p>简单的，显而易见的错误。这类错误的最大特点是我们不需要知道原因，只需要知道错误发生，并且想要进行处理。用来表示这种错误发生的方法一般就是返回一个<code>nil</code>值。在Swift中，这类错误最常见的情况就是将某个字符串转换为整数，或者在字典尝试用某个不存在的 key 获取元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Simple Domain Error 的例子</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span> <span class="c1">// nil</span>
</span><span class='line'><span class="k">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;key_not_exist&quot;</span><span class="p">]</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>可能出现这种错误的接口，不需要使用<code>throws</code>来标记，只需要将接口的返回类型设置为Optional即可。</strong>在使用层面 (或者说应用逻辑) 上，这类错误一般用<code>if let</code>的可选值绑定或者是<code>guard let</code>提前进行返回处理即可。</p>

<p><a id="markdown-recoverable-error" name="recoverable-error"></a></p>

<h3>Recoverable error</h3>

<p>正如其名，这类错误应该是被容许，并且是可以恢复的。可恢复错误的发生是正常的程序路径之一，而作为开发者，我们应当去检出这类错误发生的情况，并进一步对它们进行处理，让它们恢复到我们期望的程序路径上。</p>

<p><strong>这类错误在Objective-C的时代通常用NSError类型来表示，而在Swift里则是通过throws来实现。</strong>一般我们需要检查错误的类型，并作出合理的响应。而选择忽视这类错误往往是不明智的，因为它们是用户正常使用过程中可能会出现的情况，我们应该尝试对其恢复，或者至少向用户给出合理的提示，让他们知道发生了什么。像是网络请求超时，或者写入文件时磁盘空间不足：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 网络请求</span>
</span><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;https://www.example.com/&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 提示用户</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 写入文件</span>
</span><span class='line'><span class="k">func</span> <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">to</span> <span class="nl">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">data</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="kt">as</span> <span class="bp">NSError</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span><span class="p">.</span><span class="n">code</span> <span class="o">==</span> <span class="n">NSFileWriteOutOfSpaceError</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 尝试通过释放空间自动恢复</span>
</span><span class='line'>            <span class="n">removeUnusedFiles</span><span class="p">()</span>
</span><span class='line'>            <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 其他错误，提示用户</span>
</span><span class='line'>            <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-universal-error" name="universal-error"></a></p>

<h3>Universal error</h3>

<p>这类错误理论上可以恢复，但是由于语言本身的特性所决定，我们难以得知这类错误的来源，所以一般来说也不会去处理这种错误。这类错误包括类似下面这些情形：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 内存不足</span>
</span><span class='line'><span class="p">[</span><span class="n">Int</span><span class="p">](</span><span class="nl">repeating</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用栈溢出</span>
</span><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span> <span class="n">foo</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="n">foo</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过设计一些手段来对这些错误进行处理，比如：检测当前的内存占用并在超过一定值后警告，或者监视栈frame数进行限制等。但是一般来说这是不必要的，也不可能涵盖全部的错误情况。更多情况下，这是由于代码触碰到了设备的物理限制和边界情况所造成的，一般我们也不去进行处理（除非是人为造成的bug）。</p>

<p>在 Swift 中，各种被使用<code>fatalError</code>进行强制终止的错误一般都可以归类到 Universal error。</p>

<p><a id="markdown-logic-failure" name="logic-failure"></a></p>

<h3>Logic failure</h3>

<p>逻辑错误是程序员的失误所造成的错误，它们应该在开发时通过代码进行修正并完全避免，而不是等到运行时再进行恢复和处理。</p>

<p>常见的 Logic failure 包括有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 强制解包一个 `nil` 可选值</span>
</span><span class='line'><span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">name</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 数组越界访问</span>
</span><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 计算溢出</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Int</span><span class="p">.</span><span class="n">max</span>
</span><span class='line'><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 强制 try 但是出现错误</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">JSONDecoder</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="n">Foo</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="n">Data</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类错误在实现中触发的一般是<code>assert</code>或者<code>precondition</code>。</p>

<p>和<code>fatalError</code>不同，<code>assert</code>只在进行编译优化的<code>-O</code>配置下是不触发的，而如果更进一步，将编译优化选项配置为<code>-Ounchecked</code>的话，<code>precondition</code>也将不触发。此时，各方法中的<code>precondition</code>将被跳过，因此我们可以得到最快的运行速度。但是相对地代码的安全性也将降低，因为对于越界访问或者计算溢出等错误，我们得到的将是不确定的行为。</p>

<table>
<thead>
<tr>
<th>函数 </th>
<th> fatalError </th>
<th> precondition </th>
<th> assert</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Onone </td>
<td> 触发 </td>
<td> 触发 </td>
<td> 触发</td>
</tr>
<tr>
<td>-O </td>
<td> 触发 </td>
<td> 触发 </td>
<td> -</td>
</tr>
<tr>
<td>-Ounchecked </td>
<td> 触发 </td>
<td> - </td>
<td> -</td>
</tr>
</tbody>
</table>


<p>对于Universal error一般使用<code>fatalError</code>，而对于<code>Logic failure</code>一般使用<code>assert</code>或者<code>precondition</code>。遵守这个规则会有助于我们在编码时对错误进行界定。而有时候我们也希望能尽可能多地在开发的时候捕获Logic failure，而在产品发布后尽量减少crash比例。这种情况下，相比于直接将Logic failure转换为可恢复的错误，我们最好是使用<code>assert</code>在内部进行检查，来让程序在开发时崩溃。</p>

<p><a id="markdown-几种常见场景下的错误处理" name="几种常见场景下的错误处理"></a></p>

<h2>几种常见场景下的错误处理</h2>

<p>光说不练假把式。让我们来实际判断一下下面这些情况下我们都应该选择用哪种错误处理方式吧~</p>

<p><a id="markdown-app内资源加载" name="app内资源加载"></a></p>

<h3>app内资源加载</h3>

<p>假设我们在处理一个机器学习的模型，需要从磁盘读取一份预先训练好的模型。该模型以文件的方式存储在 app bundle 中，如果读取时没有找到该模型，我们应该如何处理这个错误？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">AppError</span><span class="p">.</span><span class="n">FileNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model file not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model corrupted.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案应该是方案 4，使用Logic failure让代码直接崩溃。</p>

<p>作为内建的存在于app bundle中模型或者配置文件，如果不存在或者无法初始化，在不考虑极端因素的前提下，一定是开发方面出现了问题，这不应该是一个可恢复的错误，无论重试多少次结果肯定是一样的。也许是开发者忘了将文件放到合适的位置，也许是文件本身出现了问题。不论是哪种情况，我们都会希望尽早发现并强制我们修正错误，而让代码崩溃可以很好地做到这一点。</p>

<p>使用Universal error同样可以让代码崩溃，但是Universal error更多是用在语言的边界情况下。而这里并非这种情况。
</details></p>

<p><a id="markdown-加载当前用户信息时发生错误" name="加载当前用户信息时发生错误"></a></p>

<h3>加载当前用户信息时发生错误</h3>

<p>我们在用户登录后会将用户信息存储在本地，每次重新打开app时我们检测并使用用户信息。当用户信息不存在时，应该进行的处理：</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">AppError</span><span class="p">.</span><span class="n">UsernameNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;User name not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>首先肯定排除方案3和4。“用户名不存在”是一个正常的现象，肯定不能直接crash。所以我们应该在方案1和方案2中选择。</p>

<p>对于这种情况，选择方案1 Simple domain error会更好。因为用户信息不存在是很简单的一个状况，如果用户不存在，那么我们直接让用户登录即可，这并不需要知道额外的错误信息，返回<code>nil</code>就能够很好地表达意图了。</p>

<p>当然，我们不排除今后随着情况越来越复杂，会需要区分用户信息缺失的原因 (比如是否是新用户还没有注册，还是由于原用户注销等)。但是在当前的情况下来看，这属于过度设计，暂时并不需要考虑。如果之后业务复杂到这个程度，在编译器的帮助下将Simple domain error修改为Recoverable error也不是什么难事儿。
</details></p>

<p><a id="markdown-还没有实现的代码" name="还没有实现的代码"></a></p>

<h3>还没有实现的代码</h3>

<p>假设你在为你的服务开发一个iOS框架，但是由于工期有限，有一些功能只定义了接口，没有进行具体实现。这些接口会在正式版中完成，但是我们需要预先发布给友商内测。所以除了在文档中明确标明这些内容，这些方法内部应该如何处理呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FrameworkError</span><span class="p">.</span><span class="n">NotImplemented</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assertionFailure</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案是方案3 Universal error。对于没有实现的方法，返回<code>nil</code>或者抛出错误期待用户恢复都是没有道理的，这会进一步增加框架用户的迷惑。这里的问题是语言层面的边界情况，由于没有实现，我们需要给出强力的提醒。在任意build设定下，都不应该期待用户可以成功调用这个函数，所以<code>fatalError</code>是最佳选择。</p>

<p>其实在swift继承的时候，编译器会给我们添加一个默认的未实现的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></details></p>

<p><a id="markdown-调用设备上的传感器收集数据" name="调用设备上的传感器收集数据"></a></p>

<h3>调用设备上的传感器收集数据</h3>

<p>调用传感器的app最有意思了！不管是相机还是陀螺仪，传感器相关的app总是能带给我们很多乐趣。那么，如果想要调用传感器获取数据时，发生了错误，应该怎么办呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">SensorError</span><span class="p">.</span><span class="n">stateError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Sensor get data failed!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="s">&quot;The sensor state is not normal&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>传感器由于种种原因暂时不能使用 (比如正在被其他进程占用，或者甚至设备上不存在对应的传感器)，是很有可能发生的情况。即使这个传感器的数据对应用是至关重要，不可或缺的，我们可能也会希望至少能给用户一些提示。基于这种考虑，使用方案2 Recoverable error是比较合理的选择。</p>

<p>方案1在传感器数据无关紧要的时候可能也会是一个更简单的选项。但是方案3和4会直接让程序崩溃，而且这实际上也并不是代码边界或者开发者的错误，所以不应该被考虑。
</details></p>

<p><a id="markdown-总结" name="总结"></a></p>

<h3>总结</h3>

<p>可以看到，其实在错误处理的时候，选用哪种错误是根据情景和处理需求而定的，我在参考答案也使用了很多诸如“可能”，“相较而言”等语句。虽然对于特定的场景，我们可以进行直观的考虑和决策，但这并不是教条主义般的一成不变。错误类型之间可以很容易地通过代码互相转换，这让我们在处理错误的时候可以自由选择使用的策略：比如API即使提供给我们的是Recoverable的throws形式，我们也还是可以按照需要，通过<code>try?</code>将其转为Simple domain error，或者用<code>try!</code>将其转为Logic failure。</p>

<p>能切实理解使用情景，利用这些错误类型转换的方式，灵活选取使用场景下最合适的错误类型，才能说是真正理解了这四种错误的分类依据。</p>

<p><a id="markdown-错误处理相关的辅助方法" name="错误处理相关的辅助方法"></a></p>

<h2>错误处理相关的辅助方法</h2>

<p>For custom errors in swift, refer to <a href="https://developer.apple.com/documentation/swift/error">Error</a> official document.</p>

<p><a id="markdown-use-custom-errors" name="use-custom-errors"></a></p>

<h3>Use Custom Errors</h3>

<h4>Using Enumerations as Errors</h4>

<p>Swift’s enumerations are well suited to represent simple errors. Create an enumeration that conforms to the Error protocol with a case for each possible error. If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</p>

<p>The following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">IntParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">overflow</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidInput</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Including More Data in Errors</h4>

<p>The following XMLParsingError conforms to Error and supply line and column position of the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">XMLParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">ErrorKind</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">invalidCharacter</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">mismatchedTag</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">internalError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">line</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">column</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">kind</span><span class="p">:</span> <span class="n">ErrorKind</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">parse</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">XMLDoc</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">XMLParsingError</span><span class="p">(</span><span class="nl">line</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="nl">column</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nl">kind</span><span class="p">:</span> <span class="p">.</span><span class="n">mismatchedTag</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s how you can catch any XMLParsingError errors thrown by the parse(_:) function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">xmlDoc</span> <span class="o">=</span> <span class="n">try</span> <span class="n">parse</span><span class="p">(</span><span class="n">myXMLData</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">e</span> <span class="kt">as</span> <span class="n">XMLParsingError</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Parsing error: \(e.kind) [\(e.line):\(e.column)]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Other error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &quot;Parsing error: mismatchedTag [19:5]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-do-cleanup-work-using-defer" name="do-cleanup-work-using-defer"></a></p>

<h3>Do Cleanup Work Using <code>defer</code></h3>

<p>You use a <code>defer</code> statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as <code>return</code> or <code>break</code>. For example, you can use a <code>defer</code> statement to ensure that file descriptors are closed and manually allocated memory is freed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">processFile</span><span class="p">(</span><span class="nl">filename</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="k">let</span> <span class="n">line</span> <span class="o">=</span> <span class="n">try</span> <span class="n">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Work with the file.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// close(file) is called here, at the end of the scope.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do some clean work</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example uses a <code>defer</code> statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="https://onevcat.com/2017/10/swift-error-category/">关于 Swift Error 的分类</a></li>
<li><a href="https://onevcat.com/2016/03/swift-throws/">Swift 2 throws 全解析 - 从原理到实践</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508">Error Handling Official Site</a></li>
<li><a href="https://developer.apple.com/documentation/swift/error">Error from Apple Document</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码查重工具]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code/"/>
    <updated>2017-05-08T17:52:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>代码查重现状</h2>

<p>很多IDE里面都有自己的代码查重工具，比如WebStorm的代码查重工具做的非常好用。但是Xcode里面至今没有自己的代码查重工具。这里调研了一些常见的代码查重工具，最后选择<del>PMD里面的CPD</del>jscpd，并将其集成到Xcode中，重复代码会以warning的形式出现在Xcode里面，方便查看。</p>

<p>一些IDE调研结果：</p>

<table>
<thead>
<tr>
<th>IDE </th>
<th> Build-in Tool </th>
<th> Extension</th>
</tr>
</thead>
<tbody>
<tr>
<td>Xcode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>AppCode </td>
<td> No </td>
<td> No</td>
</tr>
<tr>
<td>Android Studio </td>
<td> Yes (Find and Replace Code Duplications&hellip;) </td>
<td> &ndash;</td>
</tr>
<tr>
<td>WebStorm </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
<tr>
<td>VSCode </td>
<td> No </td>
<td> Copy/Paste Detector extension, based on jscpd</td>
</tr>
<tr>
<td>Visual Studio </td>
<td> Yes </td>
<td> &ndash;</td>
</tr>
</tbody>
</table>


<p>一些查重工具调研结果：</p>

<table>
<thead>
<tr>
<th>Tool </th>
<th> Swift Support </th>
<th> Objc Support </th>
<th> configuration file </th>
<th> Xocde Integration </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/cyupa/JenkinsCI-iOS">JenkinsCI-iOS</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> &ndash; </td>
<td> &ndash; </td>
<td> A Jenkins job setup for your XCode project. The CPD in PMD is the core of JenkinsCI-iOS.</td>
</tr>
<tr>
<td>CPD in <a href="https://pmd.github.io/">PMD</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> No </td>
<td> Yes </td>
<td> 对于其他语言，pmd都包含代码静态分析工具，但是对于Swift，只有一个代码查重工具CPD（Copy Paste Detector）。因此，如果想对Swift代码进行静态分析，可以选择SwiftLint。</td>
</tr>
<tr>
<td><a href="https://github.com/kucherenko/jscpd">jscpd</a> </td>
<td> Yes </td>
<td> Yes </td>
<td> Yes (yaml) </td>
<td> Yes </td>
<td> 支持swift、objective-c以及其它一些语言。</td>
</tr>
</tbody>
</table>


<h2>一些不容易写到表格中的信息</h2>

<h3>PMD</h3>

<p><a href="https://pmd.github.io/">PMD</a></p>

<h4>Supported IDEs</h4>

<ul>
<li>Maven PMD plugin</li>
<li>Gradle: The PMD Plugin</li>
<li>Eclipse plugin</li>
<li>NetBeans plugin</li>
<li>JBuilder plugin</li>
<li>JDeveloper plugin</li>
<li>IntelliJ IDEA plugin</li>
</ul>


<p>没有Xcode的插件，但是可以通过在Build Phase里面加入Run Script来使用。</p>

<h4>CPD has GUI</h4>

<p>On Mac, display the GUI by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./run.sh cpdgui</span></code></pre></td></tr></table></div></figure>


<p>The screen shot is like:</p>

<p><img src="http://hongchaozhang.github.io/images/screenshot_cpd.png" alt="screenshot_cpd" /></p>

<h4>将CPD集成到XCode里面</h4>

<p><a href="https://medium.com/@nvashanin/%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B8%D1%80%D1%83%D0%B5%D0%BC-copy-paste-detector-%D0%B4%D0%BB%D1%8F-swift-%D0%B2-xcode-9ae87c20748">Integrating Copy-Paste-Detector for Swift in Xcode</a>: This is a newer post on April 2017 and gives a detailed step by step way for integrating CPD into Xcode:</p>

<ul>
<li>Add run script into Build Phase.</li>
<li>Xcode warnings will appear at the place of duplicated code.</li>
</ul>


<p>Refer to <a href="../../../../2018/08/02/integrate-copy-and-paste-detector-into-xcode/">将代码查重工具CPD集成到Xcode</a> for details.</p>

<p><a href="https://habrahabr.ru/post/137875/"><del>Интегрируем Copy-Paste-Detection в Xcode, и не только</del></a>: Integrate CPD into XCode, but this post is a little older on 2012.</p>

<h3>NiCad4 Clone Detector</h3>

<p><a href="http://www.txl.ca/nicaddownload.html">NiCad4 Clone Detector</a></p>

<p>NiCad handles a range of languages, including C, Java, Python, and C#, and provides a range of normalizations, filters and abstractions.</p>

<h3>Visual Studio</h3>

<p>Visual Studio Enterprise有自己的code clone analysis，see <a href="https://msdn.microsoft.com/en-us/library/hh205279.aspx">Finding Duplicate Code by using Code Clone Detection</a>。copy一段code，然后改了某个变量名称，仍然可以被检测出重复。</p>

<p>The following modifications can be made, and the clone will still be recognized. In each case, there is a tolerance of a specific number of such modifications:</p>

<pre><code>* Rename identifiers.
* Insert and delete statements.
* Rearrange statements.
</code></pre>

<h3>Simian - Similarity Analyser</h3>

<p><a href="http://www.harukizaemon.com/simian/">Simian - Similarity Analyser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《哲学家们都干了些什么？》读后小结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/04/05/what-are-philosophers-doing/"/>
    <updated>2017-04-05T13:18:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/04/05/what-are-philosophers-doing</id>
    <content type="html"><![CDATA[<p>继续采用《苏菲的世界》读后小结的方式，摘抄一些观点，记录一下自己的想法。</p>

<!-- more -->




<!-- TOC -->


<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%8A%E7%AF%87%E7%90%86%E6%80%A7%E7%9A%84%E5%B4%9B%E8%B5%B7">上篇：理性的崛起</a>

<ul>
<li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%93%B2%E5%AD%A6%E5%A5%BD%E8%AE%A8%E5%8E%8C">第一章 哲学好讨厌</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%B0%91%E5%B9%B4%E5%9B%BD%E7%8E%8B">第二章 少年国王</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E4%BD%BF%E5%BE%92%E8%A1%8C%E4%BC%A0">第三章 使徒行传</a>

<ul>
<li><a href="#%E4%BF%9D%E7%BD%97">保罗</a></li>
<li><a href="#%E5%A5%A5%E5%8F%A4%E6%96%AF%E4%B8%81">奥古斯丁</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%8A%E5%B8%9D%E4%B9%8B%E5%9F%8E">第四章 上帝之城</a></li>
<li><a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%BC%82%E6%95%99%E5%BE%92">第五章 异教徒</a></li>
<li><a href="#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E7%A5%9E%E4%BB%AC%E8%87%AA%E5%B7%B1">第六章 神们自己</a></li>
<li><a href="#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%BE%A4%E9%AD%94">第七章 群魔</a></li>
<li><a href="#%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%BC%82%E7%AB%AF%E7%9A%84%E6%9D%83%E5%88%A9">第八章 异端的权利</a></li>
<li><a href="#%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E5%A5%87%E6%80%AA%E7%9A%84%E8%AE%BA%E8%B0%83">第九章 奇怪的论调</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E7%AB%A0-%E7%AB%A5%E5%B9%B4%E7%9A%84%E7%BB%88%E7%BB%93">第十章 童年的终结</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-%E7%90%86%E6%80%A7%E4%B8%BB%E4%B9%89">第十一章 理性主义</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-%E5%BD%A2%E8%80%8C%E4%B8%8A%E5%AD%A6">第十二章 形而上学</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-%E4%BA%8C%E5%85%83%E8%AE%BA">第十三章 二元论</a>

<ul>
<li><a href="#%E4%BA%8C%E5%85%83%E8%AE%BA%E5%92%8C%E5%94%AF%E7%89%A9%E4%B8%BB%E4%B9%89%E5%94%AF%E5%BF%83%E4%B8%BB%E4%B9%89%E7%9A%84%E5%85%B3%E7%B3%BB">二元论和唯物主义唯心主义的关系</a></li>
<li><a href="#%E4%BA%8C%E5%85%83%E8%AE%BA%E4%B8%8E%E6%88%91%E4%BB%AC%E7%9A%84%E5%B9%B8%E7%A6%8F%E7%94%9F%E6%B4%BB">二元论与我们的幸福生活</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0-%E5%94%AF%E6%88%91%E8%AE%BA">第十四章 唯我论</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E5%AF%92%E5%86%AC%E5%A4%9C%E8%A1%8C%E4%BA%BA">第十五章 寒冬夜行人</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0-%E5%8F%8C%E6%98%9F">第十六章 双星</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0-%E5%90%8D%E5%88%A9%E5%9C%BA">第十七章 名利场</a>

<ul>
<li><a href="#%E8%8B%B1%E5%9B%BD%E8%B7%9F%E6%AC%A7%E6%B4%B2%E5%A4%A7%E9%99%86%E5%AF%B9%E7%9D%80%E5%B9%B2%E7%9A%84%E5%8E%86%E5%8F%B2">英国跟欧洲大陆“对着干”的历史</a></li>
<li><a href="#%E7%BB%8F%E9%AA%8C%E4%B8%BB%E4%B9%89%E5%92%8C%E7%90%86%E6%80%A7%E4%B8%BB%E4%B9%89%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%A4%E6%88%98%E6%B4%9B%E5%85%8Bvs%E8%8E%B1%E5%B8%83%E5%B0%BC%E8%8C%A8">经验主义和理性主义的第一次交战：洛克vs莱布尼茨</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0-%E5%B7%A8%E5%8C%A0%E4%B8%8E%E6%9D%B0%E4%BD%9C">第十八章 巨匠与杰作</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0-%E6%9C%BA%E6%A2%B0%E8%AE%BA">第十九章 机械论</a>

<ul>
<li><a href="#%E7%89%9B%E9%A1%BF%E5%8A%9B%E5%AD%A6%E4%BD%93%E7%B3%BB">牛顿力学体系</a></li>
<li><a href="#%E6%9C%BA%E6%A2%B0%E8%AE%BA">机械论</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0-%E5%86%B3%E5%AE%9A%E8%AE%BA">第二十章 决定论</a>

<ul>
<li><a href="#%E9%83%A8%E5%88%86%E5%86%B3%E5%AE%9A%E8%AE%BA">部分决定论</a></li>
<li><a href="#%E5%86%B3%E5%AE%9A%E8%AE%BA%E4%B8%8E%E8%87%AA%E6%88%91%E5%AE%89%E6%85%B0">决定论与自我安慰</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0-%E6%9A%B4%E9%A3%8E%E9%9B%A8">第二十一章 暴风雨</a>

<ul>
<li><a href="#%E7%BB%9F%E4%B8%80%E7%BB%8F%E9%AA%8C%E4%B8%BB%E4%B9%89%E5%92%8C%E7%90%86%E6%80%A7%E4%B8%BB%E4%B9%89">统一经验主义和理性主义</a></li>
<li><a href="#%E5%9B%A0%E6%9E%9C%E5%BE%8B%E6%98%AF%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84">因果律是不存在的。</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%AB%A0-%E5%93%B2%E5%AD%A6%E6%80%AA%E5%85%BD">第二十二章 哲学怪兽</a>

<ul>
<li><a href="#%E5%93%B2%E5%AD%A6%E5%9B%B0%E5%A2%83">哲学困境</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E5%9B%A0%E6%9E%9C%E5%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E8%AE%A8%E8%AE%BA">关于因果律的一个有趣的讨论</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0-%E8%B0%8E%E8%A8%80%E7%9A%84%E8%A1%B0%E8%90%BD">第二十三章 谎言的衰落</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0-%E8%BF%9C%E7%A6%BB%E5%B0%98%E5%9A%A3">第二十四章 远离尘嚣</a>

<ul>
<li><a href="#%E4%B8%8D%E5%8F%AF%E7%9F%A5%E8%AE%BA">不可知论</a></li>
<li><a href="#%E5%9B%A0%E6%9E%9C%E5%BE%8B%E4%B8%8E%E8%87%AA%E7%94%B1%E6%84%8F%E5%BF%97">因果律与自由意志</a></li>
<li><a href="#%E5%BA%B7%E5%BE%B7%E5%93%B2%E5%AD%A6%E7%9A%84%E7%8E%B0%E5%AE%9E%E6%84%8F%E4%B9%89">康德哲学的现实意义</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AB%A0-%E7%8E%8B%E8%80%85%E4%B9%8B%E9%A3%8E">第二十五章 王者之风</a>

<ul>
<li><a href="#%E9%BB%91%E6%A0%BC%E5%B0%94%E7%9A%84%E8%BE%A9%E8%AF%81%E6%B3%95">黑格尔的辩证法</a>

<ul>
<li><a href="#%E7%9F%9B%E7%9B%BE%E5%BE%8B">矛盾律</a></li>
<li><a href="#%E7%BB%9D%E5%AF%B9%E7%B2%BE%E7%A5%9E">绝对精神</a></li>
</ul>
</li>
<li><a href="#%E9%BB%91%E6%A0%BC%E5%B0%94%E7%9A%84%E5%8E%86%E5%8F%B2%E8%A7%82">黑格尔的历史观</a></li>
<li><a href="#%E8%BE%A9%E8%AF%81%E6%B3%95%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BD%B1%E5%93%8D">辩证法对生活的影响</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%8B%E7%AF%87">下篇：</a>

<ul>
<li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%82%B2%E6%85%A2%E4%B8%8E%E5%81%8F%E8%A7%81">第一章 傲慢与偏见</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%82%B2%E8%A7%82%E4%B8%BB%E4%B9%89">第二章 悲观主义</a>

<ul>
<li><a href="#%E7%89%A9%E8%87%AA%E4%BD%93">物自体</a></li>
<li><a href="#%E7%94%9F%E5%91%BD%E6%84%8F%E5%BF%97">生命意志</a></li>
<li><a href="#%E6%82%B2%E8%A7%82%E4%B8%BB%E4%B9%89">悲观主义</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%90%86%E6%80%A7%E7%9A%84%E5%8D%B1%E6%9C%BA">第三章 理性的危机</a></li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%9E%A7%E8%BF%99%E4%B8%AA%E4%BA%BA">第四章 瞧！这个人</a></li>
<li><a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E9%92%A2%E9%93%81%E4%B9%8B%E8%BA%AF">第五章 钢铁之躯</a></li>
<li><a href="#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%A2%AB%E4%BE%AE%E8%BE%B1%E7%9A%84%E4%B8%8E%E8%A2%AB%E6%8D%9F%E5%AE%B3%E7%9A%84">第六章 被侮辱的与被损害的</a></li>
<li><a href="#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%A7%91%E5%AD%A6%E6%96%B0%E5%8F%91%E7%8E%B0%E7%90%86%E6%80%A7%E7%9A%84%E5%8F%8D%E5%87%BB">第七章 科学新发现：理性的反击</a></li>
<li><a href="#%E7%AC%AC%E5%85%AB%E7%AB%A0-%E4%BA%BA%E7%8C%BF%E6%98%9F%E7%90%83">第八章 人猿星球</a></li>
<li><a href="#%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E7%A7%91%E5%AD%A6%E5%80%92%E6%89%93%E4%B8%80%E8%80%99">第九章 科学倒打一耙</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E7%AB%A0-%E5%AF%BB%E6%AC%A2%E4%BD%9C%E4%B9%90">第十章 寻欢作乐</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-%E5%BF%AB%E4%B9%90%E7%8E%8B%E5%AD%90">第十一章 快乐王子</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-%E9%80%BB%E8%BE%91%E5%AE%9E%E8%AF%81%E4%B8%BB%E4%B9%89">第十二章 逻辑实证主义</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-%E5%AE%9E%E7%94%A8%E4%B8%BB%E4%B9%89">第十三章 实用主义</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0-%E7%BB%88%E7%BB%93%E5%BD%A2%E8%80%8C%E4%B8%8A%E5%AD%A6">第十四章 终结形而上学</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E5%AE%9E%E7%94%A8%E4%B8%BB%E4%B9%89%E7%9A%84%E7%A7%91%E5%AD%A6">第十五章 实用主义的科学</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0-%E7%A7%91%E5%AD%A6%E6%98%AF%E4%BB%80%E4%B9%88">第十六章 科学是什么</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0-%E6%B0%B8%E6%81%92%E7%9A%84%E7%BB%88%E7%BB%93">第十七章 永恒的终结</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0-%E5%AD%98%E5%9C%A8%E4%B8%8E%E8%99%9A%E6%97%A0">第十八章 存在与虚无</a></li>
<li><a href="#%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0-%E8%A5%BF%E8%A5%BF%E5%BC%97%E7%9A%84%E7%A5%9E%E8%AF%9D">第十九章 西西弗的神话</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0-%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89">第二十章 人生的意义</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E6%9D%9F">结束</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-前言" name="前言"></a></p>

<h1>前言</h1>

<p><a id="markdown-上篇理性的崛起" name="上篇理性的崛起"></a></p>

<h1>上篇：理性的崛起</h1>

<p><a id="markdown-第一章-哲学好讨厌" name="第一章-哲学好讨厌"></a></p>

<h2>第一章 哲学好讨厌</h2>

<p>苏格拉底身上有知识分子身上几乎所有的毛病：</p>

<ul>
<li>总说别人不乐意听的；</li>
<li>在辩论中总占理；</li>
<li>说的别人哑口无言，还在那里假谦虚；</li>
<li>一身硬骨头。</li>
</ul>


<p>所以，最后苏格拉底被民意投死啦。</p>

<p><a id="markdown-第二章-少年国王" name="第二章-少年国王"></a></p>

<h2>第二章 少年国王</h2>

<p>雅典哲学的命运与亚历山大紧密相连。</p>

<p>马其顿打败希腊，并最终建立了横跨亚欧非的亚历山大帝国。这与秦始皇统一中国非常相似：</p>

<blockquote><p>它们差不多处于同一个历史时期，都位于中心文明（希腊文明/中华文明）的西北角，都是多山地形，土地贫瘠，初期经济和文化都比较落后。但是军事都很发达。</p>

<p>因为文化落后，最早处于中心文明的国家都不愿意接纳它们，直到后来它们军事能力强大了，就以武力把其他国家都统一了，建立了庞大的帝国。</p>

<p>在完成统一大业之前，两个国家都奉行开明的文化政策。既然自己文化落后，那么就广开言路，把别的国家的人才都吸引过来。这边在秦朝的知识分子阵营里，商鞅和吕不韦是卫国人，张仪是魏国人，李斯是楚国人。那边的马其顿也是猛学雅典知识，甘当雅典的小学生。</p></blockquote>

<p>虽然马其顿和秦国有上面很多相似的地方，但是秦始皇和亚历山大还是有一个很大的区别：文化统一。</p>

<ul>
<li>秦始皇通过残酷的手段，统一了中国文化。虽然残暴（焚书坑儒），但是成功了。可以说，秦始皇的文化统一奠定了中国日后的统一局面。</li>
<li>亚历山大对希腊哲学则采取包容的态度，使得希腊哲学得以随着亚历山大的铁骑，传播到东欧、北非和中亚。正是因为亚历山大没有进行文化的统一，所以在他死之后，他的帝国很快就分裂了。取而代之的罗马帝国统一了大部分欧洲，但是也同样没有采取文化统一的措施，使得希腊哲学继续传播。罗马帝国对文化的包容，直接导致欧洲今天分裂为很多小国。</li>
</ul>


<p><a id="markdown-第三章-使徒行传" name="第三章-使徒行传"></a></p>

<h2>第三章 使徒行传</h2>

<p><a id="markdown-保罗" name="保罗"></a></p>

<h3>保罗</h3>

<p>保罗做的最重要的一件事，就是向犹太人以外的民族传播基督教。这是一项很了不起的工作。在保罗之前，基督教大体上只限于犹太人自己信仰。因了保罗的传教，才使得基督教后来成为世界性的大宗教。</p>

<p>而保罗突破重重阻碍传播基督教，所使用的武器就是希腊哲学。</p>

<blockquote><p>历史有一个规律，在斗争中，哲学总是站在弱者这一边。这是因为哲学讲思维，讲道理，而只有弱者才需要去讲理，强者是不需要讲理的。</p></blockquote>

<p>虽然哲学帮助基督教打下了天下，但是哲学和宗教的矛盾是绝对不可以调和的：<strong>宗教要求信仰，哲学要求怀疑</strong>。在宗教看来，思考本身就是不对的。这应该是宗教和哲学的本质区别。</p>

<blockquote><p>宗教说：“你只要相信我就行了，其它都不用考虑。”哲学却说：“我为什么要相信你？”</p></blockquote>

<p><a id="markdown-奥古斯丁" name="奥古斯丁"></a></p>

<h3>奥古斯丁</h3>

<p>奥古斯丁对基督教的贡献，就是解决了长久以来困扰基督教的一个逻辑漏洞：</p>

<ul>
<li>《圣经》上说上帝是全知全能全善的，但是为什么允许世间存在这么多丑恶和痛苦？</li>
</ul>


<p>奥古斯丁的解释是，关键在于<strong>自由</strong>。上帝给了亚当夏娃和人类自由意志，所以也必须让人类有作恶的可能。</p>

<p>更具体地说，上帝是善的，而上帝的善表现在上帝对人类的行为要进行公正的赏罚。既然要赏罚，前提是人类必须拥有自由意志，必须有能力自己选择行善还是作恶，否则人类就不应该对自己的行为负责。</p>

<p>这段论证对我们的意义是：首先，它十分巧妙，把一个看似自相矛盾的说法给解释开了；其次，这解释强调了自由的重要性。</p>

<p>但是只要一思考，这个解释同样会产生诸多问题，比如：</p>

<blockquote><p>因为上帝是万能的，所以有能力预测出人们按照自由意志在未来会作出的各种恶，但是有很多恶上帝都没有阻止。可是，上帝不是全能的吗？</p></blockquote>

<p>还是那句话：在宗教看来，思考本身就是不对的。就拿奥古斯丁本人来说：</p>

<blockquote><p>虽然他是虔诚的基督徒，但只要他一开始思考，就注定要和宗教权威发生冲突。奥古斯丁早年相信摩尼教，后来发现宗教文献中一些关于天文学的知识和当时的科学结论不符，他还被要求不许怀疑这些错误，只许强行接受。奥古斯丁因此对摩尼教产生了怀疑。罗素因此说，如果奥古斯丁生活在伽利略时代，也就是科学家们在用天文知识挑战基督教的时代，那他该怎么做呢？奥古斯丁这个基督教的圣人，会不会也像怀疑摩尼教那样怀疑基督教呢？</p></blockquote>

<p><a id="markdown-第四章-上帝之城" name="第四章-上帝之城"></a></p>

<h2>第四章 上帝之城</h2>

<p>随着基督教的兴盛，罗马帝国开始残酷镇压。</p>

<blockquote><p>有句话说“能用钱解决的问题都不是问题”，其实还有另外一句话“必须用暴力解决的问题都是解决不了的问题”。</p></blockquote>

<p>在君士坦丁当罗马皇帝的时候，由于在关键的一战中受到基督的启示，君士坦丁开始信仰基督。第二年，君士坦丁颁布了著名的《米兰赦令》，使得基督教徒得到了法律的保护，并且鼓励基督教的发展。</p>

<p>与此同时，其它思想都成了“异端”，其中除了一些宗教，当然也包括哲学。</p>

<p><a id="markdown-第五章-异教徒" name="第五章-异教徒"></a></p>

<h2>第五章 异教徒</h2>

<p>希腊哲学传播的曲折路径：</p>

<p>首先，是希腊哲学家被罗马基督徒驱逐，来到罗马东边境叙利亚一带。在这里，希腊著作从拉丁文被翻译成叙利亚文。</p>

<p>然后东边的波斯被阿拉伯灭了。阿拉伯迅速扩张，占领了埃及。</p>

<blockquote><p>此时有一个争议极大的传说，据说阿拉伯人占领亚历山大的时候，把亚历山大图书馆付之一炬，并且还说了一句很有名的话：<em>如果亚历山大图书馆里的藏书和《古兰经》一致，那就没有留下的必要。如果不一致，就更不应该留下。</em></p></blockquote>

<p>阿拉伯对异教文化史非常包容的，它们组织了一个“百年翻译运动”，把希腊著作从叙利亚文翻译成了阿拉伯文。</p>

<p>然后希腊哲学到了西班牙，其中有的神父不懂阿拉伯文，就请人把希腊著作从阿拉伯文译为西班牙文，他再从西班牙文译成拉丁文。</p>

<p>所以那时的希腊著作是从最早的拉丁文翻译成叙利亚文，再翻译成阿拉伯文，再到西班牙文，再到拉丁文。然后咱们能看到的，还得再翻译成中文，没准懒点的兄弟还是从英语版本翻译过来的。这是多么折腾啊。</p>

<p><a id="markdown-第六章-神们自己" name="第六章-神们自己"></a></p>

<h2>第六章 神们自己</h2>

<p>闲来无事，基督徒们开始思考基督教教义了。这就是经院哲学时期，代表人物阿奎纳。</p>

<p><a id="markdown-第七章-群魔" name="第七章-群魔"></a></p>

<h2>第七章 群魔</h2>

<p>对基督教的思考必然产生分歧，于是基督教迎来了铲除异己的恐怖时期。</p>

<p><a id="markdown-第八章-异端的权利" name="第八章-异端的权利"></a></p>

<h2>第八章 异端的权利</h2>

<p>马丁路德挺身而出，来粉碎这个噤若寒蝉的时代，所使用的武器也是——哲学。</p>

<blockquote><p>马丁路德在阅读《圣经》中保罗的书信时发现保罗所持的是“<strong>因信称义</strong>”的观点。“因信称义”的意思就是说，真心相信上帝，就可以成为“义人”。</p>

<p>说白了，罗马教会认为，外在的行为很重要。而马丁・路德认为，内心的信仰比外在的行为更重要。只要内心真诚信仰上帝就能得救；而是否遵守罗马教会的规定，是否上缴税款，是否完成昂贵的宗教仪式，这些都不重要。</p></blockquote>

<p>马丁路德之所以成功，很大一部分原因是印刷术和造纸术的使用，使得人人拥有一本《圣经》成为可能，而不再是自由教父拥有一本羊皮版的《圣经》然后解释给众人听。造纸术和印刷术也是的马丁路德的思想可以很快地传播。</p>

<blockquote><p>12世纪造纸术通过阿拉伯传到欧洲，在此之前欧洲一直用羊皮纸。</p>

<p>1450年，德意志人古腾堡在美因茨城的工厂中发明了哥特体拉丁文金属活字印刷技术。</p></blockquote>

<p>马丁路德和罗马（代表基督教）打了个势均力敌。从此，欧洲基督教分为来两大派：罗马一方被称为天主教，马丁路德一方被称为新教。再加上之前东罗马帝国创建的东正教，我们今天看到的基督教三大主要教派就产生了。</p>

<p>当年马丁路德反抗基督教用的哲学。然而，在用哲学打败了天主教之后，新教用新霸权代替了原来的旧霸权。</p>

<blockquote><p>在宗教改革之前，只有一个罗马教廷负责审判哲学家。</p>

<p>在宗教改革之后，变成了两个教廷比赛审判。有时为了对付异端，这两个原本水火不容的敌对阵营竟然能联合起来，天主教的神父被邀请坐到了日内瓦的法官席上。</p></blockquote>

<p>历史再次证明了哲学和宗教的不相容。宗教只会把哲学当做获取天下的工具，一旦胜利，就会毫不犹豫地将哲学扔到一边。</p>

<blockquote><p>用哲学打天下，用宗教守天下。</p></blockquote>

<p><a id="markdown-第九章-奇怪的论调" name="第九章-奇怪的论调"></a></p>

<h2>第九章 奇怪的论调</h2>

<p>就像电子产品是科学的产品一样，世界观、人生观、价值观是哲学的产品。我们享受科学的产品，并没有一定要去学习一下《电子电路》弄清楚二极管的原理，而是直接买一部手机，用就是了。同样的，为了获得一个人生观，我们完全可以从现成的人生观中选一个就行了。</p>

<p>如果你不满意于现成的人生观，执意要翻开哲学书亲自研究一番，那就只有一个原因了：</p>

<ul>
<li>你不相信现成的答案。</li>
</ul>


<p>祝贺你，你被苏格拉底附体了。</p>

<p><a id="markdown-第十章-童年的终结" name="第十章-童年的终结"></a></p>

<h2>第十章 童年的终结</h2>

<p>笛卡尔开始怀疑一切，怀疑世界：我们怎么知道周围的人不是全部串通好的演员？我怎么知道自己不是生活在一个电脑虚拟的世界里？（当然笛卡尔根本不知道电脑，这里只是个类比）我怎么知道自己不是生活在梦中？</p>

<p>好啦，我什么都证明不了，但是，不管我再怎么怀疑，“我怀疑”这件事是确定的，它肯定存在吧？那么，只要有了怀疑的念头，就说明“我”肯定是存在的——“我”要是不存在就不会有这些念头了。</p>

<p>这就是名言“<strong>我思故我在</strong>”的意思。“我思”和“我在”不是因果关系，而是推演关系。</p>

<p><a id="markdown-第十一章-理性主义" name="第十一章-理性主义"></a></p>

<h2>第十一章 理性主义</h2>

<p>笛卡尔模仿欧几里得的《几何原本》开创了理性主义哲学。</p>

<p>欧氏几何有五条公设和五个公理，这些都是欧几里得硬性规定的，其它的所有定理都是基于这些进行证明的。</p>

<p>从《几何原本》，笛卡尔得到了两个成果：</p>

<ul>
<li>解析几何和笛卡尔坐标系。</li>
<li>理性主义哲学。</li>
</ul>


<p><a id="markdown-第十二章-形而上学" name="第十二章-形而上学"></a></p>

<h2>第十二章 形而上学</h2>

<p>先为形而上学正名。</p>

<p>马哲里面关于形而上学的说明肯定是有问题的：</p>

<ul>
<li>形而上学就是用孤立、静止、片面的方法看待问题。</li>
</ul>


<p>这就好像给别人起外号一样，有失偏颇。</p>

<p>下面让我们看看真正的形而上学是什么意思。</p>

<p>最初人们呢在整理亚里士多德的著作时，将其分为两类：“研究有形物体的事物”和“研究无形物体的事物”。“研究有形物体的事物”就是《物理学》（physics），“研究无形物体的事物”（metraphysics）直译为“物理学之后”。即形而上学（metraphysics）研究的是那些高于物理学的、看不见、摸不着的学问。</p>

<p>形而上学的翻译出自《易经》：</p>

<ul>
<li>形而上者谓之道，形而下者谓之器</li>
</ul>


<p>日本哲人井上哲次郎的这一翻译，可谓“信、达、雅”的典范。</p>

<p>我们现在所说的形而上学，可以简单滴理解成是用理性的思维去研究那些能统一世间一切问题的大道理。就像笛卡尔希望的那样，要寻求一个高于客观世界／统领一切事物的真理。比如世界的本质是什么，人生的意义是什么之类。</p>

<p><a id="markdown-第十三章-二元论" name="第十三章-二元论"></a></p>

<h2>第十三章 二元论</h2>

<p>这一章确实有意思：怎么应用哲学追求幸福？</p>

<p><a id="markdown-二元论和唯物主义唯心主义的关系" name="二元论和唯物主义唯心主义的关系"></a></p>

<h3>二元论和唯物主义唯心主义的关系</h3>

<p>笛卡尔只知道自己的意识存在，不知道外面的世界存在不存在。这个结论暗含了一个前提，那就是：他把我们讨论的世界分成两个部分，一个是我们自己的心灵，一个是心灵之外的部分。</p>

<p>这种观点就叫作“<strong>二元论</strong>”。心灵一个元，外界一个元，一共二元。这两个元是相互独立的、平等的，虽然可以互相影响，但谁也不能完全决定另一个。</p>

<p>因为世界分成二元了，所以这两个元之间是如何联系的，就成了大问题。在后来的好几百年中，无数哲学家在“<strong>精神世界怎么才能真实反映客观世界</strong>”上花费了大量的工夫，也很难有一个令人满意的答案。后来有的哲学家反应过来了，直接反对二元论，认为这种划分是我们对世界的一种误解。</p>

<p>其中一个反对二元论的学派就是我们熟知的<strong>唯物主义</strong>，说世界的本质是物质的，我们的精神世界不过是大脑生理活动的结果。换句话说，精神是从物质中产生的。这种观点就叫作物质一元论。当然，相应的也有*唯心主义**的一元论，认为世界的本质是精神的，外面的世界不过是我自己心灵的产物罢了。</p>

<p><a id="markdown-二元论与我们的幸福生活" name="二元论与我们的幸福生活"></a></p>

<h3>二元论与我们的幸福生活</h3>

<p>二元论可以帮助我们躲避痛苦，因为我们在自己的精神世界里是无敌的，而一切体验归根结底都是精神体验。</p>

<p>在二元论的观念下，世界被一分为二：外界和内心。痛苦虽然来自于外界，但真正承受痛苦的是我的内心。因此我们虽然仍旧需要尽力去改变外物，但在客观世界这一元里的得失其实不重要，关键是固守自己的内心这一元，固守住我们获得体验的最后一关。而在内心世界里，我们自己能完全做主，这就让人产生了很大的安全感。</p>

<p>举一个例子。传统的对待生活的方式是，我们想到“考试不及格会给我带来痛苦”，那我们的对策就是好好念书，努力考试及格。但辛苦念书会给我们带来肉体的痛苦，对考试的担心给我们带来了很强的不安全感，而且就算考试通过了，人又会自动产生新的欲望和新的焦虑，陷入永无止境的担忧之中。</p>

<p>而新的人生观是这样的。我想：不管考试的结果如何，外界对我的这些影响都只体现在我的精神世界里。只要我闭上眼睛，专心驾驭我的内心世界，那么外界发生任何事都不会伤害我。这样我也不用费心念书去忍受肉体痛苦，不用为担心考试的结果而惴惴不安，我不为任何外物所扰，反倒清静自在。这是什么境界？说不好听了，这是阿Q的境界；说好听了，这叫“他强由他强，清风拂山冈”，这是九阳神功的境界。</p>

<p>不过，上述这个人生观有一个痛苦解决不了，那就是我们关心的人对我们的负面评价。说白了，二元论可以让你放下压力不好好工作。但是当父母因此伤心的时候，二元论就没办法了。</p>

<p>从二元论的角度说，他人对我们的评价和我们的精神世界无关，我们可以完全忽视。但是对于我们在乎的人，这点是极难做到的。一旦做到了，我们也就成了完全不关心任何人的冷血动物。</p>

<blockquote><p>佛教的“六根清净”、“无欲则刚”需要你做到这一步。佛教在解释为什么需要这么做的时候，估计也是从二元论给出的解释。</p></blockquote>

<p>实际上，当我们在乎外人感受的时候，就相当于我们把自己的喜怒哀乐寄托于外物。我们既不可能控制一切外物，也不可能让他人的感受总符合我们的意愿。因此不仅是二元论，其他自我安慰的手段，对于我们所关心的人都有些束手无策。</p>

<p><a id="markdown-第十四章-唯我论" name="第十四章-唯我论"></a></p>

<h2>第十四章 唯我论</h2>

<p>从笛卡尔的“我思故我在”，可以推出唯我论。</p>

<p>首先，和二元论一样，唯我论也是无法证伪的。我们永远都可以质疑自己生活的世界是一片幻觉，或者只是一个梦。当你思考“世界的本质是什么”的时候，唯我论永远立在一旁幽幽地望着你。挥之不去。</p>

<p>其次，唯我论对我们的普通生活也有很大的影响。它可以让我们变得更坚强。在采用唯我论的时候，我们会感到天上地下唯我独大，我们不用害怕任何事物，只要面对自己的内心就可以了。</p>

<p>假如我是这世界唯一真实存在的事物，那么很容易想到，或许这些幻觉都是为了我才创造出来的吧。</p>

<p>电影《楚门的世界》里，主人公从小就生活在一个虚假的世界里。这个世界里的每一个人、每一个物件都是被别人布置好的。他的整个人生是一个被精心策划的电视直播节目。他拜访哪个商店，哪个商店才开始装模作样地运营。他走到哪里，哪里才会出现安排好的路人。</p>

<p>假如我们带着唯我论的观念生活，也会有这样的感觉。对于我来说，外界的一切事物，不都是等我感受到的时候才会出现吗？如果把世上的一切都想象成只为我一个人安排出来的，也可以说得通啊。没准只有我才是这个世界上最重要的主角，其他人只是木偶、演员或者是幻象。</p>

<p><a id="markdown-第十五章-寒冬夜行人" name="第十五章-寒冬夜行人"></a></p>

<h2>第十五章 寒冬夜行人</h2>

<p>首先，斯宾诺莎是笛卡尔的继承者。</p>

<p>我们说过，笛卡尔有一个很棒的想法，就是按照欧式几何学的模式来建立哲学体系。具体来说，就是先找出一些不言自明的公设，再以这些公设为基础，按照演绎推理的方法建立整个哲学体系。</p>

<p>笛卡尔的想法不错，具体工作却做得不太好。斯宾诺莎则完美实现了这个想法。</p>

<p>斯宾诺莎最有影响的著作叫《伦理学》，在他去世后才发表。这本书的全称是《按几何顺序证明的伦理学》。看明白了吗，用几何去论证伦理学（伦理学也是哲学研究的一部分），这不完全就是笛卡尔设计的路数嘛。等翻开这书，你肯定就崩溃了：里面净是一些定义、公理、命题等，俨然一本数学书。</p>

<p>各种假设和证明就跳过了，直接看斯宾诺莎的结论吧。</p>

<blockquote><p>斯宾诺莎承认上帝，但他心目中的上帝不是基督教或者犹太教中人格化的上帝，而是无所不在的实体。</p>

<p>简单地说，世间万物皆为上帝，我自己也为上帝的一部分，那么我与上帝同在，自然充满无限的力量。其他人即便与我作对，他们也是上帝的一部分，他们的行为也都是上帝的意志（这点和基督教是相同的）。所以无论外人如何对我，我都应该坦然接受。</p>

<p>复杂地说，实体永远存在，我属于实体，那么我也可以永远存在。即便肉体消失了，我也是实体的一部分。而且我和世间万物都是一体的。从这个设想中，我们可以感受到无限的力量和安全感，也就什么都不怕了。</p>

<p>再者，实体是善的，作为实体一部分的事物，即便单独看是邪恶的，它本身也是为了善的目的而存在，也是善的一部分。因此无论多么丑恶的现象，我们都应该宽容接受。</p></blockquote>

<p>这不就是中国的“天人合一”吗？</p>

<p>另外，这与阿西莫夫《基地》系列里面提到的盖亚星球也基本是这个思想：在这个星球上，所有的动物、植物甚至一草一木共同构成了一个整体，大家共享相同的意识、记忆、感情和感觉。星球上的生物个体死亡以后，组成该生物的原子会最终变成星球上其他生物和物体的一部分。所以这个星球上不存在真正意义的死亡，只有各种物体之间的转化。意识是全星球物体共享，因此也不会消失。</p>

<p><strong>来自斯宾诺莎的心灵鸡汤</strong></p>

<p>哲学史上有个不难理解的现象，生活越是困苦的哲学家，他的学说就越关注个人幸福。反之，生活富足的哲学家，学说更容易脱离现实。斯宾诺莎就是典型的前者。</p>

<p>当斯宾诺莎意识到自己的幸福应该通过理性思考来追求的时候，他发现，在得出最终答案之前还需要很长时间。那么在这段时间里，自己该怎么生活呢？他总结了几个可以暂时执行的原则，大意是：</p>

<ul>
<li>第一，说话要尽量让别人明白，只要别人对我们的要求不会影响我们实现自己的目标（比如求知），那就尽量满足。</li>
<li>第二，只享受为保持健康所必需的生活乐趣。</li>
<li>第三，只求取为生活和健康所必需的金钱。</li>
</ul>


<p><a id="markdown-第十六章-双星" name="第十六章-双星"></a></p>

<h2>第十六章 双星</h2>

<p>笛卡尔和斯宾诺莎用推演的方法在几个假设的基础上建立起了理性主义哲学，但是科学家们不干了。</p>

<p>和数学家不一样，科学家搞研究靠的是<strong>归纳法</strong>。归纳法的意思是，人们通过观察多个个别的现象，总结出普遍的规律。比如人观察到，每一次把石头扔出去，最后石头总要落地。那么他就能总结出“空中的石头总会落地”这么条规律来。</p>

<p>实际上，科学方法里既有归纳法，也有演绎推理，但其基础、起关键作用的，是归纳法。科学家们“轻视”演绎推理，关键在于他们发现演绎推理有一个巨大的缺陷。这个缺陷就是，</p>

<ul>
<li>演绎推理不能给我们带来任何新知识。</li>
</ul>


<p>数学理论，比如欧氏几何，都是先想出一些公设，然后就靠纯粹的演绎推理来得出其他的内容。但是<strong>推理是等价的</strong>，所以推理得出的内容其实都包含在它的前提条件里了。换句话说，一本《几何原本》的全部知识其实就是开头的那几条公设和公理，后面厚厚的十三卷内容不过是在不断用其他的形式去重复那些公设和公理罢了。</p>

<p>而科学的任务是探索自然界，获取新的知识。毫无疑问，数学是不可能完成这个任务的。归纳法是科学家们的唯一选择。</p>

<p>对于哲学事业，数学方法就更危险了。笛卡尔他们研究哲学，不都先要公设吗？问题是，这公设它有什么根据吗？斯宾诺莎说世上存在实体，你能做一实验给我证明吗？说白了，在科学家眼中，</p>

<ul>
<li>笛卡尔和斯宾诺莎构建的哲学世界，整个学说不过只是几句没有根据的假设。</li>
</ul>


<p>数学家们也不含糊，他们找到了科学家们的致命弱点：</p>

<ul>
<li>归纳法不能保证结论的可靠性。</li>
</ul>


<p>数学家们指出：归纳法永远都只能立足于有限的事实之上，而不可能把所有的现实全部实验一遍。比如你说“空中的石子一定落地”，那你实验过全宇宙古往今来的所有石子吗？你只是观察了一部分石子，就得出了这个结论。</p>

<p>所以，科学得出的真理顶多是一种概率真理。科学家不断做实验，顶多是把科学理论正确的概率提高了一点，却永远不能保证科学理论绝对正确。</p>

<p>由于这场论证影响非常大，哲学家们给双方起了个名字：以笛卡尔和斯宾诺莎为代表的数学家们，被称为“理性主义”，以洛克为代表的科学家们，被称为“经验主义”。</p>

<p>总结一下：</p>

<table>
<thead>
<tr>
<th>^ </th>
<th> 理性主义 </th>
<th> 经验主义</th>
</tr>
</thead>
<tbody>
<tr>
<td>代表人群 </td>
<td> 数学派哲学家 </td>
<td> 科学派哲学家</td>
</tr>
<tr>
<td>代表人物 </td>
<td> 笛卡尔，斯宾诺莎 </td>
<td> 洛克</td>
</tr>
<tr>
<td>研究方法 </td>
<td> 演绎法 </td>
<td> 归纳法</td>
</tr>
<tr>
<td>优点 </td>
<td> 严谨 </td>
<td> 产生新知识</td>
</tr>
<tr>
<td>缺点 </td>
<td> 不产生新知识，公设未必可靠 </td>
<td> 结论不能保证正确</td>
</tr>
</tbody>
</table>


<p><a id="markdown-第十七章-名利场" name="第十七章-名利场"></a></p>

<h2>第十七章 名利场</h2>

<p>英国人洛克率先举起了挑战理性主义的大旗。</p>

<p><a id="markdown-英国跟欧洲大陆对着干的历史" name="英国跟欧洲大陆对着干的历史"></a></p>

<h3>英国跟欧洲大陆“对着干”的历史</h3>

<p>假如我们翻开英国的学术史，我们就会发现，这简直就是“跟欧洲大陆对着干”的历史。英国人和欧洲大陆不一致是有传统的。</p>

<p>就说理性主义和经验主义之间的分歧吧，其实可以上溯到柏拉图和亚里士多德的分歧。他们俩对世界的看法就不一样。一个重视心灵理性，一个重视现实经验。</p>

<p>以“人”这个概念为例。</p>

<p>柏拉图说，“人”这个概念比“张三李四”这些具体的人更真实。“张三李四”生了又死，来去不定，只有“人”这个概念是恒久的。</p>

<p>亚里士多德则说，“张三李四”是具体的，我们看得见摸得着。而“人”这个概念，完全是我们看过了这么多具体的人，然后在脑子中产生的。所以真实存在的是具体的事物，不是概念。</p>

<p>亚里士多德是柏拉图的学生，但是观点和柏拉图相悖，为此亚里士多德还说了一句名言：</p>

<p>“吾爱吾师，吾更爱真理。”</p>

<p>你可以把这句话理解成亚里士多德对真理的浓浓爱意。但你也可以理解成：</p>

<p>“有理就说理，别拿辈份压我！”</p>

<p>到了经院哲学时期，英国的神学家们就开始和大陆神学家们不一样了。大陆神学家继承的是柏拉图，英国神学家继承的是亚里士多德，也是一顿吵架。到了笛卡尔时代就顺理成章地演变成：大陆哲学家大都是理性主义者，而英国哲学家大都是经验主义者。</p>

<blockquote><p>如果不怕被指责牵强的话，我们还可以说，重视个别经验、对独断论充满警惕之心的经验主义，是英国人古板的民族性格的体现。而试图从万物根本一劳永逸地建立一个大一统理论的理性主义，正是荷兰和法国浪漫精神的代表。我个人以为，英国之所以总和欧洲大陆不同，是因为中间隔了一道海。虽然不算太远，可终究什么事都得坐船来回，因此英国就保持了一定的独立性。</p></blockquote>

<p><a id="markdown-经验主义和理性主义的第一次交战洛克vs莱布尼茨" name="经验主义和理性主义的第一次交战洛克vs莱布尼茨"></a></p>

<h3>经验主义和理性主义的第一次交战：洛克vs莱布尼茨</h3>

<p>莱布尼茨是个数学家，在哲学上，当然站在理性主义这边，崇拜斯宾诺莎。</p>

<p>洛克说，理性主义者们所谓的一些先于经验的公设啊，理念啊，和动物的本能没有区别。</p>

<p>莱布尼茨针锋相对地反驳：你知道人跟禽兽有什么区别吗？区别就是禽兽做事只凭经验，人却能根据经验总结出必然规律。禽兽不知道思考，总以为过去发生的事情，在以后相似的场合下还会发生。所以人可以利用禽兽的习性，去设计陷阱捕捉禽兽。而你们这帮经验主义者，你们只强调经验，不承认必然规律，那你们的联想能力不就跟禽兽一样了吗？</p>

<p>话说得可真狠啊！</p>

<p>但应该强调的是，在论战中，莱布尼茨是非常有风度的。他把自己和洛克辩论的书信集结成了一本《人类理智新论》。但是当这本书写成的时候，洛克已经去世了。莱布尼茨认为对手不能答辩了，自己发表和他的辩论是不公平的，于是在自己生前一直藏着这本书没有发表。</p>

<p><a id="markdown-第十八章-巨匠与杰作" name="第十八章-巨匠与杰作"></a></p>

<h2>第十八章 巨匠与杰作</h2>

<p>洛克在和莱布尼茨的辩论中没有占到什么便宜，而且在51岁的时候，因为反对查理二世，被迫逃亡到荷兰这个自由的国度。</p>

<p>虽然第一回合失利，但是，很快，英国就有一个重量级的人物登场了——牛顿。</p>

<p>牛顿，旷世天才，伟大的物理学家、数学家、天文学家、哲学家、神学家、炼金术士、小心眼儿、世界末日预测者。</p>

<blockquote><p>对，你没听错，牛顿晚年通过复杂的公式，计算出了世界末日的具体时间，就在2060年。</p></blockquote>

<p>牛顿和洛克关系很好，而且洛克还利用自己的社会关系提携过牛顿。牛顿一看自己的好朋友被人欺负了，怎能咽下这口气，撸起袖子就上，宣布：</p>

<ul>
<li>我牛顿才是微积分的发明者，莱布尼茨是个大骗子。</li>
</ul>


<blockquote><p>牛顿当时是英国皇家学会会长，稍微使用两下阴招，莱布尼茨就败下阵来。比如这份说莱布尼茨是大骗子的调查报告就是牛顿自己写的，而且牛顿还写了很多为自己变化的文章，匿名！</p></blockquote>

<p>牛顿的学霸行为还表现在和胡克争夺万有引力的平方反比定律上，使得胡克郁郁而终。</p>

<p>当然，这两件事情都和理性主义经验主义之战关系不大。</p>

<p><a id="markdown-第十九章-机械论" name="第十九章-机械论"></a></p>

<h2>第十九章 机械论</h2>

<p><a id="markdown-牛顿力学体系" name="牛顿力学体系"></a></p>

<h3>牛顿力学体系</h3>

<p>大部分哲学家之所以能在哲学史上留下一笔，当然是因为他们亲自研究了哲学，就具体的哲学问题提出了出众的看法。而牛顿能给哲学留下影响，却不是因为他进行了什么哲学研究，而是他在物理学上的成就实在太大，余波就把哲学给影响了。这个成就就是他的力学。</p>

<p>简单地说，我们衡量某个学说、理论、定理是不是好用，有两个标准：</p>

<ul>
<li>第一看它能否准确地预测未来</li>
<li>第二看它是否足够简要。</li>
</ul>


<blockquote><p>之所以我们没选择“地心说”而选择了“日心说”，并不是因为前者不准确，而是因为在两者同样准确的前提下，“日心说”更加简洁。在哥白尼之前的时代，坚持“地心说”的天文学家们为了让理论能和观测结果符合，不得不给太阳等星球画出非常复杂的轨道来。比如让太阳在一个大圆周运动上再做小圆周运动，就像螺旋一样。如果他们按照观测结果不断地修正理论，那么这套“地心说”学说有一天也可以和“日心说”理论一样准确。但是模型和计算过程就无比复杂了。</p></blockquote>

<p>按照这两个标准来衡量牛顿的经典力学系统，那简直是完美。</p>

<p>学会了这几条公式的人就可以指着天空说：“星辰万物，皆服从于我”。再庞大复杂的世界，也敌不过几个数学公式。</p>

<p>从有文明开始，人类面对宇宙的种种奇妙现象只能俯首膜拜。这种情况已经有几千年了。这时牛顿轻轻一点手指，整个宇宙立刻缩身于他的三条定律中，不敢有半点造次。</p>

<p>就像英国诗人蒲柏在赞美牛顿的诗中说：</p>

<blockquote><p>自然和自然律隐藏在黑暗中，神说：“让牛顿去吧。”于是，一切俱成光明。</p></blockquote>

<p><a id="markdown-机械论" name="机械论"></a></p>

<h3>机械论</h3>

<p>原先人类难以给现象繁多的物理世界一个满意的解释，自然倾向于诉诸神力。如今牛顿给了解释，而且无比精确。</p>

<p>不仅是物理世界，连灵魂的存在也被局限得很小了。在古代，人们想当然地认为，没有生命的物体必须受到外力才会运动，有生命的物体自己就能运动。这就是存在灵魂的证据呀，灵魂是负责“驱动”身体的。然而牛顿和他之后的科学家们证明，生物的机体也遵守物理定律，也遵循能量守恒、动量守恒的规律。生物运动可还原为纯粹的力学现象，并不需要灵魂的“驱动”。</p>

<p>顺着牛顿力学的思路，有人开始想，既然世间万物都要臣服于运动规律，那么动物、人类的身体，是不是也会臣服于这些规律呢？进一步想，是不是人类的思想、感情也会符合运动规律呢？是不是我们头脑中的一切意识其实都不过是物质运动的结果呢？</p>

<p>用物理学来解释包括人类意识在内的整个世界，这种观点就叫作“<strong>机械论</strong>”。机械论很好理解，我们在学校的时候都受过辩证唯物主义的训练。<strong>机械论就是除掉了辩证法之后的唯物主义</strong>，也可以叫作“机械唯物主义”。</p>

<p>机械论虽然和经验主义理性主义都不一样，但是，很显然，机械论是偏向于经验主义的。你看，牛顿力学体系就是经验主义的结晶。</p>

<blockquote><p>经验主义和理性主义关心的是真理的来源，机械论讨论的是物质决定精神。</p></blockquote>

<p>在其他流派的哲学家看来，机械论未免过于冷冰冰，而且后面我们会说到，它还会导向一个非常危险的结论——决定论，因此它一直饱受批评。然而我觉得，无论最终对它的评价如何，机械论本身的初衷是很美好的：它要建立一个用数学统治的美丽新世界。</p>

<p>17、18世纪的人们崇拜牛顿的学说，那时的机械论也被认为有着伟大的前途。机械论者希望，有一天在医学、心理学、伦理学、政治哲学等领域，都可以应用牛顿力学，或者像牛顿力学那样用几个简单的数学公式去解释。</p>

<p>而且机械论还有日益强大的科学奇迹作后盾。只要人稍微了解一下现代医学，就很容易接受“意识乃是神经活动的结果”这一机械论最关键的结论。可以说，我们周围的大部分人，对生活的看法多少都带一些唯物的观点。</p>

<p>同时，机械论也面临着一些难以回答的质问：</p>

<p>当一个人的身体丧失生理功能而死去的时候，我们看到他一动不动，对刺激没有反应，我们认为他的意识消失了。但我们如何去证明这一点呢？或许这个人一动不动仅仅是因为身体失去了生理功能，而不是意识消失呢？虽然这个假设很古怪，但是机械论却难以反驳它。</p>

<p>还有另一个批评。唯物主义说物质不依赖意识存在。但是，当人没有意识的时候，又怎么知道那些物质是存在的呢？唯物主义者或许说，科学可以证明。但是科学要建立在经验的基础上。在意识无法触及的领域里，自然无法产生经验。因此科学对这些事物只能猜测，却证明不了任何东西。</p>

<p><a id="markdown-第二十章-决定论" name="第二十章-决定论"></a></p>

<h2>第二十章 决定论</h2>

<p>机械论虽然可以条理清晰地解释这个世界，但是按照机械论的说法，人类不过是这个世界中可有可无的一件事物而已，和桌子板凳、花鸟鱼虫没有本质的区别。我们的意识不过是一系列物质作用的结果，随时可以消失，毫无永存的希望，更谈不上还有什么人生意义。就像世间的其他事物一样，存在就存在了，消失就消失了。这很容易推导出<strong>虚无主义</strong>和<strong>享乐主义</strong>。</p>

<p>但这还不是最可怕的，最可怕的是这个：<strong>决定论</strong>。</p>

<p>何为决定论？决定论说，既然世间万物都可以用物理规律来解释，那么每一个事件之间必然要遵循严格的因果关系。如果人的意识是完全由物质决定的，那肯定也得服从严格的物理定律。那么，整个世界该如何发展，该走向何处，都是由自然定律决定好了的。就像人们根据力学可以预测星辰位置一样，人们也可以根据自然规律来预测未来所有的事件。</p>

<p>根据决定论的观点，严格意义上的随机数也是不存在的：当你摇骰子的时候，只要知道了一个时间点的所有数据，就可以算出最终的点数。数学家拉普拉斯说，只要他拥有足够多的数据，就可以按照机械定律推算出未来世界的全部面貌。</p>

<p>能预测未来，这听上去挺美妙的，为什么可怕呢？</p>

<p>可怕的地方就在于，一旦我们接受了最严格的决定论，那就意味着<strong>人类没有了自由意志</strong>。我们头脑中的每一个念头，在前一秒钟已经被决定好了。如果我们这么一环一环地回溯回去，那么我们一生中的一切所思所想、我这本书中的每一个字，您看这本书时在头脑中迸发出的每一个念头，其实都是在几万亿年前的宇宙大爆炸的那一瞬间就被决定好了的。</p>

<p>且不说这想法很诡异，关键是，那人生还有什么意思啊？既然一切都是决定好的，那我们为什么还要努力奋斗，为什么还要劳动？人生还有什么意义？如果人类只是被操控的木偶，活着听从因果律摆布，死后化为虚无。那还有什么人生意义呢？</p>

<p>这还算次要的，更要紧的是，人之所以要为自己的行为负责，是因为人有自由。这点我们在讲奥古斯丁的时候已经说过了。那么，假如人的全部意识都是事先被决定好的，人就没有自由，那不就没有道德可言了吗？人就不需要为自己的行为负责了呀，那也就不需要法律了。</p>

<blockquote><p>其实，决定论是不成立的。根据量子理论中的测不准原理，我们不可能同时精确测量一个原子的位置和动量。也就是说，我们没法得到一个时间点整个世界的所有数据，所以，也就没有办法预测未来。说不定，人类的自由意志就来源于测不准原理呢。</p></blockquote>

<p><a id="markdown-部分决定论" name="部分决定论"></a></p>

<h3>部分决定论</h3>

<p>除了建立在机械论上的严格的决定论之外，在哲学史上更流行的是<strong>部分决定论</strong>，也就是说物理世界是被决定的，但是人有自由意志。这当然更容易让人接受。古希腊的斯多葛学派就相信部分决定论。他们认为我们不能控制事物，但是可以控制我们自己对待生活的方式。所以这个学派提倡随遇而安的生活态度。</p>

<p>前面我们说过斯宾诺莎的哲学，应该还记得斯宾诺莎是用类似于几何的逻辑一步步推出哲学体系的。这意味着，他相信世间万物之间都有着严格的逻辑关系。这也会导致决定论。同时，斯宾诺莎认为世界是一个实体，世间万物以及我们自己都是实体的一部分，也就是神的一部分。那么人类就没有自由了，因为人的意志也是实体的一部分。</p>

<p>但斯宾诺莎又说，我们还是有追求自由的方法的。假如我们被动地按照必然律活着，那就成了必然律的奴隶。所以，我们应该用理性去领悟事物之间的关系。明白了我们在整个实体中的处境，也就实现了自由。更进一步说，当我们认为自己和万物是同一个实体的时候，就相当于扩大了我们自己的范围，世间发生的任何事情都属于我自己的一部分，这世界对我们的限制也就越来越小乃至于无，我们也就越来越自由。</p>

<p>这让人想到了佛教的理论。佛教强调因果，这和决定论很像。但佛教同时认为，人有自由去主动领悟世界的本质，假如能做到这一点，人和万物就没有区别，就实现了最大的自由，也就是成佛了。</p>

<p><a id="markdown-决定论与自我安慰" name="决定论与自我安慰"></a></p>

<h3>决定论与自我安慰</h3>

<p>决定论和宿命论很像。用宿命论来安慰自己，是中国人的老传统了。</p>

<p>当我们遇到挫折的时候，我们常会安慰自己说“这是命”。比如俗语说“人的命，天注定，胡思乱想没有用”，用来安慰人是很管用的。</p>

<p>然而中国人很狡猾，遇到好事的时候就不说是“命”了，男女相聚，说的是“缘”。缘是什么？佛教概念里讲的是因果报应。遇到好事讲“缘”，意思就是说这是因为我之前做过什么好事，这是我应得的。但自己遇到坏事就像前面说的，不讲因果改讲宿命论。但等到讨厌的人遇到坏事呢，就又是因果了，骂人家这是“报应”，这是“活该”。那么，要是自己讨厌的人遇到好事了，中国人怎么办呢？多半心中暗骂：某某某你等着，三十年河东三十年河西，谁笑到最后谁笑得最好——他又开始讲辩证法了！</p>

<p><a id="markdown-第二十一章-暴风雨" name="第二十一章-暴风雨"></a></p>

<h2>第二十一章 暴风雨</h2>

<p><a id="markdown-统一经验主义和理性主义" name="统一经验主义和理性主义"></a></p>

<h3>统一经验主义和理性主义</h3>

<p>休谟认为，你们讨论“何事真实存在”之类的问题，实际上这些问题人类根本没有能力回答，所以你们才能怎么说怎么都有理，正反两面的观点都能成立。不但空中楼阁式的理性主义者如此，连经验主义者也犯了类似的毛病。</p>

<p>举个例子。洛克不是有“白板说”吗？洛克认为人的经验是从后天的客观世界而来。在洛克之后还有另一个英国的经验主义者贝克莱，他则认为世界上没有物质，人的经验都是心灵中的观念。</p>

<p>这两个观点一个唯物、一个唯心，谁也说服不了谁。唯物者可以说，一个物体你不意识到它，它就不存在？这岂不是荒谬？唯心者可以说，我不意识到它它还存在？是因为还有其他人意识得到它。如果人人都意识不到它，你又怎么知道它是存在的呢？</p>

<p>这话说来说去近乎于抬杠了。于是休谟就说，你们都错了，错在你们讨论的问题超出了人的经验范围。“经验从哪儿来的”这个问题，我们根据经验回答不出来，所以，只能老老实实说不知道。</p>

<p>休谟的哲学观可以用来解决下面这个问题。</p>

<p>我们说过，我们永远没法证明自己是不是生活在《黑客帝国》式的虚拟世界里。那该怎么才能安心呢？休谟的回答是，不知道就不知道，没关系。我们能得到的经验就是眼前的生活，在没有明确的证据证明面前的生活都是幻觉之前，我们就照着自己平时的经验正常生活下去就可以了。我们没必要也没能力去无限地怀疑世界。反正想也想不出结果来，就别想了吧！</p>

<p>比如，如果有学生念着一半书突然产生了哲学思考：“天哪！万一我生活的世界是一团假象怎么办？太可怕了，我该怎么办？”休谟的反应跟孩子的妈是一样的，他会一拍桌子：“熊孩子，想那么多没用！继续念书吧！”</p>

<p>话说得远了点，正因为很多人不接受休谟的这个观点，才使得文艺创作者们有各种花招可以玩。比如《黑客帝国》后两集里的招数：让观众怀疑反抗军的基地也是虚拟出来的。比如《盗梦空间》里，让观众怀疑所谓的真实世界也是一个梦境。</p>

<p>休谟和笛卡尔一样被苏格拉底附体。他打算用怀疑论来抛掉前人所有不可信的经验。休谟想，有什么知识是切实可信的呢？他找到两种。</p>

<ul>
<li>第一种是不依赖于经验的知识。比如几何学，它自身是不矛盾的，完全符合逻辑规则，而且不依赖经验存在。
  我们前面说过，在现实世界中观察不到任何严格的三角形，但是我们仍旧有三角形这个概念。三角形不依赖外物存在。自然，像斯宾诺莎、莱布尼茨这些人的哲学体系，因为根基是可疑的，所以不在休谟的承认之列。</li>
<li>第二种可靠的知识是我们自己感受到的经验，摸到什么、看到什么，这些都是可信的（当然，还是那句话，这经验是不是来自于幻觉我们先不管）。</li>
</ul>


<p>休谟想来想去，觉得可信的知识就这两种，于是他很彪悍地说了一段话：<em>我们去图书馆随便拿起一本书，问这些书中包含着数和量的抽象推论吗？包含着关于实在事实和存在的任何经验的推论吗？如果都没有，就可以烧掉，因为里面只有诡辩和幻想</em>。</p>

<p>实际上，休谟对知识的界定很靠谱。从理性主义和经验主义的争论来看，人类仅有两种获得知识的办法，一个是靠演绎推理（而且还没得到新的知识），一个是靠经验。休谟把其中最不靠谱的——理性主义者们的那些公设都给去掉了。剩下的除了经验之外，还留下了纯粹靠演绎推理能成立的知识。与激进的经验主义者相比，休谟已经很厚道了。</p>

<p><a id="markdown-因果律是不存在的" name="因果律是不存在的"></a></p>

<h3>因果律是不存在的。</h3>

<p>研究科学，最重要、最基础的一条规律叫作因果律。就是说，凡事有因必有果。牛顿想，苹果落下来一定是由于什么原因造成的，这才有了万有引力定律。蒸汽上升是带动机器的原因，这才能有蒸汽机。总之，万事万物之间必须都存在因果律，我们才谈得上科学研究。</p>

<p>但是，休谟却说因果律是不可靠的知识，因为因果律不属于上面两种知识的人和一种。</p>

<p>首先，因果律属于第一类知识吗？我们能不依赖于经验，只靠逻辑推导出因果律吗？显然不能。一个因果律是否成立，总要关系到具体的事物。我们知道“点燃爆竹”和“爆竹爆炸”两者之间有因果关系。我们能知道这一点，纯粹是靠经验得来的。假如有一个原始人完全没见过、没听说过爆竹，那他无论怎么演绎推理，也不可能想出爆竹爆炸的原因。</p>

<p>那么，因果律可以靠经验总结出来吗？比如在地球上，苹果一离开树枝肯定会掉在地上，我们通过日常经验就可以认识到这一点。那么这算不算我们认识到了，“苹果离开树枝”和“苹果落在地上”这两件事中存在着因果关系呢？休谟说，不能，因为你就算之前多次看到苹果离开树枝落到地上这个现象，你也不能保证，下一次苹果还一定会落到地上。</p>

<blockquote><p>这一点是理性主义批判经验主义最有力的一招。</p></blockquote>

<p>休谟认为，<strong>人相信因果律其实是一种心理错觉，只因为我们发现两件事总在一起发生，我们就期待它们能再次一起发生。但这其中并没有可靠的根据。</strong></p>

<p>举个简单的例子，假如有一个没有科学知识的原始人，他通过观察发现，公鸡打鸣之后，总伴随着太阳升起，没有一天例外。那么他会认为，公鸡打鸣是太阳升起的原因。这显然是错的。</p>

<p>类似的误区在生活中常会遇到。统计学上有一句经典的话，“相关性不代表因果性”。意思是说，统计结果如果发现，有两个数据A和B，每当A上升的时候，B也跟着上升；每当A下降的时候，B也跟着下降。一般人会觉得，这说明了“A是引起B的原因”。实际上这是错的。</p>

<p>比如调查大学生的体重和交友数据表明，越是胖的人，身边的朋友就越多。这下调查人员兴奋了，立刻得出一个结论：身体胖是朋友多的原因。身体越胖的人，就越有魅力！然而，事实或许是这样，<u>这两件事有一个共同的第三方原因</u>，比如这些人都喜欢参加饭局。因为饭馆里的饭菜油水比较大，所以这些人的身体比较胖。同时，参加饭局的人社交范围比较广，所以朋友数量也多。因此，虽然“胖”和“朋友多”这两件事总在同一个人身上出现，但这两件事之间并没有因果关系，自然也得不出来“身体越胖的就越有魅力”这个古怪的结论。实际上，我们生活中常常遇到类似不靠谱的结论。比如因为“少年犯中80%的人都玩网络游戏”，就得出结论，说“玩网络游戏会导致青少年犯罪”。那“100%的少年犯每天都吃饭”该怎么解释？</p>

<p><a id="markdown-第二十二章-哲学怪兽" name="第二十二章-哲学怪兽"></a></p>

<h2>第二十二章 哲学怪兽</h2>

<p>理性主义已经被驳斥成独断论了，还剩一个经验主义。可经验主义吃饭的家伙是归纳法，这回也被休谟给整没了。</p>

<p>莱布尼茨曾经批评经验主义者说，人和禽兽的区别就是，人能得出必然命题；禽兽只有纯粹的联想，只知道过去发生的事情，未来还总能发生。休谟要听了这话，肯定会反驳说：你错了，我和禽兽不一样，我认为过去发生的事情，在未来不会发生。</p>

<p>休谟有一句名言，说<u>你怎么知道明天的太阳会照样升起</u>。对休谟不屑一顾的人，把这句话当作休谟白日做梦的笑话。而对于被休谟说服了的人，这句话代表的是休谟结论的可怕结果。</p>

<p><a id="markdown-哲学困境" name="哲学困境"></a></p>

<h3>哲学困境</h3>

<p>这好家伙，在因果律问题的两端，一边是休谟，说没有因果律，那科学就完蛋了；一边是科学，说有因果律，但就会没有了自由和道德（因为因果律可以推出决定论）。你说你相信哪个？两个都不好受。</p>

<p>当然，我们这些受过辩证唯物主义教育的人们，觉得还是有出路可走。我们可以说，为什么非要走极端呢？我们可以在极端中间选一个点嘛。比如说，我们可以相信意识依赖于物质存在，但是意识不被物质决定，我们的思想是自由的。这样，我们既在客观世界里保留了因果律，保留了科学，又在自己的头脑中保留了自由和道德。多完美！</p>

<p>这么想确实很舒服，不走极端，又左右逢源。然而这种狡猾的选择也要付出相应的代价。</p>

<p>我们说过，我们的原则是避免独断论。</p>

<p>那么，当你在左右两个极端里选择中庸的时候，你不能说我随便选择中间的哪一点都行，你必须说明白，为什么你要选一个点，为什么不能更靠左一点，或者更靠右一点。我们刚才在休谟的怀疑论和科学的决定论中间选了一点，对吧？我们认为因果律只存在于物质中，不存在于人的意识中，人的意识里保留了自由意志。那么我的问题就来了。</p>

<p>我们姑且认为人有自由意志。那么请问，动物有自由意志吗？植物有自由意志吗？如果说动物有植物没有，难道是因为前者能动后者不能动吗？那微生物有自由意志吗？细菌有自由意志吗？或者动植物的关键区别是前者有脑？那请问脑的定义是什么？这定义能决定自由意志的有无吗？无脊椎动物的神经中枢算脑吗？鱼是脊椎动物，有类似于高等动物的大脑结构，螃蟹虾米是无脊椎动物，后者所谓的大脑仅仅是神经节。那你的意思是说，螃蟹没有自由意志而鱼有？或者说，一个只有螃蟹虾米的鱼缸是决定论的，扔进去一条鱼就不是了？如果退一步，说自由意志的区别在于生命和非生命之间，那脱氧核糖核酸有自由意志吗？蛋白质有自由意志吗？你是说，一小块培养皿里的蛋白质有自由意志？如果进一步，说自由意志的区别在于人和动物之间，那人和动物之间的关键区别是什么？很多高智商动物如狗类会表现出感情，会向人类学习，它们这一切都是单纯的生理刺激的结果吗？如果说人和动物的关键区别在于理性，那婴儿有自由意志吗？原始人有自由意志吗？类人猿有吗？猩猩有吗？到底是在进化的哪一瞬间，人类和动物之间有了本质的区别？难道你是在说⋯⋯灵魂吗？如果区别在人类和动物之间，这不就意味着，人类在进化中的某一瞬突然“嘣”的一下就冒出自由意志来了？我们是不是可以说，宇宙从诞生开始，一直都按照严格的因果律按部就班地进化着。突然间，当某个星球出现“高级生命”或者什么“理性”的时候，从这些“高级生命”中突然迸发出一种东西，彻底地改变了整个宇宙的因果律，从此整个宇宙再也不是按照严格的决定论发展了。你是说⋯⋯理性可以改变整个宇宙？你是唯心主义者吗，同志？</p>

<p>如果理性有这么大的力量，这玩意儿是从哪儿来的？换句话说，如果你既是一个唯物主义者，又否认决定论的话，那么请问，自由意志这东西是从哪儿来的？如果人的意识仅仅是由脑神经决定的，是由符合因果律的物质决定的，为什么它能逃脱大自然的因果律，能够超越其上呢？那你还是唯物主义者吗？⋯⋯这样的讨论还可以无穷无尽地说下去。</p>

<p>明白了吗？假如咱们要取巧，要选择两个极端答案的中间一点，那你必须有充分的理由，把那个点分毫不差地精确地标出来。否则就必须面对无穷无尽的诘问。<em>如果你不能圆满地回答，那么你的答案显然是出自想当然，这又和宗教信仰有什么区别？</em></p>

<p>类似的困境，生活在休谟时代的经验主义者都遇到过。休谟的怀疑论是经验主义的必然结论，但经验主义者不愿意也不可能放弃归纳法。于是他们就说，不就是认为因果律和归纳法本身是循环论证，不能靠经验证明吗？那我们就像理性主义者那样，说<u>因果律和归纳法是人天生就有的理性知识</u>不就行了，反正科学也间接证明了归纳法的成功。这么一来，整个经验主义不就都立得住了？这有点像怀疑主义者说“所有的话都必须被怀疑”的时候，还必须补上后半句“除了本句话之外”，要不就成了自相矛盾了。</p>

<p>然而立刻有人会反对说，经验主义不是说一切知识都得从经验得出吗，那你凭什么又说因果律和归纳法可以是特例？假如它们是特例的话，为什么其他知识不能是特例？为什么不能一切知识都不从经验而来？这和我们前面说过的中庸困境一样。选择了中庸之道固然可以避免两个极端的缺点，但也同时失去了两个极端的理论支持，很容易被别人驳倒。</p>

<p>闲话少说，回过头来让我们看看那时哲学的困境吧。现在有两个会严重摧毁生活的哲学观点。一个是休谟的怀疑论，一个是科学的决定论。可怕的是，这两个观点正好是互相矛盾的两个极端。反对一个就等于拥护另一个，采取中庸之道的那些结论，更像是诡辩论而不是严谨的推理。</p>

<p>轮到康德出场了。</p>

<p><a id="markdown-关于因果律的一个有趣的讨论" name="关于因果律的一个有趣的讨论"></a></p>

<h3>关于因果律的一个有趣的讨论</h3>

<p>在康德出来解决这个问题之前，让我们插播一个关于因果律的有趣的讨论。</p>

<p>还记得前面说过的决定论吧？我们说过，决定论是从“万事万物都严格服从因果律”这一点推出来的。在这里，决定论是和因果律紧紧联系在一起的。然而，假如我们相信决定论，又会导致我们永远无法发现和使用因果律！这到底是怎么回事呢？刚才说了，因果律的意思就是“A发生以后，B必然发生”。我们假设这个世界有因果律，世界符合决定论。那么科学发现还是要用归纳法，对吧？所以科学家们要发现A和B之间有因果律，就必须不断地让A发生，再看是不是每一次B都会随之发生。</p>

<p>但这里有一个条件，就是A的发生必须是人能控制的。这样我们才能不断地改变A发生的条件和环境，才能绝对保证只有A，而不是其他因素造成B的发生原因。举例子就是，我们怎么知道苹果离开树枝是苹果落地的原因呢？我们得把各种可能同样是苹果落地的原因都排除了：天气啊，地理位置啊，苹果的品种啊。所以我们得在不同的天气下，在不同的地区，用不同的苹果来观察这个事件。结果发现，所有的条件都可以更换，但是苹果落地还是紧随着苹果离开树枝而发生。那么根据归纳法，我们就能知道，苹果离开树枝是苹果落地的原因了。</p>

<p>然而，假如我们生活在一个决定论的世界里，那么A的发生并不是我们能控制的，因为我们没有自由意志。因此，即便我们做再多的实验也无法确认A就是B的原因。就好比当我们看到苹果离开树枝和苹果落地这两个事件的时候，<u>这两个事件的发生其实都已经在宇宙生成的那一刻，由其他的什么东西（比如叫“原因C”）决定了。</u>无论我们如何更换苹果落地实验的天气、位置、苹果的种类去做这个实验，我们永远也无法排除那个“原因C”。甚至于连我们反复做这些实验的行为也都是“原因C”决定的，因此我们永远也无法发现因果律。这意思是，假如我们接受这世界是符合决定论的，那么我们可以相信这世上的确存在着因果律，但我们却永远无法把它们找出来。这并不能推翻决定论，不过可以让决定论陷入一种很尴尬的境地：<em>在决定论的世界里，科学同样是没有意义的。</em></p>

<p><a id="markdown-第二十三章-谎言的衰落" name="第二十三章-谎言的衰落"></a></p>

<h2>第二十三章 谎言的衰落</h2>

<p>这一章主要在讲中世纪的教廷和一些名人的关系，包括伽利略、霍布斯、牛顿、亨利四世等，虽然和哲学无关，但是当八卦看看也是不错的。</p>

<p><a id="markdown-第二十四章-远离尘嚣" name="第二十四章-远离尘嚣"></a></p>

<h2>第二十四章 远离尘嚣</h2>

<p>接下来是属于德国的时代。康德终于来了。</p>

<p>包括康德，以及后面的谢林、黑格尔、费尔巴哈、叔本华、尼采、马克思、胡塞尔、海德格尔，还有对哲学影响颇大的爱因斯坦、海森堡。这个超豪华阵容全部都是德意志人。他们中有不少是犹太人。后来希特勒迫害犹太人，致使一堆超级智囊人士脱离德国国籍到英美去作贡献了。</p>

<p>话说康德看了休谟的论述之后，很震撼。他觉得休谟说得没错，理性主义属于独断论，经验主义又不能证明事物之间存在因果关系。康德为此想了很久，突然，一个大胆到狂妄的念头产生了。康德说，当年大家都以为地心说正确，可是天文学家根据地心说怎么也计算不出正确的结果。哥白尼大胆地把地心说掉过来，改成日心说，一下子解决了问题。</p>

<p>那过去的哲学家呢，都认为我们的认识要符合客观世界，但是讨论了半天都没有结果。康德认为，<strong>我们应该把主客观世界的关系颠倒过来！</strong></p>

<p><a id="markdown-不可知论" name="不可知论"></a></p>

<h3>不可知论</h3>

<p>这⋯⋯不是疯话吧？咱们来研究研究康德这个大胆的想法是怎么回事。</p>

<p>首先，我们得拿出想象奇幻世界的劲头来，先只当康德是个奇幻作家，给我们设计了一个架空世界。这世界是什么样的呢？在这个世界里，人类是一种非常可怜的生物。人类永远无法认识到这个世界的真面目。人类所感受到的这个世界，都是通过人类心灵中某个特殊的机制加工处理过的。这个负责加工的机制，我们起个名字叫作“<strong>先天认识形式</strong>”。世界的真面目，起个名字叫“<strong>物自体</strong>”（也被译作“自在之物”）。人类感觉到的世界，也就是“物自体”经过“先天认识形式”加工后得到的东西，我们把他（们）叫作“<strong>表象</strong>”。这几个名词，得麻烦大伙记一下了。</p>

<p>回到康德。<u>在康德的哲学世界里，所有的知识（也就是来自于物自体的知识）都要先经过人类心灵的加工，才能被人类认识。所以他自比哲学界的哥白尼，在他的哲学里，不是心灵去感受经验，而是心灵加工经验，心灵生产了经验。</u></p>

<p>有一个最常用的比喻，有色眼镜。</p>

<p>这个比喻说，假设每个人终身都必须戴着一副蓝色的有色眼镜。这个世界上所有的事物，必须都通过有色眼镜的过滤才能被人看到。那么所有人看到的就是一个蓝色的世界，而世界真实的面貌是人永远看不到的。在这个比喻里，<u>有色眼镜是先天认识形式，事物原本的颜色是物自体，人类看到的蓝色的世界，是表象。</u>要注意的是，每个人的眼镜都是相同的，不会有人不一样。因而，戴着眼镜其实不会妨碍人类的正常生活，连物理研究的结论都不会影响。反正颜色只是人类自己起的名字而已，戴眼镜者根本没法察觉到自己的异常。</p>

<p>用白话说就是，康德认为，<strong>这世界（物自体）是人类永远无法真正认识的，人类看到的只是表象的世界。</strong>但是由于每个人对真实世界的表象方式（先天认识形式）都是相同的，所以人类看到的同一个东西的感受还是一样的，因此我们察觉不到真实的事物是否被扭曲了。所以这个世界观并不和我们的生活经验相悖。</p>

<p><a id="markdown-因果律与自由意志" name="因果律与自由意志"></a></p>

<h3>因果律与自由意志</h3>

<p>那因果律是怎么回事呢？</p>

<p>康德认为，我们这个先天认识形式里，包含了很多用来处理物自体的工具（一共有十二个先天范畴），其中一个就是因果律。而科学家们只能研究我们感觉到的事物。也就是说，科学家只能研究表象世界，因此科学家的研究对象都是带有因果律的。</p>

<p>那么，人的自由意志又在哪儿呢？我们自己的意识就是物自体啊！</p>

<p>因果律只存在于先天认识形式里，并不存在于物自体中。物自体是自由的，我们自己的意识也是自由的。</p>

<p>换句话说，康德让人的意志受到了先天认识形式的严密保护，因果律不能穿透先天认识形式去控制人的内心意志，所以人仍旧是自由的。当然，这也意味着作为物自体的自我意识，是没法被我们察觉和把握的。也就是说，科学是永远无法研究人的自由意志的。</p>

<p>问题完美解决。</p>

<p>康德之前的哲学危机，是休谟对因果律，乃至对人类理性能力的怀疑。康德的解决方法是，他把世界分成了两个部分。一个部分完全不可知，另一个部分则可以用理性把握。不可知的那部分因为永远不可知，所以对我们的生活没有什么影响。只要我们在可把握的世界里生活，理性就又恢复了威力。这样，既没有破坏休谟的理论（想破坏也没那能力），又让人类重新信任理性，重新踏实了。</p>

<p><a id="markdown-康德哲学的现实意义" name="康德哲学的现实意义"></a></p>

<h3>康德哲学的现实意义</h3>

<p><strong>阴谋论</strong></p>

<p>假如我们接受康德的世界观，我们就同意，这世上总有一些东西是我们无法认识的。我们只要安于在能认识的世界里生活就对了。这可以用来应对一些没有确凿根据的阴谋论。</p>

<p>我们的生活中永远不会缺少阴谋论。比如有人说，我们都生活在《黑客帝国》般的虚拟世界里，比如有人说，这世界是由秘密组织控制的，比如有人预测某年某月是世界末日等等。有的人会觉得，不能证明这些阴谋论为假，就活得不踏实。</p>

<p>但关键是，很多阴谋论是无法证伪的。我们永远也不能证明我们没生活在虚拟世界里；也没法证明我们所看到的世界全都是假象；也没法证明，下一秒钟世界不会被我们从未认识到的某种力量毁灭。</p>

<p>按照康德的世界观，这些阴谋论正是处于我们永远无法认识的世界里。那么我们该怎么办？——管它做甚！</p>

<p>阴谋论的真伪问题属于我们不能认识的领域，费劲去研究它只会徒劳无功。就像研究“二律背反”会出现矛盾结论一样，当我们谈论阴谋论的时候，正方反方都会说出一大堆互相对立的道理来。看着都有理，其实全都是空谈而已。我们不需要管它，该怎么生活继续怎么生活就是了。</p>

<p><strong>给上帝开脱</strong></p>

<p>关于上帝，一直会有一些棘手的问题，无论怎么回答，都会有逻辑上的漏洞。比如：</p>

<ul>
<li>上帝是否存在？</li>
<li>作为全知全能的上帝，为什么允许世间存在这么多恶？</li>
</ul>


<p>康德对理性的限制给了上帝可以不遵守逻辑规则的理由。康德论证了，理性并不是万能的。比如对于“二律背反”问题，理性就无法去讨论。因此，并不是一切事物都会遵守逻辑。上帝既然是绝对的存在，自然是属于“物自体”那边的存在，那么上帝也就用不着遵守逻辑了。上述对上帝的质疑也就都不能成立了。</p>

<p><strong>四维物体</strong></p>

<p>我们生活的空间是三维的。那么，有没有四维空间，四维空间是什么样子的呢？注意，我们这里说的第四维不是时间，而是纯空间上的四维。</p>

<p>我们可以先考虑这样一个问题：怎样让二维空间中的人想象我们三维空间中的正方体？</p>

<p>我们可以将三维正方体穿过二维平面，二维空间中的人就可以看到三维正方体在二维平面上的投影，这个投影随着时间不断变化。三维空间中的人，通过这样的投影变化，就可以想象出这个正方体在三维空间中的样子。但是，二维空间中的人肯定是想象不出来的，就像无论思维正方体怎么投影到我们三维空间，我们也无法想象出四维正方体到底是个什么样子一样。我们唯一能知道的就是四维正方体在三维空间中投出的“表象”（也就是那个投影），而对于四维正方体本身，我们没法认识。</p>

<p><a id="markdown-第二十五章-王者之风" name="第二十五章-王者之风"></a></p>

<h2>第二十五章 王者之风</h2>

<p><a id="markdown-黑格尔的辩证法" name="黑格尔的辩证法"></a></p>

<h3>黑格尔的辩证法</h3>

<p>在阐述黑格尔的辩证法之前，先声明一下：下面这种不是辩证法</p>

<blockquote><p>我们今天对辩证法有一种庸俗的理解，说辩证法就是“看待事物要分两个方面”。别人批评一个现象，你非要说“要辩证地看这件事，这件事也有好的一面嘛”。这是对辩证法的极大误读。这不叫辩证法，这叫诡辩法，它的唯一作用是把所有的事实都捣成一片糨糊，逃避一切有意义的结论。</p></blockquote>

<p><a id="markdown-矛盾律" name="矛盾律"></a></p>

<h4>矛盾律</h4>

<p>黑格尔的辩证法的核心是<strong>矛盾律</strong>。</p>

<p>黑格尔认为，矛盾的双方可以共存，但是处在互为差异、甚至互相冲突的动态之中。事物的正题和反题会发生强烈的冲突，这个冲突的结果并不是一方消灭另一方，而是正题和反题最终化为“合题”达到了协调，升华了。前面说过，有一个正题就可以找到它的反题，因此新的合题产生之后，它的反题也随之产生，这样就又产生了新的矛盾，又要有新的冲突和升华，再产生新的合题。</p>

<p>因此黑格尔认为，事物是不断变化的，这种变化是自发的、抑制不住的。同时，这种变化不是无序的，而是有方向的，这个方向就是较低级的正题和反题不断变成更高级的合题，也就是事物不断在向高级形态变化。</p>

<p>黑格尔的辩证法认为，矛盾可以存在，矛盾必须存在，矛盾就是世界的本质。</p>

<p>最适合诠释这个概念的并非西方哲学家，而是我们传统的“<strong>阴阳说</strong>”。中国古人早就认识到，阴和阳无处不在，凡事有阴又有阳。阴阳也不是你死我活的关系，而是既有冲突也可和谐共存的。就像“阴阳鱼”所画的那样，阴阳你中有我，我中有你，是一种互相冲突又互相依存的动态关系。</p>

<p><a id="markdown-绝对精神" name="绝对精神"></a></p>

<h4>绝对精神</h4>

<p>矛盾律变化到最后是什么呢？就是黑格尔的终极真理，黑格尔给它起个名字，叫做“<strong>绝对精神</strong>”。</p>

<p>之前哲学家们把世界分成了两部分：“主体”（“我”）和“客体”（客观世界）。既然世界成了分割开的两部分，那么主体中的概念，到底能不能符合客体中的现实，就成了难以解决的问题了。</p>

<p>用通俗的例子讲，我们一般人对世界的概念是这样的：这世上有两个东西是最真实的。一个是我自己大脑中的思维，一个是外面的客观世界。大脑和客观世界不是同一个东西，我们用什么来连接两者呢？用的是感觉器官，是感官告诉了我们的大脑，身边的世界是什么样子的。</p>

<p>问题在于，谁来保证这个感觉器官是可靠的？谁能保证就一定没有一个能力超强的家伙，在歪曲我们的感觉器官？谁又能保证，我们所有人的感觉器官都是可靠的？根本就没法保证嘛。</p>

<p>黑格尔说，之前的哲学家错就错在认为人的理性世界和客观世界是对立的、矛盾的两个事物。在黑格尔看来，矛盾的东西是统一的，因此人的理性和客观世界之间虽然是矛盾的，但并不是割裂的，而是可以通过不断地辩证统一，最终成为一个合题。这样，人的理性经过辩证运动后，就能和客观世界合为一体。换句话说，理性经过不断的辩证，就可以完全符合客观世界的真实面貌。理性就是世界的本质，世界的本质就是理性。所以说，宇宙的本质是精神，而且是一种理性精神。这个理性精神，就是黑格尔的“<strong>绝对精神</strong>”。</p>

<p>当然，绝对精神也是一样，也在不断地由低级到高级变化，也在不断地完善自己。</p>

<blockquote><p>绝对精神好难理解啊。</p></blockquote>

<p><a id="markdown-黑格尔的历史观" name="黑格尔的历史观"></a></p>

<h3>黑格尔的历史观</h3>

<p>接下来说说黑格尔的历史观。</p>

<p>黑格尔说世间万物的发展一定要符合绝对精神，因此他的绝对精神观是决定论的，他认为历史不是人类创造的，也不是个别事件的堆砌，历史有自己必然的进程，我们人类只是历史实现自己目的的工具。就算拿破仑那样的伟人，其实也是绝对精神的工具。并不是拿破仑自己要征服欧洲，而是绝对精神要利用拿破仑来推进历史的进程。所以黑格尔表面上赞扬的是拿破仑，其实是在赞扬绝对精神。</p>

<p>我们知道，黑格尔的历史观后来被马克思批判性地继承，变成了辩证唯物主义历史观——马克思也认为，历史的进程是有方向的，不可逆转、不可阻止的，但是可以预测的。</p>

<p>马克思预测历史通向的是共产主义，那么黑格尔的历史通向哪里呢？黑格尔的历史通向绝对精神。他认为宗教比自然科学更高级，哲学又比宗教高级。最后，绝对精神会通过哲学完成自己的发展，达到最完美的境界。</p>

<p>具体说来，那个被绝对精神决定了的、借以认识世界、实现绝对精神的人是谁呢？黑格尔说：就是我！哈哈哈哈！</p>

<p><a id="markdown-辩证法对生活的影响" name="辩证法对生活的影响"></a></p>

<h3>辩证法对生活的影响</h3>

<h4>个人思想的成长过程</h4>

<p>一个人是怎么成长的呢？一个人先有一个原有的思想（正题），然后在生活中遇到了这思想不能解决的问题（反题），思想和现实问题发生了冲突，才会引起他反思人生。这个反思的结果不可能说最后完全不顾以前的旧想法（正题），最后的新思想（合题）肯定是结合了正题和反题。这就代表着人变得更成熟了。</p>

<h4>幸福的最高境界</h4>

<p>我们追求个人幸福的最高境界并不是有钱有权有一大堆情人围着，并不是肉体享乐。哲学史上也没有哪个哲学家认为纵欲是快乐之道。连古希腊的享乐主义者追求的也不是肉欲的极限，而是适度的享乐、劳逸结合的生活。这是因为大家都发现一个问题，肉欲快乐固然很好，但是纵欲总是和它的反题——痛苦、空虚紧紧连在一起的。不存在某种只给人快乐、不带来痛苦的享乐。这正符合了辩证法的观点。</p>

<p>所以最后的结论就是，我们追求个人幸福的最高境界，不是纵欲，而是内心的平静。</p>

<p><a id="markdown-下篇" name="下篇"></a></p>

<h1>下篇：</h1>

<p><a id="markdown-第一章-傲慢与偏见" name="第一章-傲慢与偏见"></a></p>

<h2>第一章 傲慢与偏见</h2>

<p>叔本华的八卦。</p>

<p><a id="markdown-第二章-悲观主义" name="第二章-悲观主义"></a></p>

<h2>第二章 悲观主义</h2>

<p><a id="markdown-物自体" name="物自体"></a></p>

<h3>物自体</h3>

<p>叔本华骂黑格尔，自然也不会喜欢黑格尔的哲学。叔本华是康德思想的继承者。</p>

<p>我们前面说过，康德哲学的一大问题是，物自体这东西其实是自相矛盾的。</p>

<p>黑格尔的解决办法是取消主体和客体的对立关系，也就是说，“我”的理性就代表了真实的世界，根本没有物自体这个东西了。</p>

<p>叔本华的解决方法不同。他认同康德的形而上学，但是不认为物自体是完全不能认识的。物自体是超越理性，不能用理性知识体验的。但是我们观察自己的时候，可以不靠理性，而是靠非理性的“直觉”。用文绉绉的话说，叫“审视内心”。当我们处于这种状态的时候，就可以体会到物自体。</p>

<p>而且，叔本华还认为：物自体只有一个，这“一个”就是“生命意志”。</p>

<blockquote><p>但是“生命意志”这个词呢，在叔本华的理论中有专门的意思，跟我们平时聊天时的含义不同。除了“生命意志”，后面尼采的“权力意志”，存在主义的“存在”等等术语，也属于这个情况。</p></blockquote>

<p><a id="markdown-生命意志" name="生命意志"></a></p>

<h3>生命意志</h3>

<p>那么生命意志是个什么东西呢？</p>

<p>简单地说，<strong>生命意志是一股永不停歇的力量。这股力量驱使着万物去运动，去发展。</strong></p>

<p>比如人和动物的食欲性欲，比如植物破土而出的欲望。</p>

<p>动物没有理性，可是动物生下来就知道觅食、交配、躲避危险，在很多情况下比人的求生能力还要强。动物这么强大的生存能力哪儿来的呢？叔本华认为，这是背后的生命意志驱使的。生命意志的概念比一般的生物欲望还要宽泛，还包括没有生命的事物在内。</p>

<p>叔本华认为，宇宙中万事万物背后都有生命意志在驱动。小到磁石相吸，大到星球运行，背后的本质原因都是生命意志。在叔本华看来，生命意志是世界上最本质的东西，是不可抗拒的，是永不停歇的。</p>

<p>举例子说，我们以为自己生活、恋爱、结婚、工作是根据我们的理性选择的。而叔本华认为，真正驱动你的都是种种欲望：生殖的欲望、享乐的欲望、征服的欲望，等等。你以为你在靠理性生活，实际上躲在理性背后的是生命意志，生命意志在驱动你作出种种选择。</p>

<p>当然叔本华不会认为理性一点儿用都没有，他的形而上学就是理性的产物！那他认为，生命意志和理性之间是什么关系呢？我们可以打个比方：意志是个充满欲望的君王，但是它头脑糊涂，只知道发布命令，不知道该怎么去更好地达到目的。理性是个头脑清醒的老臣，它虽然对君王的命令有意见，但是限于身份，只能偶尔劝谏君王，大部分时候都是在用它的聪明才智去满足君王的欲望。理性不是没有用，只是实现意志的工具而已。</p>

<blockquote><p>叔本华对生命意志和理性关系的解读，和弗洛伊德在《梦的解析》中对“本我”（潜意识）、“自我”（意识）与“超我”（道德的自我）的解释如出一辙。</p></blockquote>

<p><a id="markdown-悲观主义" name="悲观主义"></a></p>

<h3>悲观主义</h3>

<p>在康德看来，理性就是我们这个世界的统治者。没错，理性确实管不了物自体，但是物自体也不影响我们的世界呀。叔本华说，不，物自体能影响我们的世界。不仅能影响，而且影响力超大，我们用理智控制不了。</p>

<p>在康德那里，这个世界的基础（理性）是井井有条的理性。在叔本华这里，这个世界的基础是无法控制的生命意志。</p>

<p>因此康德对世界的看法是乐观的。叔本华对世界的看法是悲观的。</p>

<p><a id="markdown-第三章-理性的危机" name="第三章-理性的危机"></a></p>

<h2>第三章 理性的危机</h2>

<p>我们研究西方哲学一直到黑格尔这里，不难看出，哲学家们都在坚守着理性不放。没有理性，我们就谈不上怀疑，谈不上辩论，谈不上构建理论，哲学也谈不上发展。然而在叔本华的理论里，最重要的东西是什么呢？是非理性的生命意志，比理性更本质、更重要。</p>

<p>这等于是在告诉人们：理性的能力实在太小了，理性既不能揭露世界的本质，也难以对抗本能的欲望。理性这东西实在没用。</p>

<p><a id="markdown-第四章-瞧这个人" name="第四章-瞧这个人"></a></p>

<h2>第四章 瞧！这个人</h2>

<h3>尼采的一生</h3>

<p>在莱比锡的旧书店里看到《作为意志和表象的世界》（叔本华的代表作）的，正是21岁的尼采。</p>

<p>尼采是叔本华的铁粉。参军期间，他把一张叔本华的照片放到自己的桌前，一遇到困难就大叫：“叔本华，救救我！”</p>

<p>尼采是一个充满激情的人，他喜欢音乐，喜欢爬山，崇拜音乐家瓦格纳，他大喊“上帝死了”，还自比是太阳。但是与激情的理论相对的，是他温厚的性格。这或许和他从小生活在女人圈中有关系。由于朴素的生活、温厚的性格和坚强的意志，尼采常被称为“圣人”。</p>

<p>这是两个常被误解的人：</p>

<ul>
<li>叔本华，一般人以为他是一个悲天悯人的慈祥老头。不！生活中他暴躁刻薄。</li>
<li>尼采，一般人以为他是一个放荡不羁的狂人——不，生活中他是一个温和的智者。</li>
</ul>


<p>尼采的感情生活也是不顺的。先后恋过两个女人（音乐家瓦格纳的妻子科西玛和后来跟好友保罗跑的莎乐美），都以失败告终。</p>

<h3>尼采“疯”了</h3>

<p>富于激情的尼采基本上度过的是悲剧的一生。他一生不被人理解，著作无人问津。只是在尼采“疯”啦之后，她的观点才得到承认。她的手稿被妹妹整理篡改，变成种族主义、国家主义的思想，成了希特勒纳粹的理论。</p>

<p>我想，对于不少同学来说，自大狂、精神病，这便成了他们对尼采的全部印象，他们这辈子或许不会多了解这人一丝一毫了。</p>

<p>是啊，人生中有太多比了解一个已死的疯子更重要的事。所以，凡是我们不理解的人，都当作是精神病算了：唯心主义是精神病，怀疑主义是精神病，尼采是精神病，一切哲学家都是精神病。当你在书店里眼睛扫过那些看不懂标题的书脊，心中是否在想：他们肯定都是故弄玄虚的骗子、自找麻烦的呆子，他们的书既看不懂也没有用。</p>

<p>这样的世界才简单、才可爱嘛。</p>

<p><a id="markdown-第五章-钢铁之躯" name="第五章-钢铁之躯"></a></p>

<h2>第五章 钢铁之躯</h2>

<h3>权力意志</h3>

<p>尼采继承了叔本华的形而上学。叔本华说物自体是“生命意志”，尼采给改造成了“权力意志”。</p>

<p>“权力意志”一词中的“权力”容易引起误解。这并不是政治权力的意思，而是指要让自己变得更强大、更强壮、更富创造力的欲望。尼采把人分成了强者和弱者。强者体现了权力意志，他们的特征是积极向上、勇于进取、勇于牺牲、善于创造。弱者相反，特点是胆小、保守、善妒、虚伪。</p>

<h3>奴隶道德和贵族道德</h3>

<p>奴隶道德，是属于弱者的道德。表面的内容是同情、仁慈、谦卑、平等。其实本质上，是弱者为了掩盖自己对强者的恐惧、嫉妒和自私，借助奴隶道德去限制强者。</p>

<p>弱者对强者感到恐惧，因此奴隶道德强调“仁慈”“谦卑”，把强者和特立独行的人看作是危险人物，要求社会限制他们的能力。弱者又因为自私就强调“同情”“分享”，要求强者给弱者分一杯羹。</p>

<p>贵族道德，是属于强者的道德。这种道德鼓励人们积极进取，特立独行，崇尚强大，鄙视软弱，追求创新，拒绝平庸，它代表了生命积极的一面。</p>

<p>尼采认为，奴隶道德和贵族道德最明显的区别在于：奴隶道德总是在禁止，不许人们做这做那；贵族道德则是在鼓励人们自由创造。尼采并不完全反对奴隶道德，他反对的是把奴隶道德强加在强者的身上，他认为这会限制人类的发展。</p>

<p>那有人说了，尼采的道德观不是会造成弱肉强食吗，不是会造成强者欺凌弱者吗？尼采的回答是，人的本性就是残忍的。</p>

<p>尼采的道德观和基督教道德有明显的矛盾。</p>

<p>尼采认为，基督教道德是典型的奴隶道德，本质是伪善的。基督教鼓励人们变得谦卑，其实就是鼓励人们做弱者。所以尼采大喊“上帝死了！”意思是，他想去掉上帝。如果没了上帝，人们也就不需要无条件地遵守基督教道德了。</p>

<p>尼采反对人人平等，这和法国大革命也有一定的关系。在法国大革命中，带着民主之名的雅各宾派进行了恐怖统治和血腥屠杀，这让很多欧洲思想家看到了“多数暴政”的危险。在尼采看来，最聪明、最有创造力的人在这个社会里是少数，庸人总是多数，而原始的民主模式总是要少数人听多数人的话，这就等于让少数的聪明人屈服于庸常的大多数。</p>

<p>最后再说一下，尼采和叔本华有一个共同之处，他们都鄙视女性。这一定程度上也是当时社会大环境所造成的。</p>

<p><a id="markdown-第六章-被侮辱的与被损害的" name="第六章-被侮辱的与被损害的"></a></p>

<h2>第六章 被侮辱的与被损害的</h2>

<h3>克尔凯郭尔的一生</h3>

<p>叔本华讨厌黑格尔，尼采喜欢叔本华，也讨厌黑格尔。现在我们要讲的，是第三个讨厌黑格尔的人。他叫克尔凯郭尔（又译祈克果），差不多和叔本华一个时代，比尼采要大一辈。</p>

<p>克尔凯郭尔一生痛苦。</p>

<p>我们之前在说斯宾诺莎的时候提到，越是生活痛苦的人越关心个人幸福。克尔凯郭尔的遭遇如此痛苦，可以想象，他对个人幸福、个人命运会有多么关心！他又受到他父亲的影响，非常关注信仰。</p>

<h3>形而上学与自由意志的矛盾</h3>

<p>他不满意黑格尔的地方在于，黑格尔把全体人类都纳入到他宏大的形而上学和历史决定论中，把每个人都说成是历史棋盘上的棋子。个人意志、个人幸福和个人信仰在这个宏大的历史中微不足道，没有自己的位置。在黑格尔的形而上学中，每个人都得屈从于必然的历史进程，个人就失去了选择的自由。尤其是黑格尔把宗教也纳入到自己的哲学系统中，好像人类信仰宗教不是自觉自愿的，而是在绝对精神的驾驭下，被动地去信仰。</p>

<p>克尔凯郭尔不同意黑格尔的这些说法：信仰是很个人的事情，怎么能不经过自己的选择，被动地信仰呢？</p>

<h3>信仰与理性的矛盾</h3>

<p>克尔凯郭尔也反对用理性研究宗教。</p>

<p>克尔凯郭尔认为，理性和信仰是对立的，必须要抛弃理性才能信仰。相反，“如果有一天人似乎成功地使基督教变得合理了，那么那一天就是基督教寿终正寝的日子”。这正好符合前面教父们说过的那句话：“正因为荒谬，我才相信。”</p>

<p>这个思想和中国的禅宗很像。佛教认为终极真理是超越理性的。但是在禅宗之前，很多佛教宗派还在用理性去讨论、讲述佛教的终极真理。他们的意思是，没错，信仰佛教，达到“开悟”是一种非理性的行为，但是不妨碍我们先讨论讨论，不妨碍老师先给你讲讲佛教的大意。所以修行佛教也是要学习的，学什么“四圣谛”“三法印”等等佛教的知识。但是禅宗认为，理性妨碍了我们把握佛性，不是对信仰的帮助，反倒是对信仰的阻碍。所以有的禅宗法师拒斥一切理性思维，他们常说各种看起来词不达意、答非所问的怪话，为的是阻止修行者的理性思考。更为极端的做法，是一言不发，或者用棒喝之类非常规的办法，让修行者完成“信仰的飞跃”。</p>

<h3>克尔凯郭尔思想的意义</h3>

<p>克尔凯郭尔的思想有什么重要的地方呢？我认为，克尔凯郭尔的思想揭示了一对矛盾：形而上学和自由意志的矛盾。</p>

<p>形而上学的目的是什么？是用理性的方法找到终极真理。这个真理至高无上，可以指导我们的一切行为。</p>

<p>好，经过了这么多代哲学家们的努力，黑格尔好不容易给你们找到答案了。</p>

<p>结果呢？结果克尔凯郭尔偏偏不满意了！</p>

<p>克尔凯郭尔的意思是，如果存在一个能指导一切、包括指导个人行为的终极真理，那不就意味着个人的自由都被束缚了吗？假如我们没有自由意志的话，那我们不就是木偶了吗？</p>

<p><a id="markdown-第七章-科学新发现理性的反击" name="第七章-科学新发现理性的反击"></a></p>

<h2>第七章 科学新发现：理性的反击</h2>

<h3>科学捍卫理性</h3>

<p>叔本华、尼采和克尔凯郭尔从不同的角度动摇了形而上学。</p>

<p>康德的形而上学很厉害，可是叔本华说的似乎也有道理，控制我们生活的，似乎是不受抑制的欲望，而不是冷静的理性。尤其是第一次和第二次世界大战，世界到处都是癫狂、绝望与毁灭，这怎么能让人相信世界是在纯理性的形而上学的统治之下呢？这更像是控制不住的生命意志在到处肆虐吧！</p>

<p>形而上学的失败，就是理性的失败。</p>

<p>好在我们还有科学。近代科学创造的种种神迹，使人们空前的自信。</p>

<p>科学创造的奇迹，就是理性创造的奇迹。因为科学是纯理性的。科学使用的是归纳法和演绎推理。所有的科学理论，都必须用理性的文字表达，都必须经得住严谨的实验。</p>

<h3>科学的发展</h3>

<p>早在第一次世界大战之前，科学就展现了其认识世界的能力。</p>

<p>首先是物理学的进步。牛顿力学定律和万有引力定律，向我们揭示了客观世界的真面目。</p>

<p>达尔文进化论的出现，将触角伸向了有机体，更是给神学致命一击。</p>

<p>而心理学的发展，直接染指精神领域。</p>

<p>至此，人们对科学的信心日益增高，相信：假以时日，科学可以解决一切问题。就算是艺术、哲学那些过去科学不能触碰到的领域，将来运用心理学也可以完美解释。</p>

<blockquote><p>如果科学真能完美解释艺术，那将是艺术的末日。</p></blockquote>

<h3>科学发展的影响</h3>

<p>科学发展的第一个影响是把宗教完全打趴下了。</p>

<p>科学发展的第二个影响，是机械论和决定论的再次抬头。</p>

<blockquote><p>这里说的科学，指的是一战之前的科学。一战之后的相对论和量子力学等又再次颠覆了人们的认识。</p></blockquote>

<p><a id="markdown-第八章-人猿星球" name="第八章-人猿星球"></a></p>

<h2>第八章 人猿星球</h2>

<h3>达尔文的进化论</h3>

<p>进化论对人类思想的影响不亚于麦哲伦环球航行。</p>

<p>进化论是一个假说，但也是一个绝妙的假说。</p>

<p>牛顿力学用一个极为简单的理论完美解释了复杂的物理世界。但牛顿力学还没有攻克生物世界。牛顿力学能解释生物体中的肌肉是如何运动的，却不能解释生物为什么会长成这样或那样。当人们观察大自然的时候，会发现生物的每一个细节、每一个器官的特性都恰到好处，都在以最有效的方式保证个体的生存（假如你没有这种感觉，随便去看两集《动物世界》就明白了）。生物世界中处处充满了绝妙的“设计”，这无法用常理解释，很容易让人想到，是不是有一个万能的上帝设计出了这一切？</p>

<p>进化论把这神秘性给打破了。进化论就像牛顿力学那样，用极为简单的理论解释了复杂的世界，而且逻辑严谨，能自圆其说，不需要任何超自然力量的干涉，比牛顿力学更容易让人接受。</p>

<p>但是，进化论是一门被广泛误解的理论，现将一些常见的误解列于下：</p>

<ol>
<li>进化论就是生物“从低级到高级”的“进化”。进化论应该称为“演化论”，因为这种变化仅仅是适应环境的变化，无所谓低级和高级，所以也不能称之为“进化”。</li>
<li>生物的后天努力可以改变基因。</li>
<li>进化论还只是一个未经验证的假说。所有科学理论都是假说。</li>
<li>将进化论应用到社会中的社会达尔文主义。社会达尔文主义认为社会也应该优胜劣汰、弱肉强食。其中最具有代表性的就是纳粹种族主义。</li>
</ol>


<p>关于进化论，有些物种的“利他行为”很难从个体生存角度解释。关于这点，英国的里查德道金斯的《自私的基因》给出了答案。出发点就是：不要从个体或者种群的角度去理解进化论，从基因的角度去理解进化论就可以了。这本书的观点非常新颖，值得一读。</p>

<h3>进化论对哲学的影响</h3>

<ol>
<li>沉重打击了神学的权威。人不是上帝创造的。</li>
<li>消除了人类的神圣性。人类和其他动物没有区别。</li>
</ol>


<h3>关于进化论的一些推论</h3>

<p><strong>推论一</strong>，叔本华说生物有生命意志，其中生殖是最重要的。生物的一切行为都是为了生殖。这个观点正好符合进化论。进化论也认为，为了能将基因保留下来，一切都应该以生殖为目的。所以自然界的很多生物，一旦过了生育的年龄马上就会衰老死亡。人类女性在更年期后，雌激素一旦停止分泌，身体马上加速衰老，疾病增多，就是这个道理。</p>

<p><strong>推论二</strong>，尼采说权力意志，说每个人都想成为强者，这也在一定程度上符合进化论。因为生物在进化中必须变得越来越强，才能不断增强种族延续的可能。雄性动物都占有欲超高，要经过激烈的斗争，选出最强的，才有资格和雌性交配。</p>

<p><strong>推论三</strong>，有的老师说，劳动是人的天性和本能，这是对的吗？答案很简单，不对。因为劳动会带来肉体痛苦（劳累、枯燥等）。愉悦和痛苦是人类进化出来的一套奖惩系统，为的是指导人如何提高自己的生存概率。在远古时代，会导致愉悦的行为都是利于生存的，是人的天性，会导致痛苦的行为是不利于生存的，是违反天性的。</p>

<p>在远古时代，能量是生命最稀缺的资源。劳动会让人消耗能量，因此基因让人体在劳动的时候获得疲劳的痛苦，用来警告人体，能不动尽量不动，可以最大程度地节约能量，提高生存的可能。所以从进化论的角度说，劳动是违反天性的。</p>

<blockquote><p>从进化论的角度认识一些行为，包括一些食物，对人类的作用，是个非常新颖且有说服力的方法。</p></blockquote>

<p>认为劳动违反天性是在否认劳动的价值吗？恰恰相反，正因为承认了劳动违反人的天性，是一件痛苦的事情，劳动者才值得我们尊敬和歌颂。他们是在忍受天性带给他们的痛苦，为人类创造价值，因此是伟大的。假如说劳动是人的天性，那劳动者有什么好歌颂的呢？我们会说，哟，你劳动了？这不是你的天性吗？不就是你正想要的吗？我自己歇会儿，我把劳动的机会让给你，你是不是还得因此感恩戴德啊？</p>

<p><a id="markdown-第九章-科学倒打一耙" name="第九章-科学倒打一耙"></a></p>

<h2>第九章 科学倒打一耙</h2>

<p>一战之前的科学发展，使人类信息爆棚，相信，假以时日，科学可以解释所有事情。但是一战之后的相对论和量子力学，又彻底颠覆了人们的认知，包括信心。</p>

<h3>相对论</h3>

<p>相对论的光速不变原理和时间空间质量的相对性，都颠覆了牛顿力学系统，这个我们曾经深信不疑的理论。这个颠覆，也使我们想起了休谟：</p>

<blockquote><p>休谟说，无论我们过去看到多少重复发生的事件，我们也不能断言这事件在未来一定会再次发生。无论太阳升起过多少次，也不能肯定明天太阳一定会再次升起。当时很多人都觉得他是抬杠。
可是在相对论出现之前，全世界范围内的各种科学实验、天文观测和机械生产，无数次证明了牛顿力学是正确的。可接下来的结果呢，有一天人们发现：哇咧，新的观测数据真的就出现例外了，真的就不符合预测了！这不就是休谟的预言吗？</p></blockquote>

<h3>量子力学</h3>

<p>量子力学的测不准原理，说明在量子世界没有决定论，也没有因果律。科学家对于一个电子的状态，只能说“动量大约是多少，位置大约在哪里”。至此，物理学成为了一个不确定的学说。</p>

<p>这意味着，人类对世界的认识能力又受到了进一步的限制，而且只要量子力学不被推翻，这限制就永远无法超越。那种认为“随着不断发展，科学终究能解释明白所有事情”的想法，就变得很值得商榷了。</p>

<blockquote><p>这是不是有点类似《三体》中的智子对地球科学研究的封锁呢：是不是另外一种文明通过测不准原理，封锁了地球对微观世界的进一步认识？想想，有点可怕啊。</p></blockquote>

<p><a id="markdown-第十章-寻欢作乐" name="第十章-寻欢作乐"></a></p>

<h2>第十章 寻欢作乐</h2>

<p>罗素一生的情史。</p>

<p><a id="markdown-第十一章-快乐王子" name="第十一章-快乐王子"></a></p>

<h2>第十一章 快乐王子</h2>

<p>维特根斯坦的一生。</p>

<p><a id="markdown-第十二章-逻辑实证主义" name="第十二章-逻辑实证主义"></a></p>

<h2>第十二章 逻辑实证主义</h2>

<p>罗素的学生维特根斯坦对于逻辑实证主义的贡献大过罗素。维特根斯坦的《逻辑哲学论》完成了逻辑实证主义。后来，他发现语言并不能停留在表面的逻辑分析上，所以他又亲手毁了逻辑实证主义。</p>

<p><a id="markdown-第十三章-实用主义" name="第十三章-实用主义"></a></p>

<h2>第十三章 实用主义</h2>

<p>实用主义和逻辑实证主义的思路不一样，逻辑实证主义看到的是科学的严谨性，希望哲学也能和科学一样严谨。实用主义则看重科学的实用性，看到科学家没哲学家那么多废话，在科学研究中什么理论好用就相信什么。实用主义者觉得，哲学也得像科学这样，不再说空话，不再讨论空泛的大问题，而是重视哲学的实用性。</p>

<p>比如对于上帝存在不存在的问题，实用主义者说，假使相信上帝会给我们带来好的结果，那么我们就相信上帝是存在的。这观点恐怕宗教信徒和无神论者都没法接受。</p>

<p>实用主义在美国很受欢迎，实用主义哲学家也大多是美国人。有人说，这是因为实用主义正好契合了美国人的务实精神——这是好听的说法，难听的说法是美国人世俗功利。</p>

<p>但这种实用主义未必不能收到好效果。</p>

<p>比如美国的司法采用判例法。意思是，过去类似的案子是怎么判的，这回的案子就参考着判。或许有人认为这过于儿戏了，难道国家制定的法律不是最大的吗？但判例法认为，一次性制订的司法是很难完善的。那么我们就通过每一次的审判，来不断纠正、完善国家的法律。你看，这不正好和实用主义者的真理观吻合吗？</p>

<p>也不要以为实用主义只有西方人才喜欢。实用主义离我们也不远，有一句话我们很熟悉：</p>

<p>“黑猫白猫，能抓住老鼠就是好猫。”</p>

<p><a id="markdown-第十四章-终结形而上学" name="第十四章-终结形而上学"></a></p>

<h2>第十四章 终结形而上学</h2>

<h3>证伪主义</h3>

<p>波普尔：<strong>科学理论必须可以证伪。</strong></p>

<p>我们说过，在休谟看来归纳法不可靠。</p>

<p>证伪主义的回答是，没错，用归纳法总结出的科学理论是不可靠的，我们的应对办法是：在它被证明不可靠之前，凑合着用。</p>

<p>证伪主义有点像是科学理论上的进化论。</p>

<p>在形而上学统治的科学观下，人们认为存在着一个绝对真理，我们在形而上学的指导下，可以带着科学大踏步地朝着这个真理前进。</p>

<p>证伪主义的科学观是，人类提出的各种科学理论有点像是基因突变，科学家们发散思维，想出各种充满想象力的假说。证伪就如同自然环境对基因的筛选，经不住证伪的假说都被淘汰，留下的都是经得住检验的，也就是暂时正确的科学理论。那些留下来的理论，科学家们也在不断地尝试证伪，一旦证明是错的，就进行修改。这样科学理论就会越来越完善。这个试错、修改、完善的过程是无休止的，科学也因此会越来越接近真理。</p>

<h3>证伪主义的作用</h3>

<p>证伪主义非常好用。在现实生活里，这个标准可以很方便地把巫术、迷信和科学区分开。</p>

<p>算命、巫术为了吸引人，不得不作出预言，但是他们拒绝把这些预言说得很清楚，而是用尽量模糊的话预测，如“你过几天要倒霉”“你过几天要遇到贵人”。问题是，“过几天”是几天呢？什么样的事算是“倒霉”呢？因为他们没有明确下定义，当事人在未来的任何遭遇都可以用这个预言来解释，因此这些预言是不可证伪的。换句话说，这些预言没提供任何有价值的信息。</p>

<p>证伪主义不光能干掉宗教和巫术，还能干掉一些哲学命题。前面的“黑客帝国”问题，证伪主义怎么回答？“我们生活在一个无法感觉到异常的虚拟世界里”，这个命题不可证伪，所以这个问题毫无意义。同样，决定论也是不可证伪的。</p>

<h3>证伪主义对“无罪假定”的解释</h3>

<p>证伪主义对社会哲学也有影响。</p>

<p>现在，世界大部分国家的刑事司法都接受“无罪推定”原则。意思是说，假如没有足够的证据证明一个人是犯罪嫌疑人，那么就应认为他是无罪的。</p>

<p>为什么要坚持这个原则呢？除了人权精神外，还可以用证伪主义来解释。</p>

<p>如控告某人参与了一起诈骗，如何证伪这句话呢？首先，被告人必须找出被控告这段时间内的所有活动细节，从而证明自己没有和诈骗团伙有过联系。且不说和团伙有过联系又没参与诈骗的人该怎么说吧，就说真没联系过，他又该怎么向法庭彻底证明这一点呢？证明自己没出过门、没见过犯罪嫌疑人？那你有没有可能用电话联络？你没用电话，那有没有用过电子邮件？电子邮件没用过，那你用没用过飞鸽传书，用没用过烽火？你如何证明自己没有在被控告的时间内使用过烽火？找来邻居证明你们家那几天从来没冒过烟吗？邻居说我中午打了一个盹，没看见，那你就算有罪啦？“某人犯过某罪”不可证伪。相反，“某人没犯过某罪”，这个命题是可以证伪的。只要找到他犯罪的证据就可以推翻这个假设了。</p>

<p>因此，在都没有充足证据的情况下，在两个命题中，法院只能采信可证伪的后者，而不会采信前者。</p>

<h3>证伪主义的政治观</h3>

<p>波普尔还根据证伪主义提出了自己的政治观。</p>

<p>有一种社会观念，认为历史的发展轨迹是必然的，这种观念叫作“历史主义”，黑格尔和马克思都持这样的观点。</p>

<p>波普尔不同意这样的看法。历史主义的逻辑是，既然自然社会存在规律，那么历史也应该有规律。我们历史主义者像科学家一样揭示了这个规律，人类按照我们揭示的规律奋斗就可以了。但证伪主义认为，没有永恒不变的真理，所有的理论都可能是错的。所以，也就不存在什么“历史的必然规律”。而且科学理论未来的发展方向也是难以预测的。就比如在牛顿时代，没人能够预测相对论的出现，也没人能预测牛顿理论将会在哪里出问题。因此，预测未来的历史规律，一劳永逸地设计一种绝对正确的政治制度，也是不可能的。用钱穆先生的话说：“制度须不断生长，又定须在现实环境要求下生长。”</p>

<p>波普尔因此主张应当建立“开放社会”，要求执政者能够广泛接受意见，赋予大众质疑政策的权利。因为执政理论和科学理论一样，永远都可能是错的。必须要不断地接受证伪，才能保证理论的正确。</p>

<p>这正是现代民主思想的核心精神。我们有的人可能会简单地以为，民主就是“大家一起投票，多数说了算”，就是“少数服从多数”。其实这种原始的民主制度有极大的缺陷，这个缺陷在雅典人判苏格拉底死刑、法国大革命的屠杀、火烧布鲁诺、希特勒被民众选上台等事件中已经暴露无遗，早就被现代社会抛弃了。</p>

<p>证伪主义的政治观，最关心的不是谁制定的政策，而是无论谁制定的政策，都不能成为绝对真理。不管是美国总统下的命令还是全世界人民投票的结果，都要给别人留出修改、推翻它的机会。在这种制度下，无论谁被民选上台，也不会给世界造成太大伤害。因为他上台后的个人权力非常有限，哪怕加个税都需要国会批准。他还必须随时面对全国媒体的质疑、随时可能被弹劾、干四年就得重选、干八年就得下台。这制度不能保证总统想出“最正确”的决策，但可以保证一旦总统作出“错误”的决策，举国上下有无数可以阻止它的机会。</p>

<p>可以随时“纠错”而不是“多数说了算”，这才是现代民主制度的核心精神。</p>

<h3>证伪主义与形而上学</h3>

<p>那证伪主义是怎么终结形而上学的呢？</p>

<p>前面说过，形而上学必须坚持理性工具。理性要遵守逻辑规则，那最基本的逻辑工具是什么？是演绎推理，对吧？我们前面整本书的形而上学，都是在遵守“因为⋯⋯所以⋯⋯”这样的逻辑规则，一步一步推理下来，才让您信服的。</p>

<p>演绎推理的规则是，从一个绝对为真的命题出发，推出一个绝对为真的结论。只有这样，才能保证每一个结论都是正确的。</p>

<p>但是证伪主义反对的，恰恰就是绝对为真的命题——因为绝对为真的命题是不可证伪的！</p>

<h3>证伪主义的问题</h3>

<p>当我们用证伪主义一一分析前面的哲学理论，会发现它们全都是不可证伪的。</p>

<p>比如“运动是绝对的，静止是相对的，没有绝对静止的事物”，这就是一个典型的不可证伪的命题。要证伪这个命题，就要找到一个永远静止的事物，但是人不可能观测“永远”那么长的时间。</p>

<p>再比如“物质不依赖意识存在，物质决定意识”这个命题，如何证伪呢？那就必须找出一个“不依赖物质存在的意识”。那么，能设计出一个实验来证明这一点吗？</p>

<h3>证伪主义待续</h3>

<p>证伪主义说完了，这个理论听上去很棒，在现实中也确实好用。不过我要告诉你，在科学领域，证伪主义有时也不靠谱。</p>

<p><a id="markdown-第十五章-实用主义的科学" name="第十五章-实用主义的科学"></a></p>

<h2>第十五章 实用主义的科学</h2>

<p><a id="markdown-第十六章-科学是什么" name="第十六章-科学是什么"></a></p>

<h2>第十六章 科学是什么</h2>

<p><a id="markdown-第十七章-永恒的终结" name="第十七章-永恒的终结"></a></p>

<h2>第十七章 永恒的终结</h2>

<p><a id="markdown-第十八章-存在与虚无" name="第十八章-存在与虚无"></a></p>

<h2>第十八章 存在与虚无</h2>

<p><a id="markdown-第十九章-西西弗的神话" name="第十九章-西西弗的神话"></a></p>

<h2>第十九章 西西弗的神话</h2>

<p><a id="markdown-第二十章-人生的意义" name="第二十章-人生的意义"></a></p>

<h2>第二十章 人生的意义</h2>

<p><a id="markdown-结束" name="结束"></a></p>

<h1>结束</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[layoutSubviews的调用机制]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/03/28/when-is-layoutsubviews-called/"/>
    <updated>2017-03-28T09:25:06+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/03/28/when-is-layoutsubviews-called</id>
    <content type="html"><![CDATA[<!-- more -->


<h2><code>layoutSubviews</code>什么时候被调用？</h2>

<p>为了方便描述，假设视图结构如下：</p>

<p><strong>父视图</strong>包含<strong>子视图1</strong>和<strong>子视图2</strong>。</p>

<ol>
<li><code>init</code>不会调用<code>layoutSubviews</code>，即使使用了<code>init(frame: CGRect)</code>进行初始化。</li>
<li>当调用<code>addSubview(:)</code>将子视图2加入父视图的时候，子视图2和父视图的<code>layoutSubviews</code>会被调用，但是子视图1的<code>layoutSubviews</code>方法不会被调用。</li>
<li>当我们设置子视图2的<code>frame</code>的时候，如果<code>frame</code>的<code>size</code>有变化，同结论2<code>addSubview</code>；如果<code>frame</code>的<code>size</code>没有变化，则不会有<code>layoutSubviews</code>被调用。</li>
<li>当调用<code>removeFromSuperview</code>将视图2从父视图中删除的时候，只有父视图的<code>layoutSubviews</code>会被调用。</li>
<li>当旋转设备的时候，只有根视图的<code>layoutSubviews</code>会被调用。</li>
<li>当滑动<code>UIScrollView</code>的时候，<code>UIScrollView</code>的<code>layoutSubviews</code>会被调用。</li>
</ol>


<h2>auto layout和autoSizing</h2>

<p>以上结论有个前提：视图通过设置<code>frame</code>或者autoSizing机制确定位置和大小，不使用auto layout。</p>

<blockquote><p><strong>auto layout和autoSizing的区别</strong>：autoSizing确定的是子视图和父视图之间的位置大小关系，auto layout确定的是子视图、父视图以及兄弟视图之间的位置大小关系。</p></blockquote>

<p>在使用auto layout的时候，当调用<code>addSubview(:)</code>将子视图2加入父视图的时候，子视图2和父视图的<code>layoutSubviews</code>会被调用，同时子视图1的<code>layoutSubviews</code>方法也会被调用。设置<code>frame</code>和<code>removeFromSuperview</code>有类似的结论。</p>

<h2><code>setNeedsLayout</code>和<code>layoutIfNeeded</code></h2>

<ul>
<li><code>setNeedsLayout</code>：如果一个视图调用了<code>setNeedsLayout</code>，那么在下一个更新周期该视图的<code>layoutSubviews</code>会被调用。</li>
<li><code>layoutIfNeeded</code>：如果一个视图调用了<code>layoutIfNeeded</code>，那么该视图的<code>layoutSubviews</code>会被<strong>立刻</strong>调用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理多个手势之间的关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures/"/>
    <updated>2017-03-03T13:11:55+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures</id>
    <content type="html"><![CDATA[<ol>
<li>可以为同一个view添加两个相同类型的手势吗？比如添加两个<code>UITapGestureRecognizer</code>到同一个view。</li>
<li>如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</li>
<li>如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</li>
</ol>


<!-- more -->


<p><br></p>

<p>单个手势的响应过程参考<a href="http://hongchaozhang.github.io/blog/2015/10/21/touch-event-in-ios/">iOS中的触控事件机制</a>。但是上面几个问题需要考虑多个手势之间的关系，超出了上面文章的讨论范围。下面，我们就来讨论一下上面几个问题。</p>

<h3>1. 可以为同一个view添加两个相同类型的手势吗？比如添加两个UITapGestureRecognizer到同一个view。</h3>

<p>可以为view添加多个不同的<code>UIGestureRecognizer</code>，比如pan和tap，可以同时起作用，但是如果你想<strong>加入两个tap手势，第二个会将第一个手势覆盖</strong>。这个时候，至少需要为其中一个tap手势添加delegate，并实现下面的方法，为两个tap同时存在的情况返回true：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRecognizeSimultaneouslyWith</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture&rsquo;s delegate may return YES.</p></blockquote>

<h3>2. 如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</h3>

<p>如果两个手势之间没有识别上的困难，那么不用任何处理，比如tap和pan，但是如果有关系，比如single tap和double tap，rotate和pinch，这需要明确两者之间的关系。</p>

<p>如果不希望在double tap的同时触发两次single tap，需要在single tap的delegate中实现方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRequireFailureOf</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，可以保证single tap会等待double tap失败之后再被触发。缺点是single tap反应迟钝。</p>

<p>如果希望在rotate的同时可以进行pinch，需要在pinch或者rotate的手势的delegate中实现方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRecognizeSimultaneouslyWith</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，rotate和pinch就能同时被识别。</p>

<h3>3. 如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</h3>

<p><code>UIGestureRecognizerDelegate</code>中的方法并没有限制在同一个view之中，所以，不同view之间的手势关系与1和2的处理相同。</p>

<h3>注意</h3>

<p>如果为手势实现了delegate方法，那么<code>UIGestureRecognizer</code>里面的类似的方法将不再起作用。比如：</p>

<p>如果设置了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">singleTapOnMapWidgetViewerGestureRecognizerDelegate</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">require</span><span class="p">(</span><span class="nl">toFail</span><span class="p">:</span> <span class="n">doubleTap</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就不起作用了，必须通过<code>UIGestureRecognizerDelegate</code>里面的方法实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[室内定位技术现状]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/02/21/indoor-position/"/>
    <updated>2017-02-21T13:37:02+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/02/21/indoor-position</id>
    <content type="html"><![CDATA[<ol>
<li>室内定位各种技术的特点。</li>
<li>室内定位技术的现状：简单介绍苹果、高德、百度、识途等公司的技术。</li>
</ol>


<!-- more -->


<h2>室内定位技术简介</h2>

<p>室内定位的应用场景，参见<a href="https://senion.com/indoor-positioning-for-retail/">室内定位应用场合</a>。</p>

<h3>室内地图</h3>

<p>要进行室内定位，首先需要有室内地图。</p>

<h3>室内定位技术</h3>

<table>
<thead>
<tr>
<th> &mdash; </th>
<th> 工作原理  </th>
<th> 应用场合  </th>
</tr>
</thead>
<tbody>
<tr>
<td> GPS </td>
<td> 接收多个卫星信号计算位置，信号中包含卫星信息和时间戳，根据时间差计算距离。 </td>
<td> 室外定位跟踪，农业和军事应用 </td>
</tr>
<tr>
<td> 基站定位 </td>
<td> 接收多个基站信号，信号中包含基站信息，根据信号强度计算距离。</td>
<td> &mdash; </td>
</tr>
<tr>
<td> Wi-Fi    </td>
<td> 接收多个Wi-Fi信号，根据强度计算距离。   </td>
<td> 室内定位 </td>
</tr>
<tr>
<td> 蓝牙</td>
<td> 接收低功耗蓝牙beacon发射的信号获取beacon信息，通过信号强度计算距离。  </td>
<td> 室内定位 </td>
</tr>
<tr>
<td> RFID</td>
<td> &mdash;  </td>
<td> 存货跟踪，厘米级精度定位要求 </td>
</tr>
<tr>
<td> 地磁</td>
<td> 在地磁指纹采集的基础上，通过磁感应器和网络请求获取位置信息。</td>
<td> &mdash; </td>
</tr>
<tr>
<td> NFC </td>
<td> &mdash;  </td>
<td> 支付／票务</td>
</tr>
<tr>
<td> 陀螺</td>
<td> 在初始状态已知的情况下，通过积分计算未来状态。    </td>
<td> 和其它定位方式结合使用，在保证一定精度的基础上，降低功耗。 </td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th> &mdash;   </th>
<th> GPS</th>
<th> 基站定位</th>
<th> Wi-Fi</th>
<th> 蓝牙</th>
<th> RFID   </th>
<th> 地磁 </th>
<th> NFC    </th>
<th> 陀螺  </th>
</tr>
</thead>
<tbody>
<tr>
<td> 配置密度   </td>
<td> 全球    </td>
<td> 200米-2000米 </td>
<td> 20米-50米 </td>
<td> 1米-50米 </td>
<td> 1厘米-100米 </td>
<td> 全球 </td>
<td> &mdash;    </td>
<td> 不限  </td>
</tr>
<tr>
<td> 可接入（1-5）   </td>
<td> 4  </td>
<td> 4  </td>
<td> 3    </td>
<td> 4   </td>
<td> 2 </td>
<td> 2    </td>
<td> 3 </td>
<td> 4</td>
</tr>
<tr>
<td> 精度（1-5）</td>
<td> 1(10米) </td>
<td> 0.5(100米)   </td>
<td> 3(3-5米)  </td>
<td> 4(1-3米) </td>
<td> 5(厘米级别) </td>
<td> &mdash;  </td>
<td> 5(厘米级别) </td>
<td> 0.5(10米／100米) </td>
</tr>
<tr>
<td> 隐私安全（1-5） </td>
<td> 3  </td>
<td> 3  </td>
<td> 2    </td>
<td> 3   </td>
<td> 4 </td>
<td> 5    </td>
<td> 4.5    </td>
<td> 5</td>
</tr>
<tr>
<td> 代价（1-5）</td>
<td> 5  </td>
<td> 5  </td>
<td> 3    </td>
<td> 4   </td>
<td> 2 </td>
<td> 1.5  </td>
<td> 3 </td>
<td> 1</td>
</tr>
</tbody>
</table>


<p> 参考：<a href="http://lighthouse.io/indoor-location-technologies-compared/">Indoor location technologies compared</a></p>

<p> <strong>指纹技术</strong></p>

<p> 直接根据Wi-Fi或者蓝牙的信号强度计算距离会有比较大的误差，因为每个接入点的信号强度衰减模型不统一，并且受所在环境（遮挡等）的影响比较大。所以，就实地采集每个位置处每个接入点的信号强度，并存入服务器供后续定位请求使用。</p>

<p> 其它定位原理参考<a href="http://bbs.lbsyun.baidu.com/forum.php?mod=viewthread&amp;tid=116547&amp;extra=page%3D1">室内定位技术原理揭秘</a>。</p>

<h2>各厂商实现的室内定位技术</h2>

<h3>苹果</h3>

<p>苹果在2014年的WWDC上（Taking Core Location Indoors）推出了iBeacon技术和协议，以及对应的SDK，实现室内定位。</p>

<p>关于iBeacon的几个问题。</p>

<ul>
<li><p>我部署的iBeacon节点是否会被别的商家使用？</p>

<p>  回答是Yes！由于iBeacon协议开放，而且易于伪造，你部署的节点完全可以被竞争企业使用。甚至是伪造一个跟你的ID完全相同的Beacon。防止冒用蹭用是一个课题。</p>

<p>  设备商应该会给出一个解决方案，但截止目前还是可以被冒用。由于现在还没大规模部署，还有时间去解决这个问题。</p></li>
<li><p>iBeacon的耗电量如何？</p>

<p>  现在市售方案除Estimote比较特殊外，基本上都是采用的TI2540或2541方案。Beacon作为蓝牙基站发射时间特别短只有4mS左右。</p>

<p>  Beacon的发射周期可调，比如苹果规定100mS发射一次，也就是说100mS里只发射4ms。不同的使用场景可以根据实际需要调整发射周期、发射频率，功耗也会有差别，短的半年，长的3-4年。</p></li>
</ul>


<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.voidcn.com/blog/u012716788/article/p-4590383.html">iBeacon能否精确室内定位等10个技术问题</a></li>
</ul>


<h3>高德</h3>

<p>高德地图支持Wi-Fi和蓝牙iBeacon室内定位。如果是iOS系统，只能用iBeacon定位，因为iOS系统不提供Wi-Fi底层数据接口。</p>

<table>
<thead>
<tr>
<th> 设备 </th>
<th> 精度  </th>
<th> 支持系统   </th>
<th> 部署密度  </th>
<th> 设备单价 </th>
<th> 支持标准  </th>
</tr>
</thead>
<tbody>
<tr>
<td> WIFI </td>
<td> 3~8米 </td>
<td> Android 4.0及以上    </td>
<td> 间隔30米部署，700平米1个 </td>
<td> 上百元   </td>
<td> 标准2.4G/5G频段</td>
</tr>
<tr>
<td> 蓝牙 </td>
<td> 1~5米 </td>
<td> Android 4.3及以上，iOS 8及以上 </td>
<td> 间隔 8米部署，50平1个    </td>
<td> 数十元   </td>
<td> 标准蓝牙4.0广播协议 </td>
</tr>
</tbody>
</table>


<p>应用高德进行室内定位的步骤：</p>

<ol>
<li>准备室内地图（使用高德已有的或者自己制作）。</li>
<li>铺设Wi-Fi或iBeacon接入点。</li>
<li>使用高德提供的定位数据采集工具进行数据采集。</li>
<li>数据采集完毕编译后，上传至服务器。</li>
<li>使用高德提供的定位数据检测工具现场体验定位效果。</li>
<li>开发应用，使用高德室内定位SDK获取位置，包括经纬度和楼层信息。</li>
</ol>


<p>关于室内地图：</p>

<ol>
<li><p>高德已覆盖数据</p>

<p> 高德已有室内地图数据，可免费申请使用。</p></li>
<li><p>高德未覆盖数据</p>

<p> 若为高德未覆盖室内地图数据，提供如下两种数据生产方案：</p>

<ul>
<li>委托与高德合作的第三方生产。</li>
<li>申请自主生产。</li>
</ul>
</li>
</ol>


<p><strong>参考</strong></p>

<ul>
<li><a href="https://lbs.amap.com/getting-started/locate">高德室外定位技术</a></li>
<li><a href="https://lbs.amap.com/getting-started/indoorlocation/">高德室内定位方案</a></li>
<li><a href="https://lbs.amap.com/getting-started/indoorintro">高德室内地图数据</a></li>
</ul>


<h3>百度</h3>

<p>大型商超内寻找店铺、停车场内反向寻车等业务的发展基础都是室内高精度定位。利用三角定位技术、增强WiFi指纹模型技术、地磁技术、蓝牙技术等， 提供精度1-3m的室内高精度定位服务。结合百度室内图服务，更好帮助开发者解决室内定位难题。</p>

<h3>识途</h3>

<p>特色：地磁定位技术。</p>

<p><a href="http://www.ubirouting.com/creator.php">定位和采集工具：识途 Creator</a></p>

<p>仅通过上面的视频很难理解其采集原理，但是，识途提出了采集过程中以下几点注意事项：</p>

<ol>
<li>在按下采集按钮开始采集的时候，请<strong>即刻</strong>开始行走；在到达终点停止行走后，请<strong>即刻</strong>按下采集按钮结束采集。</li>
<li>在采集过程中请保持<strong>统一、稳定、自然</strong>的行走速度, 尽可能保持在道路的中央行走，并且采集过程中尽可能避免晃动手机。</li>
<li>如果在某段路径受到了外界的严重干扰，无法保持一致的行走速度或预定的行走方向，务必针对这段路径进行重新采集。</li>
</ol>


<p>从上面的注意事项，可以大致猜测他是如何做到测量的地磁信号和地理位置的对应。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.ubirouting.com/%E8%AF%86%E9%80%94%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E6%8A%80%E6%9C%AF%E7%BB%BC%E8%BF%B0.pdf">识途室内定位技术综述</a></li>
<li><a href="http://ubirouting.com/%E8%AF%86%E9%80%94%E5%AE%A4%E5%86%85%E5%9C%B0%E7%A3%81%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.pdf">识途室内地磁环境数据采集方法及注意事项</a></li>
</ul>


<h2>闲谈</h2>

<ul>
<li><p>GPS不是泛指，是特指。</p>

<p>  我们一提到定位，大家印象中最熟悉的技术可能就是GPS定位。其实更为准确的说法是GNSS(Global Navigation Satellite System)定位，中文含义就是全球卫星定位系统。GPS只是GNSS中的一种实现方法，该系统是由美国部署的。另外，还有其他类型的定位系统，例如，俄罗斯的格洛纳斯（GLONASS），欧洲的伽利略和中国的北斗。关系如下：</p>

<ul>
<li>GNSS

<ul>
<li>GPS（美国）</li>
<li>GLONASS（俄罗斯）</li>
<li>北斗（中国）</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>参考</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS语音控制系统]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/02/08/voice-command-implementation-for-ios/"/>
    <updated>2017-02-08T22:53:14+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/02/08/voice-command-implementation-for-ios</id>
    <content type="html"><![CDATA[<p>介绍了iOS10开放的语音识别库Speech的特点和使用。</p>

<!-- more -->


<h2>语音识别</h2>

<p>ios10之前，用户和iOS系统进行语音交互有两种途径：</p>

<ol>
<li>Siri</li>
<li>通过键盘的麦克风按钮，进入听写模式</li>
</ol>


<p><strong>Siri</strong></p>

<p>缺点：</p>

<p>虽然Siri在iOS10中也开放了一些接口，但是非常有限：</p>

<ol>
<li>VoIP calling</li>
<li>Messaging</li>
<li>Payments</li>
<li>Photo</li>
<li>Workouts</li>
<li>Ride booking</li>
<li>CarPlay (automotive vendors only)</li>
<li>Restaurant reservations (requires additional support from Apple)</li>
</ol>


<p>而且，还必须以App Extension的形式实现。</p>

<p>优点：</p>

<p>但是优点也是很明显的，比如，在一个支持Siri的Messaging的应用中，可能出现下面的对话：</p>

<table>
<thead>
<tr>
<th>Siri </th>
<th> User</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Hi, Siri, send a app_name message.</td>
</tr>
<tr>
<td>to whom? </td>
<td></td>
</tr>
<tr>
<td></td>
<td> Hongchao</td>
</tr>
<tr>
<td>What do you want to say to Hongchao? </td>
<td></td>
</tr>
<tr>
<td></td>
<td> Good job on Jarvis for Map.</td>
</tr>
</tbody>
</table>


<p><strong>Speech</strong></p>

<p>iOS10除了通过SiriKit开发了Siri的一些功能之外，还开放了Siri使用的语音识别库Speech，该库是一个在线语音识别库。通过Speech进行语音识别非常简单、好用识别率高。详情参照<a href="https://developer.apple.com/reference/speech">官方文档</a>。</p>

<p>虽然ios10开放了Speech，但是也是有限制的开放：</p>

<ol>
<li>最长一分钟的持续时间。</li>
<li>对每个设备和每个应用，每天都有请求次数限制，但是具体次数没有公布。</li>
</ol>


<h2>命令提取</h2>

<p>Speech识别请求会返回最长一分钟的音频识别结果，如何从这段识别结果里面提取出需要执行的命令呢？我们使用下面两条原则：</p>

<ol>
<li>从后往前提取出第一个匹配命令库中的命令。</li>
<li>设计一些断句词帮助断句、提取命令。</li>
</ol>


<p>通过原则1，可以解决不带参数的固定命令的提取，但是对命令有个要求：</p>

<ul>
<li>任何命令不能是另一个命令的后缀。</li>
</ul>


<p>否则较长的命令就不能被执行。</p>

<p>对于有参数的变化命令，通过原则1就不能解决了。</p>

<p>比如，有命令<em>search for new york</em>，其中<em>search for</em>是命令，<em>new york</em>是参数。当执行完此命令之后，继续说了一些“无关紧要”的话，就会导致系统继续执行此命令。这里说的“无关紧要”是指：</p>

<ul>
<li>不是固定命令</li>
<li>不是断句词</li>
</ul>


<p>执行完带有参数的变化命令之后，需要使用断句词进行断句。这就是原则2的必要性。</p>

<p><strong>更自然的命令提取方法</strong></p>

<ul>
<li>只要能得到每个单词的时间戳，就可以通过停顿进行断句和命令提取，更加自然。</li>
<li>参考Siri在某个固定场景下的对话方式。</li>
</ul>


<h2>通过扬声器发声</h2>

<p>需要设置<code>AVAudioSession</code>的状态，保证既可以录音，也可以发声，同时发出的声音不应该再被录入。</p>

<p>这个需求应该可以通过<code>AVSpeechSynthesizerDelegate</code>中下面的方法实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">speechSynthesizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">synthesizer</span><span class="p">:</span> <span class="bp">AVSpeechSynthesizer</span><span class="p">,</span> <span class="n">didFinish</span> <span class="nl">utterance</span><span class="p">:</span> <span class="bp">AVSpeechUtterance</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
