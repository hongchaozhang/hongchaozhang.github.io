<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2024-03-26T00:35:19+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[精英日课-道可道非常道]]></title>
    <link href="http://hongchaozhang.github.io/blog/2024/03/26/jingying-rike-daokedao-feichangdao/"/>
    <updated>2024-03-26T00:25:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2024/03/26/jingying-rike-daokedao-feichangdao</id>
    <content type="html"><![CDATA[<!-- more -->


<p>2023年3月15日，沃尔夫勒姆在自己的网站发表了一篇充满洞见的宝藏文章，展望了AI对人类社会 的影响。理解了沃尔夫勒姆的关键思想，你就会生出一种对未来世界的掌控感。</p>

<p>这篇文章包括三个核心观念：</p>

<ul>
<li>计算不可约性</li>
<li>计算等价原理</li>
<li>人的价值在于历史</li>
</ul>


<h2>计算不可约性</h2>

<h3>概念</h3>

<p>首先说一下什么叫约化。约化是用一个浓缩的陈述——可以说是一个理论、或者一个公式——概括一个现象，是对现实信息的压缩表达。我们的一切自然科学、社会科学理论，各种民间智慧、成语典故，我们总结出来的一切规律，都是对现实世界的某种约化。</p>

<p>你可能希望科技进步能约化一切现象，但现实恰恰相反。数学家早已证明，真正可约化的都要么是简单系统，要么是真实世界的一个简单的近似模型。一切足够复杂的系统都是不可约化的。比如三体问题。</p>

<p>因为计算不可约性，人类对世间万物的理解是不可穷尽的。这意味着不管科技多么进步、AI多么发达，世界上总会有对你和AI来说都是全新的事物出现，你们总会有意外和惊喜。</p>

<p>计算不可约性规定，人活着总有奔头。</p>

<h3>特点</h3>

<p>伴随计算不可约性的一个特点是，<strong>在任何一个不可约化的系统之中，总有无限多个「可约化的口袋 (pockets of computational reducibility)」</strong>。</p>

<p>这就意味着，虽然世界本质上是复杂和不可预测的，但我们总可以在里面做一些科学探索和研究，总结一些规律，说一些话，安排一些事情。绝对的无序之中存在着无数个相对的秩序。</p>

<p>而且既然可约化的口袋有无限多个，科学探索就是一门永远都不会结束的事业。</p>

<h3>意义</h3>

<p>计算不可约性还意味着，我们不可能彻底“管住”AI。</p>

<p>未来AI跟我们真正的关系不是降临、不是拯救也不是幸存，而是「共存」。我们要学习跟AI共 存，AI也要也跟我们、跟别的AI共存。</p>

<p>计算不可约性说明，凡是能写下来的规则都不可能完全限制AI，凡是能发明的操作都不可能穷尽社会 的进步，凡是能总结的规律都不是世界的终极真相。</p>

<p>这就叫「道可道，非常道」。</p>

<h2>计算等价原理</h2>

<p>沃尔夫勒姆的第二个核心观念叫「计算等价原理(Principle of Computational Equivalence)」，意思是所有的复杂系统，不管看起来多复杂，都是<em>同等</em>复杂的，不能说哪个系统比哪个系统<em>更</em>复杂。</p>

<p>每个真有学问的人都应该是一个「<strong>不特殊论者</strong>」。 以前的人以为人是万物之灵长，地球是宇宙的中心，后来发现地球不是宇宙的中心，人类也只是生命演化的产物，我们的存在没有什么本质的特殊之处。</p>

<p>现在AI模型则告诉我们，人的智力，也没有什么特殊之处。任何一个足够复杂的神经网络都是跟人的大脑同等复杂的。不能说人能理解的科学理论就高级，AI识别药物分子的过程就低级。</p>

<p>既然都是平等的，那硅基生命和碳基生命自然也是平等的。那面对AI，我们凭什么认为自己更有价值?</p>

<h3>人的价值在于历史</h3>

<p>这就引出了沃尔夫勒姆的第三个核心观念:人的价值在于历史。</p>

<p>ai和人的根本区别是什么？是历史。人类有历史，并且有由历史确定的价值观。而AI没有历史，没有价值观。AI需要“对齐”人类的价值观。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-意识红色胶囊]]></title>
    <link href="http://hongchaozhang.github.io/blog/2024/03/25/jingyingrike-yishi-hongse-jiaonang/"/>
    <updated>2024-03-25T00:20:32+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2024/03/25/jingyingrike-yishi-hongse-jiaonang</id>
    <content type="html"><![CDATA[<!-- more -->


<p>一切感知都是幻觉，是预测，修正，再预测，再修正的过程。</p>

<p>意识讨论的意义：</p>

<ul>
<li>中国本土的正统学说，也就是儒学，到东汉年间就已经陷入了全面内卷，没有什么大学问可做了，大家都在搞细枝末节和预言、算命什么的。后来魏晋嬉皮士发明了玄学，印度又传来佛教，中国人才有了新鲜的思想资源。</li>
<li>我们回头看，玄学和佛教的世界观对不对已经不重要了，重要的是它们提供了逻辑思辨的思维方式，把人的思路打开了，激发了想象力，跳出了内卷。</li>
<li>我想现在关于意识的讨论也是如此，不一定对，但是它也是一个思想资源。</li>
</ul>


<p>物理学的三大基石——广义相对论、量子力学和统计力学——之所以是这样的，是因为我们的意识要求这样。</p>

<p>物理定律之所以是现在这个样子，是自然世界的计算不可约性和人类的计算受限性相互作用的结果。</p>

<ul>
<li>热力学第二定律（熵增定理）可以用计算受限性解释。</li>
<li>我们口中的“随机”也可以这么解释。</li>
<li>朱元璋抱怨中国越来越乱，只不过是因为他理解不了更复杂的社会形态。</li>
</ul>


<p>如果连物理定律都是幻象，那我们大概只能承认《金刚经》说的是对的：「凡所有相，皆是虚妄。」</p>

<p>正如康德说人无法真正认识「物自体」。</p>

<p>而我们现在知道，之所以如此，是因为我们是计算受限的。面对这个计算不可约的世界，任何智能 —— 包括AI和佛陀 —— 都必然是计算受限的。</p>

<ul>
<li>计算受限的原因是光速。是哪个神的力量给我们加了一个这样的约束？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-别相信直觉]]></title>
    <link href="http://hongchaozhang.github.io/blog/2024/03/25/jingying-rike-biexiangxin-zhijue/"/>
    <updated>2024-03-25T00:03:37+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2024/03/25/jingying-rike-biexiangxin-zhijue</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>如果你想要一个幸福的婚姻，你应该怎样寻找自己的另一半？</h2>

<p>人们在婚恋市场上<strong>实际</strong>追求的东西，和<strong>应该</strong>追求的东西，正好完全是两回事。</p>

<p>寻常的吸引点——长相、身高、职业、个性像不像你什么的都根本不重要。如果要强行挑选，那就找那些拥有好品质的人，包括生活满意度、安全依恋风格、尽责性和成长心态。</p>

<h2>夫妻俩共同的朋友越多，关系越持久吗？不是。</h2>

<p>朋友圈重合度越高的夫妻或者男女朋友，越有可能在一定时间之后宣布再次单身。也就是说，最持久的关系，往往是双方各自有不同的朋友圈。</p>

<h2>确定恋爱关系之前的微妙状态中，怎么增加自己在对方眼中的吸引力？</h2>

<ul>
<li>对男性来说，最好的办法就是接受女性的领导 — 女性讲了笑话，你就笑；如果她谈论某个话题，你就顺着这个话题往下说；如果她说要干什么事情，你要表示支持。这样就能大大增加她对你的好感。</li>
<li>对于女性来说，有什么特别的对话技巧呢？对不起，数据显示女性用不着对话技巧 — 男性最后选择的总是外表好看的。</li>
</ul>


<h2>养育方法不重要，榜样最重要</h2>

<ul>
<li>养育方法对孩子的影响很重要吗？没有。孩子的命运是他自己的，家长能起的作用很小。而基因因素对孩子未来收入的影响比养育方法的影响要高出2.5倍。</li>
<li>选择住在哪里——这一个决定的影响力占到了家长对孩子所有的影响力中的25%。之所以有影响，也不是因为周围的朋友和同学，而是周围的叔叔阿姨。叔叔阿姨会成为它的榜样。优秀成年人，是年轻人的榜样。这个成年人不是父母。因为年轻人对父母有天生的逆反心理。</li>
</ul>


<h2>名校，对学生的能力，到底有没有一个“附加值”的作用呢？没有。</h2>

<p>什么牌子、什么名师、什么校友会，这些名校的光环加持，至少对个人收入来说，没有可观测的效应。牛人到哪里都是牛人。名校并没有“培养”牛人，名校只不过“选择”了牛人。</p>

<h2>成为球迷，一定是更快乐的事吗？不一定。</h2>

<p>成为球迷，会使你的总体快乐更多吗？得不偿失。即使你是一个强队的球迷，也是如此，因为你对结果的预期会调高，这样，赢球带来的快乐会变小，但是一旦失败，会带来更大的痛苦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[樊登读书摘要(2021-2023)]]></title>
    <link href="http://hongchaozhang.github.io/blog/2024/03/20/fandeng-dushu/"/>
    <updated>2024-03-20T00:21:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2024/03/20/fandeng-dushu</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>图书阅读</h2>

<ul>
<li>阅读：浪漫之魂，卢梭

<ul>
<li>作者从满激情，用“心”写的一本书，读来酣畅淋漓。</li>
</ul>
</li>
<li>阅读：0802微积分的力量

<ul>
<li>科普著作</li>
</ul>
</li>
<li>阅读：火种，寻找中国复兴之路</li>
<li>阅读：0227 杜甫传</li>
<li>阅读：1015大国大城，城市发展变大的必然性</li>
<li>阅读：0924 升维：不确定时代的决策博弈</li>
<li>阅读：0910 家庭的觉醒</li>
<li>阅读：生命密码，你的第一本基因科普书</li>
<li>阅读：0702八堂自然课</li>
<li>阅读：中国儒学三千年</li>
<li>阅读：社会性动物</li>
<li>阅读：观念的跃升

<ul>
<li>文明发展脉络，概论性质，主要是哲学</li>
</ul>
</li>
<li>阅读：作文六要20220219</li>
</ul>


<h2>摘要</h2>

<ul>
<li>毒，让人疼的毒不会致命，让人致命的毒一般会让人没有感觉，或者麻痹。让你疼的毒，一般是用来驱散你的，没有必要毒死你。真正想毒死你的毒，是不会让你有感觉的，这样才能更好地达到毒死你的目的。</li>
<li>为什么自己的口水从嘴里咽下去不恶心，积累在杯子里面再喝，就会恶心？</li>
<li>外在的坚持：来自家长和老师的压力；内在的坚持：来自内心的喜爱。</li>
<li>基因改造不应该有伦理问题，因为大自然在造更多物种，人类也已经造了很多物种，各种杂交筛选。</li>
<li>焦虑是恐惧，发怒也是恐惧。每次焦虑和发怒，都要想一想：我到底在害怕什么？不能将内心的恐惧投射到身边的人身上。</li>
<li>孩子需要的：被看见，价值感。</li>
<li>辨别臆想和事实。</li>
<li>强迫症类型：

<ul>
<li>洁癖</li>
<li>幻想</li>
<li>信一定要读7遍</li>
</ul>
</li>
<li>鼓励孩子：

<ul>
<li>我看到你昨天做作业的样子很帅。</li>
<li>我相信，你可以做出来。</li>
</ul>
</li>
<li>学习要有知识输出，比如一个项目学习，然后演讲。</li>
<li>知识和技能都不是素质，思维方式是。</li>
<li>0305减法：做减法达到效果和做加法达到效果是两种不同的境界。</li>
<li>概念思考，让你更聪明。学会造概念，推进思考进程。</li>
<li>反时间管理，时间堆叠，同时干很多件事情，是因为有能自动运行的事情。</li>
<li>买椟还珠，买文凭还能力。</li>
</ul>


<h2>记忆</h2>

<p>海马体控制什么信息写入永久记忆区（也就是灰质区域）：生存相关的才能写入。</p>

<p>知识不用写入，因为不是生死相关。那怎样才能更好地记住知识呢？</p>

<ul>
<li>只有反复出现的知识，才会被误认为生存相关，从而被写入灰质。所以，知识的记忆需要遵循艾宾浩斯曲线，反复出现。</li>
<li>好奇心，兴趣：容易进入心流状态。</li>
<li>想象力：通过想象场景，附加个人情感，从而更利于记忆。</li>
<li>排除压力：压力让人更记不住。</li>
<li>狮子记忆法：饿的时候记忆，走动的时候记忆。办公或者学习的时候走动，是有科学依据的。</li>
<li>睡前记忆法：睡前看需要记忆的东西。睡觉的时候会整理知识，更容易记住</li>
</ul>


<h2>好好恋爱</h2>

<p>选择悖论：选项越多，越难选，选项价值会降低。</p>

<p>现在结婚推迟也是这个原因：圈子大了，选项多了。</p>

<p>最大化者：要选最好的。</p>

<p>满足者：看到可以的就选。</p>

<p>乐观生意人看哪都是机会，但是最终签合同的时候非常谨慎。但是，现在的单身者往往是不愿意参加各种活动，一旦认定了一个，不撞南墙不回头。正好和乐观生意人做法相反。</p>

<h2>我有点胆怯，但想和你好好说话</h2>

<p>生气发火，是因为感觉到场面要失控，比如辅导孩子作业，孩子习惯，眼睛近视等。</p>

<p>被拒绝，就会发飙。其实，拒绝的是事情，不是你这个人。</p>

<p>不做传话者，要把他俩都拉到一起。拉到一起之后，不要试图找责任，比如：“你们俩谁先开口骂人的？”要试图让当事人说出感受情绪，说出核心诉求。</p>

<h2>科学营销</h2>

<p>送礼物：对方想要又舍不得买的。典型案例是帮对方清空购物车。</p>

<p>发现细分市场的几个角度：地理，人的分类，收入，爱好。</p>

<p>服务市场，酒店和航空，需要客户的忠诚度，所以有金卡和银卡。</p>

<p>定价模式：</p>

<ul>
<li>先高价定品牌形象，再出廉价版本，特斯拉。</li>
<li>先低价格占领市场，再出奢侈版本，小米，雷克萨斯。</li>
</ul>


<h2>癌症密码</h2>

<p>癌细胞本质是返祖现象，是多细胞生物中负责某个功能的细胞拒绝参与分工协作，返回了单细胞繁殖模式。</p>

<p>致癌物：</p>

<ul>
<li>开水2A级致癌物</li>
<li>黄曲霉素1级致癌物，号称“高温都杀不死”的致癌物。常见于发霉的花生和玉米、发苦的坚果、变质的大米、劣质的芝麻酱和花生油、长时间浸泡的木耳、没洗干净的筷子和砧板中。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近视的原理和各种预防措施]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/11/25/daguo-huyan-zhice/"/>
    <updated>2023-11-25T23:08:17+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/11/25/daguo-huyan-zhice</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近在樊登读书上听了《大国护眼之策》的作者分享，受用匪浅，特此记录下来。</p>

<p>眼科有些分支发展很成熟，比如白内障，现代手术已经可以实现痊愈，甚至“超越痊愈”，实现“返老还童”，在彻底治愈白内障的同时，同时治好老花眼。但是，近视，尤其是儿童近视问题，我们刚开始研究，还有很长的路要走。</p>

<p>读完这本书，我感觉，下一代就不会被近视困扰了。这一代，要做的就是防止高度近视。因为高度近视，不仅仅是戴眼镜的问题，会伴随很多眼部疾病。如果度数控制在600度以内：
* 青光眼风险下降67%
* 白内障风险下降74%
* 视网膜脱落风险下降98%
* 近视性黄斑病变风险下降99%</p>

<h2>什么是近视</h2>

<h3>近视的状态</h3>

<p>眼镜的“镜头组”（角膜和晶状体）无法把成像调整到视网膜上，如下图所示：</p>

<p><img src="http://hongchaozhang.github.io/images/%E8%BF%91%E8%A7%86%E7%8A%B6%E6%80%81%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="近视状态示意图" /></p>

<h3>近视三要素：</h3>

<p>从眼镜的结构可以看出，屈光度由三要素决定；角晶状体和眼轴。
* 角膜曲率
  * 角膜曲率在3岁之后基本稳定，人群平均值43D（4300度），如果你的是46D，就相当于先天近视300度（如下图B所示）。
* 晶状体曲率调节
  * 晶状体变薄，成像后移。如果后移的成像依然在视网膜前面，那么这就是近视。晶状体过厚（如下图C）和角膜曲率带来的近视，都是先天近视。
* 眼轴长度
  * 眼轴过长导致的近视（如下图D所示）是后天可以控制的。
  * 我们说的近视度数是指眼轴大小，不是视力好坏。</p>

<p><img src="http://hongchaozhang.github.io/images/%E8%BF%91%E8%A7%86%E5%8E%9F%E5%9B%A0%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="近视原因示意图" /></p>

<h3>说说远视储备</h3>

<p>远视储备300度，正常用到16岁。如果8岁开始近视，每年增加50度，16岁的时候是400度，还算正常的眼睛，医生只需要简单的方法就可以让你摘掉眼镜，没有任何问题。</p>

<p>如果每年100度（这是平均值），16岁就是800度，属于高度近视，各种眼睛疾病风险就来了。如果想摘掉眼镜，就要冒更大的风险。</p>

<h2>为什么会近视</h2>

<p>眼睛是一个追光的器官：</p>

<ul>
<li>如果经过“镜头组”的努力，成像在视网膜后方，那么眼轴就会趋向于变长。</li>
<li>如果经过“镜头组”的努力，成像在视网膜前方，那么眼轴就会趋向于变短。</li>
</ul>


<p><img src="http://hongchaozhang.github.io/images/%E5%85%89%E7%BA%BF%E8%81%9A%E7%84%A6%E4%BD%8D%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="光线聚焦位置示意图" /></p>

<p>自然用眼中，只有凝视远方才能产生成像超前，尤其对于轻度近视的孩子，这是对预防近视的加分选项。</p>

<p>“镜头组”调节力差的孩子，成像会在视网膜之后很远，导致眼轴增长速度加快。</p>

<h2>近视的预防</h2>

<p>预防近视要在小学阶段完成：
* 小学课业不紧张
* 小学时眼睛更“软”，效果好</p>

<h3>近视防控的定量指标</h3>

<h4>为什么选择眼轴，不选择近视度数？</h4>

<ul>
<li>眼轴更容易测量。

<ul>
<li>不像近视度数，需要散瞳。</li>
</ul>
</li>
<li>眼轴测量的精度更高。

<ul>
<li>同一台设备，测量误差小于0.03mm，不同设备之间误差会大一些，一般也只有0.1mm。根据0.01mm对应2.5度估计，眼轴的精度可以达到2.5度，但是眼光的精度事25度，精度相差10倍。</li>
</ul>
</li>
</ul>


<p>3-6个月测一次眼轴，验证预防效果：</p>

<ul>
<li>优秀：0.01mm/月, 近视不增加，因为这是正常的眼轴增长，会被睫状体调节抵消掉。</li>
<li>及格：0.02mm/月, 25-50度/年</li>
<li>不及格：> 0.02mm/月, > 50度/年。0.04mm/月, 100度/年。</li>
</ul>


<h3>近视防控的措施</h3>

<h4>近视的根源</h4>

<ul>
<li>光营养

<ul>
<li>光照（多户外运动）</li>
<li>光谱 （屏幕多蓝光，防蓝光还是有用的）</li>
</ul>
</li>
<li>用眼距离

<ul>
<li>看近处的物体。看近处的物体时，成像在视网膜后面，时间长了，眼睛老是收到这个信号，就会调整眼球适应。</li>
<li>所有的近视手段几乎都是为了调整这个成像位置。</li>
</ul>
</li>
</ul>


<h4>各种预防措施及其效果</h4>

<p>某个预防措施打分30分，意思是，如果不预防每年增加100度，采用此方法预防，每年增加70度。</p>

<p>有些措施只是降低减分项，有些却是加分项，可以逆转近视。加分项是能够使成像在视网膜前面的，利用眼球的追光效应，使眼轴减小。</p>

<table>
<thead>
<tr>
<th> 方法 </th>
<th> 效果 </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 小户外 </td>
<td> 30 </td>
<td> 2小时/天 </td>
</tr>
<tr>
<td> 大户外 </td>
<td> 60-80 </td>
<td> 4-6小时/天 </td>
</tr>
<tr>
<td> OK镜 </td>
<td> 55 </td>
<td> 角膜塑形，周边近视离焦 </td>
</tr>
<tr>
<td> 离焦RGP，离焦软镜 </td>
<td> 45 </td>
<td>  </td>
</tr>
<tr>
<td> 离焦框架镜 </td>
<td> 30-40 </td>
<td> 视野20度之内是正常眼镜，20度之外是微型凸透镜，制造近视离焦效果 </td>
</tr>
<tr>
<td> <strong>红光治疗</strong> </td>
<td> 70-90 </td>
<td> 每天2次，每次3分钟，低水平红激光照射眼底 </td>
</tr>
<tr>
<td> 室内光改造 </td>
<td> 10 </td>
<td> 光谱、照度、色温 </td>
</tr>
<tr>
<td> <strong>远像装置1</strong> </td>
<td> >60 </td>
<td> 同轴自由曲面，远距离读写器，电子远像屏 </td>
</tr>
<tr>
<td> 远像装置2 </td>
<td> 30 </td>
<td> 离轴自由曲面，有形变，不舒服 </td>
</tr>
<tr>
<td> 高浓度阿托品 </td>
<td> 70-80 </td>
<td> 有副作用 </td>
</tr>
<tr>
<td> 低浓度阿托品 </td>
<td> 30-40 </td>
<td> 几乎无副作用 </td>
</tr>
<tr>
<td> 控制距离和用眼时间 </td>
<td> 20 </td>
<td> 一拳一尺一寸，20-20-20法则 </td>
</tr>
<tr>
<td> 调节力训练 </td>
<td> 30 </td>
<td> 凝视远方，VR设备辅助训练 </td>
</tr>
<tr>
<td> 读写镜 </td>
<td> 30 </td>
<td> 低度数凸透镜，回归镜，减负镜。看近处的时候用，帮助调节成像位置靠近视网膜，不会过分使眼轴变长 </td>
</tr>
<tr>
<td> 雾视训练 </td>
<td>  </td>
<td> 低读书凸透镜，看远方时，成像在视网膜前，呈现模糊状态。改状态比较难以坚持 </td>
</tr>
</tbody>
</table>


<p>从效果上讲，只有周边离焦的离焦镜，不如全部离焦的雾视镜，但是，周边离焦几乎无感，易于坚持。</p>

<p>由于红光治疗和远像装置的出现，阿托品已经逐渐退出了第一阵营。</p>

<p>远像装置：</p>

<ul>
<li>同轴自由曲面

<ul>
<li>远距离读写器：根本上解决近距离用眼需求和近视发展之间的矛盾，并且易于坚持。

<ul>
<li>结构简单，可以用于写作业和阅读纸质书。</li>
</ul>
</li>
<li>电子远像屏

<ul>
<li>完美衔接电子铲平，实现电子屏幕自由。通过摄像头，也可以实现纸质书的阅读和写作业。真正实现了一边用眼，一边提升实力的目标。</li>
</ul>
</li>
</ul>
</li>
<li>离轴自由曲面</li>
</ul>


<h4>4L疗法总结</h4>

<p>在远视储备还剩75度的时候就可以开始使用4L疗法
4L疗法，近视不增加
OK镜，每年50度
4L疗法：
* Laser：红激光照射眼底
* Lead：成像超前。配离焦镜（OK镜就是离焦镜的一种）
* Light：强度和光谱，户外运动，全光谱灯
* Long：拉远距离。
    * 手机pad都投屏到电视上面去看
    * 一尺一寸一拳
    * 20-20-20法则：20分钟休息20秒看20尺之外的物体
    * 带肘托的坐姿矫正器
    * 远像光屏：一种桌面屏幕，看着就像看很远的东西，有点像VR眼镜</p>

<p>干眼症： 睑板腺
* 原因：化妆，隐形眼镜，长时间盯着屏幕不眨眼
* 方法：热敷</p>

<p>白内障：晶状体蛋白质变性
做手术即可。美国平均手术时间10-15分钟，本书作者：100秒。</p>

<p>青光眼：眼压过高
* 原因：收情绪影响</p>

<p>激光手术治疗近视
* 激光手术非常安全，而且相比多年前，现在不同的近视度数用不同的疗法，安全性更高。</p>

<h2>其它</h2>

<ul>
<li>维护眼睛需要18年，近视只需要3个月</li>
</ul>


<p>最后附上图书纲要：</p>

<p><img src="http://hongchaozhang.github.io/images/%E5%A4%A7%E5%9B%BD%E6%8A%A4%E7%9C%BC%E4%B9%8B%E7%AD%96%E7%BA%B2%E8%A6%81.png" alt="大国护眼之策纲要" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课2023（2）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/10/23/jingying-rike-2023-2/"/>
    <updated>2023-10-23T17:39:43+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/10/23/jingying-rike-2023-2</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>为什么大项目总是延期？</h2>

<p>大项目90%都会延期超预算：
* 匆忙commit，下手谬误
* 过度乐观</p>

<p>比如悉尼大剧院，就是失败的设计：花费是预算的14倍，设计师也被拉黑，终生再没有作品。</p>

<p><strong>虽然你不能预测未来的困难，但是，也不能预测未来的创造力。</strong>延期项目中往往会收获一些其他东西。</p>

<ul>
<li>底层需要乐观，决策层需要谨慎。</li>
<li>沉默成本不适用政府主导的大项目，一旦启动，必须成功。</li>
</ul>


<h2>99定价法的心理基础：左位数字偏误</h2>

<ul>
<li>心里价位是17元，应该定价16.99或者17.99</li>
<li>流畅数</li>
</ul>


<h2>活在当下，享受当下</h2>

<ul>
<li>活在当下：事前不担心，事后恢复快。

<ul>
<li>被针扎的试验：提前告诉你，10秒钟之后扎你一下，你会有什么反应？你会很紧张，但是如果你不知道什么时候扎你，你就不会有这种紧张。</li>
</ul>
</li>
<li>享受当下，不提前焦虑未来，更不要后悔过去。</li>
</ul>


<h2>阅读：意识红色胶囊</h2>

<p>一切感知都是幻觉，是预测，修正，预测，修正的过程。</p>

<p>意识讨论的意义：</p>

<ul>
<li>中国本土的正统学说，也就是儒学，到东汉年间就已经陷入了全面内卷，没有什么大学问可做了，大家都在搞细枝末节和预言、算命什么的。后来魏晋嬉皮士发明了玄学，印度又传来佛教，中国人才有了新鲜的思想资源。</li>
<li>我们回头看，玄学和佛教的世界观对不对已经不重要了，重要的是它们提供了逻辑思辨的思维方式，把人的思路打开了，激发了想象力，跳出了内卷。</li>
<li>我想现在关于意识的讨论也是如此，不一定对，但是它也是一个思想资源。</li>
</ul>


<p>物理学的三大基石——广义相对论、量子力学和统计力学——之所以是这样的，是因为我们的意识要求是这样的。</p>

<p>物理定律之所以是现在这个样子，是自然世界的计算不可约性和人类的计算受限性相互作用的结果。</p>

<ul>
<li>热力学第二定律（熵增定理）可以用计算受限性解释。</li>
<li>我们口中的“随机”也可以这么解释。</li>
<li>朱元璋抱怨中国越来越乱，只不过是因为他理解不了更复杂的社会形态。</li>
</ul>


<p>如果连物理定律都是幻象，那我们大概只能承认《金刚经》说的是对的：「凡所有相，皆是虚妄。」正如康德说人无法真正认识「物自体」。而我们现在知道，之所以如此，是因为我们是计算受限的。面对这个计算不可约的世界，任何智能 —— 包括AI和佛陀 —— 都必然是计算受限的。</p>

<ul>
<li>计算受限的原因是光速。是哪个什么的力量给我们加了一个这样的约束？</li>
</ul>


<h2>和见</h2>

<ul>
<li>0630</li>
<li>日本：和见，不同的东西在一起和谐共处。</li>
<li>中国：中庸。</li>
<li>日本谦和的态度是高人口密度下的生存之道。</li>
<li>各种“道”的存在的意义(茶道，花道)：是精神追求，因为只追求实用主义也挺无聊的。</li>
</ul>


<h2>怎么增加信任度</h2>

<ul>
<li>发信号：浪费，贵，没用</li>
<li>增加透明度：比如证明果汁是鲜榨的，标明时间，发现树枝</li>
</ul>


<h2>规模思维，复利</h2>

<p>打临时工（比如家教）没有复利，科研有复利</p>

<h2>如何使用gpt</h2>

<ul>
<li>有没有一个理论讲过…</li>
<li>有没有一句谚语讲过…</li>
<li>模糊搜索，内容搜索，比如模糊记得的一点电影情节</li>
<li>总结一段话或者一段文字，比如提取一段评论的优缺点</li>
<li>心理学理论，描述一个现象</li>
</ul>


<h2>信息稀释效应</h2>

<p>当你试图说服一个人的时候，如果有十个正面观点，一定只选1到2个，砍掉其它的观点。因为其他观点会使你的观点的总体印章更差。受众不是对你的观点求和，而是求平均值。</p>

<p>当你有缺点的时候，也在说比较大的缺点之后，多说一些小缺点，以稀释受众的印象。</p>

<h2>阅读：别相信直觉</h2>

<h3>如果你想要一个幸福的婚姻，你应该怎样寻找自己的另一半？</h3>

<p>人们在婚恋市场上<em>实际</em>追求的东西，和<em>应该</em>追求的东西，正好完全是两回事。</p>

<p>寻常的吸引点——长相、身高、职业、个性像不像你什么的都根本不重要。如果要强行挑选，那就找
那些拥有好品质的人，包括生活满意度、安全依恋风格、尽责性和成长心态。</p>

<h3>夫妻俩共同的朋友越多，关系越持久吗？不是。</h3>

<p>朋友圈重合度越高的夫妻或者男女朋友，越有可能在一定时间之后宣布再次单身。也就是说，最持久
的关系，往往是双方各自有不同的朋友圈。</p>

<h3>确定恋爱关系之前的微妙状态中，怎么增加自己在对方眼中的吸引力？</h3>

<ul>
<li>对男性来说，最好的办法就是接受女性的领导 — 女性讲了笑话，你就笑；如果她谈论某个话题，你就顺着这个话题往下说；如果她说要干什么事情，你要表示支持。这样就能大大增加她对你的好感。</li>
<li>对于女性来说，有什么特别的对话技巧呢？对不起，数据显示女性用不着对话技巧 — 男性最后选择的总是外表好看的。</li>
</ul>


<h3>养育方法不重要，榜样最重要</h3>

<ul>
<li>养育方法对孩子的影响很重要吗？没有。孩子的命运是他自己的，家长能起的作用很小。而基因因素对孩子未来收入的影响比养育方法的影响要高出2.5倍。</li>
<li>选择住在哪里——这一个决定的影响力占到了家长对孩子所有的影响力中的25%。之所以有影响，也不是因为周围的朋友和同学，而是周围的叔叔阿姨。叔叔阿姨会成为它的榜样。优秀成年人，是年轻人的榜样。这个成年人不是父母。因为年轻人对父母有天生的逆反心理。</li>
</ul>


<h3>名校，对学生的能力，到底有没有一个“附加值”的作用呢？没有。</h3>

<p>什么牌子、什么名师、什么校友会，这些名校的光环加持，至少对个人收入来说，没有可观测的效应。牛人到哪里都是牛人。名校并没有“培养”牛人，名校只不过“选择”了牛人。</p>

<h3>成为球迷，一定是更快乐的事吗？不一定。</h3>

<p>成为球迷，会使你的总体快乐更多吗？得不偿失。即使你是一个强队的球迷，也是如此，因为你对结果的预期会调高，这样，赢球带来的快乐会变小，但是一旦失败，会带来更大的痛苦。</p>

<h2>其它</h2>

<ul>
<li>0609，宽松则争奇斗艳，严苛则平庸

<ul>
<li>环境看惹人优点还是缺点</li>
</ul>
</li>
<li>0610自由和责任，自由的管理，需要底层有责任感</li>
<li>看原稿：万维钢20230504

<ul>
<li>计算不可约性</li>
<li>太阳每天从东方升起</li>
<li>混沌现象导致运动不可以预测，天气不可以预测</li>
<li>复杂的gpt永远存在漏洞，补也补不全</li>
<li>同样的道理，gpt也不能完全控制人类，因为人类是一个更复杂的系统</li>
</ul>
</li>
<li>ai和人的根本区别是什么？是历史。人类有历史。</li>
<li>不循规蹈矩，不齐声朗读课文，因为这样会扼杀创造力。现在学校所做的一切都是为了管理上的方便。</li>
<li>两种计算方式：

<ul>
<li>形式逻辑</li>
<li>神经网络</li>
</ul>
</li>
<li>银牌获得者寿命比金牌短4年，比铜牌也短</li>
<li>财富、信息和金钱

<ul>
<li>财富就是知识</li>
<li>信息就是意外</li>
<li>金钱就是时间</li>
</ul>
</li>
<li>提供认知抓手，多个屏幕比一个屏幕效率高，运动中接受的信息，站起来逛逛走走，或者站立办公。</li>
<li>阅读：蓝图</li>
<li>马斯克：悲观者正确，乐观者成功</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课2022-2023]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/09/15/jingying-rike-2022-2023/"/>
    <updated>2023-09-15T18:07:58+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/09/15/jingying-rike-2022-2023</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>系统腐败的动力学</h2>

<ul>
<li>灌溉导致土地盐碱化。因为灌溉水源中的盐分都会留在地里面，越积越多。</li>
<li>朝代更替，是因为政府越来越大，一直到不可控制。</li>
<li>公司过大，老员工势力和做事方式是公司改革的阻力。</li>
</ul>


<h2>风险到底要不要预防？</h2>

<ul>
<li>当“风险损失×发生概率＞预防成本”的时候，就应该预防。</li>
</ul>


<h2>蒙特卡洛方法</h2>

<p>简单说，就是多次重复试验。通过随机噪声，统计一些信息。可能可以降低计算量，并且可以估计一些没有解析解的问题。</p>

<h2>概率很重要</h2>

<ul>
<li>由于馄饨效应，长期天气预报不可能，只能有概率。</li>
<li>ai负责预测概率，人负责拍板。</li>
</ul>


<h2>阅读：费佛的《权利七规则》</h2>

<ul>
<li>追求权力</li>
<li>表达愤怒</li>
<li>不要道歉</li>
<li>刷存在感，在事情发生的时候，大肆宣传，抓住小事情，搞大。不能不说，也不能老说过去的事情。怎么从心里认同这种做法呢？你可以把他认为这是在为属下或者同组的人争取权益。</li>
<li>社交关系，多和自己社交边缘的人打交道。从心里认同社交。方法：1）找人介绍，2）找共同点，比如老乡，大学同学等。</li>
<li>位置比能力重要，上海市委书记与黑龙江省委书记的区别。</li>
</ul>


<h2>决策过程中的三种人</h2>

<ul>
<li>巨婴：只要自己需要的东西。</li>
<li>政客：通过礼仪交换，达到自己的目的。</li>
<li>战略家：从全局出发，寻求最优策略。</li>
</ul>


<h2>说服力</h2>

<ul>
<li>说服理论和说谎。</li>
<li>不能撒谎，但是可以使用说服理论。比如，

<ul>
<li>设计调查问卷的问题，选择调查问卷的对象。</li>
<li>只说优点不说缺点。</li>
</ul>
</li>
<li>当大家都用说服理论的时候，你不得不用。因为别人认为你会使用说服理论，就算你说的是事实，别人也会打个折扣再接受。</li>
<li>囚徒困境，纳什均衡。</li>
</ul>


<h2>阅读：霍夫曼《隐藏的博弈》</h2>

<ul>
<li>传统习惯，初级奖励，刺激奖励</li>
<li>模仿变成信念，信念变成文化。</li>
<li>日常事务的终极解释</li>
<li>什么是奢侈品？小众贵而且没用，才能炫耀。

<ul>
<li>当糖刚出现的时候，只有少数人能吃得起，好的东西必须是甜的。</li>
<li>卡路里，现在卡路里易得，健身才值得炫耀。</li>
</ul>
</li>
<li>肤色，以前崇尚白，白说明我不是体力工作者。现在崇尚黑，黑说明我在办公室工作之余还有资本去海边玩。</li>
<li>复杂的手续和仪式，是入场券，是证明自己是圈内人的资本。</li>
</ul>


<h2>心理学与哲学</h2>

<ul>
<li>心理学是科学，应该描述是什么，不应该讨论应该怎么样。</li>
<li>但是哲学可以讨论应该怎么样。</li>
<li>阿德勒的观点是哲学，不是心理学。</li>
<li>弗洛伊德的观点基本被心理学抛弃。</li>
</ul>


<h2>个人魅力</h2>

<ul>
<li>萨达姆侯赛因感化看守自己的12个士兵。</li>
<li>明朝皇帝被蒙古俘虏之后，感化周围的人，被送回了北京。</li>
</ul>


<h2>考古和古董的区别</h2>

<ul>
<li>考古注重从中发现当时人的生活方式和文化。遗址中吃剩的残羹剩饭有考古价值，但是不是古董，没有收藏价值。</li>
<li>古董注重审美和收藏价值。</li>
</ul>


<h2>事实判断，价值判断</h2>

<ul>
<li>事实多是客观的，有标准，但是价值多是主观的，没有标准。</li>
</ul>


<h2>光伏产业液晶产业和芯片产业的区别</h2>

<p>中国大陆通过砸钱实现超越，但是芯片却没有。为什么美国可以限制中国芯片，却限制不了光伏和液晶产业？还是不屑于限制？知乎文章可以看看。</p>

<h2>什么叫浪费时间</h2>

<ul>
<li>重要题目认真选，不重要题目随便选。</li>
<li>对结果没影响的事情随便做。</li>
<li>几十块钱的东西精挑细选，各种比较，各种优惠券，那就是浪费时间。如果你乐于此道，那就不是浪费时间。“喜欢浪费的时间，就不叫浪费时间”。</li>
<li>抓大放小，不花很多时间琢磨小事情。</li>
<li>要做到这一点，就要扩大视野，扩大见识。</li>
</ul>


<h2>濒死体验和离体体验</h2>

<ul>
<li>可能的解释是脑补，所有“看到”的东西，都是自己脑补出来的。</li>
<li>用生成式系统来类比，濒死体验是在没有输入的情况下的生成式系统，而正常体验是有输入的生成式系统。</li>
</ul>


<h2>视角带来不同的思考，</h2>

<ul>
<li>在太空看地球，不能看到细节，只能区分国家，当你看到朝鲜和韩国在晚上灯光的差距的时候，你思考的只能是国家经济和国家政治的问题。</li>
<li>在月球看地球，看不到国与国的分界，只能看到整个地球，你就不会再想到冷战，而是地球的生存和演化问题。</li>
</ul>


<h2>破除分别观</h2>

<p>很多事物没有本质区别，比如
- 人和动物
- 肉食和素食</p>

<h2>汉隆剃刀</h2>

<p>&ldquo;汉隆剃刀"：能用愚蠢来解释的不要归因于恶意。</p>

<p>&ldquo;汉隆剃刀"的应用可以帮助减少对他人的负面解释和过度怀疑。它提醒我们，人们有时会犯错误，表现出不理智的行为，而不一定是有意的恶意。因此，在与他人互动或解释他人行为时，保持谦虚和理解，考虑到"汉隆剃刀"的原则可以有助于改善人际关系和减少冲突。</p>

<h2>中庸</h2>

<ul>
<li>自律带来自由，你有乱弹琴的自由，但是你没有上台表演的自由。</li>
<li>三思而后行。</li>
<li>不要一根筋走到底。</li>
<li>内心能容纳相反的观点。</li>
</ul>


<h2>其它</h2>

<ul>
<li>每个人都怀念自己年轻时候的时代，因为那个时候自己的身体和心理都是最好的。</li>
<li>改变睡梦中人的软感觉，不能植入硬知识。</li>
<li>不可知论，赫胥黎</li>
<li>区分道德中，哪些是权力哪些是义务。</li>
<li>跳槽是年轻人的特权。学一个势能高的专业，然后跳来跳去，选一个适合自己的工作。比如应用数学，应用物理？</li>
<li>年轻的时候感受到的爱越多，自己对人就越信任，对爱人信任。</li>
<li>能量型英雄与能耐型英雄。在待人接物中，把任何人都看成能量型英雄，尊重对方的荣誉。</li>
<li>啥时候吹牛啥时候不吹牛？熟人社会不能吹牛，陌生人社会可以吹牛。大家都默认你会吹牛，即使你说的是事实，别人也会打个折扣再接受。</li>
<li>上层社会人捧人（圈子），中层社会人比人，下层社会人踩人。</li>
<li>身体的出厂设置是为狩猎采集准备的，所以，多向狩猎采集式的生活靠拢是健康生活方式的原则。</li>
<li>原始世界信念决定三观。</li>
<li>读书

<ul>
<li>《首要怀疑》</li>
<li>《翦商》</li>
<li>《星空信使》</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卓克聊科技2022]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/09/15/zhuoke-keji-2022/"/>
    <updated>2023-09-15T18:07:03+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/09/15/zhuoke-keji-2022</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>像丧尸一般的朊蛋白（疯牛病）</h2>

<p>疯牛病的病原体是朊蛋白，也叫朊病毒。</p>

<p>这种病毒导致的疾病，叫朊病毒朊病毒病（Prion Disease），是一种致命性神经退行性疾病，致死率高达100.0%。</p>

<p>朊病毒是一种蛋白质病毒，说是病毒，其实它并不符合病毒的定义，甚至并不是严格意义上的生命。因为它并不包含DNA或者RNA等遗传物质，也不能复制自己。朊病毒只是一种特殊的变异的蛋白质，只是折叠方式与其他蛋白质不同，其它方面和正常的蛋白质没有多大区别。</p>

<p>同时，常规药物对朊病毒也无效，即使有能杀灭朊病毒的药物，也同时会杀灭人体正常蛋白质。</p>

<p>朊病毒的感染机制和病毒全然不同，它并不是通过DNA或者RNA信息复制，这种蛋白质病毒其实是没有遗传物质的，而是通过同化宿主的蛋白质进行传播。</p>

<p>听起来就像丧尸。</p>

<h2>关于眼睛的一些知识</h2>

<h3>激光手术</h3>

<p>高度近视是导致失明的重要原因。激光手术通过改变角膜达到纠正视力的功能，并没有改变眼轴长度，和高度近视一样，失明的风险依然很高。但是也不会像有些人说的视网膜脱落什么的，只要不参加一些对眼睛有冲击的运动，就没有任何问题，比如跳水。</p>

<h3>预防近视的方法</h3>

<ol>
<li>户外运动预防近视
户外运动不在于运动，而在于阳光。即使在树荫处，也比室内光照强很多。室内光照度不够，最强也只有室外的十分之一，而且光谱不全</li>
<li>闭眼
眼保健操不在于做操，在于闭眼。</li>
<li>现代医学预防青少年近视

<ol>
<li>OK镜

<ol>
<li>适用于8岁以上，600度以下。</li>
<li>需要戴到18岁，直到眼球固定。</li>
<li>一幅眼镜8000-15000元，保护好的话可以用1-2年。</li>
</ol>
</li>
<li>阿托品

<ol>
<li>4到16岁期间使用。</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>刺身</h2>

<ul>
<li>寄生虫问题，通过冷冻冻死寄生虫。</li>
<li>咸水鱼刺身：在运输的过程中需要冷冻，顺便就杀死了寄生虫。</li>
<li>淡水鱼刺身：没有冷冻运输的需求，杀死寄生虫靠自觉，难以保证。</li>
<li>醉虾醉蟹不能吃，酒不能杀死体内寄生虫。</li>
</ul>


<h2>最好的运动方式</h2>

<ul>
<li>爬，是最好的运动方式。</li>
<li>爬，膝盖不能着地，用双手双脚着地</li>
<li>有点像平板支撑</li>
<li>锻炼核心力量和协调性</li>
</ul>


<h2>糖</h2>

<ul>
<li>除了饱和脂肪酸，游离糖更不能吃。美国政府贿赂科学家发表吃糖没问题的文章，2016年曝光。</li>
<li>每天游离糖的上限是20到30克，一瓶330的可乐已经超标了。</li>
<li>代糖：甜蜜素，糖精，阿斯巴甜</li>
</ul>


<h2>呼吸机</h2>

<ul>
<li>新冠期间，呼吸机和制氧机是智商税。</li>
<li>家用制氧机压强小，不足以将氧气打入重症患者的肺部。需要3到4个大气压的压强，家用只能提供0.2-0.6个大气压强。</li>
<li>慢阻症适合家庭制氧机。</li>
</ul>


<h2>长寿方法</h2>

<ul>
<li>换血</li>
<li>模仿原始人生活方式，吃不饱，穿不暖，体力劳动，偶尔极限体力劳动。</li>
</ul>


<h2>退烧方法</h2>

<ul>
<li>退烧贴没有作用，感觉上的凉是薄荷等模拟的，不是真的能降温。就像辣椒模拟了烫伤的感觉，实际上并没有。</li>
<li>用水擦身体好一些，但是也不推荐。虽然水蒸发带走的热量足够降低体温，但是体表温度的下降会使得体内温度调节系统将目标温度设置的更高，从而产生更多的热量。除非一直不停的擦，否则，擦半小时停半小时，没有效果。</li>
<li>冰水擦身没必要，相比使水温升高带走的热量，水蒸发带走的热量才是主要的，大约1：20。但是，冰水对身体的刺激，会使得核心目标温度设置的更高。</li>
<li>最有效的就是退烧药，当体温高于38.5，精神萎靡的时候用</li>
</ul>


<h2>保健品</h2>

<ul>
<li>对保健品不要有任何期待，如果必须有一个期待，那就是：不要有什么害处。</li>
<li>吃任何保健品，都不如每天晒晒太阳，吃个鸡蛋，好好睡觉有效。</li>
</ul>


<h2>地面下沉</h2>

<ul>
<li>与其担心海平面上升（2毫米每年），不如担心城市地面下沉（10毫米每年）。过度抽取地下水导致陆地下沉。</li>
<li>雅加达已经由于下沉已经不是印尼的首都啦。</li>
</ul>


<h2>安慰剂效应与反安慰剂效应</h2>

<ul>
<li>安慰剂效应：只要你相信，就有作用。</li>
<li>反安慰剂效应：你相信家具的某种摆放有利于睡眠，但是家里的家具又不是这样摆放的，你的睡眠就会变差。</li>
</ul>


<h2>阴谋论与拉姆斯定律</h2>

<ul>
<li>信息足够多的时候，必定会有部分信息能够关联上，即使当初没有设计它们有关系，这就为阴谋论创造了条件。</li>
<li>解决方法有两个

<ul>
<li>非常小的信息量，不足以让信息之间产生关系。</li>
<li>更多的信息量，让产生阴谋论成为可能的同时，真正有关系的信息也会产生，这种正确的关系必定在未来的发展过程中蚕食阴谋论的市场。</li>
</ul>
</li>
</ul>


<h2>如何面对复杂系统</h2>

<ul>
<li>复杂系统，没有简单的输入输出关系，并且受各种反馈影响。</li>
<li>各种对策应对政策，比如

<ul>
<li>灭眼镜蛇灭鼠的行政命令</li>
<li>经济学上的事与愿违</li>
</ul>
</li>
<li>正确的做法

<ul>
<li>只限定边界，边界内部自由发展</li>
</ul>
</li>
</ul>


<h2>睡眠</h2>

<ul>
<li>控制体温，改善睡眠。降低核心温度能提高20%的睡眠质量。

<ul>
<li>可以通过提高四肢和手脚的温度实现，也可以通过降低室温实现。</li>
</ul>
</li>
<li>长期缺觉，免疫力，杏仁核，前额叶皮质，交感神经

<ul>
<li>蓝光，褪黑激素，睡眠</li>
</ul>
</li>
</ul>


<h2>延迟满足的误解</h2>

<ul>
<li>延迟满足不是能力，不能强行训练。</li>
<li>能否延迟满足主要和两个因素有关系（可以从这两个角度着手训练。）：

<ul>
<li>信任度</li>
<li>见多识广</li>
</ul>
</li>
</ul>


<h2>秩序的形成</h2>

<ul>
<li>自下向上自发形成的秩序是稳定的。</li>
<li>自上而下的顶层设计出来的秩序是不稳定的，需要很大的能量维护。</li>
</ul>


<h2>计算机结构</h2>

<ul>
<li>冯诺依曼结构</li>
<li>存算一体结构</li>
<li>量子计算机</li>
</ul>


<h2>进化论</h2>

<p>最小自由能原理：对外界刺激的预期，外界实际的刺激，两者不一致的时候，要么改变外界，要么改变期望。是不是很像成功学鸡汤？不</p>

<h2>其它</h2>

<ul>
<li>蟹棒没有蟹肉，淀粉和鱼肉</li>
<li>番茄酱有番茄</li>
<li>肯德基的番茄酱的配料表，第一个就是番茄酱。是不是很奇怪。其实是翻译的问题，我们说的番茄酱其实应该叫“调味包”</li>
<li>不要用酒精擦身体降温，因为皮肤会吸收酒精，尤其是孩子的皮肤。</li>
<li>拍频：风扇旋转的时候，会看到一个更慢的旋转，甚至反转</li>
<li>张益唐，黎曼猜想，零点定理，2022.11月公布的</li>
<li>张衡地动仪只有观赏价值，没有实用价值。</li>
<li>AR太难啦：空间建模，空间物体不要乱动，景深层次。VR相比就好很多，不用考虑真实世界</li>
<li>魂类游戏，难度</li>
<li>mcu芯片</li>
<li>奥卡姆剃刀：如非必须勿增实体</li>
<li>欧洲隐私，欧洲刑警组织败诉给数据隐私组织，被迫删除4PB的个人数据。</li>
<li>爱因斯坦：毅力做事情不如爱好做事情，爱好做事情不如追求美做事情。</li>
<li>苹果无损音乐核心竞争力是2002年开始音乐公司上传的母带。其它音乐平台都是假无损，插值得到的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Learning Note 2023]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/09/15/react-learning-note-2023/"/>
    <updated>2023-09-15T17:33:08+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/09/15/react-learning-note-2023</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#react-state-is-updated-in-a-batch">React state is updated in a “batch”</a></li>
<li><a href="#update-react-state-with-a-new-object-do-not-mute-existing-one">Update react state with a new object, do not mute existing one</a></li>
<li><a href="#declarative-ui">Declarative UI</a></li>
<li><a href="#react-redux">React-redux</a></li>
<li><a href="#hooks">Hooks</a></li>
<li><a href="#react%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F">React中的变量</a></li>
<li><a href="#useeffect">useEffect</a>

<ul>
<li><a href="#clean-up-function">clean up function</a></li>
</ul>
</li>
<li><a href="#usememo">useMemo</a></li>
<li><a href="#two-ways-to-store-previous-props">two ways to store previous props</a>

<ul>
<li><a href="#useref">useRef</a></li>
<li><a href="#usestate">useState</a></li>
</ul>
</li>
<li><a href="#fetch-data%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98">fetch data的两个问题</a>

<ul>
<li><a href="#race-condition">race condition</a></li>
<li><a href="#undo">undo</a></li>
</ul>
</li>
<li><a href="#effect-event">Effect Event</a>

<ul>
<li><a href="#what-is-reactive">what is reactive</a></li>
<li><a href="#problem">Problem</a></li>
<li><a href="#solution">Solution:</a></li>
<li><a href="#supress-react-lint-error">Supress react lint error</a></li>
</ul>
</li>
<li><a href="#how-to-review-effect-dependencies">How to review effect dependencies</a>

<ul>
<li><a href="#ways-to-review-and-fix-this">ways to review and fix this</a></li>
</ul>
</li>
<li><a href="#object-and-function-compare">Object and function compare</a></li>
<li><a href="#usememo-and-usecallback">useMemo and useCallback</a></li>
<li><a href="#forwardref">forwardRef</a>

<ul>
<li><a href="#useref-1">useRef</a></li>
<li><a href="#basic-concepts">basic concepts</a></li>
<li><a href="#expose-dom-node">expose dom node</a></li>
<li><a href="#expose-an-object">expose an object</a></li>
</ul>
</li>
<li><a href="#custom-hook">Custom Hook</a></li>
<li><a href="#strict-mode">strict mode</a></li>
<li><a href="#other-rules">Other Rules</a>

<ul>
<li><a href="#data-from-parent-to-child">data from parent to child</a></li>
<li><a href="#usesyncexternalstore">useSyncExternalStore</a></li>
<li><a href="#useeffect-dependencies">useEffect dependencies</a></li>
</ul>
</li>
</ul>


<h2>React state is updated in a “batch”</h2>

<p>This means that you can not get the state immediately after you change it.</p>

<p>number will be 1 after one click:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export default function Counter() {
</span><span class='line'>  const [number, setNumber] = useState(0);
</span><span class='line'>  return (
</span><span class='line'>    &lt;&gt;
</span><span class='line'>      &lt;h1&gt;{number}&lt;/h1&gt;
</span><span class='line'>      &lt;button onClick={() =&gt; {
</span><span class='line'>        setNumber(number + 1);
</span><span class='line'>        setNumber(number + 1);
</span><span class='line'>        setNumber(number + 1);
</span><span class='line'>      }}&gt;+3&lt;/button&gt;
</span><span class='line'>    &lt;/&gt;
</span><span class='line'>  )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To make the number to be 3, pass a update function to the setNumber function. An update function will be queued and executed later.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export default function Counter() {
</span><span class='line'>  const [number, setNumber] = useState(0);
</span><span class='line'>  return (
</span><span class='line'>    &lt;&gt;
</span><span class='line'>      &lt;h1&gt;{number}&lt;/h1&gt;
</span><span class='line'>      &lt;button onClick={() =&gt; {
</span><span class='line'>        setNumber(n =&gt; n + 1);
</span><span class='line'>        setNumber(n =&gt; n + 1);
</span><span class='line'>        setNumber(n =&gt; n + 1);
</span><span class='line'>      }}&gt;+3&lt;/button&gt;
</span><span class='line'>    &lt;/&gt;
</span><span class='line'>  )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Update react state with a new object, do not mute existing one</h2>

<p>Use <code>…</code> , the object spread operator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setPerson({
</span><span class='line'>  ...person, // Copy the old fields
</span><span class='line'>  firstName: e.target.value // But override this one
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Note that spread syntax is shallow: it only copies one level deep. To update nested object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setPerson({
</span><span class='line'>  ...person, // Copy other fields
</span><span class='line'>  artwork: { // but replace the artwork
</span><span class='line'>    ...person.artwork, // with the same one
</span><span class='line'>    city: 'New Delhi' // but in New Delhi!
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>For updating array object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setArtists([
</span><span class='line'>  { id: nextId++, name: name },
</span><span class='line'>  ...artists // Put old items at the end
</span><span class='line'>]);</span></code></pre></td></tr></table></div></figure>


<p><code>Immer</code> is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>updatePerson(draft =&gt; {
</span><span class='line'>  draft.artwork.city = 'Lagos';
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Using <code>Immer</code> for array:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>updateMyTodos(draft =&gt; {
</span><span class='line'>  const artwork = draft.find(a =&gt; a.id === artworkId);
</span><span class='line'>  artwork.seen = nextSeen;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Declarative UI</h2>

<ul>
<li>Declarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).</li>
<li>When developing a component, Think in declarative UI way:

<ol>
<li>Identify all its visual states.</li>
<li>Determine the human and computer triggers for state changes.</li>
<li>Model the state with useState.</li>
<li>Remove non-essential state to avoid bugs and paradoxes.</li>
<li>Connect the event handlers to set state.</li>
</ol>
</li>
</ul>


<h2>React-redux</h2>

<ul>
<li>useReducer+useContext?</li>
<li>Provider</li>
<li>Context</li>
</ul>


<h2>Hooks</h2>

<ul>
<li>useContext: 跨层传输props，不用一层一层传下去</li>
<li>useEffect: Use them to synchronize your component with a system outside of React.</li>
</ul>


<h2>React中的变量</h2>

<ul>
<li>Props：immutable, 触发rerender，不记忆(retained by component)</li>
<li>State：immutable, 触发rerender，记忆(retained by React)</li>
<li>useRef：mutable, 不触发rerender，记忆(retained by React)</li>
</ul>


<h2>useEffect</h2>

<p>Effects let you specify side effects that are caused by rendering itself, rather than by a particular event.</p>

<p>Effects run at the end of a <em>commit</em> after the screen updates. That is, useEffect “delays” a piece of code from running until that render is reflected on the screen.</p>

<h3>clean up function</h3>

<p>You can use a clean up function to clean up the effect. For example, if you subscribe to an external data source, you can unsubscribe it in the clean up function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useEffect(() =&gt; {
</span><span class='line'>  const connection = createConnection();
</span><span class='line'>  connection.connect();
</span><span class='line'>  return () =&gt; {
</span><span class='line'>    connection.disconnect();
</span><span class='line'>  };
</span><span class='line'>}, []);
</span><span class='line'>
</span><span class='line'>useEffect(() =&gt; {
</span><span class='line'>  function handleScroll(e) {
</span><span class='line'>    console.log(window.scrollX, window.scrollY);
</span><span class='line'>  }
</span><span class='line'>  window.addEventListener('scroll', handleScroll);
</span><span class='line'>  return () =&gt; window.removeEventListener('scroll', handleScroll);
</span><span class='line'>}, []);</span></code></pre></td></tr></table></div></figure>


<p><strong>React will call your cleanup function each time before the next Effect runs again, and one final time when the component unmounts (gets removed).</strong>
That is, the cleanup function runs not only during unmount, but before every re-render with changed dependencies.</p>

<h2>useMemo</h2>

<p>useMemo和useEffect都可以加依赖，但是useMemo在render过程起作用，而useEffect在commit之后起作用。
所以，如果是render依赖的变量值，用useMemo，不用useEffect+useState。</p>

<p>不推荐：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function TodoList({ todos, filter }) {
</span><span class='line'>  const [newTodo, setNewTodo] = useState('');
</span><span class='line'>  // 🔴 Avoid: redundant state and unnecessary Effect
</span><span class='line'>  const [visibleTodos, setVisibleTodos] = useState([]);
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    setVisibleTodos(getFilteredTodos(todos, filter));
</span><span class='line'>  }, [todos, filter]);
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>推荐：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { useMemo, useState } from 'react';
</span><span class='line'>function TodoList({ todos, filter }) {
</span><span class='line'>  const [newTodo, setNewTodo] = useState('');
</span><span class='line'>  const visibleTodos = useMemo(() =&gt; {
</span><span class='line'>    // ✅ Does not re-run unless todos or filter change
</span><span class='line'>    return getFilteredTodos(todos, filter);
</span><span class='line'>  }, [todos, filter]);
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>two ways to store previous props</h2>

<h3>useRef</h3>

<p><code>prevProps</code> updates after render:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  const prevProps = useRef();
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    prevProps.current = props;
</span><span class='line'>  }, [props]);</span></code></pre></td></tr></table></div></figure>


<h3>useState</h3>

<p><code>prevItems</code> is ready when render:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  const [prevItems, setPrevItems] = useState(items);
</span><span class='line'>  if (items !== prevItems) {
</span><span class='line'>    setPrevItems(items);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>fetch data的两个问题</h2>

<h3>race condition</h3>

<p>输入特别快的时候，很多search的request连续发出，不能保证回来的顺序，会出问题。
解决方法：给useEffect提供cleanup函数解决</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function SearchResults({ query }) {
</span><span class='line'>  const [results, setResults] = useState([]);
</span><span class='line'>  const [page, setPage] = useState(1);
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    let ignore = false;
</span><span class='line'>    fetchResults(query, page).then(json =&gt; {
</span><span class='line'>      if (!ignore) {
</span><span class='line'>        setResults(json);
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>    return () =&gt; {
</span><span class='line'>      ignore = true;
</span><span class='line'>    };
</span><span class='line'>  }, [query, page]);
</span><span class='line'>
</span><span class='line'>  function handleNextPageClick() {
</span><span class='line'>    setPage(page + 1);
</span><span class='line'>  }
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>undo</h3>

<p>没看懂：<a href="https://react.dev/learn/you-might-not-need-an-effect#fetching-data">https://react.dev/learn/you-might-not-need-an-effect#fetching-data</a></p>

<h2>Effect Event</h2>

<h3>what is reactive</h3>

<p>variables which can change due to a re-render
* Logic inside event handlers (or Effect Event) is not reactive.
* Logic inside Effects is reactive.</p>

<h3>Problem</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ChatRoom({ roomId, theme }) {
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(serverUrl, roomId);
</span><span class='line'>    connection.on('connected', () =&gt; {
</span><span class='line'>      showNotification('Connected!', theme);
</span><span class='line'>    });
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; {
</span><span class='line'>      connection.disconnect()
</span><span class='line'>    };
</span><span class='line'>  }, [roomId, theme]); // ✅ All dependencies declared
</span><span class='line'>  // ...</span></code></pre></td></tr></table></div></figure>


<p>When reconnected, a notification will be shown, and the notificaiton will consider the theme.
But when the theme changes, the notification will also be shown, which is not expected.</p>

<h3>Solution:</h3>

<p>Use Effect Event to separate this non-reactive logic from the reactive Effect around it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ChatRoom({ roomId, theme }) {
</span><span class='line'>  const onConnected = useEffectEvent(() =&gt; {
</span><span class='line'>    showNotification('Connected!', theme);
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(serverUrl, roomId);
</span><span class='line'>    connection.on('connected', () =&gt; {
</span><span class='line'>      onConnected();
</span><span class='line'>    });
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId]); // ✅ All dependencies declared
</span><span class='line'>  // ...</span></code></pre></td></tr></table></div></figure>


<p>You can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you “break the chain” between the reactivity of Effects and code that should not be reactive.</p>

<h3>Supress react lint error</h3>

<p>React linter ask you to add all reactive variables into the Effect dependencies.
Effect Events let you fix many patterns where you might be tempted to suppress the dependency linter.</p>

<h2>How to review effect dependencies</h2>

<p>Every time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:</p>

<ul>
<li>You might want to re-execute different parts of your Effect under different conditions.</li>
<li>You might want to only read the latest value of some dependency instead of “reacting” to its changes.</li>
<li>A dependency may change too often unintentionally because it’s an object or a function.</li>
</ul>


<h3>ways to review and fix this</h3>

<ul>
<li>Should this code move to an event handler?</li>
<li>Is your Effect doing several unrelated things?

<ul>
<li>If different parts of your Effect should re-run for different reasons, split it into several Effects.</li>
</ul>
</li>
<li>Are you reading some state to calculate the next state?

<ul>
<li>Use update function. Use <code>setMessages([...messages, receivedMessage])</code> instead of <code>setMessages(msgs =&gt; [...msgs, receivedMessage])</code></li>
</ul>
</li>
<li>In JavaScript, objects and functions are considered different if they were created at different times.</li>
<li>Try to avoid object and function dependencies. Move them outside the component or inside the Effect.

<ul>
<li>Move static objects and functions outside your component</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function createOptions() {
</span><span class='line'>  return {
</span><span class='line'>    serverUrl: 'https://localhost:1234',
</span><span class='line'>    roomId: 'music'
</span><span class='line'>  };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function ChatRoom() {
</span><span class='line'>  const [message, setMessage] = useState('');
</span><span class='line'>
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const options = createOptions();
</span><span class='line'>    const connection = createConnection();
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, []); // ✅ All dependencies declared
</span><span class='line'>  // ...</span></code></pre></td></tr></table></div></figure>


<pre><code>* Move dynamic objects and functions inside your Effect 
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const serverUrl = 'https://localhost:1234';
</span><span class='line'>
</span><span class='line'>function ChatRoom({ roomId }) {
</span><span class='line'>  const [message, setMessage] = useState('');
</span><span class='line'>
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const options = {
</span><span class='line'>      serverUrl: serverUrl,
</span><span class='line'>      roomId: roomId
</span><span class='line'>    };
</span><span class='line'>    const connection = createConnection(options);
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId]); // ✅ All dependencies declared
</span><span class='line'>  // ...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Read primitive values from objects</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ChatRoom({ options }) {
</span><span class='line'>  const [message, setMessage] = useState('');
</span><span class='line'>
</span><span class='line'>  const { roomId, serverUrl } = options;
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection({
</span><span class='line'>      roomId: roomId,
</span><span class='line'>      serverUrl: serverUrl
</span><span class='line'>    });
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [roomId, serverUrl]); // ✅ All dependencies declared
</span><span class='line'>  // ...</span></code></pre></td></tr></table></div></figure>


<h2>Object and function compare</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { useState, useEffect } from 'react';
</span><span class='line'>import { createConnection } from './chat.js';
</span><span class='line'>
</span><span class='line'>const serverUrl = 'https://localhost:1234';
</span><span class='line'>
</span><span class='line'>function ChatRoom({ roomId }) {
</span><span class='line'>  const [message, setMessage] = useState('');
</span><span class='line'>
</span><span class='line'>  // Temporarily disable the linter to demonstrate the problem
</span><span class='line'>  // eslint-disable-next-line react-hooks/exhaustive-deps
</span><span class='line'>  const options = {
</span><span class='line'>    serverUrl: serverUrl,
</span><span class='line'>    roomId: roomId
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(options);
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; connection.disconnect();
</span><span class='line'>  }, [options]);
</span><span class='line'>
</span><span class='line'>  return (
</span><span class='line'>    &lt;&gt;
</span><span class='line'>      &lt;h1&gt;Welcome to the {roomId} room!&lt;/h1&gt;
</span><span class='line'>      &lt;input value={message} onChange={e =&gt; setMessage(e.target.value)} /&gt;
</span><span class='line'>    &lt;/&gt;
</span><span class='line'>  );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default function App() {
</span><span class='line'>  const [roomId, setRoomId] = useState('general');
</span><span class='line'>  return (
</span><span class='line'>    &lt;&gt;
</span><span class='line'>      &lt;label&gt;
</span><span class='line'>        Choose the chat room:{' '}
</span><span class='line'>        &lt;select
</span><span class='line'>          value={roomId}
</span><span class='line'>          onChange={e =&gt; setRoomId(e.target.value)}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;option value="general"&gt;general&lt;/option&gt;
</span><span class='line'>          &lt;option value="travel"&gt;travel&lt;/option&gt;
</span><span class='line'>          &lt;option value="music"&gt;music&lt;/option&gt;
</span><span class='line'>        &lt;/select&gt;
</span><span class='line'>      &lt;/label&gt;
</span><span class='line'>      &lt;hr /&gt;
</span><span class='line'>      &lt;ChatRoom roomId={roomId} /&gt;
</span><span class='line'>    &lt;/&gt;
</span><span class='line'>  );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In the example above, the input only updates the message state variable. From the user’s perspective, this should not affect the chat connection. However, every time you update the message, your component re-renders. When your component re-renders, the code inside of it runs again from scratch.</p>

<p>A new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options), and the chat re-connects as you type.</p>

<p>This problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn’t matter that the contents inside of them may be the same!</p>

<p>Object and function dependencies can make your Effect re-synchronize more often than you need.</p>

<p>This is why, whenever possible, you should try to avoid objects and functions as your Effect’s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.</p>

<h2>useMemo and useCallback</h2>

<ul>
<li>useMemo caches the result of calling your function.</li>
<li>useCallback caches the function itself. React will not call your function.</li>
</ul>


<h2>forwardRef</h2>

<p>First, get familar with <code>useRef</code>:</p>

<h3>useRef</h3>

<p>ref.current is set during the <em>commit</em> process, not <em>render</em> process, so do not read or write ref.current during rendering. We can use ref.current in event handler or useEffect.</p>

<h3>basic concepts</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const MyInput = forwardRef(function MyInput(props, ref) {
</span><span class='line'>  return (
</span><span class='line'>    &lt;label&gt;
</span><span class='line'>      {props.label}
</span><span class='line'>      &lt;input ref={ref} /&gt;
</span><span class='line'>    &lt;/label&gt;
</span><span class='line'>  );
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The ref attribute passed by the parent component. The ref can be an object or a function. You should either
* pass the ref you receive to another component, or
* pass it to useImperativeHandle.</p>

<h3>expose dom node</h3>

<p>The parent <code>Form</code> component accesses the \<input\> DOM node exposed by <code>MyInput</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { forwardRef } from 'react';
</span><span class='line'>
</span><span class='line'>const MyInput = forwardRef(function MyInput(props, ref) {
</span><span class='line'>  const { label, ...otherProps } = props;
</span><span class='line'>  return (
</span><span class='line'>    &lt;label&gt;
</span><span class='line'>      {label}
</span><span class='line'>      &lt;input {...otherProps} ref={ref} /&gt;
</span><span class='line'>    &lt;/label&gt;
</span><span class='line'>  );
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>function Form() {
</span><span class='line'>  const ref = useRef(null);
</span><span class='line'>
</span><span class='line'>  function handleClick() {
</span><span class='line'>    ref.current.focus();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return (
</span><span class='line'>    &lt;form&gt;
</span><span class='line'>      &lt;MyInput label="Enter your name:" ref={ref} /&gt;
</span><span class='line'>      &lt;button type="button" onClick={handleClick}&gt;
</span><span class='line'>        Edit
</span><span class='line'>      &lt;/button&gt;
</span><span class='line'>    &lt;/form&gt;
</span><span class='line'>  );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>expose an object</h3>

<p>Use <code>useImperativeHandle</code> to expose an object referenced by <code>ref</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import { forwardRef, useRef, useImperativeHandle } from 'react';
</span><span class='line'>
</span><span class='line'>const MyInput = forwardRef(function MyInput(props, ref) {
</span><span class='line'>  const inputRef = useRef(null);
</span><span class='line'>
</span><span class='line'>  useImperativeHandle(ref, () =&gt; {
</span><span class='line'>    return {
</span><span class='line'>      focus() {
</span><span class='line'>        inputRef.current.focus();
</span><span class='line'>      },
</span><span class='line'>      scrollIntoView() {
</span><span class='line'>        inputRef.current.scrollIntoView();
</span><span class='line'>      },
</span><span class='line'>    };
</span><span class='line'>  }, []);
</span><span class='line'>
</span><span class='line'>  return &lt;input {...props} ref={inputRef} /&gt;;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Custom Hook</h2>

<p>You must follow these naming conventions:</p>

<ul>
<li>React component names must start with a capital letter, like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.</li>
<li>Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.</li>
</ul>


<p>This convention guarantees that you can always look at a component and know where its state, Effects, and other React features might “hide”. For example, if you see a getColor() function call inside your component, you can be sure that it can’t possibly contain React state inside because its name doesn’t start with use. However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!</p>

<p>If your linter is configured for React, it will enforce this naming convention.</p>

<p>Note that custom Hooks only share stateful logic, not state itself.</p>

<h2>strict mode</h2>

<p><StrictMode> lets you find common bugs in your components early during development.</p>

<p>Strict Mode enables the following development-only behaviors:
* Your components will re-render an extra time to find bugs caused by impure rendering.
* Your components will re-run Effects an extra time to find bugs caused by missing Effect cleanup.
* Your components will be checked for usage of deprecated APIs.</p>

<h2>Other Rules</h2>

<h3>data from parent to child</h3>

<p>When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child.
This is simpler and keeps the data flow predictable: the data flows down from the parent to the child.</p>

<h3>useSyncExternalStore</h3>

<h3>useEffect dependencies</h3>

<p>All variables from the component body used by the Effect should be in the Effect dependency list. However, you could instead “prove” to the linter that these values aren’t reactive values, i.e. that they can’t change as a result of a re-render. For example, if serverUrl and roomId don’t depend on rendering and always have the same values, you can move them outside the component. Now they don’t need to be dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive
</span><span class='line'>const roomId = 'general'; // roomId is not reactive
</span><span class='line'>
</span><span class='line'>function ChatRoom() {
</span><span class='line'>  useEffect(() =&gt; {
</span><span class='line'>    const connection = createConnection(serverUrl, roomId);
</span><span class='line'>    connection.connect();
</span><span class='line'>    return () =&gt; {
</span><span class='line'>      connection.disconnect();
</span><span class='line'>    };
</span><span class='line'>  }, []); // ✅ All dependencies declared
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件循环中的Macrotask和Microtask]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/05/25/event-loop-and-macrotask-and-microtask/"/>
    <updated>2023-05-25T22:01:49+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/05/25/event-loop-and-macrotask-and-microtask</id>
    <content type="html"><![CDATA[<!-- more -->


<p>For details, refer to <a href="https://javascript.info/event-loop">Event loop: microtasks and macrotasks</a>.</p>

<h2>Event Loop</h2>

<p>The event loop concept is very simple. There’s an endless loop, where the JavaScript engine waits for tasks, executes them and then sleeps, waiting for more tasks.</p>

<p>For instance, while the engine is busy executing a <code>script</code>, a user may move their mouse causing <code>mousemove</code>, and <code>setTimeout</code> may be due and so on, these tasks form a queue.</p>

<p>Tasks from the queue are processed on “first come – first served” basis. When the engine browser is done with the <code>script</code>, it handles <code>mousemove</code> event, then <code>setTimeout</code> handler, and so on.</p>

<p>So far, quite simple, right?</p>

<p>Two more details:</p>

<ul>
<li>Rendering never happens while the engine executes a task. It doesn’t matter if the task takes a long time. Changes to the DOM are painted only after the task is complete.</li>
<li>If a task takes too long, the browser can’t do other tasks, such as processing user events. So after a time, it raises an alert like “Page Unresponsive”, suggesting killing the task with the whole page. That happens when there are a lot of complex calculations or a programming error leading to an infinite loop.</li>
</ul>


<p>Event Loop应用
Use-case 1: <a href="https://javascript.info/event-loop#use-case-1-splitting-cpu-hungry-tasks">splitting CPU-hungry tasks</a>
Use case 2: <a href="https://javascript.info/event-loop#use-case-1-splitting-cpu-hungry-tasks">progress indication</a>
Use case 3: <a href="https://javascript.info/event-loop#use-case-3-doing-something-after-the-event">doing something after the event</a></p>

<h2>Macrotasks and Microtasks</h2>

<ul>
<li>Macrotask：

<ul>
<li><code>script</code>，<code>mousemove</code>，<code>setTimeout</code></li>
<li>use <code>setTimeout(f)</code> to dispatch a callback as a macrotask</li>
</ul>
</li>
<li>Microtask：

<ul>
<li>They are usually created by promises: an execution of <code>.then/catch/finally</code> handler becomes a microtask.</li>
<li> use <code>queueMicrotask(f)</code> to dispatch a callback as a microtask</li>
</ul>
</li>
</ul>


<p>Event loop workflow with macrotask and microtask:</p>

<p><img src="http://hongchaozhang.github.io/images/eventloopinv8.png" width="300px" alt="event loop and macrotask and microtask" /></p>

<h2>Summary</h2>

<p>A more detailed event loop algorithm (though still simplified compared to the specification):</p>

<pre><code>1. Dequeue and run the oldest task from the macrotask queue (e.g. “script”).
2. Execute all microtasks:
    * While the microtask queue is not empty:
        * Dequeue and run the oldest microtask.
3. Render changes if any.
4. If the macrotask queue is empty, wait till a macrotask appears.
5. Go to step 1.
</code></pre>

<p>If you want a real parallel task execution, use Web Worker. it is running in a separate thread.</p>

<h2>练习</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>console.log(1);
</span><span class='line'>
</span><span class='line'>setTimeout(() =&gt; console.log(2));
</span><span class='line'>
</span><span class='line'>Promise.resolve().then(() =&gt; console.log(3));
</span><span class='line'>
</span><span class='line'>Promise.resolve().then(() =&gt; setTimeout(() =&gt; console.log(4)));
</span><span class='line'>
</span><span class='line'>Promise.resolve().then(() =&gt; console.log(5));
</span><span class='line'>
</span><span class='line'>setTimeout(() =&gt; console.log(6));
</span><span class='line'>
</span><span class='line'>console.log(7);</span></code></pre></td></tr></table></div></figure>


<p>答案：The console output is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 7 3 5 2 6 4</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise以及sync和async]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/05/25/javascript-promise-and-sync-and-async/"/>
    <updated>2023-05-25T21:24:13+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/05/25/javascript-promise-and-sync-and-async</id>
    <content type="html"><![CDATA[<!-- more -->


<p>For details, refer to <a href="https://javascript.info/async">Promises, async/await</a></p>

<h2>Basic usage</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let promise = new Promise(function(resolve, reject) {
</span><span class='line'>  let resolved = true;
</span><span class='line'>  if (resolved) {
</span><span class='line'>  setTimeout(() =&gt; resolve("done!"), 1000);
</span><span class='line'>  } else {
</span><span class='line'>    setTimeout(() =&gt; reject(new Error("Whoops!")), 1000);
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>// resolve runs the first function in .then
</span><span class='line'>promise
</span><span class='line'>.finally(() =&gt; alert("Promise ready")) // triggers first
</span><span class='line'>.then(
</span><span class='line'>  result =&gt; alert(result), // shows "done!" after 1 second
</span><span class='line'>  error =&gt; alert(error) // doesn't run
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the value returned by the first promise is passed through <code>finally</code> to the next <code>then</code>.</p>

<h2>Promise chain</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new Promise(function(resolve, reject) {
</span><span class='line'>
</span><span class='line'>  setTimeout(() =&gt; resolve(1), 1000); // (*)
</span><span class='line'>
</span><span class='line'>}).then(function(result) { // (**)
</span><span class='line'>
</span><span class='line'>  alert(result); // 1
</span><span class='line'>  return result * 2;
</span><span class='line'>
</span><span class='line'>}).then(function(result) { // (***)
</span><span class='line'>
</span><span class='line'>  alert(result); // 2
</span><span class='line'>  return result * 2;
</span><span class='line'>
</span><span class='line'>}).then(function(result) {
</span><span class='line'>
</span><span class='line'>  alert(result); // 4
</span><span class='line'>  return result * 2;
</span><span class='line'>
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>then</code> should be a <code>async</code> function, so it can convert any return values to a promise.</p>

<h2>Error handling</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fetch('/article/promise-chaining/user.json')
</span><span class='line'>  .then(response =&gt; response.json())
</span><span class='line'>  .then(user =&gt; fetch(`https://api.github.com/users/${user.name}`))
</span><span class='line'>  .then(response =&gt; response.json())
</span><span class='line'>  .then(githubUser =&gt; new Promise((resolve, reject) =&gt; {
</span><span class='line'>    let img = document.createElement('img');
</span><span class='line'>    img.src = githubUser.avatar_url;
</span><span class='line'>    img.className = "promise-avatar-example";
</span><span class='line'>    document.body.append(img);
</span><span class='line'>
</span><span class='line'>    setTimeout(() =&gt; {
</span><span class='line'>      img.remove();
</span><span class='line'>      resolve(githubUser);
</span><span class='line'>    }, 3000);
</span><span class='line'>  }))
</span><span class='line'>  .catch(error =&gt; alert(error.message));</span></code></pre></td></tr></table></div></figure>


<p>The code of a promise executor and promise handlers has an &ldquo;invisible&rdquo; <code>try..catch</code> around it. If an exception happens, it gets caught and treated as a rejection.</p>

<p>The &ldquo;invisible&rdquo; <code>try..catch</code> around the executor automatically catches the error and turns it into rejected promise.</p>

<p>More details about the error handling workflow, refers to <a href="https://javascript.info/promise-error-handling">https://javascript.info/promise-error-handling</a></p>

<h2>Promise.all</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let urls = [
</span><span class='line'>  'https://api.github.com/users/iliakan',
</span><span class='line'>  'https://api.github.com/users/remy',
</span><span class='line'>  'https://api.github.com/users/jeresig'
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>// map every url to the promise of the fetch
</span><span class='line'>let requests = urls.map(url =&gt; fetch(url));
</span><span class='line'>
</span><span class='line'>// Promise.all waits until all jobs are resolved
</span><span class='line'>Promise.all(requests)
</span><span class='line'>  .then(responses =&gt; responses.forEach(
</span><span class='line'>    response =&gt; alert(`${response.url}: ${response.status}`)
</span><span class='line'>  ));</span></code></pre></td></tr></table></div></figure>


<p>The new promise resolves when all listed promises are resolved, and the array of their results becomes its result.</p>

<p>If any of the promises is rejected, the promise returned by <code>Promise.all</code> immediately rejects with that error.</p>

<p>Please note that the order of the resulting array members is the same as in its source promises. Even though the first promise takes the longest time to resolve, it’s still first in the array of results.</p>

<h2>Promisification</h2>

<p>Used for changing callback style to promise style.</p>

<h2>async/await</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>async function f() {
</span><span class='line'>  return 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>f().then(alert); // 1</span></code></pre></td></tr></table></div></figure>


<p><code>async</code> ensures that the function returns a promise, and wraps non-promises in it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>async function f() {
</span><span class='line'>
</span><span class='line'>  let promise = new Promise((resolve, reject) =&gt; {
</span><span class='line'>    setTimeout(() =&gt; resolve("done!"), 1000)
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  let result = await promise; // wait until the promise resolves (*)
</span><span class='line'>
</span><span class='line'>  alert(result); // "done!"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>f();</span></code></pre></td></tr></table></div></figure>


<p>The function execution “pauses” at the line (*) and resumes when the promise settles, with result becoming its result. So the code above shows “done!” in one second.</p>

<p>Let’s emphasize: <code>await</code> literally suspends the function execution until the promise settles, and then resumes it with the promise result. That doesn’t cost any CPU resources, because the JavaScript engine can do other jobs in the meantime: execute other scripts, handle events, etc.</p>

<p>For details, refer to <a href="http://hongchaozhang.github.io/blog/2023/05/25/event-loop-and-macrotask-and-microtask/">macrotask and microtask in event loop</a></p>

<p><code>Async/Sync</code> is just a more elegant syntax of getting the promise result than <code>promise.then</code>. And, it’s easier to read and write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在一台机器上使用两个github账号]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/05/24/work-with-two-github-accounts/"/>
    <updated>2023-05-24T21:30:12+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/05/24/work-with-two-github-accounts</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近公司的github账号从专有域名（github.company.com）迁移到了公共域名（github.com）下，所以我需要在一台机器上同时使用两个github账号。这里记录一下配置过程。</p>

<ol>
<li>生成两个ssh key</li>
<li>将ssh key添加到github账号</li>
<li>配置ssh config

<ol>
<li>如果不想配置config文件，需要手动保证ssh-agent里面每次有你想要的key，这个要不断切换，不方便，推荐使用config文件。</li>
</ol>
</li>
<li>使用特殊的域名进行<code>git clone</code>操作, <code>git clone git@github.com-hongchaozhang:hongchaozhang/deep-learning-specialization.git</code>.</li>
</ol>


<p><code>~/.ssh</code>目录下文件和创建的<code>config</code>文件，内容如下：</p>

<p><img src="http://hongchaozhang.github.io/images/config-two-github-account.jpg" alt="config two github accounts" width="300"></p>

<p>具体步骤细节参考：</p>

<ul>
<li><a href="https://www.freecodecamp.org/news/manage-multiple-github-accounts-the-ssh-way-2dadc30ccaca/#:~:text=If%20it%E2%80%99s%20to%20a%20personal%20Git%20account%20that,do%20a%20Git%20push%20to%20the%20personal%20repository">How to manage multiple GitHub accounts on a single machine with SSH keys</a></li>
<li><a href="https://gist.github.com/rahularity/86da20fe3858e6b311de068201d279e3">How To Work With Multiple Github Accounts on a single Machine</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迁移Octopress到MacBook（M1）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2023/05/24/migrate-octopress-to-m1-macbook/"/>
    <updated>2023-05-24T01:49:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2023/05/24/migrate-octopress-to-m1-macbook</id>
    <content type="html"><![CDATA[<!-- more -->


<p>2020年的<a href="http://hongchaozhang.github.io/blog/2020/02/26/deploy-octopress-in-a-new-machine/">迁移Octopress到新的机器上</a>里面描述的问题依然存在。除此之外，还有一些新的问题。</p>

<h2>不能正常加载(require)pygments.rb</h2>

<p>当运行 <code>rake generate</code> 时，会报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jekyll 2.5.3 | Error:  Pygments can't parse unknown language: javascript.</span></code></pre></td></tr></table></div></figure>


<p>通过运行<code>jekyll build</code>，可以看到报错的详细信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Users/hozhang/Develop/hongchaozhang.github.io/plugins/pygments_code.rb:1:in `require': cannot load such file -- pygments (LoadError)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>当你写一个简单的rb脚本，使用<code>require 'pygments'</code>，却不会报错。</p>

<p>我们可以通过运行下面的命令来获得当前所有的gems加载路径（<code>require</code>或者<code>load</code>）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts $LOAD_PATH</span></code></pre></td></tr></table></div></figure>


<p>可以看出，上面两种情况下，加载路径是不一样的。在<code>rake generate</code>的情况下，加载路径中没有<code>/Library/Ruby/Gems/2.6.0/gems/pygments.rb-2.4.0/lib</code>这个路径，所以会报错。</p>

<blockquote><p><a href="https://medium.com/@connorstack/understanding-ruby-load-require-gems-bundler-and-rails-autoloading-from-the-bottom-up-3b422902ca0">Understanding ruby load, require, gems, bundler and rails auto loading from the bottom up</a>：这篇文章讲解了ruby的依赖加载机制，对于理解这个问题很有帮助，虽然最终还是没有解决问题。</p></blockquote>

<h3>解决方法</h3>

<p>将所有的code片段的语言类型指定都去掉。</p>

<p>原来带语言标记的源文件暂时放在独立的branch里：<code>source_code_with_language_type</code>。等啥时候pygments的问题解决了再弄回来。</p>

<h2>理解octopress</h2>

<p>你自己的github.io那个repo就是一个octopress，每次重新clone之后，就要按照octopress的步骤重新操作一遍：
* <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>
* <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<h2>在一台机器上同时用两个github账号工作</h2>

<p>参考<a href="http://hongchaozhang.github.io/blog/2023/05/24/work-with-two-github-accounts/">如何在一台机器上使用两个github账号</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-排序不等式]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-paixubudengshi/"/>
    <updated>2022-12-08T21:27:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-paixubudengshi</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>什么是排序不等式</h2>

<p>排序不等式：大数乘大数加上小数乘小数，大于大数乘小数加小数乘大数。</p>

<p>假设:</p>

<ul>
<li>x1>x2>x3>0</li>
<li>y1>y2>y3>0</li>
</ul>


<p>那么：</p>

<ul>
<li>x1*y1 + x2*y2 + x3*y3 > [其它排序乘积相加] > x1*y3 + x2*y2 + x3*y1</li>
</ul>


<p>它能告诉你<strong>效率</strong>和<strong>公平</strong>的本质关系，也正是因为这个不等式，效率和公平是矛盾的。</p>

<p>更关键的是，我们熟悉的那些不等式，比如什么“算数平均值大于几何平均值”、什么“柯西不等式”、什么“车比雪夫不等式”，都可以从排序不等式推导出来。</p>

<h2>排序不等式的应用</h2>

<p>世界上的很多配合不是加法、而是乘法关系。资源和人才往往不是一个加数，而是一个因子：把这个因子扩大一点点，整个这一块都能放大这么高的比例。所以：</p>

<ol>
<li>最好的资源应该用在最赚钱的地方，</li>
<li>最厉害的人员应该放在最关键的岗位，</li>
<li>最好的电影应该乘以最好的导演再乘以最好的演员、然后给最多的院线排期。</li>
</ol>


<p>这就是为什么好东西总爱扎堆，有志向的年轻人非得去大城市。这也是为什么会有马太效应，为什么人人都想跟最好的合作。这也是为什么市场总是让财富分布不平等。</p>

<h3>销售额</h3>

<p>比如你是某个决策者，你现在手里有个大项目，放在哪个地区都能提升当地的经济发展。那请问，你是把它放在经济发达地区呢，还是边远落后地区呢？</p>

<p>只要你关心的是全国经济总量的提升，你想通过这个项目创造更多的税收，你就应该坚决投发达地区。同样是提升1%，发达地区的乘数要大得多。谁都喜欢大数，但是大数最能让大数发挥作用。</p>

<h3>商店促销</h3>

<p>促销要放在周末人多的时候，而不是平时人少的时候。（前提是没有达到销量瓶颈，比如门店承受能力。）</p>

<h3>车间系统</h3>

<p>我们假设你们车间有两条生产线，每条生产线需要两个人先后动作，共同完成一件产品。现在你有四个工人，老张和老李的良品率都是95%，小张和小李的良品率都是75%。那请问，你应该把这四个人怎么分组呢？</p>

<p>直觉的分法，是让老张和小张一组，老李和小李一组，这样两个组的良品率是一样的，都是0.95×0.75=71%。你可能觉得这样分组还能让高手带一带低手，能起到骨干作用。我不知道那个高手“带动”低手的效应能有多大，但是我知道，排序不等式要求你让老张和老李一组，小张和小李一组。你的高手组良品率将是0.95×0.95=90%，低手良品率将是0.75×0.75=56%，而你的总良品率是两组的平均值，也就是73%——高于高低搭配分组的71%。</p>

<h2>排序不等式，是资源配置的“零阶道理”。</h2>

<p>排序不等式，是资源配置的“零阶道理”。</p>

<p>当然，世界是复杂的，事物的发展常常是非线性的，什么东西太多了都会发生边际效应递减。也许这个项目在发达地区的发展空间已经饱和了，也许那个地区暂时落后，以后的发展潜力大，也许大城市生活成本太高了，也许最优秀的导演不会重视你这个剧本，应该找最合适的。</p>

<p>但是，那些都是对零阶道理的一阶、或者高阶修正：零阶道理仍然是零阶道理。我们做决策必须首先考虑零阶道理，只有在证实了零阶道理在这里不行的情况下，我们才应该考虑那些修正。</p>

<h2>不适用排序不等式的场景</h2>

<h3>教育系统</h3>

<p>教育系统有重点大学、重点中学，同一个学校里还会有重点班，重点班的老师是全校最好的。这完全符合排序不等式，教育系统希望培养高水平人才。但是你注意到没有，在任何一个班级里，老师重点关注的，往往不是最好的学生。这是为啥呢？因为<strong>学习成绩有上限</strong>。</p>

<h3>福利系统</h3>

<p>还有一种系统，比如福利系统，则要求各个相加项的大小有一个下限。是，在贫困山区建设通讯基站效率不高，但是贫困山区需要通讯基站。福利系统解决的是<strong>公平问题</strong>。这种系统有时候会把最好的官员排到最贫困的地区去，并不指望他们创造什么效益，只是希望提高那些地区的下限。而既然是为了公平，那就必然牺牲了效率。</p>

<h3>安全系统</h3>

<p>安全系统也强调下限。只要是防守，我们最关心的一定是最薄弱的地方，要把最好的资源和人手放在那个地方。</p>

<h2>如何利用排序不等式</h2>

<p>个人只能做一个乘法因子，管理者要的却是相乘再相加。如果你是一个系统的运行者，你必须清楚判断这是一个不设限系统，还是一个有上限或者下限的系统。</p>

<p>公司在乎的是总收入，本质上是个不设限的系统。排序不等式告诉我们这样的系统应该狠抓“长板”，因为长板最能提高总量。有下限的系统最关心的是短板，而有上限的系统最希望每块板都差不多。</p>

<p>作为个体，如果你认为自己是个大数因子，那你最好不要呆在有上限的系统中。</p>

<p>教育系统搞搞数学竞赛什么的，也算是给好学生一个出路。</p>

<p><strong>搞平均符合直觉，但是违反数学。</strong></p>

<p>我们个人的生活和学习不也是这样的吗？直觉上你可能认为应该把每一件事都做好，每个学科都学好，其实不是。数学要求这是一个长板的世界：你应该把最好的精力、最多的时间用在最能体现你价值的项目上。</p>

<p>设重点、偏科、不均匀、走极端，这才是自然之道。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-思维是平的]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-siweishipingde/"/>
    <updated>2022-12-08T21:25:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-siweishipingde</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>思维是平的</h2>

<h3>脑补</h3>

<p>不仅仅是策略、性格和意义，还有动机、信念、价值、情绪、立场、偏见等等，所有这些代表人的“深层内心世界”的东西，都是我们想象出来的，而且是要用的时候临时编造的。</p>

<p>人只能看到细节局部，你的整体感，根本就是个错觉。哲学家和心理学把这个叫做“全局错觉”。</p>

<p>明明每次看到的都是局部，为什么会有一个整体感呢？因为大脑在不停地做解读。请注意这个解读可不是提炼精髓、只做减法，而是要补充细节，要做加法，要脑补。</p>

<p>读小说的时候，主人翁的形象会在你的大脑中被制造出来。</p>

<p>让有过一段共同经历的两个人同时回忆当时的情况，细节必定对不上。不可能记住所有的细节，但是你<em>以为</em>你记住了那些细节——其实所有的叙述、所有的意义，都是大脑的即兴创作。
人是随时都在发现意义和编造理由，特别善于即兴表演、特别善于创造故事而不自知的戏剧天才。</p>

<p>你的大脑以为你知道老虎是什么样子，其实让你画一下你就露馅啦。当你想到老虎的时候，你的大脑现编的老虎形象让你以为你知道老虎的样子。就像你读小说的时候，主人公形象就是你想象出来的。</p>

<p>人脑一直都在做自动的、默默的、让你意识不到的创作。有些创作素材来自真实记忆和当前现场观察，有些素材是根据逻辑脑补的，有些素材纯粹是胡乱添加的，有些素材则是为了某个主题的需要。</p>

<h3>选择失明</h3>

<p>别人问你为什么做出一个选择的时候，你在现编理由。你不知道，你的选择已经被做实验的人改了。</p>

<p>现在我们想一想这个现象。本来你只是很随意地选择了一张女性照片、一个果酱口味、一只股票基金和一个政治观点。你选的时候没想太多，因为你并不在意这个。但是选了之后——事实上是别人调换了你的选项，是你<em>以为</em>你选了之后——你却变成了这个选择的坚定支持者。</p>

<p>你看这像不像量子力学里的“波函数坍缩”？电子的自旋本来是个叠加态，是向上也行、向下也行——因为实验观测，电子被逼表态之后，它就有了一个坚定的自旋。类似的还有政治立场，对女生是否有好感等。</p>

<p>有一首李健创作、王菲演唱的歌叫《传奇》，说——</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>只因为在人群中多看了你一眼
</span><span class='line'>再也没能忘掉你的容颜
</span><span class='line'>梦想着偶然能有一天再相见
</span><span class='line'>从此我开始孤单地思念
</span><span class='line'>……
</span><span class='line'>宁愿相信我们前世有约
</span><span class='line'>今生的爱情故事不会再改变
</span><span class='line'>……</span></code></pre></td></tr></table></div></figure>


<p>你看这整个不就是一个爱情波函数坍缩事件吗？</p>

<p><strong>了解了大脑的这个性质，我们必须对能引起波函数坍缩的东西多加小心。</strong></p>

<h3>承诺和一致</h3>

<p>罗伯特·西奥迪尼（RobertB.Cialdini）的名著《影响力》这本书里有个专门的说法，叫“承诺和一致（CommitmentandConsistency）”，人在心理上有一种「要与过去的所作所为保持一致的愿望」。</p>

<p>因为这个机制，你要想让人帮你一个大忙，一个好办法是先让他帮你一个小忙。最愿意帮助你的是已经帮助过你的人。</p>

<p>咱们中国人管这个叫“得寸进尺”，心理学家把它总结成了一个影响力技术，叫“一只脚已经在门里（Foot-in-the-doortechnique）”——如果你已经让人的一只脚进门了，你好意思不让他整个人进来吗？</p>

<p>有些流氓调戏女孩也是这个套路。一开始只是请吃顿饭，然后是我一直都梦想有个女生能陪我去网吧打游戏，你能满足我这个梦想吗？……流氓一步步升级，女孩一步步沦陷。</p>

<p>我们平时说的什么“来都来了”、“沉没成本”，其实也都是这个机制。西奥迪尼后来搞的什么“先发影响力”、心理学和行为经济学上的prime效应，用环境和细节默默影响一个人的心态，其实也是这个机制。</p>

<p>一切的一切，都是因为我们想要完成自己想象中的、那个甚至都不知道因何而起的故事。</p>

<h3>如何应用大脑坍缩</h3>

<p>大脑坍缩并不见得不好，可能大多数情况下这都是一件好事。正是因为我们有这个想象，我们才能一心一意地完成那些需要长期努力的项目，哪怕遭遇困难也能挺过去。正是因为各种想象的共同体，一群人才能好好合作。但是正如你前面所见，大脑坍缩有可能会给我们带来麻烦。</p>

<p>那么理解了这个大脑坍缩的机制，我们应该如何对待小事呢？我认为这个原则应该是“<strong>谨慎地开始，正面地影响，果断地结束</strong>”。</p>

<p><strong>如果你对一件事物本来没有强硬立场，那就不要轻易表态。</strong></p>

<p>请问你对全球变暖有什么看法？你没看法。你根本就没研究过，你表什么态站什么队？站队是可能要站到底的。领导都是最后一个表态的，而且最好在事情尘埃落定之前都不表态。</p>

<p><strong>别轻易让你的波函数坍缩</strong>。在事情比较微妙的时刻，可能每个人有不一样的解读。你要说这是冲突吧，也对；你要说不是吧，也真不算——这时候应该怎么办呢？你应该抢先给这件事定性，<strong>让波函数往对你有利的那个方向坍缩。</strong></p>

<p>好在这里面没有量子随机性。女朋友昨天好像有点不高兴，你也说不清到底是不是，这时候你要设法帮助她往高兴的剧情上解读。但是如果你的波函数已经坍缩了，别忘了这一切仅仅是你的想象！你完全可以退出这个故事，换一个新故事。</p>

<p>理解了思维是平的，我们要做的不是放弃想象，而是去寻找更好的想象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-伯克森悖论]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-bokesenbeilun/"/>
    <updated>2022-12-08T21:20:29+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/12/08/jingyingrike-bokesenbeilun</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>什么是伯克森悖论</h2>

<p>先看几个常见的论点：</p>

<ol>
<li>长得帅的男人性格都很差</li>
<li>不善言辞恰恰是智商高的特征</li>
<li>流行的都没啥深度</li>
<li>漂亮的女生都不聪明</li>
<li>颜值高的演员都没演技</li>
<li>有特长的人必定有明显短板</li>
<li>家里条件好的大学生必定不用功</li>
</ol>


<p>伯克森悖论是说，哪怕上面这些人的经验都是真的，他们从经验中总结出来的结论，也很可能是错的。</p>

<p>伯克森悖论的常见形式，就是如果你对两个特性有一个总体的阈值要求——这两个特性哪怕没关系，甚至哪怕原本可能还是正相关——在你考察的那个范围内，也能让你感觉它们有负的相关性。</p>

<h2>伯克森悖论与幸存者偏差</h2>

<p>伯克森悖论和人们熟悉的“幸存者偏差”都属于“选择偏差”，出错的根本原因都是你统计的数据不够全面。在统计研究中，你稍不小心，就会犯伯克森悖论的错误。</p>

<p>有一个真实的例子是这样的。有人统计了因为出车祸而被送进医院急诊室的摩托车手，发现戴头盔的人所受的伤，反而比不戴头盔的人更重。</p>

<p>难道说因为戴头盔的人开车更大胆，所以更容易受重伤吗？不一定。事实是很多戴头盔的人因为头盔的保护，而只受了轻伤，根本就无需进急诊室。</p>

<p>你考察的其实是“身体受到的保护”和“身体受到的伤害”这两个因素——保护必须足够小，伤害必须足够大，才能让这个人进急诊室——这跟“长相+性格”是一个道理，所以你看到了不戴头盔和受重伤的假的负相关。</p>

<p>还有个二战飞机中弹位置统计的例子。</p>

<h2>伯克森悖论的应用</h2>

<p>了解了伯克森悖论，下一次再听说涉及到能力、人品、长相、运气的各种“负相关”论断，你都应该保持戒心。</p>

<p>生活中有很多这样的民间智慧，比如什么“寒门出贵子”，什么“为富不仁”，什么“仗义每从屠狗辈，负心多是读书人”，什么“杀人放火金腰带，修桥铺路无尸骸”，都十分可疑。</p>

<p>平庸的寒门子弟、遵纪守法的富人、没有英雄壮举的屠狗辈、忠诚的读书人和安享晚年的好心人，他们的新闻阈值太低，他们的事迹没有四海传扬。你必须把这些人都统计上，才能得出正确的结论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重学前端-通过window属性了解协议API]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/10/08/chongxueqianduan-tongguo-window-liaojie-protocol-api/"/>
    <updated>2022-10-08T17:18:04+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/10/08/chongxueqianduan-tongguo-window-liaojie-protocol-api</id>
    <content type="html"><![CDATA[<!-- more -->


<p>浏览器的API数目繁多，这一节课，我设计了一个实验，我们一起来给API分分类。</p>

<p>我们按照每个API所在的标准来分类。所以，我们用代码来反射浏览器环境中全局对象的属性，然后我们用JavaScript的filter方法来逐步过滤掉已知的属性。</p>

<p>接下来，我们整理API的方法如下：</p>

<ol>
<li>从Window的属性中，找到API名称；</li>
<li>查阅MDN或者Google，找到API所在的标准；</li>
<li>阅读标准，手工或者用代码整理出标准中包含的API；</li>
<li>用代码在Window的属性中过滤掉标准中涉及的API。</li>
<li>重复这个过程，我们可以找到所有的API对应的标准。</li>
</ol>


<p>原文点击<a href="http://hongchaozhang.github.io/assets/resources/37%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8API%EF%BC%88%E5%B0%8F%E5%AE%9E%E9%AA%8C%EF%BC%89%EF%BC%9A%E5%8A%A8%E6%89%8B%E6%95%B4%E7%90%86%E5%85%A8%E9%83%A8API.html">这里</a>获取。</p>

<p>从原文整理出来的html文件点击<a href="http://hongchaozhang.github.io/assets/resources/traverseWindows.html">这里</a>获取。</p>

<p>关键js代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function filterOut(names, props) {
</span><span class='line'>    let set = new Set();
</span><span class='line'>    props.forEach(o =&gt; set.add(o));
</span><span class='line'>    return names.filter(e =&gt; !set.has(e));
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>let names = Object.getOwnPropertyNames(window)
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>// 过滤JavaScript 标准规定的属性
</span><span class='line'>let js = new Set();
</span><span class='line'>let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];
</span><span class='line'>objects.forEach(o =&gt; js.add(o));
</span><span class='line'>names = names.filter(e =&gt; !js.has(e));
</span><span class='line'>console.log('\nnames after filtering JS Standard:')
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>// 接下来我们看看已经讲过的 DOM 部分，DOM 部分包含了 document 属性和一系列的构造器，我们可以用 JavaScript 的 prototype 来过滤构造器。
</span><span class='line'>names = names.filter( e =&gt; {
</span><span class='line'>    try { 
</span><span class='line'>        return !(window[e].prototype instanceof Node)
</span><span class='line'>    } catch(err) {
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>}).filter( e =&gt; e != "Node")
</span><span class='line'>console.log('\nnames after filtering DOM:')
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>// 接下来我们要找到 Window 对象的定义，我们在下面链接中可以找到。https://html.spec.whatwg.org/#window 这里有一个 Window 接口，是使用 WebIDL 定义的，我们手工把其中的函数和属性整理出来
</span><span class='line'>let windowprops = new Set();
</span><span class='line'>objects = ["window", "self", "document", "name", "location", "history", "customElements", "locationbar", "menubar", " personalbar", "scrollbars", "statusbar", "toolbar", "status", "close", "closed", "stop", "focus", " blur", "frames", "length", "top", "opener", "parent", "frameElement", "open", "navigator", "applicationCache", "alert", "confirm", "prompt", "print", "postMessage", "console"];
</span><span class='line'>objects.forEach(o =&gt; windowprops.add(o));
</span><span class='line'>names = names.filter(e =&gt; !windowprops.has(e));
</span><span class='line'>console.log('\nnames after filtering WebIDL:')
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>// 我们还要过滤掉所有的事件，也就是 on 开头的属性。
</span><span class='line'>names = names.filter( e =&gt; !e.match(/^on/))
</span><span class='line'>// webkit 前缀的私有属性我们也过滤掉：
</span><span class='line'>names = names.filter( e =&gt; !e.match(/^webkit/))
</span><span class='line'>// 除此之外，我们在 HTML 标准中还能找到所有的接口，这些我们也过滤掉：
</span><span class='line'>let interfaces = new Set();
</span><span class='line'>objects = ["ApplicationCache", "AudioTrack", "AudioTrackList", "BarProp", "BeforeUnloadEvent", "BroadcastChannel", "CanvasGradient", "CanvasPattern", "CanvasRenderingContext2D", "CloseEvent", "CustomElementRegistry", "DOMStringList", "DOMStringMap", "DataTransfer", "DataTransferItem", "DataTransferItemList", "DedicatedWorkerGlobalScope", "Document", "DragEvent", "ErrorEvent", "EventSource", "External", "FormDataEvent", "HTMLAllCollection", "HashChangeEvent", "History", "ImageBitmap", "ImageBitmapRenderingContext", "ImageData", "Location", "MediaError", "MessageChannel", "MessageEvent", "MessagePort", "MimeType", "MimeTypeArray", "Navigator", "OffscreenCanvas", "OffscreenCanvasRenderingContext2D", "PageTransitionEvent", "Path2D", "Plugin", "PluginArray", "PopStateEvent", "PromiseRejectionEvent", "RadioNodeList", "SharedWorker", "SharedWorkerGlobalScope", "Storage", "StorageEvent", "TextMetrics", "TextTrack", "TextTrackCue", "TextTrackCueList", "TextTrackList", "TimeRanges", "TrackEvent", "ValidityState", "VideoTrack", "VideoTrackList", "WebSocket", "Window", "Worker", "WorkerGlobalScope", "WorkerLocation", "WorkerNavigator"];
</span><span class='line'>objects.forEach(o =&gt; interfaces.add(o));
</span><span class='line'>names = names.filter(e =&gt; !interfaces.has(e));
</span><span class='line'>console.log('\nnames after filtering HTML:')
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>// 过滤i18n api
</span><span class='line'>names = names.filter(e =&gt; e != "Intl")
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/* Streams 标准
</span><span class='line'>    接下来我看到的属性是： ByteLengthQueuingStrategy。
</span><span class='line'>    同样经过查阅，它来自 WHATWG 的 Streams 标准：
</span><span class='line'>    https://streams.spec.whatwg.org/#blqs-class
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["ReadableStream", "ReadableStreamDefaultReader", "ReadableStreamBYOBReader", "ReadableStreamDefaultController", "ReadableByteStreamController", "ReadableStreamBYOBRequest", "WritableStream", "WritableStreamDefaultWriter", "WritableStreamDefaultController", "TransformStream", "TransformStreamDefaultController", "ByteLengthQueuingStrategy", "CountQueuingStrategy"]);
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>    接下来我看到的属性是：WebGLContext​Event。
</span><span class='line'>    显然，这个属性来自 WebGL 标准：
</span><span class='line'>    https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["WebGLContextEvent","WebGLObject", "WebGLBuffer", "WebGLFramebuffer", "WebGLProgram", "WebGLRenderbuffer", "WebGLShader", "WebGLTexture", "WebGLUniformLocation", "WebGLActiveInfo", "WebGLShaderPrecisionFormat", "WebGLRenderingContext"]);
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>    Web Audio API
</span><span class='line'>    下一个属性是 WaveShaperNode。这个属性名听起来就跟声音有关，这个属性来自 W3C 的 Web Audio API 标准。
</span><span class='line'>    我们来看一下标准：
</span><span class='line'>    https://www.w3.org/TR/webaudio/
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["AudioContext", "AudioNode", "AnalyserNode", "AudioBuffer", "AudioBufferSourceNode", "AudioDestinationNode", "AudioParam", "AudioListener", "AudioWorklet", "AudioWorkletGlobalScope", "AudioWorkletNode", "AudioWorkletProcessor", "BiquadFilterNode", "ChannelMergerNode", "ChannelSplitterNode", "ConstantSourceNode", "ConvolverNode", "DelayNode", "DynamicsCompressorNode", "GainNode", "IIRFilterNode", "MediaElementAudioSourceNode", "MediaStreamAudioSourceNode", "MediaStreamTrackAudioSourceNode", "MediaStreamAudioDestinationNode", "PannerNode", "PeriodicWave", "OscillatorNode", "StereoPannerNode", "WaveShaperNode", "ScriptProcessorNode", "AudioProcessingEvent"]);
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>    Encoding 标准
</span><span class='line'>    在我的环境中，下一个属性是 TextDecoder，经过查阅得知，这个属性也来自一份 WHATWG 的标准，Encoding：
</span><span class='line'>    https://encoding.spec.whatwg.org/#dom-textencoder
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["TextDecoder", "TextEncoder", "TextDecoderStream", "TextEncoderStream"]);
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>    Web Cryptography API
</span><span class='line'>    我们继续看下去，下一个属性是 SubtleCrypto，这个属性来自 Web Cryptography API，也是 W3C 的标准。
</span><span class='line'>    https://www.w3.org/TR/WebCryptoAPI/
</span><span class='line'>    这份标准中规定了三个 Class 和一个 Window 对象的扩展，给 Window 对象添加了一个属性 crypto。
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["CryptoKey", "SubtleCrypto", "Crypto", "crypto"]);
</span><span class='line'>console.log(names)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>    Media Source Extensions
</span><span class='line'>    下一个属性是 SourceBufferList，它来自于：
</span><span class='line'>    https://www.w3.org/TR/media-source/
</span><span class='line'>    这份标准中包含了三个接口，这份标准还扩展了一些接口，但是没有扩展 window。
</span><span class='line'>*/
</span><span class='line'>names = filterOut(names, ["MediaSource", "SourceBuffer", "SourceBufferList"]);
</span><span class='line'>console.log(names)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-期权思维]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-qiquan/"/>
    <updated>2022-10-08T11:40:36+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-qiquan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>期货，英文option，你可以选，也可以不选，它是你的权利，不是义务。</p>

<p>可选项的重要性：安眠药放那心里就踏实，已经有一个大学录取你了再去参加高考就不会发挥失常。</p>

<p>期权是没有义务，但是它需要你花钱买：</p>

<ol>
<li>看涨期权call：未来某个时间点，你有权利以某一个价格买入。</li>
<li>看跌期权put：未来某个时间点，你有权利以某一个价格卖出。</li>
</ol>


<p>期权可以用来：</p>

<ol>
<li>投机，当杠杆用。做空</li>
<li>保险：对投资者，而不是投机者，期权其实是一个保险，是一个对冲风险的手段。

<ul>
<li>你可以一边持有一个股票，一边卖call</li>
</ul>
</li>
</ol>


<p>期权定价：</p>

<ol>
<li>股票当前价格</li>
<li>期权的到期时间</li>
<li>期权规定的股票的履约价格</li>
<li>固定的银行利率</li>
<li>股票的波动性：波动性越大，期权价格越高。因为你有权利挑好的，而没有义务负责坏的。

<ul>
<li>如果你有特权，你应该喜欢波动性，喜欢极端，喜欢两极分化。</li>
</ul>
</li>
</ol>


<p>其它：</p>

<ol>
<li>股票思维必须关注下限，考虑止损，而期权思维只关心上限。</li>
<li>自己开公司是股票思维，风险投资是期权思维。</li>
<li>奋斗是股票思维，演化（自然选择）是期权行为</li>
<li>结婚是股票思维，暧昧是期权思维</li>
<li>供给侧是股票思维，需求侧是期权思维</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-问题分类]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-kunnandewenti/"/>
    <updated>2022-10-08T11:38:23+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-kunnandewenti</id>
    <content type="html"><![CDATA[<!-- more -->


<p>问题可以分三类：</p>

<ul>
<li>单纯问题</li>
<li>两难问题</li>
<li>棘手问题</li>
</ul>


<h3>单纯问题</h3>

<p>高考，有明确的答案，明确的方向和明确的敌人。这个世界最危险的事情，就是某些人认为一切问题都是单纯问题。</p>

<h3>两难问题</h3>

<p>必须在两个选择中做出取舍。</p>

<h3>棘手问题</h3>

<ol>
<li>没有明确定义</li>
<li>没有终极答案</li>
<li>没有对错</li>
<li>采取措施之后不会（立马）得到反馈</li>
<li>没有试错练习的地方</li>
<li>有什么选项都不知道</li>
<li>没有先例</li>
<li>这个问题可能只是表象，背后可能还有更多的问题</li>
<li>多个利益相关方</li>
<li>如果你上手，那么不论什么结果，你都要负责</li>
</ol>


<p>比如贫富差距、全球变暖等问题
当瑞典女中学生指责各国政府对全球变暖应对不力等时候，当围观群众笑话特朗普对时候，其实都有点站着说话不腰疼。
不是我们不够努力，也不是敌人太坏，而是这个问题太棘手。</p>

<p>怎么处理棘手问题？不能解决，只能应对，应该追求管理这个问题。就像我们应对癌细胞一样。</p>

<ol>
<li>利益相关方充分沟通，不求达成共识，但求互相理解，消除一些偏见。</li>
<li>公司决策相关的棘手问题，不妨想想公司的认同感和意义。</li>
<li>行动。摸着石头过河。每次一小步，边做边调整。就这么应对着，跟着问题一起演化。也许一段时间之后，它就被别的问题取代了。</li>
</ol>


<p>单纯的人总希望一劳永逸地解决一个问题。这种理想主义者一旦受挫，又会心灰意冷，成为一个愤世嫉俗的人。他以为别人都自私就他自己真想解决问题，可是他又解决不了问题。</p>

<p>殊不知，那些顶着骂名，从来没有做过一件快意事，小心翼翼不敢用力过猛，明知没有胜利的彼岸还在吭哧吭哧地维持着局面的人，才是真正值得尊敬的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[精英日课-计算机不能做所有的事情]]></title>
    <link href="http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-jisuanjibunengzuodeshiqing/"/>
    <updated>2022-10-08T11:35:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2022/10/08/jingyingrike-jisuanjibunengzuodeshiqing</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>计算机不能做所有的事情</h2>

<ul>
<li>停机问题： 不存在这样一个程序（算法），它能够计算任何程序（算法）在给定输入上是否会结束（停机）。

<ul>
<li>理发师悖论</li>
<li>全能悖论</li>
<li>说谎者悖论</li>
</ul>
</li>
<li>Y conbinator</li>
<li>哥德尔不完备性定理，击碎了希尔伯特的美好愿景

<ul>
<li>这理论用在人工智能上，则指出有些道理可能是人类能够判别，但机器单纯用一阶公理化系统却无法得知的道理。不过机器可以用非一阶公理化系统，例如实验、经验。</li>
</ul>
</li>
<li>康托尔对角线定理</li>
</ul>


<p>哥德尔的不完备性定理震撼了20世纪数学界的天空，其数学意义颠覆了希尔伯特的形式化数学的宏伟计划，其哲学意义直到21世纪的今天仍然不断被延伸到各个自然学科，深刻影响着人们的思维。图灵为了解决希尔伯特著名的第十问题而提出有效计算模型，进而作出了可计算理论和现代计算机的奠基性工作，著名的停机问题给出了机械计算模型的能力极限，其深刻的意义和漂亮的证明使它成为可计算理论中的标志性定理之一。丘齐，跟图灵同时代的天才，则从另一个抽象角度提出了lambda算子的思想，与图灵机抽象的倾向于硬件性不同，丘齐的lambda算子理论是从数学的角度进行抽象，不关心运算的机械过程而只关心运算的抽象性质，只用最简洁的几条公理便建立起了与图灵机完全等价的计算模型，其体现出来的数学抽象美开出了函数式编程语言这朵奇葩，Lisp、Scheme、Haskell… 这些以抽象性和简洁美为特点的语言至今仍然活跃在计算机科学界，虽然由于其本质上源于lambda算子理论的抽象方式不符合人的思维习惯从而注定无法成为主流的编程语言[2]，然而这仍然无法妨碍它们成为编程理论乃至计算机学科的最佳教本。而诞生于函数式编程语言的神奇的Y combinator至今仍然让人们陷入深沉的震撼和反思当中…</p>

<p>参考：</p>

<ul>
<li><a href="https://www.infzm.com/contents/76948">【专栏】康托尔、哥德尔、图灵——永恒的金色对角线（1）</a></li>
<li>&hellip;</li>
<li><a href="https://www.infzm.com/contents/77590">【专栏】康托尔、哥德尔、图灵——永恒的金色对角线（13）</a></li>
</ul>


<p>用计算模拟真实世界，解释不了很多根本原因，但是不用解释。比如足球比赛，打仗胜败分析。</p>
]]></content>
  </entry>
  
</feed>
