<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhang Hongchao]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2016-10-31T22:20:59+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS中多线程任务之间的同步]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/10/31/sync-between-multiplele-threads-tasks-in-ios-app/"/>
    <updated>2016-10-31T10:41:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/10/31/sync-between-multiplele-threads-tasks-in-ios-app</id>
    <content type="html"><![CDATA[<p>当我们使用iOS的多线程并发执行一些任务的时候，有时候需要考虑任务之间的同步问题，比如任务1和任务2执行完之后，才可以执行任务3，原因可能是任务3需要任务1和任务2执行得到的结果。</p>

<p>部分内容参考：
<a href="http://stackoverflow.com/questions/11909629/waiting-until-two-async-blocks-are-executed-before-starting-another-block">Waiting until two async blocks are executed before starting another block</a></p>

<h3>dispatch_group_notify</h3>

<p>当group中所有的block都执行完之后，<code>dispatch_group_notify</code>对应的block才会执行。并且放在同一个group中的block可以是不同queue里面的block。</p>

<p>例子：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
<span class="lineno"> 2</span> <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="lineno"> 3</span>     
<span class="lineno"> 4</span> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno"> 5</span>     <span class="c1">// block1</span>
<span class="lineno"> 6</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno"> 7</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
<span class="lineno"> 8</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
<span class="lineno"> 9</span> <span class="p">});</span>
<span class="lineno">10</span>     
<span class="lineno">11</span> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno">12</span>     <span class="c1">// block2</span>
<span class="lineno">13</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
<span class="lineno">14</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">15</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
<span class="lineno">16</span> <span class="p">});</span>
<span class="lineno">17</span>     
<span class="lineno">18</span> <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno">19</span>     <span class="c1">// block3</span>
<span class="lineno">20</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
<span class="lineno">21</span> <span class="p">});</span></code></pre></div>


<p>输出：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> 2016-10-31 11:14:28.076 OCPlayground[82366:5830581] Block2 Start
<span class="lineno">2</span> 2016-10-31 11:14:28.076 OCPlayground[82366:5830578] Block1 Start
<span class="lineno">3</span> 2016-10-31 11:14:29.081 OCPlayground[82366:5830581] Block2 End
<span class="lineno">4</span> 2016-10-31 11:14:30.078 OCPlayground[82366:5830578] Block1 End
<span class="lineno">5</span> 2016-10-31 11:14:30.078 OCPlayground[82366:5830578] Block3</code></pre></div>


<h3>dispatch_barrier_async</h3>

<p><code>dispatch_barrier_async</code>函数的作用与barrier的意思相同，在线程任务管理中起到一个栅栏的作用,它等待所有位于barrier函数之前的操作执行完毕后执行，并且在barrier函数执行之后，barrier函数之后的操作才会得到执行，该函数需要同<code>dispatch_queue_create</code>函数生成的并行队列一起使用，不能同<code>dispatch_get_global_queue</code>返回的并行队列一起使用。</p>

<p>例子：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="c1">// dispatch_barrier_async can not be used together with dispatch_get_global_queue</span>
<span class="lineno"> 2</span> <span class="c1">// dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span>
<span class="lineno"> 3</span> <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.company.app.queue&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
<span class="lineno"> 4</span>     
<span class="lineno"> 5</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno"> 6</span>     <span class="c1">// block1</span>
<span class="lineno"> 7</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno"> 8</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
<span class="lineno"> 9</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
<span class="lineno">10</span> <span class="p">});</span>
<span class="lineno">11</span>     
<span class="lineno">12</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">13</span>     <span class="c1">// block2</span>
<span class="lineno">14</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
<span class="lineno">15</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">16</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
<span class="lineno">17</span> <span class="p">});</span>
<span class="lineno">18</span>     
<span class="lineno">19</span> <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">20</span>     <span class="c1">// block3</span>
<span class="lineno">21</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
<span class="lineno">22</span> <span class="p">});</span>
<span class="lineno">23</span>     
<span class="lineno">24</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">25</span>     <span class="c1">// block4</span>
<span class="lineno">26</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 Start&quot;</span><span class="p">);</span>
<span class="lineno">27</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">3.0</span><span class="p">];</span>
<span class="lineno">28</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 End&quot;</span><span class="p">);</span>
<span class="lineno">29</span> <span class="p">});</span></code></pre></div>


<p>输出：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> 2016-10-31 12:02:08.468 OCPlayground[83918:5867777] Block1 Start
<span class="lineno">2</span> 2016-10-31 12:02:08.468 OCPlayground[83918:5867807] Block2 Start
<span class="lineno">3</span> 2016-10-31 12:02:09.474 OCPlayground[83918:5867807] Block2 End
<span class="lineno">4</span> 2016-10-31 12:02:10.469 OCPlayground[83918:5867777] Block1 End
<span class="lineno">5</span> 2016-10-31 12:02:10.469 OCPlayground[83918:5867777] Block3
<span class="lineno">6</span> 2016-10-31 12:02:10.470 OCPlayground[83918:5867777] Block4 Start
<span class="lineno">7</span> 2016-10-31 12:02:13.473 OCPlayground[83918:5867777] Block4 End</code></pre></div>


<h3>addDependency</h3>

<p>苹果对GCD进行了封装，有了自己的<code>NSOperationQueue</code>和<code>NSBlockOperation</code>。其中<code>NSBlockOperation</code>中添加了<code>addDepencency:</code>方法可以指定operation block之间的依赖关系。</p>

<p>例子：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="bp">NSOperationQueue</span> <span class="o">*</span><span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="lineno"> 2</span>     
<span class="lineno"> 3</span> <span class="bp">NSOperation</span> <span class="o">*</span><span class="n">completionOperation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno"> 4</span>     <span class="c1">// block3</span>
<span class="lineno"> 5</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
<span class="lineno"> 6</span> <span class="p">}];</span>
<span class="lineno"> 7</span>     
<span class="lineno"> 8</span> <span class="bp">NSOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">;</span>
<span class="lineno"> 9</span>     
<span class="lineno">10</span> <span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">11</span>     <span class="c1">// block1</span>
<span class="lineno">12</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno">13</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
<span class="lineno">14</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
<span class="lineno">15</span> <span class="p">}];</span>
<span class="lineno">16</span>     
<span class="lineno">17</span> <span class="p">[</span><span class="n">completionOperation</span> <span class="nl">addDependency</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
<span class="lineno">18</span> <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
<span class="lineno">19</span>     
<span class="lineno">20</span> <span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">21</span>     <span class="c1">// block2</span>
<span class="lineno">22</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
<span class="lineno">23</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">24</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
<span class="lineno">25</span> <span class="p">}];</span>
<span class="lineno">26</span>     
<span class="lineno">27</span> <span class="p">[</span><span class="n">completionOperation</span> <span class="nl">addDependency</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
<span class="lineno">28</span> <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
<span class="lineno">29</span>     
<span class="lineno">30</span> <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">completionOperation</span><span class="p">];</span></code></pre></div>


<p>输出：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> 2016-10-31 12:22:49.774 OCPlayground[84061:5887605] Block1 Start
<span class="lineno">2</span> 2016-10-31 12:22:49.774 OCPlayground[84061:5887572] Block2 Start
<span class="lineno">3</span> 2016-10-31 12:22:50.776 OCPlayground[84061:5887572] Block2 End
<span class="lineno">4</span> 2016-10-31 12:22:51.848 OCPlayground[84061:5887605] Block1 End
<span class="lineno">5</span> 2016-10-31 12:22:51.849 OCPlayground[84061:5887605] Block3</code></pre></div>


<h3>dispatch_semaphore</h3>

<p><a href="http://www.cnblogs.com/snailHL/p/3906112.html">关于dispatch_semaphore的使用</a>讲解的很详细。</p>

<p>dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是<code>dispatch_semaphore_create</code>、<code>dispatch_semaphore_signal</code>和<code>dispatch_semaphore_wait</code>。</p>

<p>下面我们逐一介绍三个函数：</p>

<p>（1）<code>dispatch_semaphore_create</code>的声明为：<code>dispatch_semaphore_t  dispatch_semaphore_create(long value);</code>
返回一个<code>dispatch_semaphore_t</code>类型且值为<code>value</code>的信号量。这里的传入的参数<code>value</code>必须大于或等于0，否则<code>dispatch_semaphore_create</code>会返回<code>NULL</code>。</p>

<p>（2）<code>dispatch_semaphore_signal</code>的声明为：<code>long dispatch_semaphore_signal(dispatch_semaphore_t dsema);</code>这个函数会使传入的信号量<code>dsema</code>的值加1。（至于返回值，参考<a href="http://www.cnblogs.com/snailHL/p/3906112.html">关于dispatch_semaphore的使用</a>。）</p>

<p> (3) <code>dispatch_semaphore_wait</code>的声明为：<code>long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)；</code>这个函数会使传入的信号量<code>dsema</code>的值减1。这个函数的作用是这样的：</p>

<ul>
<li>如果<code>dsema</code>信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；</li>
<li>如果<code>dsema</code>的值为0，那么这个函数就阻塞当前线程等待timeout，如果等待期间<code>dsema</code>的值被<code>dispatch_semaphore_signal</code>函数加1了，且该函数（即<code>dispatch_semaphore_wait</code>）所处线程获得了信号量，那么就继续向下执行并将信号量减1。</li>
<li>如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。</li>
</ul>


<p>例子：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;my.conQ&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
<span class="lineno"> 2</span> <span class="kt">dispatch_semaphore_t</span> <span class="n">mySem</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="lineno"> 3</span>     
<span class="lineno"> 4</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno"> 5</span>     <span class="c1">// block1</span>
<span class="lineno"> 6</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno"> 7</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
<span class="lineno"> 8</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
<span class="lineno"> 9</span>     <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">mySem</span><span class="p">);</span>
<span class="lineno">10</span> <span class="p">});</span>
<span class="lineno">11</span>     
<span class="lineno">12</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">13</span>     <span class="c1">// block2</span>
<span class="lineno">14</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
<span class="lineno">15</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">16</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
<span class="lineno">17</span>     <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">mySem</span><span class="p">);</span>
<span class="lineno">18</span> <span class="p">});</span>
<span class="lineno">19</span>     
<span class="lineno">20</span> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">21</span>     <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">mySem</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
<span class="lineno">22</span>     <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">mySem</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
<span class="lineno">23</span>     <span class="c1">// block3</span>
<span class="lineno">24</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
<span class="lineno">25</span> <span class="p">});</span></code></pre></div>


<p>输出：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> 2016-10-31 22:16:34.402 OCPlayground[85158:6133417] Block1 Start
<span class="lineno">2</span> 2016-10-31 22:16:34.402 OCPlayground[85158:6133423] Block2 Start
<span class="lineno">3</span> 2016-10-31 22:16:35.405 OCPlayground[85158:6133423] Block2 End
<span class="lineno">4</span> 2016-10-31 22:16:36.403 OCPlayground[85158:6133417] Block1 End
<span class="lineno">5</span> 2016-10-31 22:16:36.404 OCPlayground[85158:6133426] Block3</code></pre></div>


<h3>dispatch_group_enter和dispatch_group_leave</h3>

<p>当我们碰到block里面有嵌套的block的时候，简单地使用<code>dispatch_group_notify</code>就不能解决问题了：<code>dispatch_group_notify</code>不会等到嵌套的block执行完再执行。对于这种情况，如果还坚持用<code>dispatch_group_notify</code>，可以有两种解决方案：</p>

<p><strong>方案1：</strong></p>

<p>对于嵌套的block，仍然使用<code>dispatch_group_async</code>将block放入对应的group。比如下面的例子，对于Block1里面的Block4，我们仍然使用<code>dispatch_group_async</code>将Block4放入对应的group，即可以保证Block3在Block4之后执行。也就是说，只要是在<code>dispatch_group_notify</code>对应的Block3执行之前加入group的block，都需要执行，然后才能执行<code>dispatch_group_notify</code>对应的Block3，即，当<code>dispatch_group_notify</code>对应的Block3执行的时候，group中不能有任何没有执行的其它block存在。</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">2</span>     <span class="c1">// block4 inside block 1</span>
<span class="lineno">3</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno">4</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">5</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 End&quot;</span><span class="p">);</span>
<span class="lineno">6</span> <span class="p">});</span></code></pre></div>


<p>如果嵌套的block对应的是服务器请求的callback（比如<code>onSuccess:</code>和<code>onFailure:</code>），就不方便将其加入对应的group中。这时候就需要使用方案2。</p>

<p><strong>方案2：</strong>
通过<code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>手动管理group关联的block的运行状态（或计数）。但是需要注意：进入和退出group次数必须匹配，不仅是code书写方面一致，code执行也要保证一致，否则<code>dispatch_group_notify</code>对应的Block3就不会执行到。</p>

<p>例子：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
<span class="lineno"> 2</span> <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="lineno"> 3</span>     
<span class="lineno"> 4</span> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno"> 5</span>     <span class="c1">// block1</span>
<span class="lineno"> 6</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno"> 7</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
<span class="lineno"> 8</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
<span class="lineno"> 9</span> 
<span class="lineno">10</span>     <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
<span class="lineno">11</span>     <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">12</span>         <span class="c1">// block4 inside block 1</span>
<span class="lineno">13</span>         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 Start&quot;</span><span class="p">);</span>
<span class="lineno">14</span>         <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">15</span>         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 End&quot;</span><span class="p">);</span>
<span class="lineno">16</span>         <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
<span class="lineno">17</span>     <span class="p">});</span>
<span class="lineno">18</span> <span class="p">});</span>
<span class="lineno">19</span>     
<span class="lineno">20</span>     
<span class="lineno">21</span> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno">22</span>     <span class="c1">// block2</span>
<span class="lineno">23</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
<span class="lineno">24</span>     <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="lineno">25</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
<span class="lineno">26</span> <span class="p">});</span>
<span class="lineno">27</span>     
<span class="lineno">28</span> <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
<span class="lineno">29</span>     <span class="c1">// block3</span>
<span class="lineno">30</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
<span class="lineno">31</span> <span class="p">});</span></code></pre></div>


<p>输出：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> 2016-10-31 13:51:23.512 OCPlayground[84646:5947063] Block2 Start
<span class="lineno">2</span> 2016-10-31 13:51:23.512 OCPlayground[84646:5947080] Block1 Start
<span class="lineno">3</span> 2016-10-31 13:51:24.518 OCPlayground[84646:5947063] Block2 End
<span class="lineno">4</span> 2016-10-31 13:51:25.518 OCPlayground[84646:5947080] Block1 End
<span class="lineno">5</span> 2016-10-31 13:51:25.518 OCPlayground[84646:5947080] Block4 inside Block1 Start
<span class="lineno">6</span> 2016-10-31 13:51:26.521 OCPlayground[84646:5947080] Block4 inside Block1 End
<span class="lineno">7</span> 2016-10-31 13:51:26.522 OCPlayground[84646:5947063] Block3</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中使用的度量单位px、dp、sp、pt、in、mm]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android/"/>
    <updated>2016-10-25T17:10:08+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android</id>
    <content type="html"><![CDATA[<p>关于多屏的支持，最好的文章当然是官方文档：<a href="https://developer.android.com/guide/practices/screens_support.html#testing">Supporting Multiple Screens</a>。一篇文章，从概念到解决方案，非常全面。</p>

<p>下面主要讨论一下开发过程中使用的度量单位的问题。</p>

<!-- more -->


<h2>单位的意义及其之间的转换</h2>

<p>对于不同的度量单位（<code>px</code>、<code>dp</code>、<code>sp</code>、<code>pt</code>、<code>in</code>、<code>mm</code>），可以从下面一张图看出它们之间的关系：</p>

<p><img src="http://hongchaozhang.github.io/images/android_font_size_tesst.png" alt="android_font_size_tesst" /></p>

<p>左上->右上->左下->右下，依次为ldpi->mdpi->hdpi->xhdpi（其大小不代表绝对大小，只用关注它们之间的相对大小即可）。结论如下：</p>

<h3><code>px</code></h3>

<p><code>px</code>是唯一一个显示大小与dpi有关系的单位，其它单位的显示大小都与dpi无关。</p>

<h3><code>dp</code></h3>

<p><code>dp</code>也叫<code>dip</code>，即<em>density-independent-pixel</em>，在dpi等于160的时候，其大小与px相等。因此，我们可以算出1dp等于<code>densityDpi / DENSITY_DEFAULT(160)） px</code>，也就是<code>density px</code>。具体关系参考下面介绍<code>DisplayMetrics</code>中属性的表格。</p>

<h3><code>sp</code></h3>

<p>除了具有<code>dp</code>的特征之外，<code>sp</code>还可以响应用户的font size preference设置其值像dp一样，也只能取一些离散的值。font size preference的设置界面如下：</p>

<p><img src="http://hongchaozhang.github.io/images/android_font_preference_setting.png" alt="android_font_preference_setting" /></p>

<h3><code>pt</code>、<code>in</code>、<code>mm</code></h3>

<p>这几个单位都是长度单位，其中pt等于1/72inch，都是用户最终看到的大小。这些值都是根据设备真实物理像素密度（<code>xdpi</code>和<code>ydpi</code>）算出来的，不会像<code>dp</code>和<code>sp</code>一样，只有几个离散的值。</p>

<p>在TypedValue.java中有所有单位到<code>px</code>的转换方法：</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno"> 1</span> <span class="cm">/**</span>
<span class="lineno"> 2</span> <span class="cm"> * Converts an unpacked complex data value holding a dimension to its final floating </span>
<span class="lineno"> 3</span> <span class="cm"> * point value. The two parameters &lt;var&gt;unit&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt;</span>
<span class="lineno"> 4</span> <span class="cm"> * are as in {@link #TYPE_DIMENSION}.</span>
<span class="lineno"> 5</span> <span class="cm"> *  </span>
<span class="lineno"> 6</span> <span class="cm"> * @param unit The unit to convert from.</span>
<span class="lineno"> 7</span> <span class="cm"> * @param value The value to apply the unit to.</span>
<span class="lineno"> 8</span> <span class="cm"> * @param metrics Current display metrics to use in the conversion -- </span>
<span class="lineno"> 9</span> <span class="cm"> *                supplies display density and scaling information.</span>
<span class="lineno">10</span> <span class="cm"> * </span>
<span class="lineno">11</span> <span class="cm"> * @return The complex floating point value multiplied by the appropriate </span>
<span class="lineno">12</span> <span class="cm"> * metrics depending on its unit. </span>
<span class="lineno">13</span> <span class="cm"> */</span>
<span class="lineno">14</span> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">float</span> <span class="nf">applyDimension</span><span class="o">(</span><span class="kt">int</span> <span class="n">unit</span><span class="o">,</span> <span class="kt">float</span> <span class="n">value</span><span class="o">,</span>
<span class="lineno">15</span>                                    <span class="n">DisplayMetrics</span> <span class="n">metrics</span><span class="o">)</span>
<span class="lineno">16</span> <span class="o">{</span>
<span class="lineno">17</span>     <span class="k">switch</span> <span class="o">(</span><span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">18</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_PX:</span>
<span class="lineno">19</span>         <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
<span class="lineno">20</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_DIP:</span>
<span class="lineno">21</span>         <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">density</span><span class="o">;</span>
<span class="lineno">22</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_SP:</span>
<span class="lineno">23</span>         <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">scaledDensity</span><span class="o">;</span>
<span class="lineno">24</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_PT:</span>
<span class="lineno">25</span>         <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0f</span><span class="o">/</span><span class="mi">72</span><span class="o">);</span>
<span class="lineno">26</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_IN:</span>
<span class="lineno">27</span>         <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span><span class="o">;</span>
<span class="lineno">28</span>     <span class="k">case</span> <span class="nl">COMPLEX_UNIT_MM:</span>
<span class="lineno">29</span>         <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0f</span><span class="o">/</span><span class="mf">25.4f</span><span class="o">);</span>
<span class="lineno">30</span>     <span class="o">}</span>
<span class="lineno">31</span>     <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">32</span> <span class="o">}</span></code></pre></div>


<p>该函数将所有的单位转换为px，其中参数意义如下：</p>

<table>
<thead>
<tr>
<th>属性 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>metrics.density</code> </td>
<td> 默认值为<code>densityDpi / (float) DENSITY_DEFAULT</code>。该值为归整之后的值：比如150dpi的设备，<code>density</code>值为1，即按照160dpi进行处理。<code>density</code>的典型值为0.75、1.0、1.5、2.0、3.0等。</td>
</tr>
<tr>
<td><code>metrics.densityDpi</code> </td>
<td> 设备物理像素密度，非精确的归整值，可取值为<code>DENSITY_LOW(120)</code>、<code>DENSITY_MEDIUM(160)</code>、<code>DENSITY_HIGH(240)</code>等。<code>density</code>的值是根据<code>densityDpi / DENSITY_DEFAULT</code>计算出来的，所以取值也是一些典型的离散值。</td>
</tr>
<tr>
<td><code>metrics.scaledDensity</code> </td>
<td> 具有<code>density</code>所有的特征，如果用户设置了font size preference，还需要乘以一个scale系数。</td>
</tr>
<tr>
<td><code>metrics.xdpi</code> </td>
<td> <code>x</code>方向的物理像素密度，精确的值，单位px/inch。同样的有<code>ydpi</code>。</td>
</tr>
<tr>
<td><code>DENSITY_DEFAULT</code> </td>
<td> dpi的参考值，值为160px/inch。</td>
</tr>
</tbody>
</table>


<h3><code>dp</code>转换为<code>px</code></h3>

<p>有时候我们必须使用<code>px</code>作为单位，比如某个api接受的参数只能是<code>px</code>。这个时候，需要将<code>dp</code>转化为<code>px</code>。在code中我们可以使用下面的方法将<code>dp</code>转化为<code>px</code>：</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="c1">// The gesture threshold expressed in dp</span>
<span class="lineno">2</span> <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">GESTURE_THRESHOLD_DP</span> <span class="o">=</span> <span class="mf">16.0f</span><span class="o">;</span>
<span class="lineno">3</span> 
<span class="lineno">4</span> <span class="c1">// Get the screen&#39;s density scale</span>
<span class="lineno">5</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">scale</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">().</span><span class="na">density</span><span class="o">;</span>
<span class="lineno">6</span> <span class="c1">// Convert the dps to pixels, based on density scale</span>
<span class="lineno">7</span> <span class="n">mGestureThreshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">GESTURE_THRESHOLD_DP</span> <span class="o">*</span> <span class="n">scale</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="o">);</span>
<span class="lineno">8</span> 
<span class="lineno">9</span> <span class="c1">// Use mGestureThreshold as a distance in pixels...</span></code></pre></div>


<h2>Best Practice</h2>

<ol>
<li>Use <code>wrap_content</code>, <code>match_parent</code>, or <code>dp</code> units when specifying dimensions in an XML layout file</li>
<li>Do not use hard coded pixel values in your application code</li>
<li>Do not use <code>AbsoluteLayout</code> (it&rsquo;s deprecated). Use <code>RelativeLayout</code> instead.</li>
<li>Supply alternative bitmap drawables for different screen densities</li>
</ol>


<p>另外一篇关于网页上字体大小单位的讨论：<a href="http://hongchaozhang.github.io/blog/2015/08/03/Font-size-in-Html/">Font Size in Html - Px, Em, Rem</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《苏菲的世界》读后小结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/09/16/summerize-of-sohpie-world/"/>
    <updated>2016-09-16T16:29:04+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/09/16/summerize-of-sohpie-world</id>
    <content type="html"><![CDATA[<p>利用这一周的课余时间，读了《苏菲的世界》。这是一本非常好的西方哲学发展史的入门书，对于每个哲学家的观点阐述的简明扼要。由于主人翁是一个15岁的小女孩，所以，为了讲清楚，书中给了很多例子，生动形象易于理解。另外，采用对话的形式，而且知识点不是非常密集，读起来不会很累。</p>

<p>下面总结一下书中的观点，并加入一些自己的思考，如果有的话。</p>

<!-- more -->


<h2>伊甸园</h2>

<p>&hellip;在某个时刻事物必然从无到有。&hellip;</p>

<p>典型的哲学问题：</p>

<ol>
<li>你是谁？</li>
<li>世界从何而来？</li>
<li>&hellip;</li>
</ol>


<h2>魔术师的礼帽</h2>

<p>&hellip;要成为一个优秀的哲学家只有一个条件：要有好奇心。&hellip;</p>

<p>直到今天，我们每个人仍然必须各自寻找自己对这些哲学问题的答案。你无法在百科全书中查到有关“上帝是否存在？”与“人死后是否还有生命？”这些问题的答案。百科全书也不会告诉我们应该如何生活。不过，读一读别人的意见倒可以帮助我们建立自己对生命的看法。</p>

<h3>关于小白兔：</h3>

<p>魔术师从礼帽里面拉出来的那只小白兔，我们最好将它比作整个宇宙，而我们人类则是寄居在兔子皮毛深处的微生虫。不过，哲学家总是试图沿着兔子的细毛往上爬，以便将魔术师和整个兔子看个清楚；而普通人则安静地生活在皮毛深处，并且不努力往外爬。</p>

<h3>关于“孩子是天生的哲学家”：</h3>

<p>对于孩子而言，世上的种种都是新鲜而令人惊奇的。对于大人而言则不然。大多数成人都把这世界当成一种理所当然的存在，尤其在你生活了数年的地方。所以，我们时不时去旅游一趟，可以刺激我们思考一下这些根本的哲学问题。</p>

<h2>神话</h2>

<p>&hellip;善与恶之间脆弱的平衡。&hellip;</p>

<p>神话、宗教和哲学都是为了解释为何生命是这番面貌。</p>

<p>所谓哲学，我们指的是耶稣基督降生前六百年左右，在希腊演进的一种崭新的思考方式。在那之前，人们在各种宗教中找到了他们心中问题的答案。这些宗教上的解释透过神话的形式代代流传下来。比如北欧神话，希腊神话等。</p>

<h2>自然派哲学家</h2>

<p>&hellip;没有一个事物可以来自空无。&hellip;</p>

<p>自然派哲学家关注的主题是大自然与它的循环变化，希望找寻到其中隐含的自然法则。</p>

<p>对于早期的哲学家，我们最感兴趣的不是他们找到了什么答案，而是他们问了什么问题。我们对他们的思考方式较感兴趣，而不是他们思考的内容。</p>

<p>泰勒斯（Thales）认为水是万物之源。还有一些哲学家也认为“宇宙间有一种基本物质是所有事物的源头”。</p>

<p>帕梅尼德斯（Parmenides）认为世上根本没有真正的变化，没有任何事物可以变成另外一种事物。而人的感官认知却认为事物是变化的。在矛盾的二者中，帕梅尼德斯选择了前者，认为人的感官认知是不可靠的。即：</p>

<ol>
<li>没有任何事物会改变；</li>
<li>我们的感官认知是不可靠的。</li>
</ol>


<p>赫拉克利特斯（Heraclitus）则认为所有的事物处在不停的变化之中，没有静止的事物，并认为有一种“普遍的理性”指导着这种变化。概括一下：</p>

<ol>
<li>万物都会改变，即“一切事物都是流动的”；</li>
<li>我们的感官认知是可靠的。</li>
</ol>


<p>恩培窦可里斯（Empedocles）将帕梅尼德斯和赫拉克利特斯之间的矛盾进行了辩证统一。认为前面二人之所以存在不可调和的矛盾，是因为其都认为世间只有一种元素。恩培窦可里斯认为世界由四个“根”组成：土、气、火与水。这四种元素是永远不变的。人的感官察觉到的变化只是由于不同的事物由不同比例的四种元素构成。所以，其观点为：</p>

<ol>
<li>没有任何事物会改变；</li>
<li>我们的感官认知是可靠的。</li>
</ol>


<p>恩培窦可里斯的高明之处就在于：<strong>只要世界是由多于一种物质构成，那么自然就可能在万事万物实际上未曾改变的情况下产生种种变化。</strong></p>

<p>恩培窦可里斯对于我们为什么会看到东西的解释挺有意思：我们的眼睛是由土、气、火、水构成，并且其中的“土”可以看见周围环境中的“土”，我们眼睛中的“气”可以看到周围的“气”等等。这个观点和现在眼睛中的三色感光细胞的概念是多么的相像。</p>

<blockquote><p>帕梅尼德斯、赫拉克利特斯和恩培窦可里斯的这个发展过程，不正是黑格尔所谓的辩证统一的历史发展模式吗！</p></blockquote>

<h2>德谟克里特斯</h2>

<p>&hellip;世界上最巧妙的玩具是积木。&hellip;</p>

<p>德谟克里特斯认为世界上所有事物都是由原子构成的，这些原子是不可再分的。这些原子具有不同的种类，因此可以构成不同的事物，并且能很好地解释事物的变化。并且这些原子是永恒的，因为没有一件事物是来自于虚无。</p>

<p>但是德谟克里特斯并不相信有任何“力量”或者“灵魂”介入大自然的变化过程。他认为世间唯一存在的东西就是原子和虚空。由于其只相信物质的东西，因此我们称他为“唯物论者”。</p>

<h2>命运</h2>

<p>&hellip;算命者试图预测某些事实上机不可测的事物。&hellip;</p>

<h2>苏格拉底</h2>

<p>&hellip;最聪明的是明白自己无知的人。&hellip;</p>

<p>苏格拉底之前的哲学统称“自然派哲学”，苏格拉底学说则开辟了一个新时代。他和他的两个传人（柏拉图和亚里斯多德）都在雅典生活工作，雅典也因此成为希腊文化的中心。</p>

<p>与苏格拉底的哲学相关的几个问题结论：</p>

<ol>
<li>是否有人天生就是害羞的？</li>
<li>最聪明的是明白自己无知的人。</li>
<li>真正的智慧来自内心。</li>
<li>明辨是非者必能进退合宜。</li>
</ol>


<p>苏格拉底没有著书立说，其言论是通过其学生柏拉图的《对话录》流传下来的。这就像耶稣一样，都只跟人闲谈，其言论由后人记录在书中——《圣经》。其实苏格拉底和耶稣的结局也是非常相似的。</p>

<h3>苏格拉底的谈话艺术</h3>

<p>苏格拉底与人谈话的高明之处在于他与人谈话时看来并无意要指导别人。事实上他给人的印象是他很想从与他谈话的人那里学到一些东西。他所做的只不过是提出问题而已。尤其是在刚开始与人谈话时，仿佛他一无所知似的。</p>

<p>就像助产士帮助孕妇产子一样，苏格拉底认为他的工作就是帮助人们“生出”正确的思想。因为真正的知识是来自内心，而不是别人的传授。同时，唯有出自内心的知识，才能使人拥有真正的智慧。</p>

<p>借着假装无知的方式，苏格拉底强迫他所遇见的人们运用本来的常识。这种装傻的方式，我们称为“苏格拉底式的反讽”。</p>

<p>所谓哲学家（philosopher,“一个爱好智慧的人”），就是那些领悟到自己有很多事情并不知道，并因此而感到苦恼的人。这是苏格拉底和其当代那些诡辩家的非常重要的一点不同。苏格拉底说：“我只知道一件事，就是我一无所知。”其实，最具有颠覆性的人就是那些提出问题的人，而回答问题则比较安全。任何一个问题可能比一千个答案更具有爆炸性。</p>

<p>确切来说，人类面临了许多难解的问题，而我们对这些问题还没有找到满意的答案。因此现在我们面临两种选择：一个是假装拥有所有的知识，借此自欺欺人。另一个是闭上眼睛，从此不去理会，并放弃一切我们迄今为止所有的成就。就这方面而言，人类的意见并不一致。人们通常不是太过笃定，就是漠不关心。这两种人都是在兔子的毛皮深处蠕动的虫子。</p>

<p>苏格拉底还认为“知善者必能行善”，也就是说人只要有正确的见解，就会采取正确的行动。这也是我们为什么必须不断学习的原因。苏格拉底认为，人如果违反自己的理性就不会快乐。而那些知道如何找到快乐的人就会遵照自己的理性行事。因此，明白是非者必然不会为恶，因为，世间哪有人会想要成为一个不快乐的人呢？如果你一直做一些自己深知不对的事情，你还会活的很快乐吗？</p>

<h2>雅典</h2>

<p>&hellip;废墟中升起的几栋高楼。&hellip;</p>

<h2>柏拉图</h2>

<p>&hellip;回归灵魂世界的渴望。&hellip;</p>

<p>苏菲得到的几个引导其走向柏拉图学说的问题：</p>

<ol>
<li>面包师傅如何做出五十个一模一样的饼干？</li>
<li>为何所有的马都一样？</li>
<li>人有没有不朽的灵魂？</li>
<li>女人和男人一样有理性吗？</li>
</ol>


<h3>柏拉图的理型论</h3>

<p>柏拉图认为在“物质世界的背后，必定有一个实在存在。他称这个实在存在为‘理型的世界’，其中包含存在于自然界各种现象背后、永恒不变的模式。”这种观点我们称之为“柏拉图的理型论”。</p>

<p>柏拉图认为我们对实在世界的认识可以分为两个领域：</p>

<ol>
<li>感官的世界。我们只能用我们的不精确的感官来约略认识这个世界。在这个世界中，“每一件事物都会流动”，而且没有一样东西是永久不变的。这里面存在的都是一些生生灭灭的事物。</li>
<li>理型的世界。我们可以用理性来确实认识这个世界。我们无法通过感官来察知这个世界，但这些模型（或者形式）是永恒不变的。</li>
</ol>


<p>根据柏拉图的说法，人是一种具有双重性质的生物。我们的身体是“流动”的，与感官的世界不可分割，而且其命运与世界上其它事物（如肥皂泡）都一样。我们所有的感官都是以身体为基础的，所以都是不可靠的。但是，我们同时也有一个不朽的灵魂，而这个灵魂则是理性的天下。由于灵魂不是物质，因此可以探索理性的世界。</p>

<p>柏拉图认为，自然界所有的现象都是永恒形式或理型的影子。但是大多数人活在影子之间就已经感到心满意足了。他们从不去思考是什么东西投射出了这些影子，甚至都不曾认清世间万物都只是影子，更别提试图走出这个黑暗的洞穴。</p>

<h2>少校的小木屋</h2>

<p>&hellip;镜中的女孩双眼眨了一眨。&hellip;</p>

<p>几个引导苏菲思考亚里斯多德理论的问题：</p>

<ol>
<li>鸡和鸡的“观念”是何者先有？——对理型论的批判</li>
<li>人是否生来就有一些观念呢？——对理型论的批判</li>
<li>植物、动物和人类之间有何区别？——逻辑</li>
<li>天为何会下雨？——目的因</li>
<li>人需要什么才能过好的生活？——伦理</li>
</ol>


<h2>亚里斯多德</h2>

<p>&hellip;一位希望澄清我们观念的严谨的逻辑学家。&hellip;</p>

<h3>对于柏拉图“理型论”的批判</h3>

<p>亚里斯多德也承认“理型”的存在，但是：</p>

<ol>
<li>不像柏拉图认为的感觉来自理型，恰恰相反，亚里斯多德认为理型来自感觉。比如他认为，马的理型来自于我们看过若干匹马之后形成的概念。</li>
<li>理型不能独立于感觉而存在。亚里斯多德所指的马的理型，乃是指所有马匹都共有的特征。</li>
</ol>


<p>可以说，柏拉图用他的理性，亚里斯多德则同时也用他的感官。</p>

<h3>目的因</h3>

<p>以“天为什么会下雨？”来说明一下亚里斯多德的目的因。</p>

<p>当我们思考天下雨的原因时，我们想到的可能是：云层中的湿气冷却变成雨滴，然后受重力的吸引，降落到地上。</p>

<p>对于这个回答，亚里斯多德也会点头，但是他认为还不够，他会补充说我们只回答了其中的三个肇因：“质料因”是空气冷却时湿气（云层）正好在那。“主动因”是湿气冷却。“形式因”是水的形式（或称天性）就会降落到地面。还有一个原因：植物和动物需要雨水才能生长。这就是他所谓的“目的因”。</p>

<p>亚里斯多德相信自然界中的每一件事物都有其目的。天空下雨是因为要让植物生长，柳橙和葡萄之所以生长是为了供人类食用。</p>

<p>就因果律而言，我们往往认为亚里斯多德是错误的。但真的是这样吗？许多人相信上帝创造这个世界，是为了让其所有子民可以生活于其间。从这种说法来看，我们自然可以宣称河流里面之所以有水是因为动物与人类需要水才能生存。</p>

<h3>逻辑</h3>

<p>首先，亚里斯多德将自然界的东西彻底分门别类，并基于此创立了逻辑学。</p>

<p>举个例子：</p>

<p>如果我先肯定“所有的生物都会死”，然后再肯定“汉密士是生物”，则我可以从容地得出一个结论：“汉密士会死”。这个例子显示出了亚里斯多德的推理是建立在名词之间的相互关系之上的。</p>

<p>让我们看看亚里斯多德对自然界的分类：首先自然界的万事万物被分为两类：生物和无生物。区分标准是是否有主动改变的潜能。生物分为动物和植物。动物分为禽兽和人类。</p>

<h3>伦理学</h3>

<p>对于“人需要什么才能过上良好的生活？”这个问题，亚里斯多德的回答是：</p>

<p>快乐有三种形式：</p>

<ol>
<li>过着享乐的生活；</li>
<li>做一个自由而负责的公民；</li>
<li>做一个思想家与哲学家。</li>
</ol>


<p>人要同时达到这三个标准才能找到幸福与满足。</p>

<p>亚里斯多德还提出了“黄金中庸”的观点，作为人们在交际、生活中的规范：唯有平衡、节制，人才能过着快乐和谐的生活。</p>

<blockquote><p>中国的孔子提出中庸之道，是在公元前500年前后，亚里斯多德则是在公元前350年左右提出，晚于孔子150年左右。</p></blockquote>

<h3>政治学</h3>

<p>亚里斯多德还提出了三种良好的政治制度，厉害：</p>

<ol>
<li>君主制。统治者不能致力于谋求私利，以免沦为“专制政治”。</li>
<li>贵族政治。国家由一群人来统治，要小心不要沦为“寡头政治”。</li>
<li>民主政治。这种制度也有不好的一面，因为它很容易沦为暴民政治。</li>
</ol>


<h3>对女人的看法</h3>

<p>认为女人是“未完成的男人”，这一点和圣经故事一致：圣经中女人是用男人的一段肋骨做成的。</p>

<p>亚里斯多德认为，在生育方面，女性是被动的，只能接受。并坚信小孩的全部特质来源于父亲，母亲只是提供土壤而已，即男人提供“形式”，女人仅贡献“质料”。</p>

<p>亚里斯多德对于两性的错误观点带来了很大的负面作用，因为整个中世纪时期都受到他（而不是柏拉图）的看法的影响。教会也因此继承了一种歧视女性的观点。</p>

<h2>希腊文化</h2>

<p>&hellip;一丝火花。&hellip;</p>

<p>关键词：</p>

<p>希腊文化（前400年-前50年），罗马时期（近古时期，前50年-公元400年），新柏拉图学派的普罗汀（Plotinus）。</p>

<h2>明信片</h2>

<p>&hellip;我对自己实施严格的检查制度。&hellip;</p>

<h2>两种文化</h2>

<p>&hellip;避免在真空中漂浮的唯一方式。&hellip;</p>

<table>
<thead>
<tr>
<th style="text-align:right;">类别</th>
<th>印欧文化</th>
<th>闪族文化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">神：</td>
<td>多神论</td>
<td>一神论</td>
</tr>
<tr>
<td style="text-align:right;">历史：</td>
<td>历史是循环的</td>
<td>历史是线性的</td>
</tr>
<tr>
<td style="text-align:right;">宗教种类：</td>
<td>印度教、佛教</td>
<td>犹太教、基督教、伊斯兰教</td>
</tr>
<tr>
<td style="text-align:right;">宗教目的：</td>
<td>脱离轮回</td>
<td>从罪恶与谴责中得救</td>
</tr>
<tr>
<td style="text-align:right;">修炼方式：</td>
<td>自省与打坐</td>
<td>祈祷、布道和研究圣经</td>
</tr>
</tbody>
</table>


<h2>中世纪</h2>

<p>&hellip;对了一部分并不等于错。&hellip;</p>

<p>中世纪（大约公元400年-公元1400年）初期，公元529年，教会关闭雅典的柏拉图学园，这是基督教会钳制希腊哲学的一个象征。从此以后，修道院垄断了所有的教育与思想。</p>

<p>中世纪的哲学家几乎认定基督教义就是真理。他们的问题在于：我们是否一定要相信基督教的启示？还是可以借助理性来探索基督教的真理？希腊哲学家与圣经的记载有何关系？圣经与理性之间有冲突吗？还是信仰与知识是可以相容的？几乎所有的中世纪哲学家都是围绕这些问题工作的。</p>

<p>让我们看看中世纪两大哲学家如何处理这些问题。</p>

<h3>圣奥古斯丁</h3>

<p>圣奥古斯丁（St. Augustine， 354-430）是百分之百的基督教徒，他同时也认为柏拉图哲学也是正确的，基督教与柏拉图哲学是可以统一的。</p>

<p>圣奥古斯丁认为<strong>上帝在创造世界之前，那些“理型”乃是存在于上帝的心中，藉此保存了柏拉图有关永恒理型的看法</strong>。可以说，圣奥古斯丁将柏拉图加以“基督教化”。</p>

<h3>圣多玛斯</h3>

<p>圣多玛斯（Thomas Aquinas， 1225-1274）是一位哲学家，同时也是一位神学家。当时，哲学与神学并没有明显的区分。</p>

<p>就像中世纪初期圣奥古斯丁将柏拉图“基督教化”一样，圣多玛斯将亚里斯多德加以“基督教化”。</p>

<p>其实，所谓的“基督教化”只是将这两位哲学家的观念，用一种不至于对基督教义造成威胁的方式加以诠释。圣多玛斯将信仰与知识融合在一起，采取的方式是进入亚里斯多德的哲学世界，并以他的话来诠释圣经。</p>

<p>但是，圣多玛斯并不能用亚里斯多德的理论解释圣经中的所有事情，比如“上帝在六天内创造了世界”、“耶稣是上帝之子”等，就没法用亚里斯多德的理论去解释，这些所谓的“信仰的事实”只能透过信仰与基督的启示得知。</p>

<p>但圣多玛斯认为世间有若干“自然的神学真理”既可以透过基督教的信仰，也可以透过我们与生俱来的理性得知。这里说的“理性”指的就是亚里斯多德的理论。下面我们一条条看看。</p>

<h4>上帝存在</h4>

<p>亚里斯多德通过所谓的“目的因”阐述了上帝的存在。圣多玛斯认为，我们用理性可以体认到我们周遭的事物必然有个“目的因”。这是因为上帝既通过圣经，也通过理性向人类显现，所以世上既有“信仰神学”，也有“自然神学”。这点就像我们无论看到闪电或者听到雷声，都可以知道有雷雨要来了一样。</p>

<h4>生命层级</h4>

<p>圣多玛斯认为亚里斯多德的生命层级的概念也可以与基督教的神学取得共识。圣多玛斯认为，万物存在分若干渐进的层次。最低的是植物，其次是动物，再其次是人类，再其次是天使，最上面是上帝。动物有身体和感官，但是不能思考。人类除了有动物一样的身体和感官之外，还可以进行理性的思考。天使既没有身体也没有感官，具有自发的、直接的智慧，不需要通过思考和推理获得。由于没有一个终将要离开的身体，天使是不会死亡的。</p>

<h4>对女人的观点</h4>

<p>圣多玛斯对女人的观点同亚里斯多德一样，认为女人是一个不完整的男人，小孩子所有的特征来自父亲。这些观点与圣经上一致：夏娃是由亚当的肋骨造成的。</p>

<h2>文艺复兴</h2>

<p>&hellip;啊！藏在凡俗身躯里的神明子孙哪！&hellip;</p>

<p>在圣多玛斯时代过后不久，原本团结一致的天主教文化开始出现分裂的现象。哲学与科学逐渐脱离教会的神学，使得宗教生活与理性思考之间的关系变得比较自由。新的科学方法与新的宗教狂热于是逐渐产生。在这种环境下，十五与十六世纪发生了两大变动：文艺复兴运动与宗教改革运动。这其中，罗盘、火器与印刷术这三大发明，乃是文艺复兴时期所以形成的重要因素。</p>

<blockquote><p>从上面可以看出，哲学与宗教在中世纪及以前是不可分割的，即使现在可以分割，其界限也没有那么明显。</p></blockquote>

<h3>人文主义</h3>

<p>文艺复兴，字面意思是“重生”的意思，说的是古代艺术与文化的再生，也是人道主义的复兴，因为在漫长的中世纪，生命中的一切都是从神的观点来解释，但是到了文艺复兴时期，一切又重新以人为中心。当时的口号是“回归本源”，所谓的本源主要是指古代的人文主义。</p>

<p>文艺复兴运动的重要影响是改变了大家对人类自身的看法，其带来的人文主义精神使得大家对人本身和人的价值重新产生了信心。这种对人的新观念创造了一个全新的视野：人并不是为神而存在。有了这种新的自由，任何事情都是可能的。</p>

<p>文艺复兴时期的人文主义和古代的人文主义不同，其更强调个人主义。因此，不同于古代人文主义强调的宁静、中庸（苏格拉底）与节制，文艺复兴时期的人文主义强调自由，冲破藩篱与禁忌。这对于艺术、建筑、文学、音乐、哲学和科学的发展都是有好处的。布鲁诺（Giordano Bruno）由于提出了一些与教会冲突的观念——神存在于大自然中，宇宙是无限大的——被活活烧死。</p>

<h3>新世界观</h3>

<p>哥白尼（Nicolaus CCopernicus）的《天体运行论》认为地球是围绕太阳运动的，驳斥了神学一直认为的“地球是宇宙的中心”这一说法。相比于布鲁诺，哥白尼对于发表自己的言论比较谨慎：他在自己死的那一天才将自己的著作公之于世。</p>

<p>开普勒（Kepler）三大定律驳斥了“天体是圆形的，且绕着圆圈转”这一说法。</p>

<h3>实证法</h3>

<p>文艺复兴强调用我们的感官来调查研究大自然。自从十四世纪以来，愈来愈多的思想家警告人们不要盲目相信权威，无论是宗教教条或者亚里斯多德的哲学。在整个中世纪期间，人们过度迷信理性思考的重要性。到了文艺复兴时期，则认为研究大自然现象必须以观察、经验与实验为基础。我们称之为“实证法”。</p>

<p>伽利略（Galileo Galilei）通过实验研究运动与力的关系。</p>

<p>牛顿（Isaac Newton，1642-1727）发现万有引力定律和牛顿三大定律，并认为可以适用于宇宙每个地方，他因此推翻了中世纪人们认为的天上与人间适用两套不同的规律的说法。</p>

<p>实证法和后来的进化论使得人类失去了他们在造物中的一部分特殊地位，因此遭到了教会的强大阻力。</p>

<h3>宗教改革</h3>

<p>文艺复兴时期，圣经被从希伯来文和希腊文翻译成各国语言，这是导致宗教革命的主要因素。</p>

<p>马丁路德认为人们不需要教会或者教士居中代祷才能获得上帝的赦免。同时，要取得上帝的赦免也不是靠买教会所售卖的“赎罪券”。并提倡“我们只信靠经文。”他希望以这个口号将基督教带回它的源头，就像文艺复兴时期的人文主义者希望回到艺术与文化的古老源头一样。马丁路德将圣经翻译成德文（因此创造了德文的文字），并认为每个人都应该读懂圣经，做自己的教士。</p>

<h2>巴洛克时期</h2>

<p>&hellip;宛如梦中的事物。&hellip;</p>

<p>巴洛克时期（Baroque Period）一般是指十七世纪。整体来说，十七世纪主要特色就是在各种相互矛盾的对比中呈现张力。当时有许多人抱持文艺复兴时期持续不坠的乐观精神，另一方面又有许多人过着退隐山林、禁欲苦修的宗教生活。无论在艺术还是现实生活上，我们都可以看到夸张华丽的自我表达形式，但另外一方面也有一股退隐避世的潮流逐渐兴起。换句话说，当时“既有宏伟华丽的宫廷，也有僻静的修道院”。</p>

<p>巴洛克时期的主要观点就是“人生如戏”。现代戏剧就是巴洛克时期诞生的。莎士比亚的很多作品也是这个时期完成的，充满了悲观主意色彩。莎士比亚最著名的一句话：存在或不存在，这是问题所在。（To be or not to be, that is the question.）</p>

<h3>巴洛克时期的哲学</h3>

<p>这个时期的哲学也是两种完全相反的思想模式并存，而且两者之间充满了强烈的冲突。</p>

<ol>
<li>理想主义。理想主义认为生命基本上具有一种崇高的特质。</li>
<li>唯物主义。唯物主义认为生命中所有的自然现象都是从肉体感官而来的哲学。</li>
</ol>


<p>这个时期的唯物主义不仅认为所有的现象——包括人和动物——都由物质的分子组成。就连人类的意识（也就是灵魂）也是由人脑中微小分子的运动而产生的。</p>

<p>牛顿基于自己的几个理论，认为自然界的变化都可以用宇宙重力和物体移动的定律来加以解释。就这样，牛顿成就了“机械论的世界观”。</p>

<blockquote><p>其实哲学发展到这个阶段，就像我们在学校学习了几年科学之后，信心膨胀地认为世间所有的现象都可以用科学加以解释。对于一些灵异现象嗤之以鼻，认为只是我自己不能用科学观点解释而已，或者科学暂时不能解释而已，但是心中坚信科学总有一天会弄明白整个宇宙中的所有的现象。称为绝对的“唯物主义者”。但是随着年龄的增长，这种坚定的唯物主义信念会变得不再那么坚定。</p></blockquote>

<p>后来，法国的拉普拉斯（Laplace）也表达了极端机械论的观点，认为：如果某些神袛在某个时刻能知道所有物质分子的位置和状态，则“没有任何事情是他们所不知道的，同时他们也能够看到所有过去和未来的事情”。他认为所有事情都是命中注定的，一件事情会不会发生，都是冥冥中早就有定数的。世间没有自由意志这回事。这个观点被称为“决定论”。</p>

<blockquote><p>十七世纪的一位重要的哲学家莱布尼茨指出了物质和意识的不同点：物质可以不断被分割成更小的单位，但是灵魂却连分割成一半也不可能。</p></blockquote>

<h2>笛卡尔</h2>

<p>&hellip;他希望清除工地上所有的瓦砾。&hellip;</p>

<p>笛卡尔最感兴趣的题目是：</p>

<ol>
<li>我们拥有的确实知识；</li>
<li>肉体与灵魂之间的关系。</li>
</ol>


<h3>我思故我在</h3>

<p>笛卡尔认为我们不能信任我们的器官，因为感官可能会误导我们。笛卡尔发现人在清醒的时候与做梦的状态并不一定有所分别，进而说道：<strong>你怎么确定你的生命不是一场梦呢？</strong></p>

<p>笛卡尔怀疑每一件事，而这正是他唯一能够确定的事情。此时他悟出一个道理：有一件事情必定是真实的，那就是他在怀疑。当他怀疑时，他必然是在思考，而由于她在思考，那么他必定是个会思考的存在者。用他自己的话来说，就是：我思故我在。</p>

<p>笛卡尔还认为宇宙间有一个完美实体——上帝。并且这个完美实体可以保证我们用理智所认知到的一切事物必然会与现实世界相符。</p>

<p>总结一下笛卡尔的观点：</p>

<ol>
<li>人是会思考的生物；</li>
<li>上帝是存在的；</li>
<li>宇宙有一个外在的真实世界。</li>
</ol>


<h3>二元论</h3>

<p>上面所说的外在的真实世界与我们思想的真实世界是不同的。笛卡尔宣称宇宙间共有两种不同形式的真实世界（或称“实体”）：</p>

<ol>
<li>一种实体称为思想或者灵魂。思想纯粹是属于意识的，不占空间，因此也不能再分解为更小的单位。</li>
<li>另一种则称为扩延（Extension），或称物质。物质纯粹是扩延，会占空间，因此可以一再被分解为更小的单位，却没有意识。</li>
</ol>


<p>这两种实体都来自上帝，因为唯有上帝本身是独立存在的，不隶属于任何事物。而且思想和扩延彼此没有任何接触，思想不受物质的影响，反之，物质的变化也不受思想的影响。这就是笛卡尔的“二元论”。</p>

<h2>史宾诺莎</h2>

<p>&hellip;上帝不是一个傀儡戏师傅。&hellip;</p>

<p>史宾诺莎和笛卡尔一样都是理性主义者，但是史宾诺莎的理论不如笛卡尔那般容易理解。</p>

<h3>一元论</h3>

<p>对史宾诺莎来说，上帝创造这个世界并不是为了要置身事外。不，上帝就是世界。他拒绝接受笛卡尔的二元论，认为宇宙间只有一种实体。既存的每样事物都可以被分解、简化成一个他称为“实体”的真实事物。他有时称之为“上帝”或者“大自然”。他将大自然与万物的情况简化为一个单一实体。</p>

<p>上帝不是一个傀儡戏师傅。傀儡戏师傅通过拉动绳子，从外面来操作他的木偶，因此傀儡戏师傅是木偶做出各种动作的“外在因”。上帝是透过自然法则来主宰世界。因此上帝（或自然）是每一件事情的“内在因”。这表示物质世界中发生的每一件事情都有其必要性。</p>

<h3>自然法则</h3>

<p>史宾诺莎强调世间只有一种存在是完全自主，且可以充分自由行动的，那就是上帝（或自然）。唯有上帝或自然可以表现这种自由、“非偶然”的过程。人可以争取自由，以便去除外在的束缚，但他永远不可能获得“自由意志”。从物质角度来说，我们不能控制我们体内的每一件事情；从意识方面来说，我们不能“选择”自己的思想。因此，人并没有自由的灵魂。</p>

<h3>关于幸福</h3>

<p>史宾诺莎指出使我们无法获得真正的幸福与和谐的是我们内心的各种冲动。例如我们的野心和欲望。但如果我们体认到每一件事的发展都有其必然性，我们就可以凭直觉理解整个大自然。我们会很清楚地领悟到每一件事都有关联，每一件事情都是一体的。最后的目标是以一种全然接纳的观点来理解世间的事物。只有这样，我们才能获得真正的幸福与满足。用史宾诺莎自己的话说，就是“从永恒的观点来看每一件事情”。</p>

<h2>洛克</h2>

<p>&hellip;赤裸、空虚一如教师来到教室前的黑板。&hellip;</p>

<table>
<thead>
<tr>
<th>理性主义</th>
<th>经验主义</th>
</tr>
</thead>
<tbody>
<tr>
<td>笛卡尔，史宾诺莎</td>
<td>洛克，休姆，柏克莱</td>
</tr>
<tr>
<td>相信理性是知识的源泉</td>
<td> 相信来自感官的经验是知识的源泉</td>
</tr>
<tr>
<td>人在还没有任何经验之前，心中已经有了一些与生俱来的概念</td>
<td>如果没有感官的体验，我们心中将一无所有</td>
</tr>
<tr>
<td>欧陆的理性主义：笛卡尔是法国人，史宾诺莎是荷兰人，莱布尼茨是德国人</td>
<td>英国的经验主义：洛克、柏克莱和休姆都是英国人</td>
</tr>
<tr>
<td>与柏拉图类似。柏拉图认为人生下来就从观念世界带来了一整套的“观念”。</td>
<td>与亚里斯多德类似。亚里斯多德认为我们心灵中的所有的事物都是先透过感官而来的。</td>
</tr>
</tbody>
</table>


<p>下面具体看一下洛克（John Locke，1632-1704）的哲学观点。洛克的主要作品是《论人之理解力》，试图澄清两个问题：</p>

<ol>
<li>我们的概念从何而来？</li>
<li>我们是否可以信赖感官的经验？</li>
</ol>


<h3>我们的概念从何而来？</h3>

<p>对于这个问题，洛克认为在我们的感官察知任何事物前，我们对心灵就像老师还没有进教室之前的黑板一样空白。后来我们开始经验一些事物，此时我们的心灵除了被动接受外界的印象之外，同时也积极地进行某种活动。它以思考、推理、相信、怀疑等方式来处理它所得到的各种单一感官概念，产生了洛克所谓的“思维（reflection）”。</p>

<p>洛克强调我们唯一能感知的事物是那些“单一感觉”。例如当我们吃一个苹果的时候，我们并不能一次性地将苹果的所有特征都感觉到。事实上，我们接收到的是一连串的“单一感觉”，诸如绿色、闻起来很新鲜、尝起来很甜&hellip;等。经过一定的事件，我们接收到了足够的感觉，我才能说：我正在吃“苹果”。我们就这样一点一滴地将许多相关的感觉放在一起，形成了“苹果”、“梨子”或“橘子”这些复合的概念。但根本上，是我们得以认识这个世界的所有材料都来自感官。那些无法回溯到一种单一感觉的知识都是虚假的知识，我们不应该接受。</p>

<h3>我们是否可以信赖感官的经验？</h3>

<p>对于第二个问题，洛克将感觉的性质分为“主要”和“次要”两种。在这方面他承认受笛卡尔等大哲学家的影响。</p>

<ol>
<li>主要性质。主要性质指扩延的世界特质，如重量、运动和数量等。在这一点上洛克是同意笛卡尔的说法的，认为确实有些性质是人可以用理智来了解的。</li>
<li>次要性质。次要性质指并不能真正反映事物本身的固有性质的一些属性，比如颜色、气息、味道、声音等，这些性质只反映外在实体在我们的感官上所产生的作用。</li>
</ol>


<blockquote><p>可以说主要性质是客观的，而次要性质是主观的，因人而异的。</p>

<p>对于洛克相信上帝的存在这一点，真是比较费解，感觉和他自己的理论是冲突的。因为在这一点上，洛克相信关于上帝的概念是原本就存在于人的理性之内的。</p></blockquote>

<h2>休姆</h2>

<p>&hellip;将它付之一炬。&hellip;</p>

<p>休姆（David Hume，1711-1776）是经验主义哲学中最重要的一位，也是启发大哲学家康德，并使他走上哲学研究道路的人。</p>

<h3>印象与观念</h3>

<p>休姆首先断定人有两种知觉：印象和观念。印象指的是对于外界实在的直接感受，观念指的是对印象的回忆。比如你被炉子烫到了，你马上会有一个“印象”。事后你会回想自己被烫到这件事，这就是休姆所谓的“观念”。</p>

<p>休姆说我们有时会将世界中原本并不共存的概念放在一起。比如天使将人和翅膀放在一起，天马将马和翅膀放在一起等。这些概念中的每一个元素都曾经由我们的感官体验过，并以真正“印象”的形式进入心灵。事实上，没有一件事物是由我们的心灵创造的。我们的心灵只是把不同的事物放在一起，创造一个虚假的“观念”罢了。</p>

<blockquote><p>所以，为了给创造提供更多素材，必须见多识广。正所谓“行万里路，读万卷书”，通过行万里路亲自经验，通过读万卷书了解别人的经验。</p></blockquote>

<p>对于上帝，休姆认为，是一个无限“智慧、聪明、善良的事物”，上帝这个观念就是由某个无限智慧、某个无限聪明与某个无限善良的事物共同组成的一个“复合概念”。如果我们不知道何谓智慧、何谓聪明、何谓善良的话，我们绝对不可能形成一个这样的上帝的观念。</p>

<p>总之，只要是无法回溯到特定感官认知经验的思想与观念，休姆便不接受。</p>

<h3>不可知论</h3>

<p>关于灵魂和上帝，休姆认为人类没有必要去证明灵魂不朽或上帝确实存在。这并不是因为休姆认为人没有不休的灵魂，或者上帝并不存在，而是因为他认为要用人类的理性来证明宗教信仰是不可能的。休姆不是一个基督徒，但也不是一个无神论者，他是我们所谓的“不可知论者”，就是一个怀疑灵魂是否不朽，怀疑上帝是否存在的人。休姆不相信灵魂不朽和上帝的存在，是因为他从来没有体验过。但是没有体验过也不能证明不存在。就是这样一个逻辑。</p>

<h3>习惯性期待</h3>

<p>如果看到一个人在天花板上行走，成人和婴儿谁会看的津津有味？应该是成人。在婴儿还不了解自然法则之前，看到违反自然法则的现象时，是不会感到特别惊讶的。那个孩子还没有成为“习惯性期待”的奴隶。具有婴儿视角的人更容易成为哲学家，因为他们完全没有任何先入为主的观念，这正是哲学家与众不同的地方。婴儿眼中所见到的乃是世界的原貌，他不会添加任何的东西。</p>

<blockquote><p>习惯性期待实际上是一种预测，是人类适应环境的结果，有利于物种的生存。</p>

<p>习惯性期待是阻挡我们对真理寻根究底的障碍，因为这种期待让我们认为眼前的一切都是理所当然，从而放弃了进一步研究的欲望。</p></blockquote>

<p>比如对于黑球撞击白球，白球移动这一现象，在休姆的眼中应该是这样的：我所经验的唯一事件是白球移动了，我并没有经验到它滚动的实际原因。我只经验到一件事情发生之后，另外一件事情跟着发生，但我并没有经验到第一件事情是第二件事情的原因。</p>

<p>休姆认为“自然法则”和“因果律”实际上是我们所期待的现象，并非“理当如此”。休姆并不否认有不变的自然法则，但他认为，由于我们无法体验到自然法则本身，因此很容易做出错误的结论。</p>

<p>比如我这一辈子看到的乌鸦都是黑色，但这并不表示世间没有白色的乌鸦。无论哲学家，还是科学家，都不能否认世间可能存在白乌鸦。这是很重要的。我们几乎可以说科学的主要任务就是找寻白乌鸦。</p>

<p>再举个例子。很多人会认为闪电是造成打雷的原因，因为每次闪电之后就会打雷，这个例子和黑球撞击白球并没有什么不同。事实上，打雷并不是闪电造成的，这两者是同时发生的，都是由于放点作用导致的。</p>

<p>所以，我们可以知道：一件事情跟着另一件事情发生，并不一定表示两者之间必有关联。哲学的目的之一就是教人们不要妄下定论，因为，妄下定论可能会导致许多迷信。</p>

<h3>伦理学</h3>

<p>休姆反对理性主义者在伦理方面的观点。理性主义者认为人的理性天生就能辨别是非对错。但休姆认为，我们的言语和行为并不是由理性决定的，而是由感情决定的。</p>

<p>让我们看一段苏菲和艾伯特的对话：</p>

<p>苏菲：譬如每一个人的理性都知道杀人是不对的。
艾伯特：有时候，除掉一个人并不一定是不智的，甚至可能是个好办法，如果你想达成某个目的的话。
苏菲：我反对。
艾伯特：那请你告诉我，为什么你认为我们不应该把一个使我们头疼的人杀掉？
苏菲：那个人也想活下去啊，因此你不应该杀他。
艾伯特：这是没有逻辑的，如果这个成立的话，那么下面几个论断是否也成立？比如“有很多人逃漏税，因此我也应该逃漏税。”，再比如“愈来愈多人出门时想搭飞机，因此我们应该兴建更多的机场。”
苏菲：&hellip;</p>

<p>因此，休姆认为我们不能以理智作为我们行事的标准。因为，我们之所以做出负责任的举动并不是因为我们的理智发达的结果，而是因为我们同情别人的处境。休姆说“一个人可能宁可整个地球遭到毁灭也不愿意自己的手指被割伤。这与理智并没有什么冲突。”</p>

<h2>柏克莱</h2>

<p>&hellip;宛如燃烧的恒星旁一颗晕眩的行星。&hellip;</p>

<p>洛克和笛卡尔、史宾诺莎一样，认为物质世界是真实的。但是柏克莱（George Berkeley，1685-1753）利用经验主义的逻辑对这一点提出了疑问：世间所存在的只是那些我们感受到的事情。但我们并未感受到“物质”或“质料”。我们无法察知我们所感受到的事物是否确实存在。他认为，如果我们认定自己所感知到的事物之下有“实体”存在，我们就是在妄下结论，因为我们绝对没有任何经验可以支持这样的说法。</p>

<p>比如你拍了一下桌子，感觉桌子很硬。可是你并没有感觉到实际存在于桌子里面的物质。同样的，你可以梦见自己碰到了一个硬物，可是梦里不会有硬的东西，对不对？</p>

<p>但是我们为什么会感觉到桌子“硬”呢？柏克莱相信人有“灵”。我们所有的观念都有一个我们意识不到的成因。但这个成因不是物质的，而是精神的。</p>

<h3>灵</h3>

<p>根据柏克莱的说法，我们的灵魂可能是形成我们本身各种概念的原因，就像我们在做梦时一样。此时，莎士比亚的to be or not to be, that is the question已经不是唯一的问题了。问题在于我们是什么。我们真的是血肉之躯的人类吗？我们的世界是由真实的事物组成的吗？或者我们只是受到心灵的包围？</p>

<blockquote><p>太可怕了！</p></blockquote>

<p>柏克莱不只是质疑物质真实性的问题，他也提出了“时间”和“空间”是否绝对存在或独立存在的问题。他认为，我们对于事件和空间的认知可能也只是由我们的心灵所虚构的产物而已。我们对一、两个星期并不一定等于上帝的一、两个星期。</p>

<blockquote><p>柏克莱已经开始思考时间的相对性了，这比爱因斯坦可早了二百多年呢。</p></blockquote>

<h2>柏客来</h2>

<p>&hellip;曾祖母向一名吉普赛妇人买的一面古老魔镜。&hellip;</p>

<h2>启蒙</h2>

<p>&hellip;从制针的技术到铸造大炮的方法。&hellip;</p>

<p>十八世纪的法国出现了许多重要的哲学家。我们可以说，十八世纪前半，欧洲的哲学中心是在英国，十八世纪中期，是在法国，十八世纪末，则是在德国。就这样从西边一直换到东边。</p>

<p>从以下七个方面阐述了法国启蒙运动的思想：</p>

<ol>
<li>反抗权威</li>
<li>理性主义</li>
<li>启蒙运动</li>
<li>文化上的乐观态度</li>
<li>回归自然</li>
<li>自然宗教</li>
<li>人权</li>
</ol>


<h3>1.反抗权威</h3>

<p>当时很多法国哲学家去过英国，受到英国自然科学——尤其是牛顿的宇宙物理学——的吸引，也受到英国哲学——尤其是洛克的政治哲学——的启发。他们回国后对于传统的权威愈来愈不能认同，认为有必要对前任所谓的真理抱持怀疑的态度，即：每个人都必须自行找寻问题的答案。这方面他们受笛卡尔的启发很大。反抗权威的口号也有一部分是针对当时的教士、国王和贵族。于是，1789年发生了法国大革命。</p>

<h3>2.理性主义</h3>

<p>洛克的经验主义前后并不一致，例如他相信上帝的信仰和若干道德规范是人的理性中所固有的。这个想法是法国启蒙运动的核心。从这一点可以看出，法国人比英国人更理性。大多数启蒙时期的哲学家跟苏格拉底这些古代的人文主义着一样，坚决相信人的理性，所以法国启蒙运动时期常被称为“理性时代”。当时，新兴的自然科学已经证明自然是受理性所管制的，于是哲学家们认为他们也有责任依据人不变的理性为道德、宗教、伦理奠定基础。启蒙运动因此产生。</p>

<h3>3.启蒙运动</h3>

<p>启蒙运动想要“启”发群众的“蒙”昧，以建立更好的社会。他们认为人民之所以过着贫穷、备受压迫的生活，是因为他们无知、迷信所致。因此，他们创立了教育学。并出版了一套大规模的百科全书，并声称“在这套书中可以查到所有的知识，上自铸造大炮的方法，下至制针的技术。”</p>

<h3>4.文化上的乐观态度</h3>

<p>启蒙时期的哲学家任务一旦人的理性发达、知识普及之后，人性就会有很大的进步，所有非理性的行为与无知的做法迟早都会被“文明”的人性取代。</p>

<h3>5.回归自然</h3>

<p>对于启蒙时期的哲学家而言，“自然”几乎就代表“理性”，因为人的理性乃是自然的赐予，而不是宗教或“文明”的产物。他们认为：所谓的“原始民族”常常比欧洲人更健康、更快乐，因为他们还没有被“文明化”。卢梭提出“人类应该回归自然”的口号，因为自然是好的，所以人如果能处于自然的状态就是好的，可惜他们却往往受到文明的败坏。卢梭并且认为大人应该让小孩尽量停留在他们天真无邪的“自然”状态里。</p>

<h3>6.自然宗教</h3>

<p>除了认为人应该自然化，他们还认为宗教也应该加以自然化，即宗教必须与“自然”的理性和谐共存。但是很多人为建立“自然宗教”而奋斗。</p>

<p>所谓“自然神论”是指相信上帝在万古之前创造了世界，但从此以后就没有再现身。上帝成了一个“至高的存在”，只透过大自然与自然法则向人类显现，绝不会透过任何“超自然”的方式现身。我们在亚里斯多德的著作中也可以发现类似的这种“哲学上帝”的说法。对他而言，上帝乃是“目的因”或“最初的推动者”。</p>

<h3>7.人权</h3>

<p>法国启蒙时期的哲学家对于一般人在社会中的地位并不满意。他们积极争取所谓的“自然权利”，并且发起一项反对言论管制、争取新闻自由的运动。此外，他们认为个人在宗教、道德与政治方面的思想与言论自由也有待争取，并积极提倡废除奴隶制度，以合乎人性的方式对待罪犯。1789年，法国国民议会通过了“人权与民权宣言”，确立了“个人权利不可侵犯”。</p>

<h2>康德</h2>

<p>&hellip;头上闪烁的星空与心中的道德规范。&hellip;</p>

<p>康德生于1724年，他及其家人都是非常虔诚的教徒，他的宗教信仰也成为他的哲学的重要背景之一。他和柏克莱一样，觉得有必要巩固基督教信仰的基础。</p>

<p>不同于理性主义和经验主义，康德认为我们对于这个世界的观念是我们同时透过感官与理性而得到的。首先，康德同意休姆和经验主义者的说法，认为我们对于世界的了解都是透过感官获得的，但是他也赞成理性主义者的部分说法，认为我们的理性中也有一些因素可以决定我们如何认知周遭的世界。换句话说，我们对于世界的观念会受到人类心灵中某些状况的影响。</p>

<h3>因果律</h3>

<p>康德宣称，不仅心灵会顺应事物的形状，事物也会顺应心灵。他把这个现象称为人类认知问题的“哥白尼革命”。</p>

<p>休姆认为我们无法证明因果律，因为我们无法体验到因果律，我们只能体要到事物发生的先后顺序。康德则认为：因果律是根植于我们的内心的。他同意休姆的说法，认为我们无法确知世界本来的真貌，我们只能根据自己的认识来了解世界。康德认为“事物本身”和“我眼中的事物”是不一样的。这一点很重要。我们永远无法知道事物“本来”的面貌，我们所知道的只是我们眼中“看到”的事物。从另外一个角度来看，我们在每一次经验之前都可以预知我们的心灵将如何认知事物。</p>

<h3>信仰</h3>

<p>笛卡尔等理性主义者试图证明上帝的存在，理由是：我们都有一个关于“至高存在”的概念。亚里斯多德和圣多玛斯等人之所以相信上帝存在的理由是：一切事物必然有一个最初的原因。</p>

<p>康德则认为无论理性和经验都无法证明上帝的存在。但是这对于一个虔诚的教徒来说是不可以接受的。于是，康德开创了一个宗教的空间。在这个空间中理性和经验都派不上用场，因此形成了一种真空的状况。这种真空只能用信仰来填补。这就是康德挽救基督教的方法。</p>

<h3>伦理学</h3>

<p>康德在是非标准方面同意理性主义者的说法，认为每个人心中的是非观念并不是后天学来的，而是人心固有的观念。按照康德自己的说法，就是每一个人都天生具有“实践理性”。</p>

<p>康德认为就像我们能够感知因果关系的智慧一样，我们也能够感知普遍的道德法则。这个道德法则在于每个经验之先，因此它是“形式的”，也就是说，它必不限于任何特定的情况。它适宜于古往今来每个社会每个个人，所以它不会告诉你在什么情况下应该做什么事情，而是告诉你在所有的情况下应该有的行为。这套道德法则乃是“无上命令”，是“无条件的”，是绝对权威的。康德也说明“无上命令”的意义乃是：尊重每一个人的本身，而不要将他当成达成某种外在目的的手段。</p>

<p>让我们用康德的墓志铭来做个总结：有两件事情我愈是思考愈觉神奇，心中也愈充满敬畏，那就是我头顶上的星空与我内心的道德准则。它们向我印证：上帝在我头顶，亦在我心中。</p>

<h2>浪漫主义</h2>

<p>&hellip;神秘之路通向内心。&hellip;</p>

<p>继文艺复兴、巴洛克时期与启蒙运动，我们来到了浪漫主义。浪漫主义可以说是欧洲最后一个伟大的文化纪元。它从十八世纪末开始，持续到十九世纪中期。1850年以后，就不再有一个涵盖诗、哲学、艺术、科学与音乐的“纪元”了。</p>

<p>浪漫主义开始于德国，最初是为了反对启蒙时期的哲学家过于强调理性的做法。在康德和他那冷静的知性主义成为过去后，德国的青年仿佛松了一口气，如释重负。当时的新口号是“感情”、“想象”、“经验”和“渴望”。人们开始批评浪漫主义的做法，隐而不显的浪漫主义开始成为德国的主流。</p>

<p>许多浪漫主义者自认为康德的传人，他们赞同康德所说的“我们对于‘物自身’所知有限”，同时也强调自我的作用对于知识（或认知）的重要性。在这种情况下个人完全可以随心所欲地以自己的方式来诠释生命。这份“随心所欲”为我们带来了许多艺术方面的天才。贝多芬就是其中之一。</p>

<p>和文艺复兴时期相似，浪漫主义也强调艺术对人类认知的重要性。在这方面康德的贡献很大。他在他的美学理论中研究了当我们受到美（比如一幅艺术品）的感动时会发生什么情况。他认为，当我们忘记自我，忘记一切，完全沉浸于艺术作品的时候，我们就比较能够体验到“物自身”。因此，浪漫主义也认为，艺术家可以提供一些哲学家无法表达的东西，唯有艺术家才能使我们更接近那“无以言喻”的经验。有人甚至将艺术家比作上帝。</p>

<p>1800年左右的第一代浪漫主义者都是年轻人，有些像150年后的嬉皮。曾有人说：“闲散是天才的理想，懒惰是浪漫主义者的美德。”浪漫主义者的职责就是体验生活——或是成天做白日梦、浪费生命。至于日常事务，留给那些俗人去做就行了。</p>

<p>浪漫主义者认为大自然就是一个大“我”，他们同时使用“世界灵魂”与“世界精神”等名称。</p>

<h3>谢林</h3>

<p>浪漫主义时期主要的哲学家是谢林（Schelling，1775-1854）。他主张心灵与物质合二为一，并认为大自然的全部——包括人的灵魂与物质世界——都是一个“绝对存在”（或世界精神）的表现。</p>

<p>史代芬（Henrik Steffens）曾一语道破浪漫主义的特色：“我们厌倦了无休无止地与粗糙的物质世界奋战，因此决定选择另外一个方式，企图拥抱无限。我们进入自己的内心，在那里创造了一个新的世界&hellip;”</p>

<p>谢林发现在大自然中，从泥土、岩石到人类的心灵，有一种逐渐发展的现象。他提醒人们注意大自然从无生物逐渐发展到较复杂的生命体的现象。大致上说，浪漫主义把大自然视为一个有机体，也就是一个不断发展其内在潜能的一个整体。大自然就像一株不断伸展枝叶与花瓣的花，也像一个不断吟咏出诗歌的诗人。</p>

<h2>黑格尔</h2>

<p>&hellip;可以站得住脚的就是有道理的。&hellip;</p>

<p>黑格尔（Georg Wihelm Friedrich Hegel）统一了所有曾在浪漫主义时期出现的理念，并加以发展。“黑格尔主义”在德国吸引了无数的信徒。</p>

<h3>历史之河</h3>

<p>通常所谓的“黑格尔哲学”主要是指一种理解历史进展的方法。</p>

<p>黑格尔之前的哲学体系有一个共同点：试图为人们对世界的知识建立一套永恒的标准，并认为人类对于世界的知识是不受时间影响的。笛卡尔、史宾诺莎、休姆和康德等人都是如此。黑格尔认为这是不可能的。他相信人类认知的基础代代不同，因此世间没有永恒的真理。</p>

<p>从思想（或理性）的历史来看，我们的思考方式乃是受到宛如河水般向前推进的传统思潮与当时的物质条件的影响。因此，你永远无法宣称一种思想永远是对的。只不过就你所知身之处而言，这种思想可能是正确的。我们的理性事实上是动态的，是一种过程。而“真理”就是这个过程，因为在这个历史的过程之外，没有外在的标准可以断定什么是真，什么是合理。</p>

<h3>辩证法</h3>

<p>假设笛卡尔的理性主义为“正”，与之相反的休姆的经验主义为“反”。这两种思想处于矛盾或紧张的状态，后来被康德的“合”给消除了。“正”、“反”、“合”是康德认为的思想发展的三个基本阶段。康德同时吸收了理性主义和经验主义的部分论点，形成了自己的“合”的论点。但是故事并非到此结束。康德的“合”现在成了另一个三段式发展的起点，也会出现一个“反”与之相抵触。</p>

<h2>祁克果</h2>

<p>&hellip;欧洲正迈向破产的地步。&hellip;</p>

<p>祁克果认为真理是“主观的”，真正的真理是属于个人的，只是“对我而言是真的”。对于“上帝是否存在”这个问题，每一个人都必须独自回答。而这类根本性的问题只能经由信仰来找寻答案。按照祁克果的看法，那些我们能经由理性而得知的事情（也就是知识）是完全不重要的。换句话说，正因为它是非理性的，所以我才相信。</p>

<h2>马克思</h2>

<p>&hellip;在欧洲游荡的幽灵。&hellip;</p>

<p>马克思曾说，直到现在为止，“哲学家只诠释了世界，可是重点在于他们应该去改变世界。”马克思的思想有一个实际或政治的目的。我们可以说他不只是一个哲学家，同时也是一个历史学家、社会学家和经济学家。</p>

<h3>辩证历史唯物主义</h3>

<p>马克思并不像古代的原子论者和十七、十八世纪的机械论唯物主义者一样是一个哲学性的唯物主义。不过他认为我们的思考方式是一大部分受到社会中的物质因素的影响。此外，这类物质因素无疑也左右了历史的发展。</p>

<p>马克思受黑格尔思想的影响，但是他不同意黑格尔的世界精神。黑格尔认为历史是辩证发展的，并把推动历史前进的力量叫做世界精神或世界理性。马克思认为这种说法正好与事实相反。他想证明物质的变化才是推动历史的力量：“精神关系”并不会造成物质的改变，而是物质的改变造成了新的“精神关系”。马克思特别强调，促成改变并因此把历史向前推进的，其实是一个社会的经济力量，即我们在政治课里面所学的“生产力决定生产关系”、“经济基础决定上层建筑”。马克思相信物质条件“支持”着一个社会里的每一种思想和看法。马克思继承了黑格尔的辩证历史发展观，并用“物质”代替了“世界精神”，这就是“辩证历史唯物主义”。</p>

<blockquote><p>这应该就是唯物主义和唯心主义的区别：是精神决定物质，还是物质决定精神。</p></blockquote>

<h3>阶级斗争</h3>

<p>马克思相信资本主义的生产方式本身有若干内在的矛盾。他说，资本主义是一种自我毁灭式的经济制度，因为它缺少理性的控制。资本主义的内在因素会驱使它走向灭亡。</p>

<blockquote><p>中文翻译版本删除了关于“共产主义无法实现”的讨论。找来英文版看了一下，大致是说：当代经济学家认为马克思的共产主义理论没有考虑到很多东西，共产主义是不可能实现的，人类就是在不停地制造问题、解决问题的过程中不断发展的。</p></blockquote>

<h2>达尔文</h2>

<p>&hellip;满载基因航行过生命的一艘小船。&hellip;</p>

<p>达尔文1882年死于伦敦，之后一年，马克思也在伦敦去世。恩格斯怀念说：达尔文创立了有机物进化的理论，而马克思则创立了人类历史进化的理论。</p>

<h3>自然主义</h3>

<p>广泛地谈一下从十九世纪中期到我们这个时代所流行的一股自然主义风潮。自然主义指的是一种认为除了大自然和感官世界之外，别无其他真实事物的态度。因此，自然主义者也认为人是大自然的一部分。一个自然主义的科学家只相信自然现象，而不相信任何理性假设或圣灵的启示。马克思、达尔文和弗洛伊德都是自然主义者。马克思指出人类的意识形态是社会基础的产物，达尔文则证明人类是生物逐渐演化的结果，而弗洛伊德对潜意识的研究则发现人们的行为多半是受到“动物”本能驱策的结果。</p>

<h3>进化论</h3>

<p>物竞天择，适者生存。</p>

<h2>弗洛伊德</h2>

<p>&hellip;他内心出发那股令人讨厌的自大的冲动。&hellip;</p>

<h3>潜意识</h3>

<p>弗洛伊德认为我们的行动并不像十八世纪的理性主义者所想的那么理性。非理性的冲动经常左右我们的思想、梦境和行动。这种不理性的冲动可能是反映我们的基本需求。例如，人类的性冲动就像婴儿吸奶的本能一样是一种基本的驱策力。这并不是什么新发现，但是弗洛伊德指出这些基本需求可能会被“伪装”或“升华”，并在我们无从察觉的情况下主宰我们的行动。</p>

<p>比如“说溜嘴”等现象就是潜意识在作怪。另外，精神分析学家在病人的配合下，可以在病人的心灵深处挖掘，并找出那些造成病人心理失调的经验。因为根据弗洛伊德的说法，我们都会把所有经验的记忆储藏在内心深处。</p>

<h4>潜意识机转</h4>

<p>有时候我们会把自己内心试图压抑的潜意识转移到别人身上。譬如一个很吝啬的人会说别人斤斤计较，而一个不愿意承认自己满脑子想着性的人可能俞容易对别人成天想着性的样子感到愤怒。</p>

<p>弗洛伊德宣称，我们每天的生活中充满了这类潜意识的机转。我们时常会忘记某个人的名字，在说话时摸弄自己的衣服或移动房间里面随意放置的物品。我们时常结结巴巴或看似无辜地说错字，写错字。这些举动并不像我们所想的那样是意外或无心的。这些错误事实上可能正泄露我们内心最深处的秘密。</p>

<p>面对这些潜意识的机转，我们无法逃避。我们所能做的就是不要太过努力地将不愉快的记忆埋藏在潜意识中。因为那就像试图把水鼠巢穴的入口堵住一样。水鼠一定会从其它的洞口进入花园。因此，让意识与潜意识之间的门半遮半掩事实上是一件很健康的事。</p>

<h4>解梦</h4>

<p>洞悉我们潜意识的最好途径就是透过我们的梦境。弗洛伊德的主要作品就是讨论这个话题的——《梦的解析》。</p>

<h4>灵感</h4>

<p>所有的艺术家都有这种经验：突然间好像所有的门、所有的抽屉都打开了，每个东西都自己滚了出来，所有原来苦思不得解的字句和意象都浮现了出来。这就是潜意识的“盖子”被揭开了，我们称之为“灵感”。</p>

<p>对于过度疲劳的儿童，经常出现这种现象：突然间他们开始讲故事，而且所说的话仿佛是他们还没有学过的。事实上，他们已经学过了。只是这些字眼和意念都“潜藏”在他们的潜意识中，而当所有的防备和管制都放松时，它们就浮现出来了。对于艺术家来说，不要让理性或思维压制潜意识的表达是非常重要的。</p>

<h3>快乐原则、现实原则和道德原则</h3>

<h4>快乐原则</h4>

<p>当我们刚来到这个世界的时候，我们会用一种直接而毫不感到羞耻的方式来满足我们身体与心灵的需求。如果我们没有奶喝或尿布湿了，我们就会大哭。我们也会直接表达我们对身体上的接触或温暖拥抱的需求。弗洛伊德称我们这种“快乐原则”为“本我”。当我们还是一个婴儿的时候，几乎就只有一个“本我”。</p>

<h4>现实原则</h4>

<p>我们带着我们内心的这个“本我”或“快乐原则”长大成人。逐渐地，我们学会如何调整自己的需求以适应环境，我们学到如何调整这个“快乐原则”以迁就“现实原则”。用弗洛伊德的术语来说，我们发展出了一个具有这种调节功能的“自我”。这时，即使我们想要或需要某个东西，我们也不能躺下来一直哭到我们得到那件东西为止。</p>

<h4>道德原则</h4>

<p>从婴儿时期，我们就不断面对我们的父母和社会的道德要求。当我们做错事情的时候，我们的父母会说：“不要那样！”或“别调皮了，那样不好！”即使长大成人后，我们在脑海中仍可以听到这类道德要求和价值判断的回声。似乎这种世界的道德规范已经深入我们的内心，成为我们的一部分。弗洛伊德称这部分为“超我”。良心是超我的一部分。</p>

<h2>我们这个时代</h2>

<p>&hellip;人是注定要受自由之苦的。&hellip;</p>

<p>所谓哲学问题的定义就是每一个世代，甚至每一个人，都必须要一再地问自己的一些问题。借着提出这些问题，我们才知道自己活着。当人们追寻这些根本问题的答案时，他们总是会发现许多其他问题，并因此而有了清楚明确的解决方法。科学、研究和科技都是我们哲学思考的副产品。</p>

<h2>花园宴会</h2>

<p>&hellip;一只白色的乌鸦。&hellip;</p>

<h2>对位法</h2>

<p>&hellip;两首或多首旋律齐响。&hellip;</p>

<h2>那轰然一响</h2>

<p>&hellip;我们也是星尘。&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Unit Test With Junit]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit/"/>
    <updated>2016-08-25T13:27:16+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit</id>
    <content type="html"><![CDATA[<h2>Test Types</h2>

<p>When using Android Studio to write any of your tests, your test code must go into one of two different code directories (source sets). For each module in your project, Android Studio includes both source sets, corresponding to the following test types:</p>

<!-- more -->


<h3>Local unit tests</h3>

<p>Located at <em>module-name/src/test/java/</em>.
These tests run on the local JVM and do not have access to functional Android framework APIs.</p>

<h3>Instrumented tests</h3>

<p>Located at <em>module-name/src/androidTest/java/</em>.
These are all tests that must run on an Android hardware device or an Android emulator.</p>

<p>In the following, we will only focus on local unit test.</p>

<h2>Set Up Your Testing Environment</h2>

<p>In your app&rsquo;s top-level build.gradle file, you need to specify these libraries as dependencies:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> dependencies {
<span class="lineno">2</span>     // Required -- JUnit 4 framework
<span class="lineno">3</span>     testCompile &#39;junit:junit:4.12&#39;
<span class="lineno">4</span>     // Optional -- Mockito framework
<span class="lineno">5</span>     testCompile &#39;org.mockito:mockito-core:1.10.19&#39;
<span class="lineno">6</span> }</code></pre></div>


<h2>Create a Local Unit Test Class</h2>

<h3>Manualy create junit4 unit test</h3>

<p>Your local unit test class should be written as a JUnit 4 test class. <a href="http://junit.org/junit4/">JUnit</a> is the most popular and widely-used unit testing framework for Java. The latest version of this framework, JUnit 4, allows you to write tests in a cleaner and more flexible way than its predecessor versions. Unlike the previous approach to Android unit testing based on JUnit 3, with JUnit 4, you do not need to extend the junit.framework.TestCase class. You also do not need to prefix your test method name with the ‘test’ keyword, or use any classes in the junit.framework or junit.extensions package.</p>

<p>To create a basic JUnit 4 test class, create a Java class that contains one or more test methods. A test method begins with the @Test annotation and contains the code to exercise and verify a single functionality in the component that you want to test.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno"> 1</span> <span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="lineno"> 2</span> <span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
<span class="lineno"> 3</span> <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertFalse</span><span class="o">;</span>
<span class="lineno"> 4</span> <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailValidatorTest</span> <span class="o">{</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span>     <span class="nd">@Test</span>
<span class="lineno"> 9</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">emailValidator_CorrectEmailSimple_ReturnsTrue</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">10</span>         <span class="n">assertThat</span><span class="o">(</span><span class="n">EmailValidator</span><span class="o">.</span><span class="na">isValidEmail</span><span class="o">(</span><span class="s">&quot;name@email.com&quot;</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
<span class="lineno">11</span>     <span class="o">}</span>
<span class="lineno">12</span>     <span class="o">...</span>
<span class="lineno">13</span> <span class="o">}</span></code></pre></div>


<h3>Auto create junit4 unit test with the help of Android Studio</h3>

<p>Right click inside the class you are to test, and select <em>Go to -> Test</em> (Shift + Command + T), then select <em>create new test&hellip;</em>. You will see:</p>

<p><img src="http://hongchaozhang.github.io/images/auto_create_junit4_unit_test.png" alt="auto_create_junit4_unit_test.png" /></p>

<p>In the above window, select the test class name, the methods you want to test, and some other helper methods like <code>setUp</code> and <code>tearDown</code>.</p>

<p>Then fill out all the test cases.</p>

<h3>Some annotations</h3>

<table>
<thead>
<tr>
<th>Annotation </th>
<th> Meaning </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Test </td>
<td> for test cases </td>
<td></td>
</tr>
<tr>
<td>@Before </td>
<td> excute before every test case </td>
<td></td>
</tr>
<tr>
<td>@After </td>
<td> excute after every test case </td>
<td></td>
</tr>
<tr>
<td>@BeforeClass </td>
<td> static, excute only once, before the first test case begin </td>
<td></td>
</tr>
<tr>
<td>@AfterClass </td>
<td> see @BeforeClass </td>
<td></td>
</tr>
<tr>
<td>@Rule </td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<h2><code>Mock</code> and <code>Spy</code></h2>

<h4>Difference between mock and spy</h4>

<p><strong>Mock</strong>: Mock will wrap the Class of an Type, not from an actual instance. The mock simply creates a bare-bones shell instance of the Class. In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p><strong>Spy</strong>: Spy will wrap an existing instance. In this case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>For <code>mock</code>:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Stock</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="lineno">2</span> <span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">3</span> <span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getQuantity</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">4</span> <span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getValue</span><span class="o">()).</span><span class="na">thenCallRealMethod</span><span class="o">();</span>  <span class="c1">// Real implementation</span></code></pre></div>


<p>In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p>For <code>spy</code>:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="k">new</span> <span class="nf">Stock</span><span class="o">());</span>
<span class="lineno">2</span> <span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">3</span> <span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getQuantity</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">4</span> <span class="c1">// All other method call will use the real implementations</span></code></pre></div>


<p>In that case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>There is one important pitfall when you use <code>when(Object)</code> with spy like in the previous example. The real method will be called (because <code>stock.getPrice()</code> is evaluated before <code>when(..)</code> at runtime). This can be a problem if your method contains logic that should not be called. You can write the previous example like this:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="k">new</span> <span class="nf">Stock</span><span class="o">());</span>
<span class="lineno">2</span> <span class="n">doReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">stock</span><span class="o">).</span><span class="na">getPrice</span><span class="o">();</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">3</span> <span class="n">doReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">stock</span><span class="o">).</span><span class="na">getQuantity</span><span class="o">();</span>    <span class="c1">// Mock implementation</span>
<span class="lineno">4</span> <span class="c1">// All other method call will use the real implementations</span></code></pre></div>


<h2>Mock Android Dependencies</h2>

<p>To do.</p>

<h2>Use Hamcrest for Assertion</h2>

<p>Use <a href="https://github.com/hamcrest/hamcrest-junit">hamcrest</a> to make the code more readable.</p>

<p>Instead of using:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="s">&quot;the two values should be the same&quot;</span><span class="o">);</span>
<span class="lineno">2</span> <span class="n">assertNotNull</span><span class="o">(</span><span class="n">object</span><span class="o">);</span></code></pre></div>


<p>we can use:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno">1</span> <span class="n">assertThat</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;the two values should be the same&quot;</span><span class="o">));</span>
<span class="lineno">2</span> <span class="n">assertThat</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">NotNullValue</span><span class="o">()));</span></code></pre></div>


<h2>References</h2>

<p><a href="https://developer.android.com/training/testing/start/index.html">Getting Started with Testing</a>: official site from Google.</p>

<p><a href="http://stackoverflow.com/questions/14970516/use-mockito-to-mock-some-methods-but-not-others">Use Mockito to mock some methods but not others</a>讲解Mock和Spy的用法，简单易懂。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在UITableViewCell中异步加载图片]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/08/02/asynchronously-load-online-images-into-uitableviewcells/"/>
    <updated>2016-08-02T16:13:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/08/02/asynchronously-load-online-images-into-uitableviewcells</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>当我们在<code>UITableViewCell</code>中进行比较费时的工作（比如绘图，或者加载网络图片）的时候，通常会出现下面的问题：</p>

<!-- more -->


<ol>
<li>当<code>UITableViewCell</code>移出视图的时候，这个<code>UITableViewCell</code>对应的异步操作仍然在执行。这通常会造成系统资源浪费，还可能由于这个异步操作不知道返回到哪个<code>UITableViewCell</code>而导致<code>UITableView</code>一些诡异的行为。</li>
<li><code>UITableViewCell</code>通常是重复利用的实例，这就会导致当前<code>UITableViewCell</code>可能会加载之前出现在视图中但是现在不在视图中的<code>UITableViewCell</code>的内容，在你面前变换一下<code>UITableViewCell</code>里面的内容，这是我们都不想看到的。</li>
</ol>


<h2>解决</h2>

<p>2012年的WWDC中的<em>Session 211</em> <a href="https://developer.apple.com/videos/play/wwdc2012/211/">Building Concurrent User Interfaces on iOS</a>很好地讲解了如何在一个<code>UITableViewCell</code>里面做比较费时的事情（比如绘图，或者网络请求图片），而保持app流畅，我下面的代码和<a href="https://stavash.wordpress.com/2012/12/14/advanced-issues-asynchronous-uitableviewcell-content-loading-done-right/">Advanced issues: Asynchronous UITableViewCell content loading done right</a>这一篇文章都是根据这个session实现的。</p>

<p>解决上述两个问题的基本想法：当<code>tableView:cellForRowAtIndexPath:</code>被调用的时候，去网络请求<code>UITableViewCell</code>对应的图片。当请求成功时，判断当前的<code>UITableViewCell</code>是否仍然在视图中：如果在，将请求的图片设置到<code>UITableViewCell</code>中，否则，不设置。另外，当<code>UITableViewCell</code>移出视图的时候，要取消其对应的请求，防止对后续请求造成影响。</p>

<p><a href="https://developer.apple.com/library/ios/samplecode/LazyTableImages/Introduction/Intro.html">LazyTableImages: Populating UITableView content asynchronously</a>这个实现相对简单一点：这个实现通过<code>UIScrollViewDelegate</code>中的方法，保证在用户滚动<code>UITableView</code>和<code>UITableView</code>停止之前都停止<code>UITableViewCell</code>里面的更新，只有当<code>UITableView</code>静止的时候，才去更新当前视图中的所有<code>UITableViewCell</code>。而上面的实现则能保证在用户进行滚动的同时，请求并加载图片到正确的位置。</p>

<p>主要代码：</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="lineno"> 1</span> <span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span><span class="p">,</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span>     <span class="k">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
<span class="lineno"> 4</span>     <span class="k">var</span> <span class="n">rowIndexToOperationDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span><span class="bp">NSBlockOperation</span><span class="p">]()</span>
<span class="lineno"> 5</span>     <span class="k">let</span> <span class="nl">downloadImageOperationQueue</span><span class="p">:</span> <span class="bp">NSOperationQueue</span> <span class="o">=</span> <span class="p">{</span>
<span class="lineno"> 6</span>         <span class="k">var</span> <span class="n">queue</span> <span class="o">=</span> <span class="bp">NSOperationQueue</span><span class="p">()</span>
<span class="lineno"> 7</span>         <span class="n">queue</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;download image queue&quot;</span>
<span class="lineno"> 8</span>         <span class="n">queue</span><span class="p">.</span><span class="n">maxConcurrentOperationCount</span> <span class="o">=</span> <span class="mi">4</span>
<span class="lineno"> 9</span>         <span class="k">return</span> <span class="n">queue</span>
<span class="lineno">10</span>     <span class="p">}()</span>
<span class="lineno">11</span>     
<span class="lineno">12</span>     <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">13</span>         <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
<span class="lineno">14</span>         <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
<span class="lineno">15</span>         
<span class="lineno">16</span>         <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">100</span> <span class="p">{</span>
<span class="lineno">17</span>             <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;\(i)&quot;</span><span class="p">)</span>
<span class="lineno">18</span>         <span class="p">}</span>
<span class="lineno">19</span>         <span class="k">let</span> <span class="n">tableView</span> <span class="o">=</span> <span class="bp">UITableView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span>
<span class="lineno">20</span>         <span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span>
<span class="lineno">21</span>         <span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
<span class="lineno">22</span>         <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">tableView</span><span class="p">)</span>
<span class="lineno">23</span>     <span class="p">}</span>
<span class="lineno">24</span>     
<span class="lineno">25</span>     <span class="c1">// when table view disappears, cancel all operations</span>
<span class="lineno">26</span>     <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidDisappear</span><span class="p">(</span><span class="nl">animated</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">27</span>         <span class="n">downloadImageOperationQueue</span><span class="p">.</span><span class="n">cancelAllOperations</span><span class="p">()</span>
<span class="lineno">28</span>     <span class="p">}</span>
<span class="lineno">29</span>     
<span class="lineno">30</span>     <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
<span class="lineno">31</span>         <span class="k">return</span> <span class="mi">100</span>
<span class="lineno">32</span>     <span class="p">}</span>
<span class="lineno">33</span>     
<span class="lineno">34</span>     <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nl">section</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
<span class="lineno">35</span>         <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">count</span>
<span class="lineno">36</span>     <span class="p">}</span>
<span class="lineno">37</span>     
<span class="lineno">38</span>     <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
<span class="lineno">39</span>         <span class="k">var</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s">&quot;cell&quot;</span><span class="p">)</span>
<span class="lineno">40</span>         <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
<span class="lineno">41</span>             <span class="n">cell</span> <span class="o">=</span> <span class="bp">UITableViewCell</span><span class="p">(</span><span class="nl">style</span><span class="p">:</span> <span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="nl">reuseIdentifier</span><span class="p">:</span> <span class="s">&quot;cell&quot;</span><span class="p">)</span>
<span class="lineno">42</span>         <span class="p">}</span>
<span class="lineno">43</span>         
<span class="lineno">44</span>         <span class="n">cell</span><span class="o">!</span><span class="p">.</span><span class="n">textLabel</span><span class="o">!</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span>
<span class="lineno">45</span>         
<span class="lineno">46</span>         <span class="k">let</span> <span class="n">loadImageInfoCellOperation</span> <span class="o">=</span> <span class="bp">NSBlockOperation</span><span class="p">()</span>
<span class="lineno">47</span>         <span class="k">weak</span> <span class="k">var</span> <span class="n">weakLoadImageInfoCellOperation</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span>
<span class="lineno">48</span>         <span class="k">func</span> <span class="n">loadImageOperationBlock</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">49</span>             <span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="bp">NSData</span><span class="p">(</span><span class="nl">contentsOfURL</span><span class="p">:</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://dummyimage.com/100x100/222/fff.png&amp;text=&quot;</span><span class="o">+</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span><span class="o">!</span><span class="p">)</span>
<span class="lineno">50</span>             <span class="k">var</span> <span class="nl">imageIcon</span><span class="p">:</span><span class="bp">UIImage</span><span class="o">?</span>
<span class="lineno">51</span>             <span class="k">if</span> <span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="n">imageData</span> <span class="p">{</span>
<span class="lineno">52</span>                 <span class="n">imageIcon</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">imageData</span><span class="p">)</span>
<span class="lineno">53</span>             <span class="p">}</span>
<span class="lineno">54</span> 
<span class="lineno">55</span>             <span class="k">func</span> <span class="n">updateImageOperationBlock</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">56</span>                 <span class="k">if</span> <span class="k">let</span> <span class="n">operation</span> <span class="o">=</span> <span class="n">weakLoadImageInfoCellOperation</span> <span class="p">{</span>
<span class="lineno">57</span>                     <span class="k">if</span> <span class="n">operation</span><span class="p">.</span><span class="n">cancelled</span> <span class="p">{</span>
<span class="lineno">58</span>                         <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
<span class="lineno">59</span>                     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno">60</span>                         <span class="k">let</span> <span class="n">theCell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">cellForRowAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span>
<span class="lineno">61</span>                         <span class="n">theCell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="o">!</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">imageIcon</span>
<span class="lineno">62</span>                         <span class="n">theCell</span><span class="o">?</span><span class="p">.</span><span class="n">setNeedsLayout</span><span class="p">()</span>
<span class="lineno">63</span>                         <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
<span class="lineno">64</span>                     <span class="p">}</span>
<span class="lineno">65</span>                 <span class="p">}</span>
<span class="lineno">66</span>             <span class="p">}</span>
<span class="lineno">67</span>             <span class="bp">NSOperationQueue</span><span class="p">.</span><span class="n">mainQueue</span><span class="p">().</span><span class="n">addOperationWithBlock</span><span class="p">(</span><span class="n">updateImageOperationBlock</span><span class="p">)</span>
<span class="lineno">68</span>         <span class="p">}</span>
<span class="lineno">69</span>         <span class="n">loadImageInfoCellOperation</span><span class="p">.</span><span class="n">addExecutionBlock</span><span class="p">(</span><span class="n">loadImageOperationBlock</span><span class="p">)</span>
<span class="lineno">70</span>         
<span class="lineno">71</span>         <span class="n">rowIndexToOperationDictionary</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]]</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span>
<span class="lineno">72</span>         <span class="n">downloadImageOperationQueue</span><span class="p">.</span><span class="n">addOperation</span><span class="p">(</span><span class="n">loadImageInfoCellOperation</span><span class="p">)</span>
<span class="lineno">73</span>         <span class="n">cell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="o">!</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span>
<span class="lineno">74</span>         
<span class="lineno">75</span>         <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
<span class="lineno">76</span>     <span class="p">}</span>
<span class="lineno">77</span>     
<span class="lineno">78</span>     <span class="c1">// when cell is out of scene, cancel the operation</span>
<span class="lineno">79</span>     <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">didEndDisplayingCell</span> <span class="nl">cell</span><span class="p">:</span> <span class="bp">UITableViewCell</span><span class="p">,</span> <span class="n">forRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">80</span>         <span class="k">let</span> <span class="nl">loadImageInfoCellOperation</span><span class="p">:</span><span class="bp">NSBlockOperation</span><span class="o">?</span> <span class="o">=</span> <span class="n">rowIndexToOperationDictionary</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]]</span>
<span class="lineno">81</span>         <span class="k">if</span> <span class="k">let</span> <span class="n">op</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span> <span class="p">{</span>
<span class="lineno">82</span>             <span class="n">op</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>
<span class="lineno">83</span>             <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
<span class="lineno">84</span>         <span class="p">}</span>
<span class="lineno">85</span>         
<span class="lineno">86</span>     <span class="p">}</span>
<span class="lineno">87</span> 
<span class="lineno">88</span> <span class="p">}</span></code></pre></div>


<h3>其它问题</h3>

<ol>
<li><p>修改应用安全权限，确保能下载http资源。参考：<a href="http://stackoverflow.com/questions/30731785/how-do-i-load-an-http-url-with-app-transport-security-enabled-in-ios-9">How do I load an HTTP URL with App Transport Security enabled in iOS 9?</a></p></li>
<li><p>当设置的<code>UITableViewCell</code>中的图片的时候，需要调用一下<code>[cell setNeedsLayout]</code>确保其显示出来。否则，只有当你点击的时候图片才会更新出来。参考
<a href="http://stackoverflow.com/questions/9352638/cell-imageview-in-uitableview-doesnt-appear-until-selected">cell imageView in UITableView doesn&rsquo;t appear until selected</a>。</p></li>
</ol>


<h3>资源</h3>

<p>这是一个神奇的网站！可以在线定制图片颜色和内容，然后生成对应的url。参考：<a href="http://dummyimage.com/">Dynamic Dummy Image Generator</a>。所以才会有下面的效果，方便检查每个cell的图片是否正确：</p>

<p><img src="http://hongchaozhang.github.io/images/async_load_online_images_into_uitableviewcells.png" alt="async_load_online_images_into_uitableviewcells.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中Property和Method的可见性]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c/"/>
    <updated>2016-06-16T21:48:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>本来只想思考一下<em>Objective-C里Category和Inheritence中的Property和Method的可见性</em>，搜着搜着，主题有些变化，所以题目也改了。</p>

<p>这里只是一些来自参考博客的结论和自己测试得到的结论。</p>

<!-- more -->


<p>具体参考博客如下：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4869935/objective-c-private-vs-protected-vs-public">Objective-C - Private vs Protected vs Public</a></li>
<li><a href="http://stackoverflow.com/questions/12633627/expose-a-private-objective-c-method-or-property-to-subclasses">实现public、private和protected属性和方法</a></li>
<li><a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a></li>
<li><a href="http://bootstragram.com/blog/simulating-protected-modifier-with-objective-c/">Simulating protected properties and selectors in Objective-C</a></li>
</ul>


<p>自己的测试代码为：OCPlayground。</p>

<h2>结论</h2>

<h3>来自参考博客的结论</h3>

<ol>
<li>点操作(.)只和property有关和iVar没有关系。</li>
<li><code>-&gt;</code>操作只和iVar有关，和property无关。</li>
<li>ivar中的关键字<code>public</code>、<code>private</code>和<code>protected</code>只对ivar有效，表明的是ivar的可见性，默认<code>protected</code>。子类中想用继承来的ivar，需要使用->操作符，不能使用dot操作符（dot操作符只用于property）。实例中想用ivar，只能用具有<code>public</code>属性的ivar。</li>
</ol>


<h3>来自代码测试的结论</h3>

<h4>结论1</h4>

<p>We can use <code>@property</code> in Extension the same way as <em>.h</em> file of the class. Compiler can generate the setter and getter methods for us. But in Category, compiler will not generate the setter and getter methods for us, you need to implement them manually or by using <code>@dynamic</code> to tell the compiler that the setter and getter methods are implemented somewhere else.</p>

<p>The difference comes from the fact that instance variables can be added into Extension but not Category.</p>

<h4>结论2</h4>

<p>to define whether a category can use the extended class&rsquo;s property or method, just define whether the property or method is in one &ldquo;interface&rdquo; that the category can &ldquo;see&rdquo;.</p>

<h4>结论3</h4>

<p>visibility(<code>private</code>, <code>public</code>, <code>protected</code>) does not affect methods. methods are as good as public when visible to clients (and potential pitfalls/bugs when invisible to clients). instead, visibility affects instance variables.</p>

<h4>结论4</h4>

<p>The same priciple as Category: to define whether I can use a property or method (in super class), just define whether the property or method is in an &ldquo;@interface&rdquo; the context (where you are trying to use the property or method) can &ldquo;see&rdquo;.</p>

<p>One exception: <code>performSelector:</code> can run method that are not ready in compile time but ready in runtime. However there will be one warning from the compiler. You can dismiss the warning by declaring a method with the same name in the class in which you are coding, but will introduce another warning saying that &ldquo;Method definition for *** is not found&rdquo;.</p>

<h3>Protected method</h3>

<p>来自<a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a>的protected method的实现：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="c1">/////// SuperClass.h</span>
<span class="lineno"> 2</span> <span class="k">@interface</span> <span class="nc">SuperClass</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="k">@end</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="c1">/////// SuperClass.m</span>
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">SuperClass</span>
<span class="lineno"> 8</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">protectedMethod</span>
<span class="lineno"> 9</span> <span class="p">{}</span>
<span class="lineno">10</span> <span class="k">@end</span>
<span class="lineno">11</span> 
<span class="lineno">12</span> <span class="c1">/////// SubClass.h</span>
<span class="lineno">13</span> <span class="k">@interface</span> <span class="nc">SubClass</span> : <span class="nc">SuperClass</span>
<span class="lineno">14</span> <span class="k">@end</span>
<span class="lineno">15</span> 
<span class="lineno">16</span> <span class="c1">/////// SubClass.m</span>
<span class="lineno">17</span> <span class="k">@interface</span> <span class="nc">SubClass</span> <span class="nl">(Protected)</span>
<span class="lineno">18</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">protectedMethod</span> <span class="p">;</span>
<span class="lineno">19</span> <span class="k">@end</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="k">@implementation</span> <span class="nc">SubClass</span>
<span class="lineno">22</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">callerOfProtectedMethod</span>
<span class="lineno">23</span> <span class="p">{</span>
<span class="lineno">24</span>   <span class="p">[</span><span class="nb">self</span> <span class="n">protectedMethod</span><span class="p">]</span> <span class="p">;</span> <span class="c1">// this will not generate warning</span>
<span class="lineno">25</span> <span class="p">}</span> 
<span class="lineno">26</span> <span class="k">@end</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting in Xcode With HeaderDoc Tutorial]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial/"/>
    <updated>2016-04-19T10:50:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial">Documenting in Xcode with HeaderDoc Tutorial</a> 讲解的非常全面详细可操作。</p>

<p>补充一点：如果最终导出的html文件想转换成docx或者pdf文件，只需要用word打开，然后另存为你想要的格式即可，多数情况下，word可以处理好格式的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios MultiplePagesViewController Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage/"/>
    <updated>2016-03-27T16:58:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage</id>
    <content type="html"><![CDATA[<p>先上截图：</p>

<p><img src="http://hongchaozhang.github.io/images/multiple_pages_view_controller_demo.gif" alt="multiple_pages_view_controller_demo.gif" /></p>

<p>demo地址：<a href="https://github.com/hongchaozhang/MultiplePagesViewControllerDemo.git">MultiplePagesViewControllerDemo</a></p>

<!-- more -->


<h3>demo解释</h3>

<p>首先，创建<code>MultiplePagesViewController</code>的实例，并将其和其view加入到需要的view controller 中：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
<span class="lineno">2</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">addChildViewController</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">];</span></code></pre></div>


<p>其中，<code>self.multiplePagesViewController</code>对应的getter函数如下：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="n">MultiplePagesViewController</span><span class="o">*</span><span class="p">)</span><span class="nf">multiplePagesViewController</span> <span class="p">{</span>
<span class="lineno">2</span>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_multiplePagesViewController</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">3</span>         <span class="n">_multiplePagesViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MultiplePagesViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="lineno">4</span>         <span class="n">_multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
<span class="lineno">5</span>         <span class="n">_multiplePagesViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
<span class="lineno">6</span>     <span class="p">}</span>
<span class="lineno">7</span>     
<span class="lineno">8</span>     <span class="k">return</span> <span class="n">_multiplePagesViewController</span><span class="p">;</span>
<span class="lineno">9</span> <span class="p">}</span></code></pre></div>


<p>并且，在<code>viewDidLayoutSubviews</code>中重新调整view的大小，以解决转屏等问题：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLayoutSubviews</span> <span class="p">{</span>
<span class="lineno">2</span>     <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLayoutSubviews</span><span class="p">];</span>
<span class="lineno">3</span>     
<span class="lineno">4</span>     <span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
<span class="lineno">5</span> <span class="p">}</span></code></pre></div>


<p>然后，只需要将你的UIViewController的实例加入<code>self.multiplePagesViewController</code>就可以了：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addDefaultPageViewControllers</span> <span class="p">{</span>
<span class="lineno">2</span>     <span class="bp">NSInteger</span> <span class="n">vcCount</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="lineno">3</span>     <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vcCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">4</span>         <span class="n">SampleViewController</span> <span class="o">*</span><span class="n">svc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithText</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">]];</span>
<span class="lineno">5</span>         <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span> <span class="nl">addViewController</span><span class="p">:</span><span class="n">svc</span><span class="p">];</span>
<span class="lineno">6</span>     <span class="p">}</span>
<span class="lineno">7</span> <span class="p">}</span></code></pre></div>


<p><code>MultiplePagesViewController</code>主要的两个接口如下：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="cm">/**</span>
<span class="lineno"> 2</span> <span class="cm"> *  add a new &lt;UIViewController*&gt; instance</span>
<span class="lineno"> 3</span> <span class="cm"> *</span>
<span class="lineno"> 4</span> <span class="cm"> *  @param viewController</span>
<span class="lineno"> 5</span> <span class="cm"> */</span>
<span class="lineno"> 6</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addViewController:</span><span class="p">(</span><span class="bp">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="nv">viewController</span><span class="p">;</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span> <span class="cm">/**</span>
<span class="lineno"> 9</span> <span class="cm"> *  remove an existing view controller by index</span>
<span class="lineno">10</span> <span class="cm"> *</span>
<span class="lineno">11</span> <span class="cm"> *  @param viewControllerIndex</span>
<span class="lineno">12</span> <span class="cm"> */</span>
<span class="lineno">13</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeViewController:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">viewControllerIndex</span><span class="p">;</span></code></pre></div>


<p>另外，可以在<code>MultiplePagesViewController</code>的父view controller中实现下面接口，当切换page的时候做些其它事情，比如更新view controller的title信息等。</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="k">@protocol</span> <span class="nc">MultiplePagesViewControllerDelegate</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pageChangedTo</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">pageIndex</span><span class="p">;</span>
<span class="lineno">4</span> 
<span class="lineno">5</span> <span class="k">@end</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用node-xlsx进行excel文件的读写]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/"/>
    <updated>2016-03-04T14:54:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module</id>
    <content type="html"><![CDATA[<h3>解析excel文件</h3>

<p>在我的应用中需要对excel文件内容进行搜索，所以需要一个解析excel文件的插件。</p>

<p><a href="https://www.npmjs.com/package/node-xlsx">node-xlsx</a>插件可以让我们解析、修改、新建excel文件。</p>

<!-- more -->


<p>安装到所在文件夹：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">npm install excel node-xlsx</code></pre></div>


<p>或者安装为全局应用：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g excel node-xlsx</code></pre></div>


<p>然后就可以这样解析excel文件：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno">1</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno">2</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/myFile.xlsx&#39;</span><span class="p">);</span> <span class="c1">// parses a file</span></code></pre></div>


<p>下面是一段样例代码：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="c1">// Include modules.</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="c1">// read xlsx file and analyse</span>
<span class="lineno"> 5</span> <span class="kd">var</span> <span class="nx">excelObj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;fileName.xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">sheet</span> <span class="k">in</span> <span class="nx">excelObj</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 8</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">sheet</span> <span class="o">!==</span> <span class="s1">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">excelObj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">sheet</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// sheet is &#39;0&#39;, &#39;1&#39;, ...</span>
<span class="lineno"> 9</span>      <span class="kd">var</span> <span class="nx">sheetData</span> <span class="o">=</span> <span class="nx">excelObj</span><span class="p">[</span><span class="nx">sheet</span><span class="p">].</span><span class="nx">data</span><span class="p">;</span> <span class="c1">// data inside a sheet, which is an two-dimention array</span>
<span class="lineno">10</span>      <span class="kd">var</span> <span class="nx">rowCount</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="lineno">11</span>      <span class="nx">activityCountDic</span><span class="p">[</span><span class="nx">sheet</span><span class="p">]</span> <span class="o">=</span> <span class="nx">rowCount</span><span class="p">;</span>
<span class="lineno">12</span>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rowCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">13</span>          <span class="kd">var</span> <span class="nx">rowData</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// data inside one row, which is an one-dimention array</span>
<span class="lineno">14</span>          <span class="kd">var</span> <span class="nx">columnCount</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="lineno">15</span>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columnCount</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">16</span>              <span class="kd">var</span> <span class="nx">cellData</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// data in j column of the given row</span>
<span class="lineno">17</span>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cellData</span><span class="p">);</span>
<span class="lineno">18</span>          <span class="p">}</span>
<span class="lineno">19</span>      <span class="p">}</span>
<span class="lineno">20</span>  <span class="p">}</span>
<span class="lineno">21</span> <span class="p">}</span></code></pre></div>


<h3>写入excel文件</h3>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="c1">// Include modules.</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 3</span> <span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="c1">// 写入excel之后是一个一行两列的表格</span>
<span class="lineno"> 6</span> <span class="kd">var</span> <span class="nx">data1</span> <span class="o">=</span> <span class="p">[</span>
<span class="lineno"> 7</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="lineno"> 8</span> <span class="p">];</span>
<span class="lineno"> 9</span> 
<span class="lineno">10</span> <span class="c1">// 写入excel之后是一个三行两列的表格</span>
<span class="lineno">11</span> <span class="kd">var</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">[</span>
<span class="lineno">12</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span> 
<span class="lineno">13</span> <span class="p">[</span><span class="s1">&#39;zhang san&#39;</span><span class="p">,</span> <span class="s1">&#39;10&#39;</span><span class="p">],</span> 
<span class="lineno">14</span> <span class="p">[</span><span class="s1">&#39;li si&#39;</span><span class="p">,</span> <span class="s1">&#39;11&#39;</span><span class="p">]</span>
<span class="lineno">15</span> <span class="p">];</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">build</span><span class="p">([</span>
<span class="lineno">18</span>  <span class="p">{</span>
<span class="lineno">19</span>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet1&#39;</span><span class="p">,</span>
<span class="lineno">20</span>      <span class="nx">data</span><span class="o">:</span><span class="nx">data1</span>
<span class="lineno">21</span>  <span class="p">},</span> <span class="p">{</span>
<span class="lineno">22</span>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet2&#39;</span><span class="p">,</span>
<span class="lineno">23</span>      <span class="nx">data</span><span class="o">:</span><span class="nx">data2</span>
<span class="lineno">24</span>  <span class="p">}</span>
<span class="lineno">25</span>  <span class="p">]);</span>
<span class="lineno">26</span> 
<span class="lineno">27</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s1">&#39;book.xlsx&#39;</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flag&#39;</span><span class="o">:</span><span class="s1">&#39;w&#39;</span><span class="p">});</span> <span class="c1">// 如果文件存在，覆盖</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios内存管理——调试]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging/"/>
    <updated>2016-02-24T20:51:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20160222/15333.html">iOS/OS X 内存管理(二)：借助工具解决内存问题</a>讲了一些调试技巧，包括：</p>

<!-- more -->


<ul>
<li>启用Zombie Object进行悬挂指针的检测。</li>
<li>应用<em>Product -> Analysis</em>进行内存泄露的初步检测。</li>
<li>应用Leak Instrument进行内存泄露查找。</li>
<li>在以上方法不奏效的情况下，通过查看<code>dealloc</code>是否调用查看某个class是否泄露的问题。</li>
</ul>


<p>补充一下：在<em>Leak</em>页面可以打开<em>Cycles &amp; Roots</em>用图的方式查看ratain cycle的问题，截图如下：</p>

<p><img src="http://hongchaozhang.github.io/images/xcode_leak_instrument_cycles_and_roots_view.png" alt="xcode_leak_instrument_cycles_and_roots_view" /></p>

<p>上文没有介绍的，也是比较麻烦的，就是leak instrument没法查出的内存泄露。最近在调试一个这样的问题，写点心得。</p>

<h3>行动前的准备</h3>

<h4>认识工具</h4>

<p>参看<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/LeaksInstrument/LeaksInstrument.html">Leaks Instrument</a>和<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/AllocationsInstrument/AllocationsInstrument.html#//apple_ref/doc/uid/TP40011355-CH40-SW1">Allocation Instrument</a>的官方文档。</p>

<p>补充：</p>

<ul>
<li>Leak Instrument有<em>Cycles &amp; Roots</em>界面，见上。</li>
<li>Persistent Bytes和#Persistent。#Persistent是object的数量，也就是allocation的次数，而Persistent Bytes是具体的内存大小。<strong>#Persistent是我们需要关注的，内存有没有泄露也是看这个值是不是只增不减。</strong></li>
<li>Allocation Instrument进行profile的时候，为<em>Launch Configuration for Heap Allocations</em>勾选<em>Record reference counts</em>。</li>
</ul>


<h4>编译参数设置</h4>

<p>为了保证看到代码，而不是一堆无意义的内存地址，参考<a href="http://hongchaozhang.github.io/blog/2015/08/17/the-dSYM-file-in-ios-project/">The .dSYM File in Ios Project</a>进行xcode的设置。</p>

<h3>如果<code>dealloc</code>没有被调用</h3>

<p>通过Allocation Instrument，我们可以得到内存使用情况。为了清楚地看出是哪部分最可能是内存泄露，可以使用<em>Call Trees</em>视图，然后在右边：</p>

<ul>
<li>勾选<em>Hide System Libraries</em>，排除系统影响。</li>
<li>勾选<em>Invert Call Tree</em>，使占用内存最多的分支在最前面。</li>
</ul>


<p>通过以上方法，可以大概确定是哪部分内存泄露。然后看看该class是不是被<code>dealloc</code>了。</p>

<ul>
<li>如果<code>dealloc</code>了，那不是本文要解决的问题。</li>
<li>如果<code>dealloc</code>没有调用到，继续往下看。</li>
</ul>


<h4>Retain Cycle导致<code>dealloc</code>没有被调用</h4>

<p>在ARC下，<code>dealloc</code>不能被调用，一般是因为存在Retain Cycle，而导致Retain Cycle的情况可能是下面几种可能(参考<a href="http://kkoval.blogspot.com/2014/03/ios-retain-cycle-in-arc.html">iOS Retain Cycle in ARC</a>和<a href="http://stackoverflow.com/questions/9219030/dealloc-not-being-called-on-arc-app">Dealloc not being called on ARC app</a>):</p>

<h5>1. Blocks</h5>

<p>并不是所有在block中引用<code>self</code>都会带来retain cycle，比如下面的代码就不会有内存泄露：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSelfInCocoaBlocks</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="bp">NSArray</span> <span class="o">*</span><span class="n">cats</span> <span class="o">=</span> <span class="l">@[</span><span class="s">@&quot;Smily&quot;</span><span class="p">,</span> <span class="s">@&quot;Garfild&quot;</span><span class="p">,</span> <span class="s">@&quot;Other cat&quot;</span><span class="l">]</span><span class="p">;</span>
<span class="lineno">4</span>     <span class="p">[</span><span class="n">cats</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">cat</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="n">cat</span><span class="p">];</span>
<span class="lineno">6</span>     <span class="p">}];</span>
<span class="lineno">7</span> <span class="p">}</span></code></pre></div>


<p>因为在上面的代码中，block ratain了self，但是self中没有retain这个block。只有当block中引用了self，并且self又以某种方式（比如用一个具有strong属性的Property指向该block，或者将该block加入了self的一个具有strong属性的array中）强引用了该block，才会引起内存泄露，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSelfInBlock</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="nb">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">4</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="s">@&quot;Fat Cat&quot;</span><span class="p">];</span>
<span class="lineno">5</span>     <span class="p">};</span>
<span class="lineno">6</span> <span class="p">}</span></code></pre></div>


<p>有时候即使没有直接引用self，也可能导致self被retain，这叫做“implicit retain”。一种可能的情况就是在block中引用了self的实例变量，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testHiddenSelfInCocoaBlocks</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="bp">NSArray</span> <span class="o">*</span><span class="n">cats</span> <span class="o">=</span> <span class="l">@[</span><span class="s">@&quot;Smily&quot;</span><span class="p">,</span> <span class="s">@&quot;Garfild&quot;</span><span class="p">,</span> <span class="s">@&quot;Other cat&quot;</span><span class="l">]</span><span class="p">;</span>
<span class="lineno">4</span>     <span class="p">[</span><span class="n">cats</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">cat</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="n">_aCat</span> <span class="o">=</span> <span class="n">cat</span><span class="p">;</span>
<span class="lineno">6</span>         <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
<span class="lineno">7</span>     <span class="p">}];</span>
<span class="lineno">8</span> <span class="p">}</span></code></pre></div>


<p>这段code在block中引用了self的实例变量<code>_aCat</code>。</p>

<p>为了避免implicit retain，可以在xcode的build setting中打开<em>implicit retain of &lsquo;self&rsquo; within blocks</em>，xcode编译器会给出警告。</p>

<h5>2. NSTimer</h5>

<p>如果在view controller中创建了NSTimer，在消失view controller的时候需要调用<code>invalidate</code>，否则会产生ratain cycle。</p>

<h5>3. Observers/NSNotificationCenter</h5>

<p>当我们在NSNotificationCenter的block中引用self的时候，也会产生retain cycle，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserverForName</span><span class="p">:</span><span class="s">@&quot;not&quot;</span>
<span class="lineno">2</span>                                                       <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span>
<span class="lineno">3</span>                                                        <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span>
<span class="lineno">4</span>                                                   <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="s">@&quot;Noty cat&quot;</span><span class="p">];</span>
<span class="lineno">6</span>     <span class="p">}];</span></code></pre></div>


<p>在不用的时候需要将self从NSNotificationCenter中移除。</p>

<h5>4. Array contained reference</h5>

<p>比如在view controller中将self放在了一个array中，而这个array在view controller消失的时候不会被释放，view controller的<code>dealloc</code>就不会被调用。</p>

<h5>5. Delegate</h5>

<p>delegate的属性应该为weak。</p>

<h4>dealloc没被调用的调试</h4>

<p>调试dealloc没有被调用的情况，参考<a href="http://stackoverflow.com/questions/14890402/instruments-allocations-track-alloc-and-dealloc-of-objects-of-user-defined-class/14891837#14891837">Instruments Allocations track alloc and dealloc of objects of user defined classes</a>，可以看到对应实例在整个生命周期中发生的所有和内存有关的事件，包括malloc，ratain，release等和每次事件的call stack。注意其中的两项设置：</p>

<ul>
<li>勾选Record reference counts，记录retain，release和autorelease事件。</li>
<li>为Allocation Lifespan选择All Objects Created，如果你想看到已经被dealloc的实例，这个可以不选。</li>
<li>在<em>Allocation List -> All Allocations</em> 中可以搜索自己感兴趣的class。</li>
<li>在reference count页面，注意使用<em>All</em>、<em>uppair</em>等进行过滤。</li>
</ul>


<h3>关于ARC下的retainCount</h3>

<p>在ARC之前，我们可以使用<code>retainCount</code>得到一个Object被retain的次数。
引入ARC之后，这个方法不能在code中使用，可以使用下面的方法获得retain的次数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Retain count is %ld&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">myObject</span><span class="p">));</span></code></pre></div>


<p>或者通过设置断点，在调试窗口输入如下命令：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">po object.retainCount</code></pre></div>


<blockquote><p> <strong>我们什么时候使用retainCount？</strong></p>

<p><strong>Never！</strong></p></blockquote>

<p>参考 <a href="http://stackoverflow.com/questions/4636146/when-to-use-retaincount">When to use -retainCount?</a>。
但是偶尔在调试的时候用一下，对于一些内存管理概念的理解还是有好处的，仅此而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios内存管理——理论]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/22/ios-memory-management-theory/"/>
    <updated>2016-02-22T20:51:30+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/22/ios-memory-management-theory</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20160219/15330.html">iOS/OS X内存管理(一)：基本概念与原理</a>对内存管理的概念讲的很清楚。</p>

<!-- more -->


<p>摘抄一些重要信息。</p>

<p>assign对应就是__unsafe_unretained，它跟__weak相似，被它修饰的变量都不持有对象的所有权，但不相同的是，当变量指向的对象的RC为0时，变量并不设置为nil，而是继续保存对象的地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的动画——UIView]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/18/uiview-animation-in-ios/"/>
    <updated>2016-02-18T11:36:47+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/18/uiview-animation-in-ios</id>
    <content type="html"><![CDATA[<p>官方文档<a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/AnimatingViews/AnimatingViews.html">Animations</a>详细讲述了UIView的animations，
<a href="http://www.cocoachina.com/ios/20160215/15262.html">iOS 开发之动画篇 - 从 UIView 动画说起</a>也阐述了用UIView进行动画的基本用法。</p>

<!-- more -->


<p>总结摘抄一些要点。</p>

<h2>Animate Property Changes in a View</h2>

<h3>Basic Usage</h3>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">2</span>     <span class="n">firstView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno">3</span>     <span class="n">secondView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="lineno">4</span> <span class="p">}];</span></code></pre></div>


<blockquote><p>NOTE: When this code executes, the specified animations are started immediately on another thread so as to avoid blocking the current thread or your application’s main thread.</p></blockquote>

<h3>Completion Handler</h3>

<p>Usage of Completion Handler</p>

<ul>
<li>Use a completion handler to signal your application that a specific animation has finished.</li>
<li>Completion handlers are also the way to link separate animations together.</li>
</ul>


<p>Sample code：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">showHideView:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="lineno"> 2</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="c1">// Fade out the view right away</span>
<span class="lineno"> 4</span>     <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 5</span>         <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span>
<span class="lineno"> 6</span>         <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptionCurveEaseIn</span>
<span class="lineno"> 7</span>         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno"> 8</span>              <span class="n">thirdView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno"> 9</span>         <span class="p">}</span>
<span class="lineno">10</span>         <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
<span class="lineno">11</span>             <span class="c1">// Wait one second and then fade in the view</span>
<span class="lineno">12</span>             <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno">13</span>                  <span class="nl">delay</span><span class="p">:</span> <span class="mf">1.0</span>
<span class="lineno">14</span>                  <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveEaseOut</span>
<span class="lineno">15</span>                  <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">16</span>                     <span class="n">thirdView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="lineno">17</span>                  <span class="p">}</span>
<span class="lineno">18</span>                  <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="lineno">19</span>         <span class="p">}];</span>
<span class="lineno">20</span> <span class="p">}</span></code></pre></div>


<h3>Nesting Animation Blocks</h3>

<p>Nested animations are started at the same time as any parent animations.</p>

<p>Sample code:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 2</span>         <span class="nl">delay</span><span class="p">:</span> <span class="mf">1.0</span>
<span class="lineno"> 3</span>         <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveEaseOut</span>
<span class="lineno"> 4</span>         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno"> 5</span>             <span class="n">aView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno"> 6</span>             <span class="c1">// Create a nested animation that has a different</span>
<span class="lineno"> 7</span>             <span class="c1">// duration, timing curve, and configuration.</span>
<span class="lineno"> 8</span>             <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.2</span>
<span class="lineno"> 9</span>                  <span class="nl">delay</span><span class="p">:</span><span class="mf">0.0</span>
<span class="lineno">10</span>                  <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptionOverrideInheritedCurve</span> <span class="o">|</span>
<span class="lineno">11</span>                           <span class="n">UIViewAnimationOptionCurveLinear</span> <span class="o">|</span>
<span class="lineno">12</span>                           <span class="n">UIViewAnimationOptionOverrideInheritedDuration</span> <span class="o">|</span>
<span class="lineno">13</span>                           <span class="n">UIViewAnimationOptionRepeat</span> <span class="o">|</span>
<span class="lineno">14</span>                           <span class="n">UIViewAnimationOptionAutoreverse</span>
<span class="lineno">15</span>                  <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">16</span>                       <span class="p">[</span><span class="bp">UIView</span> <span class="nl">setAnimationRepeatCount</span><span class="p">:</span><span class="mf">2.5</span><span class="p">];</span>
<span class="lineno">17</span>                       <span class="n">anotherView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno">18</span>                  <span class="p">}</span>
<span class="lineno">19</span>                  <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="lineno">20</span>         <span class="p">}</span>
<span class="lineno">21</span>         <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span></code></pre></div>


<h2>Creating Animated Transitions Between Views</h2>

<p>View transitions help you hide sudden changes associated with adding, removing, hiding, or showing views in your view hierarchy. You use view transitions to implement the following types of changes:</p>

<ul>
<li><strong>Change the visible subviews of an existing view.</strong> You typically choose this option when you want to make relatively small changes to an existing view.</li>
<li><strong>Replace one view in your view hierarchy with a different view.</strong> You typically choose this option when you want to replace a view hierarchy that spans all or most of the screen.</li>
</ul>


<blockquote><p><strong>Note:</strong> View transitions should not be confused with transitions initiated by view controllers, such as the presentation of modal view controllers or the pushing of new view controllers onto a navigation stack. View transitions affect the view hierarchy only, whereas view-controller transitions change the active view controller as well. Thus, for view transitions, the view controller that was active when you initiated the transition remains active when the transition finishes.</p></blockquote>

<p>Sampel code for replacing a view with a different view:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">toggleMainViews:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="p">[</span><span class="bp">UIView</span> <span class="nl">transitionFromView</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">primaryView</span> <span class="p">:</span> <span class="n">secondaryView</span><span class="p">)</span>
<span class="lineno"> 3</span>         <span class="nl">toView</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">secondaryView</span> <span class="p">:</span> <span class="n">primaryView</span><span class="p">)</span>
<span class="lineno"> 4</span>         <span class="nl">duration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 5</span>         <span class="nl">options</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">UIViewAnimationOptionTransitionFlipFromRight</span> <span class="p">:</span>
<span class="lineno"> 6</span>                     <span class="n">UIViewAnimationOptionTransitionFlipFromLeft</span><span class="p">)</span>
<span class="lineno"> 7</span>         <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 8</span>             <span class="k">if</span> <span class="p">(</span><span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 9</span>                 <span class="n">displayingPrimary</span> <span class="o">=</span> <span class="o">!</span><span class="n">displayingPrimary</span><span class="p">;</span>
<span class="lineno">10</span>             <span class="p">}</span>
<span class="lineno">11</span>     <span class="p">}];</span>
<span class="lineno">12</span> <span class="p">}</span></code></pre></div>


<blockquote><p><strong>Note:</strong> In addition to swapping out views, your view controller code needs to manage the loading and unloading of both the primary and secondary views.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[火星坐标导致iOS系统下高德地图定位不准]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system/"/>
    <updated>2016-01-29T13:47:42+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system</id>
    <content type="html"><![CDATA[<p>首先感慨一下：神奇的国度，神奇的坐标！</p>

<h3>火星坐标系统介绍</h3>

<!-- more -->


<p>我们平时用到的地球坐标系统，叫做WGS-84坐标，这个是国际通用的“准确”的坐标系统。国家保密插件，其实就是对真实坐标系统进行人为的加偏处理，即为GCJ-02坐标，戏称“火星坐标”。于是，我们有了下面的东西：</p>

<ul>
<li>地球坐标：指WGS84坐标系统</li>
<li>火星坐标：指使用国家保密插件人为偏移后的坐标</li>
<li>地球地图：指与地球坐标对应的客观真实的地图</li>
<li>火星地图：指经过加密偏移后的，与火星坐标对应的地图</li>
</ul>


<p>而且，国家龟腚： <strong>国内出版的各种地图系统（包括电子形式），必须至少采用GCJ-02对地理位置进行首次加密。</strong>于是，</p>

<ul>
<li>谷歌地图的大陆地图、高德国内地图采用GCJ-02对地图进行加偏。</li>
<li>百度地图更是进一步发挥了天朝特色，除了GCJ-02加偏，自己又在此基础上继续进行加偏，相应的坐标称为BD-09坐标。</li>
</ul>


<p>也就是说，我们平时用到的地图应用都是采用的虚假的坐标，虚假的地图。</p>

<h3>各地图厂商使用的坐标系</h3>

<ul>
<li>火星坐标

<ul>
<li>iOS 地图</li>
<li>Gogole地图</li>
<li>搜搜、阿里云、高德地图</li>
</ul>
</li>
<li>地球坐标

<ul>
<li>Google 卫星地图（国外地图应该都是……）</li>
</ul>
</li>
<li>百度坐标

<ul>
<li>百度地图</li>
</ul>
</li>
</ul>


<h3>各坐标系之间的转换</h3>

<p>为了在地图应用开发中准确地定位，需要将准确的WGS-84坐标转换成需要的坐标。在加偏算法不公开的的情况下，各方大神各显神通，有了下面几种方案：</p>

<h4>数据库</h4>

<p>可以列出WGC-84坐标和GCJ-02坐标系统的对应关系，放在数据库中供检索。数据库方案参考：<a href="http://code4app.com/ios/GPS%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/51c2564f6803fa9a29000000">GPS火星坐标转换</a>。</p>

<p>也有一些网站提供转换查询服务，比如<a href="http://www.zdoz.net/">ZDOZ.net</a>，和 <a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition">坐标转换API - Web服务API</a>。</p>

<h4>近似解析式</h4>

<p>逆向求解近似解析式，不需要大的数据库，不需要进行网络请求，而且精度在10米以内，基本能满足日常需求。</p>

<p>这样的实现很多，具体实现可以参考Objective-C的一种实现：<a href="https://github.com/JackZhouCn/JZLocationConverter">JZLocationConverter</a>。</p>

<h3>iOS系统中坐标系的使用</h3>

<p>iOS（9.0）中的关于地图和位置的接口中有些用的是WGS-84坐标，有的使用的是GCJ-02坐标。比如定位用户位置的时候我们使用的两种方法：</p>

<ul>
<li>设置MKMapView中的<code>showsUserLocation = YES</code>，然后在<code>- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation</code>方法中获得的坐标是GCJ-02坐标。</li>
<li>通过CLLocationManager的<code>startUpdatingLocation</code>方法，并在<code>- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations</code>方法中获得的坐标是WGS-84坐标。</li>
</ul>


<p>其实在使用iOS的地图应用的时候，只要使用的是非大陆的ip地址（国外用户或者国内用户通过国外代理），使用的都将是准确的WGS-84坐标和准确的地图。但是当在大陆地区使用是，苹果使用的是高德的地图服务，得到的坐标也都是GCJ-02坐标。但是有些接口没有本地化，仍然使用WGS-84坐标。</p>

<p>下面具体说一下在下面三个接口中经纬度坐标的使用，下面的内容都是针对iOS中高德地图的使用。</p>

<h4>MKMapView</h4>

<p>通过加到MKMapView中的UIGestureRecognizer的<code>locationInVieww:</code>获得手势在地图上的CGPoint，然后通过MKMapView的<code>convertPoint:toCoordinateFromView:</code>方法得到的经纬度坐标是GCJ-02坐标，使用的也是高德地图，所以在<code>addAnnotation:</code>等操作的时候，不用进行坐标转换。</p>

<h3>CLLocationManager</h3>

<p>即使使用的是高德地图，CLLocationManager返回的坐标也是WGS-84坐标，所以在定位用户位置的时候是有偏差的，需要我们进行坐标转换。</p>

<h3>CLGeoCoder</h3>

<p>在进行经纬度坐标和地址描述转换的时候，我们需要CLGeoCoder中的转换方法：</p>

<ul>
<li><p><code>- (void)geocodeAddressString:(NSString *)addressString completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法没有问题，输入地址的描述，返回该地址对应的GCJ-02坐标（高德地图）。</p></li>
<li><p><code>- (void)reverseGeocodeLocation:(CLLocation *)location completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法有问题：当我们直接将得到的GCJ-02坐标传给该接口之后，该接口不能得到正确的地址，而且返回的坐标和输入的坐标有较大的差距，经试验，该返回的坐标是输入坐标经过<code>wgs84ToGcj02:</code>转换之后的坐标，所以，解决方案如下：
  将得到的坐标先经过<code>gcj02ToWgs84</code>转换成WGS-84坐标，传给接口，返回正确的地址，然后将地址坐标通过<code>wgs84ToGcj02</code>转换之后进行使用。</p></li>
</ul>


<h3>其它系统中用的坐标系</h3>

<p>最近在抓取<a href="http://www.hzbus.cn">hzbus.cn</a>网站中的一些数据时发现：该坐标不是我们前面提到的各种坐标。原来该网站使用的是<a href="http://www.mountor.cn/rjcp_377.html">蒙特的GIS引擎</a>。通过试验各种接口，发现其坐标应该是连续<strong>两次</strong>将WGS-84坐标进行<code>wgs84ToGcj02</code>转换得到的，<strong>两次</strong>。所以将其坐标经过<code>gcj02ToWgs84</code>转换成真正的GCJ-02坐标在iOS的高德地图中使用。</p>

<h3>参考</h3>

<ul>
<li>这一篇文章的结论和我的结论一致，（除了GeoCoding外）：<a href="http://blog.it985.com/7728.html">iOS 火星坐标相关整理及解决方案汇总</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775121">火星坐标系统简介</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775267">google map 的地图偏移 火星坐标</a>
*<a href="http://blog.csdn.net/coolypf/article/details/8686588">地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775183">WGS84坐标转火星坐标（iOS篇）</a></li>
<li>各种坐标体系之间的转换，参考：<a href="http://blog.csdn.net/wildboy2001/article/details/12031351">WGS84、Web墨卡托、火星坐标、百度坐标互转</a></li>
<li><a href="http://blog.csdn.net/swingpyzf/article/details/16972351">IOS LocationManager定位国内偏移，火星坐标(GCJ-02)解决方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用CocoaPods管理iOS的依赖库关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control/"/>
    <updated>2016-01-19T13:47:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control</id>
    <content type="html"><![CDATA[<p>就像Java有Maven，nodejs有npm一样，ios也有自己的库依赖管理工具：CocoaPods。</p>

<!-- more -->


<p>参考<a href="http://www.cnblogs.com/iyuanxiaojun/p/4465850.html">用CocoaPods做iOS程序的依赖管理</a>。</p>

<h3>安装与设置</h3>

<p>Mac下使用自带的ruby的gem命令进行安装：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">sudo gem install cocoapods</code></pre></div>


<p>第一次使用之前需要设置CocoaPods：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">pod setup</code></pre></div>


<p>此时需要耐心等待，因为CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有80M左右，比较慢。</p>

<blockquote><p>如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度。</p></blockquote>

<h3>使用</h3>

<h4>安装依赖库</h4>

<p>使用时需要新建Podfile文件，格式如下：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> platform :ios
<span class="lineno">2</span> pod &#39;JSONKit&#39;,       &#39;~&gt; 1.4&#39;
<span class="lineno">3</span> pod &#39;Reachability&#39;,  &#39;~&gt; 3.0.0&#39;
<span class="lineno">4</span> pod &#39;ASIHTTPRequest&#39;
<span class="lineno">5</span> pod &#39;RegexKitLite&#39;</code></pre></div>


<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> cd &quot;your project home&quot;
<span class="lineno">2</span> pod install</code></pre></div>


<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下两点即可：</p>

<ul>
<li>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次pod update命令。</li>
</ul>


<h4>搜索依赖库</h4>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">pod search</code></pre></div>


<p>命令进行查找。</p>

<h3>问题</h3>

<h4>1. required a higher minimum deployment target</h4>

<p>当我在使用<em><a href="https://github.com/itsbonczek/kingpin">kingpin</a></em>第三方库的时候，出现了下面的问题：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">Specs satisfying the `kingpin` dependency were found, but they required a higher minimum deployment target.</code></pre></div>


<p>通过修改Podfile的第一行：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios</code></pre></div>


<p>为</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios, &#39;7.0&#39;</code></pre></div>


<p>解决。</p>

<p>如果问题仍然存在，将'7.0'改成'8.0'或者'9.0'，直到没有错误。</p>

<h4>2. 在Objective-C中引用swift写的CocoaPod库</h4>

<p>当我在用<em><a href="https://github.com/danielgindi/ios-charts">ios-charts</a></em>库的时候，首先出现了问题1。解决问题1之后，又出现了下面的问题：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">[!] Pods written in Swift can only be integrated as frameworks; add `use_frameworks!` to your Podfile or target to opt into using it. The Swift Pod being used is: Charts</code></pre></div>


<p>于是，将Podfile从</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios, &#39;9.0&#39;
pod &#39;Charts&#39;</code></pre></div>


<p>改成</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios, &#39;9.0&#39;
use_frameworks!
pod &#39;Charts&#39;</code></pre></div>


<p>解决了这个问题。接着就是如何在Objective-C的project中使用这个swift库了。</p>

<p>首先是官方文档<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_77">Swift and Objective-C in the Same Project</a>，有点看不懂。</p>

<p>一些人说的：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">@</span><span class="n">import</span> <span class="n">Charts</span><span class="p">;</span></code></pre></div>


<p>会报错。</p>

<p>很庆幸，StackOverflow上有人遇到了相同的问题：<a href="http://stackoverflow.com/questions/33931517/module-not-found-error-when-importing-swift-pod-into-objective-c-project">Module not found error when importing Swift pod into Objective-C project</a>，在需要用到Charts库中的类的文件中，加入下面代码：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="cp">#import &quot;Charts-Swift.h&quot;</span></code></pre></div>


<p>另外，注意，在Storyboard中使用库中类的时候，在<em>Module</em>框中填上<em>Charts</em>，如下：</p>

<p><img src="http://hongchaozhang.github.io/images/using_lib_class_in_storyboard.jpg" alt="using_lib_class_in_storyboard" /></p>

<p>原理参考：<a href="https://github.com/CocoaPods/CocoaPods/issues/4373">Unable to satisfy the following requirements with Podfile, but they required a higher minimum deployment target. #4373</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python对中文的支持问题]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors/"/>
    <updated>2016-01-15T23:18:52+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors</id>
    <content type="html"><![CDATA[<p>参考<a href="https://www.python.org/dev/peps/pep-0263/">官方文档</a></p>

<!-- more -->


<p>一种解决方案：在python文件的开头（第一行）加入如下内容：</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="lineno">1</span> <span class="c">#!/usr/local/bin/python</span>
<span class="lineno">2</span> <span class="c"># coding: utf-8</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https在ios客户端的objective-c实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c/"/>
    <updated>2015-12-30T21:23:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c</id>
    <content type="html"><![CDATA[<p>ios通过NSURLSession进行网络请求，参考另一篇博客<a href="http://hongchaozhang.github.io/blog/2015/11/29/ios-network-request/">ios进行网络请求</a>。</p>

<p>在开发阶段，server端我们会用self-signed证书（省钱啊！）。正因为不是第三方机构认证的证书，所以客户端都会报警告。我们需要对此进行处理（参考<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECNSURLSESSION">NSURLSession in Apple Tech Note</a>和<a href="http://stackoverflow.com/questions/19507207/how-do-i-accept-a-self-signed-ssl-certificate-using-ios-7s-nsurlsession-and-its">How do I accept a self-signed SSL certificate using iOS 7&rsquo;s NSURLSession and its family of delegate methods for development purposes?</a>）:</p>

<!-- more -->


<blockquote><p>NSURLSession allows you to customize HTTPS server trust evaluation by implementing the <code>-URLSession:didReceiveChallenge:completionHandler:</code> delegate method. To customize HTTPS server trust evaluation, look for a challenge whose protection space has an authentication method of <code>NSURLAuthenticationMethodServerTrust</code>. For those challenges, resolve them as described below. For other challenges, the ones that you don&rsquo;t care about, call the completion handler block with the <code>NSURLSessionAuthChallengePerformDefaultHandling</code> disposition and a NULL credential.</p>

<p>When dealing with the <code>NSURLAuthenticationMethodServerTrust</code> authentication challenge, you can get the trust object from the challenge&rsquo;s protection space by calling the <code>-serverTrust</code> method. After using the trust object to do your own custom HTTPS server trust evaluation, you must resolve the challenge in one of two ways:</p>

<ul>
<li>If you want to deny the connection, call the completion handler block with the <code>NSURLSessionAuthChallengeCancelAuthenticationChallenge</code> disposition and a NULL credential.</li>
<li>If you want to allow the connection, create a credential from your trust object (using <code>+[NSURLCredential credentialForTrust:]</code>) and call the completion handler block with that credential and the <code>NSURLSessionAuthChallengeUseCredential</code> disposition.</li>
</ul>
</blockquote>

<p>说了这么多，代码在下面的delegate中实现：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">didReceiveChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">*</span><span class="p">)</span><span class="nv">challenge</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURLSessionAuthChallengeDisposition</span><span class="p">,</span> <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionHandler</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">authenticationMethod</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">NSURLAuthenticationMethodServerTrust</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 3</span>         <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">host</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;domaintoverride.com&quot;</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 4</span>             <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="n">credential</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">];</span>
<span class="lineno"> 5</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeUseCredential</span><span class="p">,</span><span class="n">credential</span><span class="p">);</span>
<span class="lineno"> 6</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno"> 7</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
<span class="lineno"> 8</span>         <span class="p">}</span>
<span class="lineno"> 9</span>     <span class="p">}</span>
<span class="lineno">10</span> <span class="p">}</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[https在Server端的Nodejs实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs/"/>
    <updated>2015-12-30T21:23:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs</id>
    <content type="html"><![CDATA[<p>服务器端利用Nodejs创建https的Server，请参考<a href="http://blog.fens.me/nodejs-https-server/">Nodejs创建HTTPS服务器</a></p>

<!-- more -->


<p>首先确保已经安装nodejs、nodejs-https组件和openssl。</p>

<h3>用openssl生成密钥</h3>

<ul>
<li>cd到你的server路径。</li>
<li>生成私钥key文件privatekey.pem</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl genrsa -out privatekey.pem 1024</code></pre></div>


<ul>
<li>通过私钥生成CSR证书签名</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl req -new -key privatekey.pem -out certrequest.csr</code></pre></div>


<p>填写一些证书信息：</p>

<blockquote><p>You are about to be asked to enter information that will be incorporated
into your certificate request.</p>

<p>What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lsquo;.&rsquo;, the field will be left blank.</p></blockquote>

<div class="highlight"><pre><code class="language-text" data-lang="text">Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Zhejiang
Locality Name (eg, city) []:Hangzhou
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organization
Organizational Unit Name (eg, section) []:Organization
Common Name (eg, YOUR name) []:Name Zhang
Email Address []:Name@gmail.com

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:</code></pre></div>


<ul>
<li>通过私钥和证书签名生成证书文件</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem</code></pre></div>


<p>至此，我们有了三个文件：</p>

<ul>
<li>privatekey.pem: 私钥</li>
<li>certrequest.csr: CSR证书签名</li>
<li>certificate.pem: 证书文件</li>
</ul>


<h3>实现服务器端app</h3>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">)</span><span class="err">，</span>
<span class="lineno"> 2</span>     <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
<span class="lineno"> 5</span>     <span class="nx">key</span><span class="o">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;./privatekey.pem&#39;</span><span class="p">),</span>
<span class="lineno"> 6</span>     <span class="nx">cert</span><span class="o">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;./certificate.pem&#39;</span><span class="p">)</span>
<span class="lineno"> 7</span> <span class="p">};</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="nx">https</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
<span class="lineno">11</span>     <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;hello world\n&quot;</span><span class="p">);</span>
<span class="lineno">12</span> <span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8181</span><span class="p">);</span>
<span class="lineno">13</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Https server listening on port &#39;</span> <span class="o">+</span> <span class="mi">8181</span><span class="p">);</span></code></pre></div>


<p>在Safari中选择信任证书之后，就可以看到下面的页面了：</p>

<p><img src="http://hongchaozhang.github.io/images/https-browser-screenshot.png" alt="003_package_name_in_Eclipse" /></p>

<h3>https的安全性</h3>

<p>对于http的server，在浏览器中看是这样的：</p>

<p><img src="http://hongchaozhang.github.io/images/http-browser-sample.png" alt="http-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：http的request数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/http-request-charles.png" alt="http-request-charles" /></p>

<p>http的response数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/http-response-charles.png" alt="http-response-charles" /></p>

<p>可以看出，所有东西都是明文传送，如果被截取，必然造成信息泄露。</p>

<p>同样地，看一下https的server传输中的数据。
浏览器中看到的是这样的：</p>

<p><img src="http://hongchaozhang.github.io/images/https-browser-sample.png" alt="https-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：https的request数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/https-request-charles.png" alt="https-request-charles" /></p>

<p>从request中只可以看到URL地址，却看不到参数格式和内容。</p>

<p>https的response数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/https-response-charles.png" alt="https-response-charles" /></p>

<p>即使网络传输中被截获，也不会造成信息泄露。</p>

<p>但是还有一个不安全的地方：对于上面的情况，我们使用的是https的get方法从server获取数据，需要在地址栏中输入查询参数，而这些参数可能通过浏览器的历史记录泄露。这一点可以通过使用https的post方法解决，参考<a href="http://cuishen.iteye.com/blog/2019925">http https get post 的区别，定义/安全性/性能</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https工作过程]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/29/https-workflow/"/>
    <updated>2015-12-29T16:21:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/29/https-workflow</id>
    <content type="html"><![CDATA[<p>摘录在此，备忘。</p>

<p>HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p>

<p>具体的加密过程看下图：</p>

<!-- more -->


<p><img src="http://hongchaozhang.github.io/images/https-workflow.png" alt="https-workflow" /></p>

<ol>
<li><p>客户端发起HTTPS请求</p>

<p> 用户在浏览器里输入一个https网址，然后连接到server的443端口。</p></li>
<li><p>服务端的配置</p>

<p> 采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p></li>
<li><p>传送证书</p>

<p> 这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p></li>
<li><p>客户端解析证书</p>

<p> 这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p></li>
<li><p>传送加密信息</p>

<p> 这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p></li>
<li><p>服务段解密信息</p>

<p> 服务端用自己的私钥解密后，得到了客户端传过来的随机值，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和随机值通过某种算法混合在一起，这样除非知道随机值，不然无法获取内容，而正好客户端和服务端都知道这个随机值，所以只要加密算法够彪悍，这个随机值够复杂，数据就够安全。</p></li>
<li><p>传输加密后的信息</p>

<p> 这部分信息是服务段用客户端传过来的随机值加密后的信息，可以在客户端被还原。</p></li>
<li><p>客户端解密信息</p>

<p> 客户端用之前生成的随机值解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p></li>
</ol>


<h3>References</h3>

<p><del>https的基本概念，请参考</del><a href="http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html"><del>浅谈https\ssl\数字证书</del></a></p>

<p>https的传输过程，请参考：<a href="http://www.jb51.net/network/68135.html">图解HTTPS协议加密解密全过程</a></p>

<p>https/http/get/post: 请参考<a href="http://cuishen.iteye.com/blog/2019925">http https get post 的区别，定义/安全性/性能</a>和<a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html">浅谈HTTP中Get与Post的区别</a></p>

<p>其实百度百科中关于<a href="http://baike.baidu.com/view/14121.htm">https</a>的解释也是十分清楚了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generics in Objective-c]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c/"/>
    <updated>2015-12-22T13:18:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/649483/is-there-any-way-to-enforce-typing-on-nsarray-nsmutablearray-etc">Is there any way to enforce typing on NSArray, NSMutableArray, etc.?</a></p>

<p>参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a></p>

<p>随着Xcode7的发布，苹果实现了collection类（NSArray，NSDictionary，NSSet）的generics功能。</p>

<!-- more -->


<p>以后，可以这样定义Array了：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">MyClass</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">],</span> <span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span></code></pre></div>


<p>但是，我们仍然可以在Array中加入非MyClass类型的实例，此时xcode会报出警告，但是不会报错，程序仍然可以运行。所以需要我们在写程序时去除所有的警告。</p>

<p>Xcode的提示也会帮助我们避免这些警告：当你试图add一个元素到Array中时，Xcode会提示其中元素的类型<code>void addObject:(nonnull MyClass *)</code>；如果没有用Generics，Xcode的提示是<code>void addObject:(nonnull id)</code>。</p>

<p>但是这个可以给我们带来一个明显的好处：</p>

<p>我们只要看到定义，就能知道其中的元素类型，而不用全局搜索代码，看往其中加入了什么。就冲这一点，就足以让我们毫不犹豫地使用了。</p>

<p>更多的介绍和Generics的局限，请参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Propety, Instance Variable and @synthesize]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize/"/>
    <updated>2015-12-19T15:17:41+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize</id>
    <content type="html"><![CDATA[<p>这一段时间，在对自己不是很了解的代码进行重构，重新了解了一下Property、Instance Variable和@synthesize，总结一下。</p>

<p>首先需要明白一点：Property和@synthesize是让编译器帮助我们做一些规律性的工作。</p>

<h3>如果没有Property</h3>

<p>如果没有Property，我们可以这样实现Instance Variable的accessor（getter和setter），示例代码如下：</p>

<!-- more -->




<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 3</span> <span class="p">}</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="k">return</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">11</span> <span class="p">}</span>
<span class="lineno">12</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTestString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">stringValue</span> <span class="p">{</span>
<span class="lineno">13</span>     <span class="n">testString</span> <span class="o">=</span> <span class="n">stringValue</span><span class="p">;</span>
<span class="lineno">14</span> <span class="p">}</span>
<span class="lineno">15</span> 
<span class="lineno">16</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">17</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">18</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span> 
<span class="lineno">19</span> <span class="p">}</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="k">@end</span></code></pre></div>


<h3>有了Property</h3>

<p>眼看着Instance Variable及其getter和setter函数是如此有规律，于是Property出现了。</p>

<p>Property可以告诉编译器：我声明了一个Property，名字叫做<code>propertyName</code>，你帮我声明一个Instance Variable <code>_propertyName</code>，并帮助我实现其getter和setter函数。于是，上述代码，我们可以写成：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">11</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">12</span>     
<span class="lineno">13</span> <span class="p">}</span>
<span class="lineno">14</span> 
<span class="lineno">15</span> <span class="k">@end</span></code></pre></div>


<p>看看，是不是简单了很多。</p>

<h3>Auto Synthesize</h3>

<p>其实在上述使用Property的代码中，编译器还帮助我们做了一件事情：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="k">@synthesize</span> <span class="n">testString</span> <span class="o">=</span> <span class="n">_testString</span><span class="p">;</span></code></pre></div>


<p>从Xcode 4.4和LLVM Compiler 4.0起，有了<strong>auto synthesize</strong>，即@synthesize被更改为默认使用。因此，大多数情况下，你只需要 @property 指令，编译器将为你关心其它的事情。对，是“大多数”，因为在某些情况下，不会进行auto synthesize 。比如，对于上述代码，如果我打算自己实现getter函数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno">11</span> <span class="p">}</span>
<span class="lineno">12</span> 
<span class="lineno">13</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">14</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">15</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">16</span>     
<span class="lineno">17</span> <span class="p">}</span>
<span class="lineno">18</span> 
<span class="lineno">19</span> <span class="k">@end</span></code></pre></div>


<p>没有任何问题。</p>

<p>如果我再试图加入setter函数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 3</span> <span class="k">@end</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno"> 8</span>     <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno"> 9</span> <span class="p">}</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTestString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">testString</span> <span class="p">{</span>
<span class="lineno">12</span>     <span class="n">_testString</span> <span class="o">=</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">13</span> <span class="p">}</span>
<span class="lineno">14</span> 
<span class="lineno">15</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">16</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">17</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">18</span>     
<span class="lineno">19</span> <span class="p">}</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="k">@end</span></code></pre></div>


<p>编译器会报错：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">use of undefined identifier &#39;_testString&#39;。</code></pre></div>


<p>为什么呢？</p>

<p>因为此时auto synthesize没有工作。编译器认为：既然你同时手动接管了getter和setter的实现，那么我就什么也不管了，Instance Variable你也自己声明并起个名字吧。</p>

<p>总结一下auto synthesize不会工作的几种情况（参考<a href="http://stackoverflow.com/questions/19784454/when-should-i-use-synthesize-explicitly">When should I use @synthesize explicitly?</a>）：</p>

<ul>
<li><p>readwrite property with custom getter and setter</p>

<p>  when providing both a getter and setter custom implementation, the property won&rsquo;t be automatically synthesized</p></li>
<li><p>readonly property with custom getter</p>

<p>  when providing a custom getter implementation for a readonly property, this won&rsquo;t be automatically synthesized</p></li>
<li><p>@dynamic</p>

<p>  when using @dynamic propertyName, the property won&rsquo;t be automatically synthesized (pretty obvious, since @dynamic and @synthesize are mutually exclusive).</p>

<p>  @synthesize will generate getter and setter methods for your property. @dynamic just tells the compiler that the getter and setter methods are implemented not by the class itself but somewhere else (like the superclass)</p></li>
<li><p>properties declared in a @protocol</p>

<p>  when conforming to a protocol, any property the protocol defines won&rsquo;t be automatically synthesized</p></li>
<li><p>properties declared in a category</p>

<p>  this is a case in which the @synthesize directive is not automatically inserted by the compiler, but this properties cannot be manually synthesized either. While categories can declare properties, they cannot be synthesized at all, since categories cannot create ivars. For the sake of completeness, I&rsquo;ll add that it&rsquo;s still possible to fake the property synthesis using the Objective-C runtime.</p>

<p>  Actually, <strong>categorie</strong> is best used for adding capability to code you do not own and cannot change. Adding properties via categories is deprecated.</p></li>
<li><p>overridden properties (new since clang-600.0.51, shipping with Xcode 6, thanks Marc Schlüpmann)</p>

<p>  when you override a property of a superclass, two ways for you:</p>

<ul>
<li>explicitly synthesize it with a different instance variable name from super class.</li>
<li>@dynamic the property to tell the compiler that I will use the getter and setter methods in the super class.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
