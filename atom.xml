<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhang Hongchao]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2016-03-04T15:20:12+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用node-xlsx进行excel文件的读写]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/"/>
    <updated>2016-03-04T14:54:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module</id>
    <content type="html"><![CDATA[<h3>解析excel文件</h3>

<p>在我的应用中需要对excel文件内容进行搜索，所以需要一个解析excel文件的插件。</p>

<p><a href="https://www.npmjs.com/package/node-xlsx">node-xlsx</a>插件可以让我们解析、修改、新建excel文件。</p>

<!-- more -->


<p>安装到所在文件夹：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">npm install excel node-xlsx</code></pre></div>


<p>或者安装为全局应用：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">npm install -g excel node-xlsx</code></pre></div>


<p>然后就可以这样解析excel文件：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno">1</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno">2</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/myFile.xlsx&#39;</span><span class="p">);</span> <span class="c1">// parses a file</span></code></pre></div>


<p>下面是一段样例代码：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="c1">// Include modules.</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="c1">// read xlsx file and analyse</span>
<span class="lineno"> 5</span> <span class="kd">var</span> <span class="nx">excelObj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;fileName.xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">sheet</span> <span class="k">in</span> <span class="nx">excelObj</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 8</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">sheet</span> <span class="o">!==</span> <span class="s1">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">excelObj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">sheet</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// sheet is &#39;0&#39;, &#39;1&#39;, ...</span>
<span class="lineno"> 9</span>      <span class="kd">var</span> <span class="nx">sheetData</span> <span class="o">=</span> <span class="nx">excelObj</span><span class="p">[</span><span class="nx">sheet</span><span class="p">].</span><span class="nx">data</span><span class="p">;</span> <span class="c1">// data inside a sheet, which is an two-dimention array</span>
<span class="lineno">10</span>      <span class="kd">var</span> <span class="nx">rowCount</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="lineno">11</span>      <span class="nx">activityCountDic</span><span class="p">[</span><span class="nx">sheet</span><span class="p">]</span> <span class="o">=</span> <span class="nx">rowCount</span><span class="p">;</span>
<span class="lineno">12</span>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rowCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">13</span>          <span class="kd">var</span> <span class="nx">rowData</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// data inside one row, which is an one-dimention array</span>
<span class="lineno">14</span>          <span class="kd">var</span> <span class="nx">columnCount</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="lineno">15</span>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columnCount</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">16</span>              <span class="kd">var</span> <span class="nx">cellData</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// data in j column of the given row</span>
<span class="lineno">17</span>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cellData</span><span class="p">);</span>
<span class="lineno">18</span>          <span class="p">}</span>
<span class="lineno">19</span>      <span class="p">}</span>
<span class="lineno">20</span>  <span class="p">}</span>
<span class="lineno">21</span> <span class="p">}</span></code></pre></div>


<h3>写入excel文件</h3>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="c1">// Include modules.</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
<span class="lineno"> 3</span> <span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="c1">// 写入excel之后是一个一行两列的表格</span>
<span class="lineno"> 6</span> <span class="kd">var</span> <span class="nx">data1</span> <span class="o">=</span> <span class="p">[</span>
<span class="lineno"> 7</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="lineno"> 8</span> <span class="p">];</span>
<span class="lineno"> 9</span> 
<span class="lineno">10</span> <span class="c1">// 写入excel之后是一个三行两列的表格</span>
<span class="lineno">11</span> <span class="kd">var</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">[</span>
<span class="lineno">12</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span> 
<span class="lineno">13</span> <span class="p">[</span><span class="s1">&#39;zhang san&#39;</span><span class="p">,</span> <span class="s1">&#39;10&#39;</span><span class="p">],</span> 
<span class="lineno">14</span> <span class="p">[</span><span class="s1">&#39;li si&#39;</span><span class="p">,</span> <span class="s1">&#39;11&#39;</span><span class="p">]</span>
<span class="lineno">15</span> <span class="p">];</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> <span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">build</span><span class="p">([</span>
<span class="lineno">18</span>  <span class="p">{</span>
<span class="lineno">19</span>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet1&#39;</span><span class="p">,</span>
<span class="lineno">20</span>      <span class="nx">data</span><span class="o">:</span><span class="nx">data1</span>
<span class="lineno">21</span>  <span class="p">},</span> <span class="p">{</span>
<span class="lineno">22</span>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet2&#39;</span><span class="p">,</span>
<span class="lineno">23</span>      <span class="nx">data</span><span class="o">:</span><span class="nx">data2</span>
<span class="lineno">24</span>  <span class="p">}</span>
<span class="lineno">25</span>  <span class="p">]);</span>
<span class="lineno">26</span> 
<span class="lineno">27</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s1">&#39;book.xlsx&#39;</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flag&#39;</span><span class="o">:</span><span class="s1">&#39;w&#39;</span><span class="p">});</span> <span class="c1">// 如果文件存在，覆盖</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios内存管理——调试]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging/"/>
    <updated>2016-02-24T20:51:01+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/24/ios-memory-managemement-debugging</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20160222/15333.html">iOS/OS X 内存管理(二)：借助工具解决内存问题</a>讲了一些调试技巧，包括：</p>

<!-- more -->


<ul>
<li>启用Zombie Object进行悬挂指针的检测。</li>
<li>应用<em>Product -> Analysis</em>进行内存泄露的初步检测。</li>
<li>应用Leak Instrument进行内存泄露查找。</li>
<li>在以上方法不奏效的情况下，通过查看<code>dealloc</code>是否调用查看某个class是否泄露的问题。</li>
</ul>


<p>补充一下：在<em>Leak</em>页面可以打开<em>Cycles &amp; Roots</em>用图的方式查看ratain cycle的问题，截图如下：</p>

<p><img src="http://hongchaozhang.github.io/images/xcode_leak_instrument_cycles_and_roots_view.png" alt="xcode_leak_instrument_cycles_and_roots_view" /></p>

<p>上文没有介绍的，也是比较麻烦的，就是leak instrument没法查出的内存泄露。最近在调试一个这样的问题，写点心得。</p>

<h3>行动前的准备</h3>

<h4>认识工具</h4>

<p>参看<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/LeaksInstrument/LeaksInstrument.html">Leaks Instrument</a>和<a href="https://developer.apple.com/library/ios/documentation/AnalysisTools/Reference/Instruments_User_Reference/AllocationsInstrument/AllocationsInstrument.html#//apple_ref/doc/uid/TP40011355-CH40-SW1">Allocation Instrument</a>的官方文档。</p>

<p>补充：</p>

<ul>
<li>Leak Instrument有<em>Cycles &amp; Roots</em>界面，见上。</li>
<li>Persistent Bytes和#Persistent。#Persistent是object的数量，也就是allocation的次数，而Persistent Bytes是具体的内存大小。<strong>#Persistent是我们需要关注的，内存有没有泄露也是看这个值是不是只增不减。</strong></li>
<li>Allocation Instrument进行profile的时候，为<em>Launch Configuration for Heap Allocations</em>勾选<em>Record reference counts</em>。</li>
</ul>


<h4>编译参数设置</h4>

<p>为了保证看到代码，而不是一堆无意义的内存地址，参考<a href="http://hongchaozhang.github.io/blog/2015/08/17/the-dSYM-file-in-ios-project/">The .dSYM File in Ios Project</a>进行xcode的设置。</p>

<h3>如果<code>dealloc</code>没有被调用</h3>

<p>通过Allocation Instrument，我们可以得到内存使用情况。为了清楚地看出是哪部分最可能是内存泄露，可以使用<em>Call Trees</em>视图，然后在右边：</p>

<ul>
<li>勾选<em>Hide System Libraries</em>，排除系统影响。</li>
<li>勾选<em>Invert Call Tree</em>，使占用内存最多的分支在最前面。</li>
</ul>


<p>通过以上方法，可以大概确定是哪部分内存泄露。然后看看该class是不是被<code>dealloc</code>了。</p>

<ul>
<li>如果<code>dealloc</code>了，那不是本文要解决的问题。</li>
<li>如果<code>dealloc</code>没有调用到，继续往下看。</li>
</ul>


<h4>Retain Cycle导致<code>dealloc</code>没有被调用</h4>

<p>在ARC下，<code>dealloc</code>不能被调用，一般是因为存在Retain Cycle，而导致Retain Cycle的情况可能是下面几种可能(参考<a href="http://kkoval.blogspot.com/2014/03/ios-retain-cycle-in-arc.html">iOS Retain Cycle in ARC</a>和<a href="http://stackoverflow.com/questions/9219030/dealloc-not-being-called-on-arc-app">Dealloc not being called on ARC app</a>):</p>

<h5>1. Blocks</h5>

<p>并不是所有在block中引用<code>self</code>都会带来retain cycle，比如下面的代码就不会有内存泄露：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSelfInCocoaBlocks</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="bp">NSArray</span> <span class="o">*</span><span class="n">cats</span> <span class="o">=</span> <span class="l">@[</span><span class="s">@&quot;Smily&quot;</span><span class="p">,</span> <span class="s">@&quot;Garfild&quot;</span><span class="p">,</span> <span class="s">@&quot;Other cat&quot;</span><span class="l">]</span><span class="p">;</span>
<span class="lineno">4</span>     <span class="p">[</span><span class="n">cats</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">cat</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="n">cat</span><span class="p">];</span>
<span class="lineno">6</span>     <span class="p">}];</span>
<span class="lineno">7</span> <span class="p">}</span></code></pre></div>


<p>因为在上面的代码中，block ratain了self，但是self中没有retain这个block。只有当block中引用了self，并且self又以某种方式（比如用一个具有strong属性的Property指向该block，或者将该block加入了self的一个具有strong属性的array中）强引用了该block，才会引起内存泄露，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSelfInBlock</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="nb">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">4</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="s">@&quot;Fat Cat&quot;</span><span class="p">];</span>
<span class="lineno">5</span>     <span class="p">};</span>
<span class="lineno">6</span> <span class="p">}</span></code></pre></div>


<p>有时候即使没有直接引用self，也可能导致self被retain，这叫做“implicit retain”。一种可能的情况就是在block中引用了self的实例变量，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testHiddenSelfInCocoaBlocks</span>
<span class="lineno">2</span> <span class="p">{</span>
<span class="lineno">3</span>     <span class="bp">NSArray</span> <span class="o">*</span><span class="n">cats</span> <span class="o">=</span> <span class="l">@[</span><span class="s">@&quot;Smily&quot;</span><span class="p">,</span> <span class="s">@&quot;Garfild&quot;</span><span class="p">,</span> <span class="s">@&quot;Other cat&quot;</span><span class="l">]</span><span class="p">;</span>
<span class="lineno">4</span>     <span class="p">[</span><span class="n">cats</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">cat</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="n">_aCat</span> <span class="o">=</span> <span class="n">cat</span><span class="p">;</span>
<span class="lineno">6</span>         <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
<span class="lineno">7</span>     <span class="p">}];</span>
<span class="lineno">8</span> <span class="p">}</span></code></pre></div>


<p>这段code在block中引用了self的实例变量<code>_aCat</code>。</p>

<p>为了避免implicit retain，可以在xcode的build setting中打开<em>implicit retain of &lsquo;self&rsquo; within blocks</em>，xcode编译器会给出警告。</p>

<h5>2. NSTimer</h5>

<p>如果在view controller中创建了NSTimer，在消失view controller的时候需要调用<code>invalidate</code>，否则会产生ratain cycle。</p>

<h5>3. Observers/NSNotificationCenter</h5>

<p>当我们在NSNotificationCenter的block中引用self的时候，也会产生retain cycle，比如：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserverForName</span><span class="p">:</span><span class="s">@&quot;not&quot;</span>
<span class="lineno">2</span>                                                       <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span>
<span class="lineno">3</span>                                                        <span class="nl">queue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span>
<span class="lineno">4</span>                                                   <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="n">note</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">5</span>         <span class="p">[</span><span class="nb">self</span> <span class="nl">doSomethingWithCat</span><span class="p">:</span><span class="s">@&quot;Noty cat&quot;</span><span class="p">];</span>
<span class="lineno">6</span>     <span class="p">}];</span></code></pre></div>


<p>在不用的时候需要将self从NSNotificationCenter中移除。</p>

<h5>4. Array contained reference</h5>

<p>比如在view controller中将self放在了一个array中，而这个array在view controller消失的时候不会被释放，view controller的<code>dealloc</code>就不会被调用。</p>

<h5>5. Delegate</h5>

<p>delegate的属性应该为weak。</p>

<h4>dealloc没被调用的调试</h4>

<p>调试dealloc没有被调用的情况，参考<a href="http://stackoverflow.com/questions/14890402/instruments-allocations-track-alloc-and-dealloc-of-objects-of-user-defined-class/14891837#14891837">Instruments Allocations track alloc and dealloc of objects of user defined classes</a>，可以看到对应实例在整个生命周期中发生的所有和内存有关的事件，包括malloc，ratain，release等和每次事件的call stack。注意其中的两项设置：</p>

<ul>
<li>勾选Record reference counts，记录retain，release和autorelease事件。</li>
<li>为Allocation Lifespan选择All Objects Created，如果你想看到已经被dealloc的实例，这个可以不选。</li>
</ul>


<h3>关于ARC下的retainCount</h3>

<p>在ARC之前，我们可以使用<code>retainCount</code>得到一个Object被retain的次数。
引入ARC之后，这个方法不能在code中使用，可以使用下面的方法获得retain的次数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Retain count is %ld&quot;</span><span class="p">,</span> <span class="n">CFGetRetainCount</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">myObject</span><span class="p">));</span></code></pre></div>


<p>或者通过设置断点，在调试窗口输入如下命令：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">po object.retainCount</code></pre></div>


<p>我们什么时候使用retainCount？
Never！
参考 <a href="http://stackoverflow.com/questions/4636146/when-to-use-retaincount">When to use -retainCount?</a>。
但是偶尔在调试的时候用一下，对于一些内存管理概念的理解还是有好处的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios内存管理——理论]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/22/ios-memory-management-theory/"/>
    <updated>2016-02-22T20:51:30+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/22/ios-memory-management-theory</id>
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20160219/15330.html">iOS/OS X内存管理(一)：基本概念与原理</a>对内存管理的概念讲的很清楚。</p>

<!-- more -->


<p>摘抄一些重要信息。</p>

<p>assign对应就是__unsafe_unretained，它跟__weak相似，被它修饰的变量都不持有对象的所有权，但不相同的是，当变量指向的对象的RC为0时，变量并不设置为nil，而是继续保存对象的地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的动画——UIView]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/02/18/uiview-animation-in-ios/"/>
    <updated>2016-02-18T11:36:47+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/02/18/uiview-animation-in-ios</id>
    <content type="html"><![CDATA[<p>官方文档<a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/AnimatingViews/AnimatingViews.html">Animations</a>详细讲述了UIView的animations，
<a href="http://www.cocoachina.com/ios/20160215/15262.html">iOS 开发之动画篇 - 从 UIView 动画说起</a>也阐述了用UIView进行动画的基本用法。</p>

<!-- more -->


<p>总结摘抄一些要点。</p>

<h2>Animate Property Changes in a View</h2>

<h3>Basic Usage</h3>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">2</span>     <span class="n">firstView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno">3</span>     <span class="n">secondView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="lineno">4</span> <span class="p">}];</span></code></pre></div>


<blockquote><p>NOTE: When this code executes, the specified animations are started immediately on another thread so as to avoid blocking the current thread or your application’s main thread.</p></blockquote>

<h3>Completion Handler</h3>

<p>Usage of Completion Handler</p>

<ul>
<li>Use a completion handler to signal your application that a specific animation has finished.</li>
<li>Completion handlers are also the way to link separate animations together.</li>
</ul>


<p>Sample code：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">showHideView:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="lineno"> 2</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="c1">// Fade out the view right away</span>
<span class="lineno"> 4</span>     <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 5</span>         <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span>
<span class="lineno"> 6</span>         <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptionCurveEaseIn</span>
<span class="lineno"> 7</span>         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno"> 8</span>              <span class="n">thirdView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno"> 9</span>         <span class="p">}</span>
<span class="lineno">10</span>         <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
<span class="lineno">11</span>             <span class="c1">// Wait one second and then fade in the view</span>
<span class="lineno">12</span>             <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno">13</span>                  <span class="nl">delay</span><span class="p">:</span> <span class="mf">1.0</span>
<span class="lineno">14</span>                  <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveEaseOut</span>
<span class="lineno">15</span>                  <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">16</span>                     <span class="n">thirdView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="lineno">17</span>                  <span class="p">}</span>
<span class="lineno">18</span>                  <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="lineno">19</span>         <span class="p">}];</span>
<span class="lineno">20</span> <span class="p">}</span></code></pre></div>


<h3>Nesting Animation Blocks</h3>

<p>Nested animations are started at the same time as any parent animations.</p>

<p>Sample code:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 2</span>         <span class="nl">delay</span><span class="p">:</span> <span class="mf">1.0</span>
<span class="lineno"> 3</span>         <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveEaseOut</span>
<span class="lineno"> 4</span>         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno"> 5</span>             <span class="n">aView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno"> 6</span>             <span class="c1">// Create a nested animation that has a different</span>
<span class="lineno"> 7</span>             <span class="c1">// duration, timing curve, and configuration.</span>
<span class="lineno"> 8</span>             <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.2</span>
<span class="lineno"> 9</span>                  <span class="nl">delay</span><span class="p">:</span><span class="mf">0.0</span>
<span class="lineno">10</span>                  <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptionOverrideInheritedCurve</span> <span class="o">|</span>
<span class="lineno">11</span>                           <span class="n">UIViewAnimationOptionCurveLinear</span> <span class="o">|</span>
<span class="lineno">12</span>                           <span class="n">UIViewAnimationOptionOverrideInheritedDuration</span> <span class="o">|</span>
<span class="lineno">13</span>                           <span class="n">UIViewAnimationOptionRepeat</span> <span class="o">|</span>
<span class="lineno">14</span>                           <span class="n">UIViewAnimationOptionAutoreverse</span>
<span class="lineno">15</span>                  <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
<span class="lineno">16</span>                       <span class="p">[</span><span class="bp">UIView</span> <span class="nl">setAnimationRepeatCount</span><span class="p">:</span><span class="mf">2.5</span><span class="p">];</span>
<span class="lineno">17</span>                       <span class="n">anotherView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="lineno">18</span>                  <span class="p">}</span>
<span class="lineno">19</span>                  <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="lineno">20</span>         <span class="p">}</span>
<span class="lineno">21</span>         <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span></code></pre></div>


<h2>Creating Animated Transitions Between Views</h2>

<p>View transitions help you hide sudden changes associated with adding, removing, hiding, or showing views in your view hierarchy. You use view transitions to implement the following types of changes:</p>

<ul>
<li><strong>Change the visible subviews of an existing view.</strong> You typically choose this option when you want to make relatively small changes to an existing view.</li>
<li><strong>Replace one view in your view hierarchy with a different view.</strong> You typically choose this option when you want to replace a view hierarchy that spans all or most of the screen.</li>
</ul>


<blockquote><p><strong>Note:</strong> View transitions should not be confused with transitions initiated by view controllers, such as the presentation of modal view controllers or the pushing of new view controllers onto a navigation stack. View transitions affect the view hierarchy only, whereas view-controller transitions change the active view controller as well. Thus, for view transitions, the view controller that was active when you initiated the transition remains active when the transition finishes.</p></blockquote>

<p>Sampel code for replacing a view with a different view:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">toggleMainViews:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="p">[</span><span class="bp">UIView</span> <span class="nl">transitionFromView</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">primaryView</span> <span class="p">:</span> <span class="n">secondaryView</span><span class="p">)</span>
<span class="lineno"> 3</span>         <span class="nl">toView</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">secondaryView</span> <span class="p">:</span> <span class="n">primaryView</span><span class="p">)</span>
<span class="lineno"> 4</span>         <span class="nl">duration</span><span class="p">:</span><span class="mf">1.0</span>
<span class="lineno"> 5</span>         <span class="nl">options</span><span class="p">:(</span><span class="n">displayingPrimary</span> <span class="o">?</span> <span class="nl">UIViewAnimationOptionTransitionFlipFromRight</span> <span class="p">:</span>
<span class="lineno"> 6</span>                     <span class="n">UIViewAnimationOptionTransitionFlipFromLeft</span><span class="p">)</span>
<span class="lineno"> 7</span>         <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 8</span>             <span class="k">if</span> <span class="p">(</span><span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 9</span>                 <span class="n">displayingPrimary</span> <span class="o">=</span> <span class="o">!</span><span class="n">displayingPrimary</span><span class="p">;</span>
<span class="lineno">10</span>             <span class="p">}</span>
<span class="lineno">11</span>     <span class="p">}];</span>
<span class="lineno">12</span> <span class="p">}</span></code></pre></div>


<blockquote><p><strong>Note:</strong> In addition to swapping out views, your view controller code needs to manage the loading and unloading of both the primary and secondary views.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[火星坐标导致iOS系统下高德地图定位不准]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system/"/>
    <updated>2016-01-29T13:47:42+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/29/convertion-among-every-geo-system</id>
    <content type="html"><![CDATA[<p>首先感慨一下：神奇的国度，神奇的坐标！</p>

<h3>火星坐标系统介绍</h3>

<!-- more -->


<p>我们平时用到的地球坐标系统，叫做WGS-84坐标，这个是国际通用的“准确”的坐标系统。国家保密插件，其实就是对真实坐标系统进行人为的加偏处理，即为GCJ-02坐标，戏称“火星坐标”。于是，我们有了下面的东西：</p>

<ul>
<li>地球坐标：指WGS84坐标系统</li>
<li>火星坐标：指使用国家保密插件人为偏移后的坐标</li>
<li>地球地图：指与地球坐标对应的客观真实的地图</li>
<li>火星地图：指经过加密偏移后的，与火星坐标对应的地图</li>
</ul>


<p>而且，国家龟腚： <strong>国内出版的各种地图系统（包括电子形式），必须至少采用GCJ-02对地理位置进行首次加密。</strong>于是，</p>

<ul>
<li>谷歌地图的大陆地图、高德国内地图采用GCJ-02对地图进行加偏。</li>
<li>百度地图更是进一步发挥了天朝特色，除了GCJ-02加偏，自己又在此基础上继续进行加偏，相应的坐标称为BD-09坐标。</li>
</ul>


<p>也就是说，我们平时用到的地图应用都是采用的虚假的坐标，虚假的地图。</p>

<h3>各地图厂商使用的坐标系</h3>

<ul>
<li>火星坐标

<ul>
<li>iOS 地图</li>
<li>Gogole地图</li>
<li>搜搜、阿里云、高德地图</li>
</ul>
</li>
<li>地球坐标

<ul>
<li>Google 卫星地图（国外地图应该都是……）</li>
</ul>
</li>
<li>百度坐标

<ul>
<li>百度地图</li>
</ul>
</li>
</ul>


<h3>各坐标系之间的转换</h3>

<p>为了在地图应用开发中准确地定位，需要将准确的WGS-84坐标转换成需要的坐标。在加偏算法不公开的的情况下，各方大神各显神通，有了下面几种方案：</p>

<h4>数据库</h4>

<p>可以列出WGC-84坐标和GCJ-02坐标系统的对应关系，放在数据库中供检索。数据库方案参考：<a href="http://code4app.com/ios/GPS%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/51c2564f6803fa9a29000000">GPS火星坐标转换</a>。</p>

<p>也有一些网站提供转换查询服务，比如<a href="http://www.zdoz.net/">ZDOZ.net</a>，和 <a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition">坐标转换API - Web服务API</a>。</p>

<h4>近似解析式</h4>

<p>逆向求解近似解析式，不需要大的数据库，不需要进行网络请求，而且精度在10米以内，基本能满足日常需求。</p>

<p>这样的实现很多，具体实现可以参考Objective-C的一种实现：<a href="https://github.com/JackZhouCn/JZLocationConverter">JZLocationConverter</a>。</p>

<h3>iOS系统中坐标系的使用</h3>

<p>iOS（9.0）中的关于地图和位置的接口中有些用的是WGS-84坐标，有的使用的是GCJ-02坐标。比如定位用户位置的时候我们使用的两种方法：</p>

<ul>
<li>设置MKMapView中的<code>showsUserLocation = YES</code>，然后在<code>- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation</code>方法中获得的坐标是GCJ-02坐标。</li>
<li>通过CLLocationManager的<code>startUpdatingLocation</code>方法，并在<code>- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations</code>方法中获得的坐标是WGS-84坐标。</li>
</ul>


<p>其实在使用iOS的地图应用的时候，只要使用的是非大陆的ip地址（国外用户或者国内用户通过国外代理），使用的都将是准确的WGS-84坐标和准确的地图。但是当在大陆地区使用是，苹果使用的是高德的地图服务，得到的坐标也都是GCJ-02坐标。但是有些接口没有本地化，仍然使用WGS-84坐标。</p>

<p>下面具体说一下在下面三个接口中经纬度坐标的使用，下面的内容都是针对iOS中高德地图的使用。</p>

<h4>MKMapView</h4>

<p>通过加到MKMapView中的UIGestureRecognizer的<code>locationInVieww:</code>获得手势在地图上的CGPoint，然后通过MKMapView的<code>convertPoint:toCoordinateFromView:</code>方法得到的经纬度坐标是GCJ-02坐标，使用的也是高德地图，所以在<code>addAnnotation:</code>等操作的时候，不用进行坐标转换。</p>

<h3>CLLocationManager</h3>

<p>即使使用的是高德地图，CLLocationManager返回的坐标也是WGS-84坐标，所以在定位用户位置的时候是有偏差的，需要我们进行坐标转换。</p>

<h3>CLGeoCoder</h3>

<p>在进行经纬度坐标和地址描述转换的时候，我们需要CLGeoCoder中的转换方法：</p>

<ul>
<li><p><code>- (void)geocodeAddressString:(NSString *)addressString completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法没有问题，输入地址的描述，返回该地址对应的GCJ-02坐标（高德地图）。</p></li>
<li><p><code>- (void)reverseGeocodeLocation:(CLLocation *)location completionHandler:(CLGeocodeCompletionHandler)completionHandler</code></p>

<p>  该方法有问题：当我们直接将得到的GCJ-02坐标传给该接口之后，该接口不能得到正确的地址，而且返回的坐标和输入的坐标有较大的差距，经试验，该返回的坐标是输入坐标经过<code>wgs84ToGcj02:</code>转换之后的坐标，所以，解决方案如下：
  将得到的坐标先经过<code>gcj02ToWgs84</code>转换成WGS-84坐标，传给接口，返回正确的地址，然后将地址坐标通过<code>wgs84ToGcj02</code>转换之后进行使用。</p></li>
</ul>


<h3>其它系统中用的坐标系</h3>

<p>最近在抓取<a href="http://www.hzbus.cn">hzbus.cn</a>网站中的一些数据时发现：该坐标不是我们前面提到的各种坐标。原来该网站使用的是<a href="http://www.mountor.cn/rjcp_377.html">蒙特的GIS引擎</a>。通过试验各种接口，发现其坐标应该是连续<strong>两次</strong>将WGS-84坐标进行<code>wgs84ToGcj02</code>转换得到的，<strong>两次</strong>。所以将其坐标经过<code>gcj02ToWgs84</code>转换成真正的GCJ-02坐标在iOS的高德地图中使用。</p>

<h3>参考</h3>

<ul>
<li>这一篇文章的结论和我的结论一致，（除了GeoCoding外）：<a href="http://blog.it985.com/7728.html">iOS 火星坐标相关整理及解决方案汇总</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775121">火星坐标系统简介</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775267">google map 的地图偏移 火星坐标</a>
*<a href="http://blog.csdn.net/coolypf/article/details/8686588">地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</a></li>
<li><a href="http://blog.csdn.net/giswens/article/details/8775183">WGS84坐标转火星坐标（iOS篇）</a></li>
<li>各种坐标体系之间的转换，参考：<a href="http://blog.csdn.net/wildboy2001/article/details/12031351">WGS84、Web墨卡托、火星坐标、百度坐标互转</a></li>
<li><a href="http://blog.csdn.net/swingpyzf/article/details/16972351">IOS LocationManager定位国内偏移，火星坐标(GCJ-02)解决方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用CocoaPods管理iOS的依赖库关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control/"/>
    <updated>2016-01-19T13:47:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/19/cocoapods-for-ios-dependencies-control</id>
    <content type="html"><![CDATA[<p>就像Java有Maven，nodejs有npm一样，ios也有自己的库依赖管理工具：CocoaPods。</p>

<!-- more -->


<p>参考<a href="http://www.cnblogs.com/iyuanxiaojun/p/4465850.html">用CocoaPods做iOS程序的依赖管理</a>。</p>

<h3>安装与设置</h3>

<p>Mac下使用自带的ruby的gem命令进行安装：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">sudo gem install cocoapods</code></pre></div>


<p>第一次使用之前需要设置CocoaPods：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">pod setup</code></pre></div>


<p>此时需要耐心等待，因为CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有80M左右，比较慢。</p>

<h3>使用</h3>

<h4>安装依赖库</h4>

<p>使用时需要新建Podfile文件，格式如下：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> platform :ios
<span class="lineno">2</span> pod &#39;JSONKit&#39;,       &#39;~&gt; 1.4&#39;
<span class="lineno">3</span> pod &#39;Reachability&#39;,  &#39;~&gt; 3.0.0&#39;
<span class="lineno">4</span> pod &#39;ASIHTTPRequest&#39;
<span class="lineno">5</span> pod &#39;RegexKitLite&#39;</code></pre></div>


<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text"><span class="lineno">1</span> cd &quot;your project home&quot;
<span class="lineno">2</span> pod install</code></pre></div>


<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下两点即可：</p>

<ul>
<li>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次pod update命令。</li>
</ul>


<h4>搜索依赖库</h4>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">pod search</code></pre></div>


<p>命令进行查找。</p>

<h3>问题</h3>

<p>当我在使用<em>kingpin</em>第三方库的时候，出现了下面的问题：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">Specs satisfying the `kingpin` dependency were found, but they required a higher minimum deployment target.</code></pre></div>


<p>通过修改Podfile的第一行：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios</code></pre></div>


<p>为</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">platform :ios, &#39;7。0&#39;</code></pre></div>


<p>解决。</p>

<p>原理参考：<a href="https://github.com/CocoaPods/CocoaPods/issues/4373">Unable to satisfy the following requirements with Podfile, but they required a higher minimum deployment target. #4373</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python对中文的支持问题]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors/"/>
    <updated>2016-01-15T23:18:52+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/01/15/python-supports-chinese-charactors</id>
    <content type="html"><![CDATA[<p>参考<a href="https://www.python.org/dev/peps/pep-0263/">官方文档</a></p>

<!-- more -->


<p>一种解决方案：在python文件的开头（第一行）加入如下内容：</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="lineno">1</span> <span class="c">#!/usr/local/bin/python</span>
<span class="lineno">2</span> <span class="c"># coding: utf-8</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https在ios客户端的objective-c实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c/"/>
    <updated>2015-12-30T21:23:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-ios-client-side-using-objective-c</id>
    <content type="html"><![CDATA[<p>ios通过NSURLSession进行网络请求，参考另一篇博客<a href="http://hongchaozhang.github.io/blog/2015/11/29/ios-network-request/">ios进行网络请求</a>。</p>

<p>在开发阶段，server端我们会用self-signed证书（省钱啊！）。正因为不是第三方机构认证的证书，所以客户端都会报警告。我们需要对此进行处理（参考<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECNSURLSESSION">NSURLSession in Apple Tech Note</a>和<a href="http://stackoverflow.com/questions/19507207/how-do-i-accept-a-self-signed-ssl-certificate-using-ios-7s-nsurlsession-and-its">How do I accept a self-signed SSL certificate using iOS 7&rsquo;s NSURLSession and its family of delegate methods for development purposes?</a>）:</p>

<!-- more -->


<blockquote><p>NSURLSession allows you to customize HTTPS server trust evaluation by implementing the <code>-URLSession:didReceiveChallenge:completionHandler:</code> delegate method. To customize HTTPS server trust evaluation, look for a challenge whose protection space has an authentication method of <code>NSURLAuthenticationMethodServerTrust</code>. For those challenges, resolve them as described below. For other challenges, the ones that you don&rsquo;t care about, call the completion handler block with the <code>NSURLSessionAuthChallengePerformDefaultHandling</code> disposition and a NULL credential.</p>

<p>When dealing with the <code>NSURLAuthenticationMethodServerTrust</code> authentication challenge, you can get the trust object from the challenge&rsquo;s protection space by calling the <code>-serverTrust</code> method. After using the trust object to do your own custom HTTPS server trust evaluation, you must resolve the challenge in one of two ways:</p>

<ul>
<li>If you want to deny the connection, call the completion handler block with the <code>NSURLSessionAuthChallengeCancelAuthenticationChallenge</code> disposition and a NULL credential.</li>
<li>If you want to allow the connection, create a credential from your trust object (using <code>+[NSURLCredential credentialForTrust:]</code>) and call the completion handler block with that credential and the <code>NSURLSessionAuthChallengeUseCredential</code> disposition.</li>
</ul>
</blockquote>

<p>说了这么多，代码在下面的delegate中实现：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">didReceiveChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">*</span><span class="p">)</span><span class="nv">challenge</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURLSessionAuthChallengeDisposition</span><span class="p">,</span> <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionHandler</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">authenticationMethod</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">NSURLAuthenticationMethodServerTrust</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 3</span>         <span class="k">if</span><span class="p">([</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">host</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;domaintoverride.com&quot;</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 4</span>             <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="n">credential</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">];</span>
<span class="lineno"> 5</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeUseCredential</span><span class="p">,</span><span class="n">credential</span><span class="p">);</span>
<span class="lineno"> 6</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno"> 7</span>             <span class="n">completionHandler</span><span class="p">(</span><span class="n">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
<span class="lineno"> 8</span>         <span class="p">}</span>
<span class="lineno"> 9</span>     <span class="p">}</span>
<span class="lineno">10</span> <span class="p">}</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[https在Server端的Nodejs实现]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs/"/>
    <updated>2015-12-30T21:23:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/30/implement-https-server-side-using-nodejs</id>
    <content type="html"><![CDATA[<p>服务器端利用Nodejs创建https的Server，请参考<a href="http://blog.fens.me/nodejs-https-server/">Nodejs创建HTTPS服务器</a></p>

<!-- more -->


<p>首先确保已经安装nodejs、nodejs-https组件和openssl。</p>

<h3>用openssl生成密钥</h3>

<ul>
<li>cd到你的server路径。</li>
<li>生成私钥key文件privatekey.pem</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl genrsa -out privatekey.pem 1024</code></pre></div>


<ul>
<li>通过私钥生成CSR证书签名</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl req -new -key privatekey.pem -out certrequest.csr</code></pre></div>


<p>填写一些证书信息：</p>

<blockquote><p>You are about to be asked to enter information that will be incorporated
into your certificate request.</p>

<p>What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lsquo;.&rsquo;, the field will be left blank.</p></blockquote>

<div class="highlight"><pre><code class="language-text" data-lang="text">Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Zhejiang
Locality Name (eg, city) []:Hangzhou
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organization
Organizational Unit Name (eg, section) []:Organization
Common Name (eg, YOUR name) []:Name Zhang
Email Address []:Name@gmail.com

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:</code></pre></div>


<ul>
<li>通过私钥和证书签名生成证书文件</li>
</ul>


<div class="highlight"><pre><code class="language-text" data-lang="text">openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem</code></pre></div>


<p>至此，我们有了三个文件：</p>

<ul>
<li>privatekey.pem: 私钥</li>
<li>certrequest.csr: CSR证书签名</li>
<li>certificate.pem: 证书文件</li>
</ul>


<h3>实现服务器端app</h3>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">)</span><span class="err">，</span>
<span class="lineno"> 2</span>     <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
<span class="lineno"> 5</span>     <span class="nx">key</span><span class="o">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;./privatekey.pem&#39;</span><span class="p">),</span>
<span class="lineno"> 6</span>     <span class="nx">cert</span><span class="o">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;./certificate.pem&#39;</span><span class="p">)</span>
<span class="lineno"> 7</span> <span class="p">};</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="nx">https</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
<span class="lineno">11</span>     <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;hello world\n&quot;</span><span class="p">);</span>
<span class="lineno">12</span> <span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8181</span><span class="p">);</span>
<span class="lineno">13</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Https server listening on port &#39;</span> <span class="o">+</span> <span class="mi">8181</span><span class="p">);</span></code></pre></div>


<p>在Safari中选择信任证书之后，就可以看到下面的页面了：</p>

<p><img src="http://hongchaozhang.github.io/images/https-browser-screenshot.png" alt="003_package_name_in_Eclipse" /></p>

<h3>https的安全性</h3>

<p>对于http的server，在浏览器中看是这样的：</p>

<p><img src="http://hongchaozhang.github.io/images/http-browser-sample.png" alt="http-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：http的request数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/http-request-charles.png" alt="http-request-charles" /></p>

<p>http的response数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/http-response-charles.png" alt="http-response-charles" /></p>

<p>可以看出，所有东西都是明文传送，如果被截取，必然造成信息泄露。</p>

<p>同样地，看一下https的server传输中的数据。
浏览器中看到的是这样的：</p>

<p><img src="http://hongchaozhang.github.io/images/https-browser-sample.png" alt="https-browser-sample" /></p>

<p>用Charles抓取网络传输中的数据，可以看出：https的request数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/https-request-charles.png" alt="https-request-charles" /></p>

<p>从request中只可以看到URL地址，却看不到参数格式和内容。</p>

<p>https的response数据如下：</p>

<p><img src="http://hongchaozhang.github.io/images/https-response-charles.png" alt="https-response-charles" /></p>

<p>即使网络传输中被截获，也不会造成信息泄露。</p>

<p>但是还有一个不安全的地方：对于上面的情况，我们使用的是https的get方法从server获取数据，需要在地址栏中输入查询参数，而这些参数可能通过浏览器的历史纪录泄露。这一点可以通过使用https的post方法解决，参考<a href="http://cuishen.iteye.com/blog/2019925">http https get post 的区别，定义/安全性/性能</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Https工作过程]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/29/https-workflow/"/>
    <updated>2015-12-29T16:21:19+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/29/https-workflow</id>
    <content type="html"><![CDATA[<p>摘录在此，备忘。</p>

<p>HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p>

<p>具体的加密过程看下图：</p>

<!-- more -->


<p><img src="http://hongchaozhang.github.io/images/https-workflow.png" alt="https-workflow" /></p>

<ol>
<li><p>客户端发起HTTPS请求</p>

<p> 用户在浏览器里输入一个https网址，然后连接到server的443端口。</p></li>
<li><p>服务端的配置</p>

<p> 采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p></li>
<li><p>传送证书</p>

<p> 这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p></li>
<li><p>客户端解析证书</p>

<p> 这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p></li>
<li><p>传送加密信息</p>

<p> 这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p></li>
<li><p>服务段解密信息</p>

<p> 服务端用自己的私钥解密后，得到了客户端传过来的随机值，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和随机值通过某种算法混合在一起，这样除非知道随机值，不然无法获取内容，而正好客户端和服务端都知道这个随机值，所以只要加密算法够彪悍，这个随机值够复杂，数据就够安全。</p></li>
<li><p>传输加密后的信息</p>

<p> 这部分信息是服务段用客户端传过来的随机值加密后的信息，可以在客户端被还原。</p></li>
<li><p>客户端解密信息</p>

<p> 客户端用之前生成的随机值解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p></li>
</ol>


<h3>References</h3>

<p><del>https的基本概念，请参考</del><a href="http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html"><del>浅谈https\ssl\数字证书</del></a></p>

<p>https的传输过程，请参考：<a href="http://www.jb51.net/network/68135.html">图解HTTPS协议加密解密全过程</a></p>

<p>https/http/get/post: 请参考<a href="http://cuishen.iteye.com/blog/2019925">http https get post 的区别，定义/安全性/性能</a>和<a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html">浅谈HTTP中Get与Post的区别</a></p>

<p>其实百度百科中关于<a href="http://baike.baidu.com/view/14121.htm">https</a>的解释也是十分清楚了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generics in Objective-c]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c/"/>
    <updated>2015-12-22T13:18:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/22/generics-in-objective-c</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://stackoverflow.com/questions/649483/is-there-any-way-to-enforce-typing-on-nsarray-nsmutablearray-etc">Is there any way to enforce typing on NSArray, NSMutableArray, etc.?</a></p>

<p>参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a></p>

<p>随着Xcode7的发布，苹果实现了collection类（NSArray，NSDictionary，NSSet）的generics功能。</p>

<!-- more -->


<p>以后，可以这样定义Array了：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">MyClass</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">],</span> <span class="p">[</span><span class="n">MyClass</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span></code></pre></div>


<p>但是，我们仍然可以在Array中加入非MyClass类型的实例，此时xcode会报出警告，但是不会报错，程序仍然可以运行。所以需要我们在写程序时去除所有的警告。</p>

<p>Xcode的提示也会帮助我们避免这些警告：当你试图add一个元素到Array中时，Xcode会提示其中元素的类型<code>void addObject:(nonnull MyClass *)</code>；如果没有用Generics，Xcode的提示是<code>void addObject:(nonnull id)</code>。</p>

<p>但是这个可以给我们带来一个明显的好处：</p>

<p>我们只要看到定义，就能知道其中的元素类型，而不用全局搜索代码，看往其中加入了什么。就冲这一点，就足以让我们毫不犹豫地使用了。</p>

<p>更多的介绍和Generics的局限，请参考：<a href="http://drekka.ghost.io/objective-c-generics/">Objective C Generics</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Propety, Instance Variable and @synthesize]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize/"/>
    <updated>2015-12-19T15:17:41+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/19/propety-instance-variable-and-at-synthesize</id>
    <content type="html"><![CDATA[<p>这一段时间，在对自己不是很了解的代码进行重构，重新了解了一下Property、Instance Variable和@synthesize，总结一下。</p>

<p>首先需要明白一点：Property和@synthesize是让编译器帮助我们做一些规律性的工作。</p>

<h3>如果没有Property</h3>

<p>如果没有Property，我们可以这样实现Instance Variable的accessor（getter和setter），示例代码如下：</p>

<!-- more -->




<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 3</span> <span class="p">}</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="k">return</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">11</span> <span class="p">}</span>
<span class="lineno">12</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTestString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">stringValue</span> <span class="p">{</span>
<span class="lineno">13</span>     <span class="n">testString</span> <span class="o">=</span> <span class="n">stringValue</span><span class="p">;</span>
<span class="lineno">14</span> <span class="p">}</span>
<span class="lineno">15</span> 
<span class="lineno">16</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">17</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">18</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span> 
<span class="lineno">19</span> <span class="p">}</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="k">@end</span></code></pre></div>


<h3>有了Property</h3>

<p>眼看着Instance Variable及其getter和setter函数是如此有规律，于是Property出现了。</p>

<p>Property可以告诉编译器：我声明了一个Property，名字叫做<code>propertyName</code>，你帮我声明一个Instance Variable <code>_propertyName</code>，并帮助我实现其getter和setter函数。于是，上述代码，我们可以写成：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">11</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">12</span>     
<span class="lineno">13</span> <span class="p">}</span>
<span class="lineno">14</span> 
<span class="lineno">15</span> <span class="k">@end</span></code></pre></div>


<p>看看，是不是简单了很多。</p>

<h3>Auto Synthesize</h3>

<p>其实在上述使用Property的代码中，编译器还帮助我们做了一件事情：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno">1</span> <span class="k">@synthesize</span> <span class="n">testString</span> <span class="o">=</span> <span class="n">_testString</span><span class="p">;</span></code></pre></div>


<p>从Xcode 4.4和LLVM Compiler 4.0起，有了<strong>auto synthesize</strong>，即@synthesize被更改为默认使用。因此，大多数情况下，你只需要 @property 指令，编译器将为你关心其它的事情。对，是“大多数”，因为在某些情况下，不会进行auto synthesize 。比如，对于上述代码，如果我打算自己实现getter函数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@end</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno">10</span>     <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno">11</span> <span class="p">}</span>
<span class="lineno">12</span> 
<span class="lineno">13</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">14</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">15</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">16</span>     
<span class="lineno">17</span> <span class="p">}</span>
<span class="lineno">18</span> 
<span class="lineno">19</span> <span class="k">@end</span></code></pre></div>


<p>没有任何问题。</p>

<p>如果我再试图加入setter函数：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="k">@interface</span> <span class="nc">PropertyTester</span><span class="p">()</span>
<span class="lineno"> 2</span> <span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno"> 3</span> <span class="k">@end</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="k">@implementation</span> <span class="nc">PropertyTester</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">testString</span> <span class="p">{</span>
<span class="lineno"> 8</span>     <span class="k">return</span> <span class="n">_testString</span><span class="p">;</span>
<span class="lineno"> 9</span> <span class="p">}</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTestString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">testString</span> <span class="p">{</span>
<span class="lineno">12</span>     <span class="n">_testString</span> <span class="o">=</span> <span class="n">testString</span><span class="p">;</span>
<span class="lineno">13</span> <span class="p">}</span>
<span class="lineno">14</span> 
<span class="lineno">15</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
<span class="lineno">16</span>     <span class="nb">self</span><span class="p">.</span><span class="n">testString</span> <span class="o">=</span> <span class="s">@&quot;test proeprty&quot;</span><span class="p">;</span>
<span class="lineno">17</span>     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">testString</span><span class="p">);</span>
<span class="lineno">18</span>     
<span class="lineno">19</span> <span class="p">}</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="k">@end</span></code></pre></div>


<p>编译器会报错：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">use of undefined identifier &#39;_testString&#39;。</code></pre></div>


<p>为什么呢？</p>

<p>因为此时auto synthesize没有工作。编译器认为：既然你同时手动接管了getter和setter的实现，那么我就什么也不管了，Instance Variable你也自己声明并起个名字吧。</p>

<p>总结一下auto synthesize不会工作的几种情况（参考<a href="http://stackoverflow.com/questions/19784454/when-should-i-use-synthesize-explicitly">When should I use @synthesize explicitly?</a>）：</p>

<ul>
<li><p>readwrite property with custom getter and setter</p>

<p>  when providing both a getter and setter custom implementation, the property won&rsquo;t be automatically synthesized</p></li>
<li><p>readonly property with custom getter</p>

<p>  when providing a custom getter implementation for a readonly property, this won&rsquo;t be automatically synthesized</p></li>
<li><p>@dynamic</p>

<p>  when using @dynamic propertyName, the property won&rsquo;t be automatically synthesized (pretty obvious, since @dynamic and @synthesize are mutually exclusive).</p>

<p>  @synthesize will generate getter and setter methods for your property. @dynamic just tells the compiler that the getter and setter methods are implemented not by the class itself but somewhere else (like the superclass)</p></li>
<li><p>properties declared in a @protocol</p>

<p>  when conforming to a protocol, any property the protocol defines won&rsquo;t be automatically synthesized</p></li>
<li><p>properties declared in a category</p>

<p>  this is a case in which the @synthesize directive is not automatically inserted by the compiler, but this properties cannot be manually synthesized either. While categories can declare properties, they cannot be synthesized at all, since categories cannot create ivars. For the sake of completeness, I&rsquo;ll add that it&rsquo;s still possible to fake the property synthesis using the Objective-C runtime.</p>

<p>  Actually, <strong>categorie</strong> is best used for adding capability to code you do not own and cannot change. Adding properties via categories is deprecated.</p></li>
<li><p>overridden properties (new since clang-600.0.51, shipping with Xcode 6, thanks Marc Schlüpmann)</p>

<p>  when you override a property of a superclass, two ways for you:</p>

<ul>
<li>explicitly synthesize it with a different instance variable name from super class.</li>
<li>@dynamic the property to tell the compiler that I will use the getter and setter methods in the super class.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios Coding Best Practice]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/17/ios-coding-best-practice/"/>
    <updated>2015-12-17T10:49:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/17/ios-coding-best-practice</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li>Use forward declarations</li>
<li>Move variable declaration out of header</li>
<li>Cleanup duplication in import</li>
<li>Remove private method declaration in implementation files</li>
<li>Move protocol definition to separate header to aviod unnecessary cross reference</li>
<li>Freqently monitor warnings and static analyzer warnings in your component. Usually it is a good idea to fix it.</li>
<li>Removing unused resources</li>
<li>Delegate objects should not be retained when doing so would create a retain cycle.</li>
<li>import Objective-C/Objective-C++ headers, and #include C/C++ headers.</li>
<li>Don&rsquo;t @throw Objective-C exceptions, but you should be prepared to catch them from third-party or OS calls.</li>
<li>Use nil checks for logic flow only.</li>
<li>Don&rsquo;t initialize variables to 0 or nil in the init method; it&rsquo;s redundant.</li>
<li>Instance Variables In Headers Should Be @private

<ul>
<li>Instance variables should typically be declared in implementation files or auto-synthesized by properties. When ivars are declared in a header file, they should be marked @private.</li>
</ul>
</li>
<li>One space should be used between the - or + and the return type, and no spacing in the parameter list except between parameters.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIViewController中常见的ios编程习惯]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/06/some-usefull-ios-coding-styles-in-UIViewController/"/>
    <updated>2015-12-06T12:55:47+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/06/some-usefull-ios-coding-styles-in-UIViewController</id>
    <content type="html"><![CDATA[<p>参考<a href="http://www.cocoachina.com/ios/20150525/11919.html">iOS应用架构谈 view层的组织和调用方案</a>。</p>

<h3>所有的属性都使用getter和setter</h3>

<!-- more -->


<blockquote><p>不要在viewDidLoad里面初始化你的view然后再add，这样代码就很难看。在viewDidload里面只做addSubview的事情，然后在viewWillAppear里面做布局的事情，最后在viewDidAppear里面做Notification的监听之类的事情。至于属性的初始化，则交给getter去做。</p></blockquote>

<p>不要出现这样的代码：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="lineno"> 2</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
<span class="lineno"> 4</span>     <span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="lineno"> 5</span>     <span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blackColor</span><span class="p">];</span>
<span class="lineno"> 6</span>     <span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span> <span class="p">...</span> <span class="p">...</span>
<span class="lineno"> 7</span>     <span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span> <span class="p">...</span> <span class="p">...</span>
<span class="lineno"> 8</span>     <span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span> <span class="p">...</span> <span class="p">...</span>
<span class="lineno"> 9</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">textLabel</span><span class="p">];</span>
<span class="lineno">10</span> <span class="p">}</span></code></pre></div>


<p>而应该是这样的：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="cp">#pragma mark - life cycle</span>
<span class="lineno"> 2</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
<span class="lineno"> 3</span> <span class="p">{</span>
<span class="lineno"> 4</span>     <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
<span class="lineno"> 5</span>     <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
<span class="lineno"> 6</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">firstTableView</span><span class="p">];</span>
<span class="lineno"> 7</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">secondTableView</span><span class="p">];</span>
<span class="lineno"> 8</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">cleanButton</span><span class="p">];</span>
<span class="lineno"> 9</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span><span class="p">];</span>
<span class="lineno">10</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">processedImageView</span><span class="p">];</span>
<span class="lineno">11</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">activityIndicator</span><span class="p">];</span>
<span class="lineno">12</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">takeImageButton</span><span class="p">];</span>
<span class="lineno">13</span> <span class="p">}</span>
<span class="lineno">14</span> 
<span class="lineno">15</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
<span class="lineno">16</span> <span class="p">{</span>
<span class="lineno">17</span>     <span class="p">[</span><span class="nb">super</span> <span class="nl">viewWillAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
<span class="lineno">18</span>     <span class="n">CGFloat</span> <span class="n">width</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">30</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">;</span>
<span class="lineno">19</span>     <span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>
<span class="lineno">20</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span> <span class="nl">topInContainer</span><span class="p">:</span><span class="mi">70</span> <span class="nl">shouldResize</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
<span class="lineno">21</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span> <span class="nl">leftInContainer</span><span class="p">:</span><span class="mi">10</span> <span class="nl">shouldResize</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
<span class="lineno">22</span>     <span class="nb">self</span><span class="p">.</span><span class="n">processedImageView</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>
<span class="lineno">23</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">processedImageView</span> <span class="nl">right</span><span class="p">:</span><span class="mi">10</span> <span class="nl">FromView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span><span class="p">];</span>
<span class="lineno">24</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">processedImageView</span> <span class="nl">topEqualToView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span><span class="p">];</span>
<span class="lineno">25</span>     <span class="n">CGFloat</span> <span class="n">labelWidth</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">100</span><span class="p">;</span>
<span class="lineno">26</span>     <span class="nb">self</span><span class="p">.</span><span class="n">firstFilterLabel</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">labelWidth</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="lineno">27</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstFilterLabel</span> <span class="nl">leftInContainer</span><span class="p">:</span><span class="mi">10</span> <span class="nl">shouldResize</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
<span class="lineno">28</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstFilterLabel</span> <span class="nl">top</span><span class="p">:</span><span class="mi">10</span> <span class="nl">FromView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">originImageView</span><span class="p">];</span>
<span class="lineno">29</span>     <span class="p">...</span> <span class="p">...</span>
<span class="lineno">30</span> <span class="p">}</span></code></pre></div>


<h4>getter和setter全部都放在最后</h4>

<blockquote><p>因为一个ViewController很有可能会有非常多的view，就像上面给出的代码样例一样，如果getter和setter写在前面，就会把主要逻辑扯到后面去，其他人看的时候就要先划过一长串getter和setter，这样不太好。然后要求业务工程师写代码的时候按照顺序来分配代码块的位置，<strong>先是life cycle，然后是Delegate方法实现，然后是event response，然后才是getters and setters</strong>。这样后来者阅读代码时就能省力很多。</p></blockquote>

<h3>每一个delegate都把对应的protocol名字带上，delegate方法不要到处乱写，写到一块区域里面去</h3>

<blockquote><p>比如UITableViewDelegate的方法集就老老实实写上#pragma mark - UITableViewDelegate。这样有个好处就是，当其他人阅读一个他并不熟悉的Delegate实现方法时，他只要按住command然后去点这个protocol名字，Xcode就能够立刻跳转到对应这个Delegate的protocol定义的那部分代码去，就省得他到处找了。</p></blockquote>

<h3>event response专门开一个代码区域</h3>

<p>所有button、gestureRecognizer的响应事件都放在这个区域里面，不要到处乱放。</p>

<h3>关于private methods，正常情况下ViewController里面不应该写</h3>

<p>不是delegate方法的，不是event response方法的，不是life cycle方法的，就是private method了。对的，正常情况下ViewController里面一般是不会存在private methods的，这个private methods一般是用于日期换算、图片裁剪啥的这种小功能。这种小功能要么把它写成一个category，要么把他做成一个模块，哪怕这个模块只有一个函数也行。</p>

<p>ViewController基本上是大部分业务的载体，本身代码已经相当复杂，所以跟业务关联不大的东西能不放在ViewController里面就不要放。另外一点，这个private method的功能这时候只是你用得到，但是将来说不定别的地方也会用到，一开始就独立出来，有利于将来的代码复用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoSizing and AutoLayout]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/12/01/autosizing-and-autolayout/"/>
    <updated>2015-12-01T11:20:38+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/12/01/autosizing-and-autolayout</id>
    <content type="html"><![CDATA[<p>参考：</p>

<ul>
<li><a href="http://objccn.io/issue-3-5/">先进的自动布局工具箱</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html#//apple_ref/doc/uid/TP40010853-CH16-SW1">AutoLayout Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSelf-SizingTableViewCells.html">AutoLayout Table View</a></li>
</ul>


<p>摘要：</p>

<ul>
<li><p>AutoSizing和AutoLayout都是用来自动确定试图大小和位置的方法，区别在于：</p>

<ul>
<li>AutoSizing: 只针对SuperView</li>
<li>AutoLayout: 针对SuperView和兄弟View</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><p>AutoLayout这边可以考虑使用<a href="https://github.com/SnapKit/Masonry">Masonry</a>，代码的可读性就能好很多。</p></li>
<li><p>ios9.0开始：</p>

<ul>
<li>可以使用UIStackView（Horizontal / Vertical）帮助进行AutoLayout，因为UIStackView使用AutoLayout进行内部view的布局。</li>
<li>在进行AutoLayout的时候，可以使用UILayoutGuide帮助布局。UILayoutGuide比UIView轻量级很多，通过UIView的<code>addLayoutGuide:</code>方法加入。</li>
</ul>
</li>
<li><p>如果还有使用Frame的，可以考虑一下使用<a href="https://github.com/casatwy/HandyAutoLayout">这个项目</a>。</p>

<ul>
<li>这个项目里面提供了Frame相关的方便方法(UIView+LayoutMethods)，里面的方法也基本涵盖了所有布局的需求，可读性非常好，使用它之后基本可以和CGRectMake说再见了。因为天猫在最近才切换到支持iOS6，所以之前天猫都是用Frame布局的，在天猫App中，首页，范儿部分页面的布局就使用了这些方法。使用这些方便方法能起到事半功倍的效果。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios进行网络请求]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/29/ios-network-request/"/>
    <updated>2015-11-29T15:12:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/29/ios-network-request</id>
    <content type="html"><![CDATA[<p>ios网络请求设计的一些类，可以参考；<a href="http://blog.csdn.net/dyllove98/article/details/9050863">IOS网络编程：HTTP</a>。</p>

<p>下面主要说说NSURLSession。</p>

<!-- more -->


<h3>NSURLSession</h3>

<p>参考官方文档：<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/NSURLSessionConcepts/NSURLSessionConcepts.html#//apple_ref/doc/uid/10000165i-CH2-SW1">Life Cycle of a URL Session</a>。根据官方文档的Sample code如下：</p>

<ul>
<li>Life Cycle of a URL Session with System-Provided Delegates</li>
</ul>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startWithURLString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">urlString</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="cm">/**</span>
<span class="lineno"> 3</span> <span class="cm">     *  using stringByAddingPercentEscapesUsingEncoding to support Chinese characters in url string</span>
<span class="lineno"> 4</span> <span class="cm">     */</span>
<span class="lineno"> 5</span>     <span class="bp">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:[</span><span class="n">urlString</span> <span class="nl">stringByAddingPercentEscapesUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]];</span>
<span class="lineno"> 6</span>     <span class="bp">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLRequest</span> <span class="nl">requestWithURL</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
<span class="lineno"> 7</span>     
<span class="lineno"> 8</span>     <span class="bp">NSURLSessionConfiguration</span><span class="o">*</span> <span class="n">configuration</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLSessionConfiguration</span> <span class="n">ephemeralSessionConfiguration</span><span class="p">];</span>
<span class="lineno"> 9</span>     <span class="bp">NSURLSession</span><span class="o">*</span> <span class="n">session</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLSession</span> <span class="nl">sessionWithConfiguration</span><span class="p">:</span><span class="n">configuration</span><span class="p">];</span>
<span class="lineno">10</span>     <span class="bp">NSURLSessionDataTask</span><span class="o">*</span> <span class="n">dataTask</span> <span class="o">=</span> <span class="p">[</span><span class="n">session</span> <span class="nl">dataTaskWithRequest</span><span class="p">:</span><span class="n">request</span>
<span class="lineno">11</span>                                                 <span class="nl">completionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">12</span>                                                     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">13</span>                                                         <span class="k">if</span> <span class="p">([</span><span class="n">request</span><span class="p">.</span><span class="n">URL</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">url</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno">14</span>                                                             <span class="cm">/**</span>
<span class="lineno">15</span> <span class="cm">                                                             *  currently we are not in the main thread</span>
<span class="lineno">16</span> <span class="cm">                                                             *  call method in main thread to update the UI</span>
<span class="lineno">17</span> <span class="cm">                                                             */</span>
<span class="lineno">18</span>                                                             <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
<span class="lineno">19</span> 
<span class="lineno">20</span>                                                             <span class="p">});</span>
<span class="lineno">21</span>                                                         <span class="p">}</span>
<span class="lineno">22</span>                                                     <span class="p">}</span>
<span class="lineno">23</span>                                                 <span class="p">}];</span>
<span class="lineno">24</span>     <span class="p">[</span><span class="n">dataTask</span> <span class="n">resume</span><span class="p">];</span>
<span class="lineno">25</span> 
<span class="lineno">26</span> <span class="p">}</span></code></pre></div>




<!-- more -->


<ul>
<li>Life Cycle of a URL Session with Custom Delegates</li>
</ul>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startWithURLString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">urlString</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="cm">/**</span>
<span class="lineno"> 3</span> <span class="cm">     *  using stringByAddingPercentEscapesUsingEncoding to support Chinese characters in url string</span>
<span class="lineno"> 4</span> <span class="cm">     */</span>
<span class="lineno"> 5</span>     <span class="bp">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:[</span><span class="n">urlString</span> <span class="nl">stringByAddingPercentEscapesUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]];</span>
<span class="lineno"> 6</span>     <span class="bp">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLRequest</span> <span class="nl">requestWithURL</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
<span class="lineno"> 7</span>     
<span class="lineno"> 8</span>     <span class="bp">NSURLSessionConfiguration</span><span class="o">*</span> <span class="n">configuration</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLSessionConfiguration</span> <span class="n">ephemeralSessionConfiguration</span><span class="p">];</span>
<span class="lineno"> 9</span>     
<span class="lineno">10</span>     <span class="bp">NSURLSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLSession</span> <span class="nl">sessionWithConfiguration</span><span class="p">:</span><span class="n">configuration</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">delegateQueue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]];</span>
<span class="lineno">11</span>     
<span class="lineno">12</span>     <span class="bp">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">dataTask</span> <span class="o">=</span> <span class="p">[</span><span class="n">session</span> <span class="nl">dataTaskWithRequest</span><span class="p">:</span><span class="n">request</span><span class="p">];</span>
<span class="lineno">13</span>     
<span class="lineno">14</span>     <span class="nb">self</span><span class="p">.</span><span class="n">responseData</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableData</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="lineno">15</span>     
<span class="lineno">16</span>     <span class="p">[</span><span class="n">dataTask</span> <span class="n">resume</span><span class="p">];</span>
<span class="lineno">17</span> <span class="p">}</span></code></pre></div>


<p>以及NSURLSessionDataDelegate中的：</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="lineno"> 1</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">dataTask:</span><span class="p">(</span><span class="bp">NSURLSessionDataTask</span> <span class="o">*</span><span class="p">)</span><span class="nv">dataTask</span> <span class="nf">didReceiveData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
<span class="lineno"> 2</span>     <span class="c1">// self.responseData is NSMutableData type</span>
<span class="lineno"> 3</span>     <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">responseData</span> <span class="nl">appendData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
<span class="lineno"> 4</span> <span class="p">}</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">task:</span><span class="p">(</span><span class="bp">NSURLSessionTask</span> <span class="o">*</span><span class="p">)</span><span class="nv">task</span> <span class="nf">didCompleteWithError:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
<span class="lineno"> 7</span>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span>     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno">10</span> 
<span class="lineno">11</span>     <span class="p">}</span>
<span class="lineno">12</span> <span class="p">}</span></code></pre></div>


<blockquote><p>NSURLSessionDataTask不能携带completionHandler，否则上面的delegate不会调到。</p></blockquote>

<h3>App Transport Security</h3>

<p>如果遇到如下错误信息：</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. 
Temporary exceptions can be configured via your app&#39;s Info.plist file.</code></pre></div>


<p>打开Info.plist，加入如下字段：</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="lineno">1</span> <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
<span class="lineno">2</span>     <span class="nt">&lt;dict&gt;</span>
<span class="lineno">3</span>         <span class="c">&lt;!--Include to allow all connections (DANGER)--&gt;</span>
<span class="lineno">4</span>         <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
<span class="lineno">5</span>         <span class="nt">&lt;true/&gt;</span>
<span class="lineno">6</span>     <span class="nt">&lt;/dict&gt;</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime的一些插件]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/28/some-useful-plugins-for-sublime/"/>
    <updated>2015-11-28T23:45:59+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/28/some-useful-plugins-for-sublime</id>
    <content type="html"><![CDATA[<h3>Package Control</h3>

<p><a href="https://packagecontrol.io/installation#st2">Package Control</a>是Sublime中用于插件管理的工具。安装之后，其它插件基本上可以通过它进行管理：安装、删除、禁用等。</p>

<h3>JSFormat</h3>

<!-- more -->


<p>可以对Javascript和json文件进行格式化。</p>

<p>对于json，如果不想用本地插件，可以用<a href="http://jsonviewer.stack.hu/">Online Json Viewer</a>。</p>

<h3>JSHint Guntter</h3>

<ul>
<li>Run JSHint: Command+Shift+J</li>
<li>Clear Annotations: Command+Escape</li>
</ul>


<p>对于一些关键字，比如node中的<code>require</code>，在.jshintrc文件中通过设置<code>predef</code>进行排除。.jshintrc通过Preferrences->Package Settings->JSHint Gunter->Set Linting Preferences打开。</p>

<h3>Sublime ​Code​Intel</h3>

<ul>
<li><p>自动代码补全功能</p></li>
<li><p>代码间跳转</p>

<ul>
<li>Jump to definition = Control+Click</li>
<li>Go back = Control+Alt+Command+Left</li>
</ul>
</li>
</ul>


<h3>Bracket Highlighter</h3>

<p>可以对括号（圆括号，方括号，花括号，尖括号等）和标签（html tag等）进行自定义高亮。</p>

<p>自定义方法：</p>

<ul>
<li>打开Preferences->Package Settings->Bracket Highlighter->Brakets Settings - <strong>Default</strong>，复制。这个文件无法修改。</li>
<li>打开Preferences->Package Settings->Bracket Highlighter->Brakets Settings - <strong>User</strong>，粘贴。修改<code>bracket styles</code>。此文件中的设置将覆盖<strong>Default</strong>中的设置。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用Node.js搭建一个简单的服务器]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/27/using-node-dot-js-for-a-simple-server/"/>
    <updated>2015-11-27T16:45:10+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/27/using-node-dot-js-for-a-simple-server</id>
    <content type="html"><![CDATA[<h3>第一个简单应用</h3>

<p>参考<a href="http://code.tutsplus.com/tutorials/nodejs-for-beginners--net-26314">Node.js for Beginners</a>. 去除以下代码：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno">1</span> <span class="nx">request</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="p">});</span></code></pre></div>


<h3>如何调试Node.js在服务器上的应用</h3>

<!-- more -->


<p><a href="https://github.com/node-inspector/node-inspector">node-inspector</a>是一款非常好用的GUI调试工具，可以让你像调试Web页面一样，在Chrome或者Opera里面调试Node.js应用。</p>

<p>安装</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm install -g node-inspector</code></pre></div>


<p>打开</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">$ node-debug app.js</code></pre></div>


<h4>注意</h4>

<ul>
<li>node-inspector只支持Chrome和Opera，所以至少将其中之一设为你的默认浏览器。</li>
<li>node-inspector使用127.0.0.1:8080进行调试，所以，保证localhost的8080端口没有被占用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tools to Impromve Efficiency in Daily Life]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/11/19/some-tools-to-impromve-efficiency-in-daily-life/"/>
    <updated>2015-11-19T16:16:22+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/11/19/some-tools-to-impromve-efficiency-in-daily-life</id>
    <content type="html"><![CDATA[<h3>Everything</h3>

<p>瞬间搜索全机器文件。但是只支持文件名搜索，不支持文件内容搜索。结合DocFetcher应用，可以大大提高搜索文件的效率。</p>

<h3>DocFetcher</h3>

<p>支持文件内容搜索。但是索引文件较大，最好分目录进行索引，不要索引整台计算机。结合Everything应用，可以大大提高搜索文件的效率。</p>

<!-- more -->


<h3>RescueTime</h3>

<p>可以用来监督你一天之中分别有多少时间花在什么地方。在上淘宝的时候都想快点结束，不然一天下来数据会很难看。</p>

<h3>Astah</h3>

<p>用<strong>Astah Community</strong>（Astah还有收费版本：Astah Professional，功能更全，不过Astah Community完全够用了。）来画UML图的class diagram和sequence diagram非常方便，尤其是sequence diagram，相比于之前用的<strong>Dia</strong>，简直是方便太多了，用<strong>Dia</strong>画sequence diagram简直就是噩梦。</p>

<p>对于Astah中定义的UML sequence diagram，参考<a href="http://www.uml.org.cn/oobject/201009081.asp">UML建模之时序图（Sequence Diagram）</a></p>

<h3>图像视频操作</h3>

<h4>LICECap</h4>

<p><a href="http://www.cockos.com/licecap/">LICECap</a>用来快速将屏幕操作等转换成gif动画，比先录屏再转换快太多了。</p>

<p>使用Mac自带的Preview是不能预览gif图片的，可以通过一下两种方式预览：</p>

<ul>
<li>在Finder中选中gif图片，在右边的预览框中预览。</li>
<li>将gif用浏览器打开预览，比如Safari。</li>
</ul>


<h4>PicGif Lite</h4>

<p>PicGif用来将视频或者图片转换成gif图片，这种工具很多，还有在线工具，比如<a href="http://www.uupoop.com/gif/">uupoop</a>。<del>我主要用这个来进行gif图的预览。</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating Files and Folders With Command Line in Terminal]]></title>
    <link href="http://hongchaozhang.github.io/blog/2015/10/28/operating-files-and-folders-with-command-line-in-terminal/"/>
    <updated>2015-10-28T16:26:14+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2015/10/28/operating-files-and-folders-with-command-line-in-terminal</id>
    <content type="html"><![CDATA[<p>为什么需要在命令行进行文件和文件夹的操作：</p>

<!-- more -->


<ul>
<li>通过正则表达式批量处理文件（夹）。</li>
<li>可以用来删除隐藏文件，比如一些以“.”开头的设置文件。</li>
<li>打不开Finder的情况下。</li>
<li>强制删除一些顽固的文件。</li>
</ul>


<p>一些常用命令罗列：</p>

<table>
<thead>
<tr>
<th>命令 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>pwd</strong> </td>
<td> 打印当前工作路径（print working directory）</td>
</tr>
<tr>
<td><strong>touch</strong> fileName </td>
<td> 创建文件fileName</td>
</tr>
<tr>
<td><strong>ls -a</strong> </td>
<td> 列出当前文件夹下的所有文件，包括以‘.’开头的隐藏文件。</td>
</tr>
<tr>
<td><strong>vi</strong> <em>file</em> </td>
<td> 在当前位置用vim打开file，如果已经存在，直接打开。</td>
</tr>
<tr>
<td><strong>mkdir</strong> <em>folder</em> </td>
<td> 创建文件夹。</td>
</tr>
<tr>
<td><strong>cp</strong> <em>sourceFile</em> <em>destFolder</em> </td>
<td> 将sourceFile拷贝到destFolder下。</td>
</tr>
<tr>
<td><strong>cp</strong> <strong>-R</strong> <em>sourceFolder</em> <em>destFolder</em> </td>
<td> 将sourceFolder及其下面的所有资源拷贝到destFolder下，R是reverse的意思。</td>
</tr>
<tr>
<td><strong>mv</strong> <em>sourceFile</em> <em>destFolder</em> </td>
<td> 将sourceFile移动到destFolder下。</td>
</tr>
<tr>
<td><strong>rm</strong> <em>file.txt</em> </td>
<td> 删除文件。</td>
</tr>
<tr>
<td><strong>rm</strong> <strong>-R</strong> <em>folder</em> </td>
<td> 删除文件夹和里面的子文件（夹），R是reverse的意思。</td>
</tr>
<tr>
<td><strong>echo</strong> &ldquo;hello&rdquo; </td>
<td> 将“hello”字符串输出到terminal中</td>
</tr>
<tr>
<td><strong>echo</strong> &ldquo;hello&rdquo; <strong>></strong> hello.txt </td>
<td> 将“hello”字符串写进文件hello.txt文件中</td>
</tr>
<tr>
<td><strong>cat</strong> hello.txt </td>
<td> 将hello.txt文件的内容输出到terminal中</td>
</tr>
<tr>
<td><strong>cat</strong> hello.txt <strong>></strong> dest.txt </td>
<td> 将hello.txt中的内容<strong>覆盖</strong>dest.txt文件的内容</td>
</tr>
<tr>
<td><strong>cat</strong> hello.txt <strong>>></strong> dest.txt </td>
<td> 将hello.txt中的内容<strong>追加</strong>到dest.txt文件的内容</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
