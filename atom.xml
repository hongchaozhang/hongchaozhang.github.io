<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2018-01-14T00:23:10+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoreML Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage/"/>
    <updated>2017-12-28T17:25:39+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/coreml-usage</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Model Usage</h2>

<p>When you load a trained machine learning model (.mlmodel) into xcode, the screenshot is like (take inceptionv3.mlmodel as an example):</p>

<p><img src="http://hongchaozhang.github.io/images/mlmodel_in_xcode.png" alt="machine learning model imported to xcode" /></p>

<p>From <em>Model Class</em> (section A), we can see that xcode has <em>Automatically generated Swift model calss</em>. Click the right arrow to view the generated model class.</p>

<p>If the model class is not generated successfully, double check <em>Target Membership</em> (section B) to make sure the mlmodel file is added into the correct target.</p>

<p>From <em>Model Evaluation Parameters</em>(section C), we can see the input and output of the trained model.</p>

<p>The following is a sample usage of image classification model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// create request</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">selectedModel</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">VNCoreMLModel</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">Inceptionv3</span><span class="p">().</span><span class="n">model</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Could not load model. Ensure model has been drag and dropped (copied) to XCode Project. Also ensure the model is part of a target.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">classificationRequest</span> <span class="o">=</span> <span class="n">VNCoreMLRequest</span><span class="p">(</span><span class="nl">model</span><span class="p">:</span> <span class="n">selectedModel</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="n">classificationCompleteHandler</span><span class="p">)</span>
</span><span class='line'><span class="n">classificationRequest</span><span class="p">.</span><span class="n">imageCropAndScaleOption</span> <span class="o">=</span> <span class="n">VNImageCropAndScaleOption</span><span class="p">.</span><span class="n">centerCrop</span> <span class="c1">// Crop from centre of images and scale to appropriate size.</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run request against an image</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">pixbuff</span> <span class="o">=</span> <span class="p">(</span><span class="n">sceneView</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">currentFrame</span><span class="o">?</span><span class="p">.</span><span class="n">capturedImage</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">ciImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">cvPixelBuffer</span><span class="p">:</span> <span class="n">pixbuff</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Note1: Not entirely sure if the ciImage is being interpreted as RGB, but for now it works with the Inception model.</span>
</span><span class='line'><span class="c1">// Note2: Also uncertain if the pixelBuffer should be rotated before handing off to Vision (VNImageRequestHandler) - regardless, for now, it still works well with the Inception model.</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">imageRequestHandler</span> <span class="o">=</span> <span class="n">VNImageRequestHandler</span><span class="p">(</span><span class="nl">ciImage</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">imageRequestHandler</span><span class="p">.</span><span class="n">perform</span><span class="p">([</span><span class="n">classificationRequest</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// completion handler for coping with image classification results.</span>
</span><span class='line'><span class="k">func</span> <span class="n">classificationCompleteHandler</span><span class="p">(</span><span class="nl">request</span><span class="p">:</span> <span class="n">VNRequest</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">Error</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Error: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">error</span><span class="o">?</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">observations</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">results</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;No results&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get Classifications</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">classifications</span> <span class="o">=</span> <span class="n">observations</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mf">.1</span><span class="p">]</span> <span class="c1">// top 2 results</span>
</span><span class='line'>        <span class="p">.</span><span class="n">flatMap</span><span class="p">({</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="n">VNClassificationObservation</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">filter</span><span class="p">({</span> <span class="err">$</span><span class="mf">0.</span><span class="n">confidence</span> <span class="o">&gt;</span> <span class="mf">0.2</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">({</span> <span class="s">&quot;\($0.identifier) \(String(format:&quot;</span><span class="o">-</span> <span class="o">%</span><span class="mf">.2f</span><span class="s">&quot;, $0.confidence))&quot;</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="n">joined</span><span class="p">(</span><span class="nl">separator</span><span class="p">:</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;image recognition: &quot;</span> <span class="o">+</span> <span class="n">classifications</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refer to <a href="https://developer.apple.com/machine-learning/">Build more intelligent apps with machine learning</a> for some official materails.</p>

<p>For some detailed usage step by step, refer to <a href="https://www.raywenderlich.com/164213/coreml-and-vision-machine-learning-in-ios-11-tutorial">Core ML and Vision: Machine Learning in iOS 11 Tutorial</a>.</p>

<h2>Model Training</h2>

<h3>Basic</h3>

<p><img src="http://hongchaozhang.github.io/images/CustomVisionFromMicroSoft.png" alt="Custom Vision From MicroSoft" /></p>

<p>Microsoft <a href="https://www.customvision.ai/">Custom Vision</a> supplies a very friendly UI interface. You can upload you images and label them very easily. After training is done, you can export the model for mobile devices, including: mlmodel file for iOS platform, and TensorFlow model on Android platform.</p>

<p>Friendly UI Interface:</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceOfCustomVision.png" alt="interface of microsoft custom vision" /></p>

<p>But there are some limitations, as <a href="https://www.customvision.ai/">Custom Vision</a> is still in preview process.</p>

<p><img src="http://hongchaozhang.github.io/images/MicroSoftCustomVisionLimitation.png" alt="limitation of microsoft custom vision" /></p>

<h3>Advanced</h3>

<p><a href="https://github.com/apple/turicreate/tree/master/userguide/image_classifier">apple turicreate image classification</a> supplies more configurations for model training, like the partition of trainning data and verification data. But some Python experience is needed.</p>

<h2>CoreML Pros and Cons</h2>

<h3>Pros</h3>

<ol>
<li><p><strong>Easy to use.</strong> As described at the beginning of the post.</p></li>
<li><p><strong>High performance.</strong> As is said:</p>

<blockquote><p>“It was amazing to see the prediction results immediately without any time interval.”</p></blockquote></li>
</ol>


<h3>Cons</h3>

<p><strong>Lack of federated learning.</strong> As is said:</p>

<blockquote><p>There are no provisions within Core ML for model retraining or federated learning, where data collected from the field is used to improve the accuracy of the model. That’s something you would have to implement by hand, most likely by asking app users to opt in for data collection and using that data to retrain the model for a future edition of the app.</p></blockquote>

<p>Refer to <a href="https://www.infoworld.com/article/3200885/machine-learning/apples-core-ml-the-pros-and-cons.html">Apple’s Core ML: The pros and cons</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARKit Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage/"/>
    <updated>2017-12-28T17:25:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/12/28/arkit-usage</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Requirement</h2>

<ul>
<li>iOS 11 and above system.</li>
<li>iOS device with an A9 or later processor.</li>
</ul>


<p>To make your app available only on devices supporting ARKit, use the arkit key in the <code>UIRequiredDeviceCapabilities</code> section of your app&rsquo;s Info.plist. If augmented reality is a secondary feature of your app, use the <code>isSupported</code> property to determine whether the current device supports the session configuration you want to use.</p>

<h2>ARKit Usage</h2>

<h3>ARKit in iOS System</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitFramework.png" alt="arkit in ios system" /></p>

<h3>ARKit Key Classes</h3>

<p><img src="http://hongchaozhang.github.io/images/ARKitUsage.png" alt="arkit usage" /></p>

<h3><a href="https://developer.apple.com/documentation/arkit/arsession"><code>ARSession</code></a></h3>

<p>An <code>ARSession</code> object coordinates the major processes that ARKit performs on your behalf to create an augmented reality experience. These processes include reading data from the device&rsquo;s motion sensing hardware, controlling the device&rsquo;s built-in camera, and performing image analysis on captured camera images. The session synthesizes all of these results to establish a correspondence between the real-world space the device inhabits and a virtual space where you model AR content.</p>

<p>Every AR experience built with ARKit requires a single <code>ARSession</code>object. If you use an <code>ARSCNView</code> or <code>ARSKView</code> object to easily build the visual part of your AR experience, the view object includes an <code>ARSession</code> instance. If you build your own renderer for AR content, you&rsquo;ll need to instantiate and maintain an ARSession object yourself.</p>

<p>Running a session requires a session configuration: an instance of the <code>ARConfiguration</code> class, or its subclass <code>ARWorldTrackingConfiguration</code>. These classes determine how ARKit tracks a device&rsquo;s position and motion relative to the real world, and thus affect the kinds of AR experiences you can create.</p>

<h3><a href="https://developer.apple.com/documentation/arkit/arconfiguration"><code>ARConfiguration</code></a></h3>

<p><code>ARConfiguration</code> is an abstract class; you do not create or work with instances of this class.</p>

<p>To run an AR session, create an instance of the concrete <code>ARConfiguration</code> subclass that provides the kind of augmented reality experience you want to use in your app or game. Then, set up the configuration object&rsquo;s properties and pass the configuration to your session&rsquo;s <code>run(_:options:)</code> method. ARKit includes the following concrete configuration classes:</p>

<ul>
<li><p><a href="https://developer.apple.com/documentation/arkit/arworldtrackingconfiguration"><code>ARWorldTrackingConfiguration</code></a>
Provides high-quality AR experiences that use the rear-facing camera precisely track a device&rsquo;s position and orientation and allow plane detection and hit testing. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>ARWorldTrackingConfiguration</code> class tracks the device&rsquo;s movement with six degrees of freedom (6DOF): specifically, the three rotation axes (roll, pitch, and yaw), and three translation axes (movement in x, y, and z).</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arorientationtrackingconfiguration"><code>AROrientationTrackingConfiguration</code></a>
Provides basic AR experiences that use the rear-facing camera and track only a device&rsquo;s orientation. Creating and maintaining this correspondence between spaces requires tracking the device&rsquo;s motion. The <code>AROrientationTrackingConfiguration</code> class tracks the device&rsquo;s movement with three degrees of freedom (3DOF): specifically, the three rotation axes (roll, pitch, and yaw).</p>

<p>  <code>AROrientationTrackingConfiguration</code> cannot track movement of the device, and 3DOF tracking does not support plane detection or hit testing.</p>

<p>  Use 3DOF tracking only as a fallback in situations where 6DOF tracking is temporarily unavailable.</p></li>
<li><p><a href="https://developer.apple.com/documentation/arkit/arfacetrackingconfiguration"><code>ARFaceTrackingConfiguration</code></a>
Provides AR experiences that use the front-facing camera and track the movement and expressions of the user&rsquo;s face. Face tracking is available only on iOS devices with a front-facing TrueDepth camera.</p></li>
</ul>


<h3>More on <a href="https://developer.apple.com/documentation/arkit/arworldtrackingconfiguration"><code>ARWorldTrackingConfiguration</code></a></h3>

<p>Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a> for an official explaination of the world tracking things.</p>

<p>World tracking process can be illustracted as:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTracking.gif" alt="arkit world tracking" /></p>

<blockquote><p>One questiong here: How does ARKit know how long is 1 meter in the real world?</p></blockquote>

<h4>Tracking Quality</h4>

<p>To get better tracking quality:</p>

<ol>
<li>Uninterrupted sensor data</li>
<li>Textured environments</li>
<li>Static scenes</li>
</ol>


<p>If tracking quality changes, the tracking state will also change:</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitTrackingState.png" alt="arkit tracing state transition" /></p>

<p>And the tracking state changes will be notified by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">session</span><span class="p">(</span><span class="n">_</span> <span class="nl">session</span><span class="p">:</span> <span class="n">ARSession</span><span class="p">,</span> <span class="n">cameraDidChangeTrackingState</span> <span class="nl">camera</span><span class="p">:</span> <span class="n">ARCamera</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">case</span> <span class="p">.</span><span class="n">limited</span><span class="p">(</span><span class="k">let</span> <span class="n">reason</span><span class="p">)</span> <span class="o">=</span> <span class="n">camera</span><span class="p">.</span><span class="n">trackingState</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Notify user of limited tracking state</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>ARFrame</code></h3>

<p>After world tracking, we can get the 6 DOF of the camera, used for the upcomming rendering. These infos are stored in each <code>ARFrame</code>.</p>

<p><code>ARFrame</code> owns video image and position tracking information captured as part of an AR session. There are two ways to access <code>ARFrame</code> objects produced by an AR session, depending on whether your app favors a pull or a push design pattern.</p>

<ul>
<li><em>Pull Pattern</em>: get <code>currentFrame</code> from <code>ARSession</code>.</li>
<li><em>Push Pattern</em>: implement the <code>session(_:didUpdate:)</code> delegate method, and the session will call it once for each video frame it captures (at 60 frames per second by default).</li>
</ul>


<p>Key infos in <code>ARFrame</code>:</p>

<ol>
<li><p><strong><code>ARCamera</code></strong>: Information about the camera position and imaging characteristics for a captured video frame in an AR session. Get <code>camera</code> from <code>ARFrame</code>.</p></li>
<li><p><strong><code>ARLightEstimate</code></strong>: Estimated scene lighting information associated with a captured video frame in an AR session. Get <code>lightEstimate</code> from <code>ARFrame</code>.</p>

<p> Refer to <a href="https://blog.markdaws.net/arkit-by-example-part-4-realism-lighting-pbr-b9a0bedb013e">ARKit by Example — Part 4: Realism - Lighting &amp; PBR</a> for mimicing the environment light.</p></li>
</ol>


<h3>HitTest for Real World Position</h3>

<p>By calling the following method on <code>ARSCNView</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">func</span> <span class="n">hitTest</span><span class="p">(</span><span class="n">_</span> <span class="nl">point</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">,</span> <span class="nl">types</span><span class="p">:</span> <span class="n">ARHitTestResult</span><span class="p">.</span><span class="n">ResultType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">ARHitTestResult</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>we can get an array of <code>ARHitTestResult</code>, which stay at the very position point indicates. The <code>ARHitTestResult</code>s are sorted by distance. To call the method, you need to specify the <code>ARHitTestResult.ResultType</code>. There are four kinds of hitTest types:</p>

<h4><code>existingPlane</code></h4>

<p>Return the result type from intersecting with an existing plane anchor.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestExistingPlane.gif" alt="arkit hittest existing plane" /></p>

<h4><code>existingPlaneUsingExtent</code></h4>

<p>Return the result type from intersecting with an existing plane anchor, taking into account the plane’s extent.</p>

<h4><code>estimatedHorizontalPlane</code></h4>

<p>Return the result type from intersecting a horizontal plane estimate, determined for the current frame.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestEstimatedPlane.gif" alt="arkit hittest estimated plane" /></p>

<h4><code>featurePoint</code></h4>

<p>Return the result type from intersecting the nearest feature point.</p>

<p><img src="http://hongchaozhang.github.io/images/ARKitHitTestFeaturePoints.gif" alt="" /></p>

<h3>Display Virtual Object in Real World</h3>

<h4>Standard View</h4>

<ul>
<li><strong><code>ARSCNView</code></strong>: A view for displaying AR experiences that augment the camera view with 3D SceneKit content.</li>
<li><strong><code>ARSKView</code></strong>: A view for displaying AR experiences that augment the camera view with 2D SpriteKit content.</li>
</ul>


<h4>Custom View (Refer to <a href="https://developer.apple.com/documentation/arkit/displaying_an_ar_experience_with_metal">Displaying an AR Experience with Metal</a>)</h4>

<p>To display your AR experience in a custom view, you’ll need to:</p>

<ol>
<li>Retrieve video frames and tracking information from the session.</li>
<li>Render those frame images as the backdrop for your view.</li>
<li>Use the tracking information to position and draw AR content atop the camera image.</li>
</ol>


<h3>Face-Based AR Experiences</h3>

<p><strong>Creating Face-Based AR Experiences</strong>
Place and animate 3D content that follows the user’s face and matches facial expressions, using the TrueDepth camera on iPhone X. Reer to <a href="https://developer.apple.com/documentation/arkit/creating_face_based_ar_experiences">Creating Face-Based AR Experiences</a> for an official example.</p>

<ul>
<li><strong><code>ARFaceTrackingConfiguration</code></strong>: A configuration that tracks the movement and expressions of the user’s face using the TrueDepth camera.</li>
<li><strong>ARFaceAnchor</strong>: Information about the pose, topology, and expression of a face detected in a face-tracking AR session.</li>
</ul>


<h2>Best Practices and Limitations</h2>

<h3>Best Practices (Refer to <a href="https://developer.apple.com/documentation/arkit/about_augmented_reality_and_arkit">About Augmented Reality and ARKit</a>)</h3>

<p>World tracking is an inexact science. This process can often produce impressive accuracy, leading to realistic AR experiences. However, it relies on details of the device’s physical environment that are not always consistent or are difficult to measure in real time without some degree of error. To build high-quality AR experiences, be aware of these caveats and tips.</p>

<p><strong>Design AR experiences for predictable lighting conditions.</strong></p>

<p> World tracking involves image analysis, which requires a clear image. Tracking quality is reduced when the camera can’t see details, such as when the camera is pointed at a blank wall or the scene is too dark.</p>

<p><strong>Use tracking quality information to provide user feedback.</strong></p>

<p> World tracking correlates image analysis with device motion. ARKit develops a better understanding of the scene if the device is moving, even if the device moves only subtly. Excessive motion—too far, too fast, or shaking too vigorously—results in a blurred image or too much distance for tracking features between video frames, reducing tracking quality. The ARCamera class provides tracking state reason information, which you can use to develop UI that tells a user how to resolve low-quality tracking situations.</p>

<p><strong>Allow time for plane detection to produce clear results, and disable plane detection when you have the results you need.</strong></p>

<p> Plane detection results vary over time—when a plane is first detected, its position and extent may be inaccurate. As the plane remains in the scene over time, ARKit refines its estimate of position and extent. When a large flat surface is in the scene, ARKit may continue changing the plane anchor’s position, extent, and transform after you’ve already used the plane to place content.</p>

<h3>Limitations</h3>

<ol>
<li>For a moving object, ARKit can not give an usable world position of it.</li>
<li>You can not put a virtual object behind a real object. This leads to some problems, like:

<ol>
<li>When an real object move in front of an virtual object, the virtual object will still be displayed in front of the real object.</li>
<li>You can not hold a virtual object coolly, as the virtual object you are trying to hold can not be behind your fingers.</li>
</ol>
</li>
</ol>


<p>Two thoughts that may be help on the second limitation:</p>

<ul>
<li>Segment the camera image based on the feature point with world position. Draw further real object, and then virtual object, and at last, the nearest real object. However, as the feature point is sparse (performance consideration), some edge detection algorithms are needed for accurate edges of objects.</li>
<li>Based on the dual camera, we can get depth of each pixel of the camera image. This will help on image segmentation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tips on Markdown Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage/"/>
    <updated>2017-11-21T10:13:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/11/21/some-tips-on-markdown-usage</id>
    <content type="html"><![CDATA[<p>Collect some markdown usage tips.</p>

<!-- more -->


<h2>insert an image</h2>

<p>To insert the image, just use the path under the base url, for me, it is <em>/GitBlogs/images/<image_name>.png</em>, for example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![image annotation](/images/001_ios_frameworks.png)</span></code></pre></td></tr></table></div></figure>


<h2>show content while click</h2>

<p>Using the following block of code for hiding some content and show the content while click.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;details&gt;</span>
</span><span class='line'>  <span class="nt">&lt;summary&gt;</span>Q1: What is the best Language in the World? <span class="nt">&lt;/summary&gt;</span>
</span><span class='line'>   A1: Swift
</span><span class='line'><span class="nt">&lt;/details&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will get:</p>

<p><details>
  <summary><em>Question: What is the best Language in the World?</em></summary>
   Answer: Swift
</details></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的Error]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift/"/>
    <updated>2017-10-20T16:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/10/20/errors-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->




<!-- TOC depthFrom:1 depthTo:3 insertAnchor:true -->


<ul>
<li><a href="#swift-error%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">Swift Error基本使用</a>

<ul>
<li><a href="#throws-in-swift-1x"><code>throws</code> in Swift 1.x</a></li>
<li><a href="#throws-in-swift-2"><code>throws</code> in Swift 2</a></li>
<li><a href="#throws%E7%9A%84%E4%BD%BF%E7%94%A8"><code>throws</code>的使用</a></li>
<li><a href="#throws%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86"><code>throws</code>抛出错误的处理</a></li>
</ul>
</li>
<li><a href="#throws%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5"><code>throws</code>的一些实践</a>

<ul>
<li><a href="#throws%E7%9A%84%E8%B0%83%E8%AF%95%E5%92%8C%E6%96%AD%E7%82%B9"><code>throws</code>的调试和断点</a></li>
<li><a href="#throws%E4%BB%8D%E7%84%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"><code>throws</code>仍然存在的问题</a></li>
</ul>
</li>
<li><a href="#swift-%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A7%8D%E7%B1%BB">Swift 错误类型的种类</a>

<ul>
<li><a href="#simple-domain-error">Simple domain error</a></li>
<li><a href="#recoverable-error">Recoverable error</a></li>
<li><a href="#universal-error">Universal error</a></li>
<li><a href="#logic-failure">Logic failure</a></li>
</ul>
</li>
<li><a href="#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">几种常见场景下的错误处理</a>

<ul>
<li><a href="#app%E5%86%85%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD">app内资源加载</a></li>
<li><a href="#%E5%8A%A0%E8%BD%BD%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%97%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF">加载当前用户信息时发生错误</a></li>
<li><a href="#%E8%BF%98%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81">还没有实现的代码</a></li>
<li><a href="#%E8%B0%83%E7%94%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84%E4%BC%A0%E6%84%9F%E5%99%A8%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE">调用设备上的传感器收集数据</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
<li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95">错误处理相关的辅助方法</a>

<ul>
<li><a href="#use-custom-errors">Use Custom Errors</a></li>
<li><a href="#do-cleanup-work-using-defer">Do Cleanup Work Using <code>defer</code></a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<!-- /TOC -->


<p><a id="markdown-swift-error基本使用" name="swift-error基本使用"></a></p>

<h2>Swift Error基本使用</h2>

<p><a id="markdown-throws-in-swift-1x" name="throws-in-swift-1x"></a></p>

<h3><code>throws</code> in Swift 1.x</h3>

<p>在Objective-C中，<code>FileManager</code>的copy接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">copyItemAtPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">srcPath</span> <span class="nf">toPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">dstPath</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用该方法时，写法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">fileManager</span> <span class="nl">copyItemAtPath</span><span class="p">:</span><span class="n">srcPath</span> <span class="nl">toPath</span><span class="p">:</span><span class="n">toPath</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Swift 1.x中，与Objective-C类似。方法接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">_</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 发生了错误</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 复制成功</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，因为这个 API 仅会在极其特定的条件下 (比如磁盘空间不足) 会出错，所以开发者为了方便，有时会直接传入 nil 来忽视掉这个错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 不关心是否发生错误</span>
</span><span class='line'><span class="n">fileManager</span><span class="p">.</span><span class="n">copyItemAtPath</span><span class="p">(</span><span class="n">srcPath</span><span class="p">,</span> <span class="nl">toPath</span><span class="p">:</span> <span class="n">dstPath</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-throws-in-swift-2" name="throws-in-swift-2"></a></p>

<h3><code>throws</code> in Swift 2</h3>

<p>这种做法无形中降低了应用的可靠性以及从错误中恢复的能力。为了解决这个问题，Swift 2 中在编译器层级就对<code>throws</code>进行了限定。上面提到的copy接口在Swift 2中的形式为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">copyItem</span><span class="p">(</span><span class="n">atPath</span> <span class="nl">srcPath</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toPath</span> <span class="nl">dstPath</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>被标记为<code>throws</code>的API，必须被处理，否则编译器就会报错。这就在编译器层面对错误的处理进行了强制执行，保证了代码的可靠性。</p>

<p><a id="markdown-throws的使用" name="throws的使用"></a></p>

<h3><code>throws</code>的使用</h3>

<p>下面是包含<code>throws</code>的一个自动售货机实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">VendingMachineError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidSelection</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">outOfStock</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Item</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">price</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">VendingMachine</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">inventory</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;Candy Bar&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Chips&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">4</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&quot;Pretzels&quot;</span><span class="o">:</span> <span class="n">Item</span><span class="p">(</span><span class="nl">price</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="mi">11</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vend(itemNamed:)</code>方法的实现通过<code>guard</code>抛出购买过程中相应的错误。</p>

<p><a id="markdown-throws抛出错误的处理" name="throws抛出错误的处理"></a></p>

<h3><code>throws</code>抛出错误的处理</h3>

<p>被标记为<code>throws</code>的API，我们必须采用下面几种处理方式中的一种来处理，否则，编译器会报错。</p>

<h4><code>do catch</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">vendingMachine</span> <span class="o">=</span> <span class="n">VendingMachine</span><span class="p">()</span>
</span><span class='line'><span class="n">vendingMachine</span><span class="p">.</span><span class="n">coinsDeposited</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">vendingMachine</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Invalid Selection.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Out of Stock.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="k">let</span> <span class="n">coinsNeeded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Insufficient funds. Please insert an additional \(coinsNeeded) coins.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try?</code></h4>

<p>使用<code>try?</code>来处理错误，将其返回值变为Optional：如果在执行过程中出现错误，接口返回<code>nil</code>，同时错误停止继续传播。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">fetchDataFromDisk</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">fetchData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromDisk</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">fetchDataFromServer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try!</code></h4>

<p>如果你非常确信一个被标记为<code>throws</code>的接口，在你的环境中不会抛出错误，可以通过<code>try!</code>来强制终止错误的继续传播。如果在执行的时候出现了错误，那么抛出运行时错误，导致程序崩溃。</p>

<p>比如，<code>loadImage(atPath:)</code>方法加载指定目录下面的一张图片到内存中，如果加载异常，会抛出错误。在下面的使用中，我们希望加载一张应用中包含的图片，这种情况下，可以通过<code>try!</code>来终止错误的继续传播。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">photo</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">loadImage</span><span class="p">(</span><span class="nl">atPath</span><span class="p">:</span> <span class="s">&quot;./Resources/John Appleseed.jpg&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>try</code></h4>

<p>也可以直接使用<code>try</code>来调用被标记为<code>throws</code>的接口，但是这种情况下，错误会继续传播，包含该调用的方法也必须被标记为<code>throws</code>才行，否则，编译器会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">favoriteSnacks</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;Alice&quot;</span><span class="o">:</span> <span class="s">&quot;Chips&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Bob&quot;</span><span class="o">:</span> <span class="s">&quot;Licorice&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Eve&quot;</span><span class="o">:</span> <span class="s">&quot;Pretzels&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="k">func</span> <span class="n">buyFavoriteSnack</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">vendingMachine</span><span class="p">:</span> <span class="n">VendingMachine</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，因为<code>buyFavoriteSnack(person: vendingMachine:)</code>使用<code>try</code>调用了一个被标记为throws的接口<code>vend(itemNamed:)</code>，错误会继续传播，因此，该方法也需要标记为thorws。</p>

<p><a id="markdown-throws的一些实践" name="throws的一些实践"></a></p>

<h2><code>throws</code>的一些实践</h2>

<p><a id="markdown-throws的调试和断点" name="throws的调试和断点"></a></p>

<h3><code>throws</code>的调试和断点</h3>

<p>Swift的错误抛出并不是传统意义的exception，在调试时抛出错误并不会触发Exception断点。另外，throw本身是语言的关键字，而不是一个symbol，它也不能触发Symbolic类型的断点。如果我们希望在所有throw语句执行的时候让程序停住的话，需要一些额外的技巧。在之前 throw 的汇编实现中，可以看到所有throw语句在返回前都会进行一次<code>swift_willThrow</code>的调用，这就是一个有效的 Symbolic语句，我们设置一个<code>swift_willThrow</code>的Symbolic断点，就可以让程序在throw的时候停住，并使用调用栈信息来获知程序在哪里抛出了错误。</p>

<p>补充，在最新版本的Xcode中，Apple直接为我们在断点类型中加上了 “Swift Error Breakpoint”的选项，它背后做的就是在<code>swift_willThrow</code>上添加一个断点。不过因为有了更直接的方法，我们现在不再需要手动去添加这个符号断点了。我们可以通过设置“Swift Error Breakpoint”对throws进行断点设置和调试。设置方法如下：</p>

<p><img src="http://hongchaozhang.github.io/images/Swift-Error-Breakpoint.png" alt="swift error breakpoint" /></p>

<p><a id="markdown-throws仍然存在的问题" name="throws仍然存在的问题"></a></p>

<h3><code>throws</code>仍然存在的问题</h3>

<p>不能从接口直接看出有哪些可能抛出的Error，必须看Document才行，带来了一些不便。比如，只通过接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们没有办法知道这个接口可能返回哪些错误。此时，要么阅读文档，获得确切的抛出错误，分别进行处理；或者将所有的错误统一处理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snackName</span> <span class="o">=</span> <span class="n">favoriteSnacks</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">??</span> <span class="s">&quot;Candy Bar&quot;</span>
</span><span class='line'>    <span class="n">try</span> <span class="n">vendingMachine</span><span class="p">.</span><span class="n">vend</span><span class="p">(</span><span class="nl">itemNamed</span><span class="p">:</span> <span class="n">snackName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 错误抛出</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-swift-错误类型的种类" name="swift-错误类型的种类"></a></p>

<h2>Swift 错误类型的种类</h2>

<p>参考Swift官方文档<a href="https://github.com/apple/swift/blob/master/docs/ErrorHandling.rst">Error Handling in Swift<!-- 2.0--></a>，Swift中的错误有下面四种：</p>

<ol>
<li>Simple domain error</li>
<li>Recoverable error</li>
<li>Universal error</li>
<li>Logic failure</li>
</ol>


<p><a id="markdown-simple-domain-error" name="simple-domain-error"></a></p>

<h3>Simple domain error</h3>

<p>简单的，显而易见的错误。这类错误的最大特点是我们不需要知道原因，只需要知道错误发生，并且想要进行处理。用来表示这种错误发生的方法一般就是返回一个<code>nil</code>值。在Swift中，这类错误最常见的情况就是将某个字符串转换为整数，或者在字典尝试用某个不存在的 key 获取元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Simple Domain Error 的例子</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span> <span class="c1">// nil</span>
</span><span class='line'><span class="k">let</span> <span class="n">element</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="s">&quot;key_not_exist&quot;</span><span class="p">]</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>可能出现这种错误的接口，不需要使用<code>throws</code>来标记，只需要将接口的返回类型设置为Optional即可。</strong>在使用层面 (或者说应用逻辑) 上，这类错误一般用<code>if let</code>的可选值绑定或者是<code>guard let</code>提前进行返回处理即可。</p>

<p><a id="markdown-recoverable-error" name="recoverable-error"></a></p>

<h3>Recoverable error</h3>

<p>正如其名，这类错误应该是被容许，并且是可以恢复的。可恢复错误的发生是正常的程序路径之一，而作为开发者，我们应当去检出这类错误发生的情况，并进一步对它们进行处理，让它们恢复到我们期望的程序路径上。</p>

<p><strong>这类错误在Objective-C的时代通常用NSError类型来表示，而在Swift里则是通过throws来实现。</strong>一般我们需要检查错误的类型，并作出合理的响应。而选择忽视这类错误往往是不明智的，因为它们是用户正常使用过程中可能会出现的情况，我们应该尝试对其恢复，或者至少向用户给出合理的提示，让他们知道发生了什么。像是网络请求超时，或者写入文件时磁盘空间不足：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 网络请求</span>
</span><span class='line'><span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;https://www.example.com/&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 提示用户</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 写入文件</span>
</span><span class='line'><span class="k">func</span> <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">to</span> <span class="nl">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">try</span> <span class="n">data</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="kt">as</span> <span class="bp">NSError</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">error</span><span class="p">.</span><span class="n">code</span> <span class="o">==</span> <span class="n">NSFileWriteOutOfSpaceError</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 尝试通过释放空间自动恢复</span>
</span><span class='line'>            <span class="n">removeUnusedFiles</span><span class="p">()</span>
</span><span class='line'>            <span class="n">write</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nl">to</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 其他错误，提示用户</span>
</span><span class='line'>            <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">showErrorAlert</span><span class="p">(</span><span class="s">&quot;Error: \(error.localizedDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-universal-error" name="universal-error"></a></p>

<h3>Universal error</h3>

<p>这类错误理论上可以恢复，但是由于语言本身的特性所决定，我们难以得知这类错误的来源，所以一般来说也不会去处理这种错误。这类错误包括类似下面这些情形：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 内存不足</span>
</span><span class='line'><span class="p">[</span><span class="n">Int</span><span class="p">](</span><span class="nl">repeating</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用栈溢出</span>
</span><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span> <span class="n">foo</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="n">foo</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过设计一些手段来对这些错误进行处理，比如：检测当前的内存占用并在超过一定值后警告，或者监视栈frame数进行限制等。但是一般来说这是不必要的，也不可能涵盖全部的错误情况。更多情况下，这是由于代码触碰到了设备的物理限制和边界情况所造成的，一般我们也不去进行处理（除非是人为造成的bug）。</p>

<p>在 Swift 中，各种被使用<code>fatalError</code>进行强制终止的错误一般都可以归类到 Universal error。</p>

<p><a id="markdown-logic-failure" name="logic-failure"></a></p>

<h3>Logic failure</h3>

<p>逻辑错误是程序员的失误所造成的错误，它们应该在开发时通过代码进行修正并完全避免，而不是等到运行时再进行恢复和处理。</p>

<p>常见的 Logic failure 包括有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 强制解包一个 `nil` 可选值</span>
</span><span class='line'><span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">name</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 数组越界访问</span>
</span><span class='line'><span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 计算溢出</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Int</span><span class="p">.</span><span class="n">max</span>
</span><span class='line'><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 强制 try 但是出现错误</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">JSONDecoder</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="n">Foo</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="n">Data</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类错误在实现中触发的一般是<code>assert</code>或者<code>precondition</code>。</p>

<p>和<code>fatalError</code>不同，<code>assert</code>只在进行编译优化的<code>-O</code>配置下是不触发的，而如果更进一步，将编译优化选项配置为<code>-Ounchecked</code>的话，<code>precondition</code>也将不触发。此时，各方法中的<code>precondition</code>将被跳过，因此我们可以得到最快的运行速度。但是相对地代码的安全性也将降低，因为对于越界访问或者计算溢出等错误，我们得到的将是不确定的行为。</p>

<table>
<thead>
<tr>
<th>函数 </th>
<th> fatalError </th>
<th> precondition </th>
<th> assert</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Onone </td>
<td> 触发 </td>
<td> 触发 </td>
<td> 触发</td>
</tr>
<tr>
<td>-O </td>
<td> 触发 </td>
<td> 触发 </td>
<td> -</td>
</tr>
<tr>
<td>-Ounchecked </td>
<td> 触发 </td>
<td> - </td>
<td> -</td>
</tr>
</tbody>
</table>


<p>对于Universal error一般使用<code>fatalError</code>，而对于<code>Logic failure</code>一般使用<code>assert</code>或者<code>precondition</code>。遵守这个规则会有助于我们在编码时对错误进行界定。而有时候我们也希望能尽可能多地在开发的时候捕获Logic failure，而在产品发布后尽量减少crash比例。这种情况下，相比于直接将Logic failure转换为可恢复的错误，我们最好是使用<code>assert</code>在内部进行检查，来让程序在开发时崩溃。</p>

<p><a id="markdown-几种常见场景下的错误处理" name="几种常见场景下的错误处理"></a></p>

<h2>几种常见场景下的错误处理</h2>

<p>光说不练假把式。让我们来实际判断一下下面这些情况下我们都应该选择用哪种错误处理方式吧~</p>

<p><a id="markdown-app内资源加载" name="app内资源加载"></a></p>

<h3>app内资源加载</h3>

<p>假设我们在处理一个机器学习的模型，需要从磁盘读取一份预先训练好的模型。该模型以文件的方式存储在 app bundle 中，如果读取时没有找到该模型，我们应该如何处理这个错误？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">AppError</span><span class="p">.</span><span class="n">FileNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model file not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">try</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Model corrupted.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadModel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Model</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;my_pre_trained_model&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;mdl&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">ModelLoader</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案应该是方案 4，使用Logic failure让代码直接崩溃。</p>

<p>作为内建的存在于app bundle中模型或者配置文件，如果不存在或者无法初始化，在不考虑极端因素的前提下，一定是开发方面出现了问题，这不应该是一个可恢复的错误，无论重试多少次结果肯定是一样的。也许是开发者忘了将文件放到合适的位置，也许是文件本身出现了问题。不论是哪种情况，我们都会希望尽早发现并强制我们修正错误，而让代码崩溃可以很好地做到这一点。</p>

<p>使用Universal error同样可以让代码崩溃，但是Universal error更多是用在语言的边界情况下。而这里并非这种情况。
</details></p>

<p><a id="markdown-加载当前用户信息时发生错误" name="加载当前用户信息时发生错误"></a></p>

<h3>加载当前用户信息时发生错误</h3>

<p>我们在用户登录后会将用户信息存储在本地，每次重新打开app时我们检测并使用用户信息。当用户信息不存在时，应该进行的处理：</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">AppError</span><span class="p">.</span><span class="n">UsernameNotExisting</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;User name not existing&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.onevcat.app.defaults.username&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">User</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">username</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>首先肯定排除方案3和4。“用户名不存在”是一个正常的现象，肯定不能直接crash。所以我们应该在方案1和方案2中选择。</p>

<p>对于这种情况，选择方案1 Simple domain error会更好。因为用户信息不存在是很简单的一个状况，如果用户不存在，那么我们直接让用户登录即可，这并不需要知道额外的错误信息，返回<code>nil</code>就能够很好地表达意图了。</p>

<p>当然，我们不排除今后随着情况越来越复杂，会需要区分用户信息缺失的原因 (比如是否是新用户还没有注册，还是由于原用户注销等)。但是在当前的情况下来看，这属于过度设计，暂时并不需要考虑。如果之后业务复杂到这个程度，在编译器的帮助下将Simple domain error修改为Recoverable error也不是什么难事儿。
</details></p>

<p><a id="markdown-还没有实现的代码" name="还没有实现的代码"></a></p>

<h3>还没有实现的代码</h3>

<p>假设你在为你的服务开发一个iOS框架，但是由于工期有限，有一些功能只定义了接口，没有进行具体实现。这些接口会在正式版中完成，但是我们需要预先发布给友商内测。所以除了在文档中明确标明这些内容，这些方法内部应该如何处理呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">FrameworkError</span><span class="p">.</span><span class="n">NotImplemented</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bar</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">assertionFailure</span><span class="p">(</span><span class="s">&quot;Not implemented yet.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>正确答案是方案3 Universal error。对于没有实现的方法，返回<code>nil</code>或者抛出错误期待用户恢复都是没有道理的，这会进一步增加框架用户的迷惑。这里的问题是语言层面的边界情况，由于没有实现，我们需要给出强力的提醒。在任意build设定下，都不应该期待用户可以成功调用这个函数，所以<code>fatalError</code>是最佳选择。</p>

<p>其实在swift继承的时候，编译器会给我们添加一个默认的未实现的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;init(coder:) has not been implemented&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></details></p>

<p><a id="markdown-调用设备上的传感器收集数据" name="调用设备上的传感器收集数据"></a></p>

<h3>调用设备上的传感器收集数据</h3>

<p>调用传感器的app最有意思了！不管是相机还是陀螺仪，传感器相关的app总是能带给我们很多乐趣。那么，如果想要调用传感器获取数据时，发生了错误，应该怎么办呢？</p>

<h4>方案 1 Simple domain error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 2 Recoverable error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getDataFromSensor</span><span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throws</span> <span class="n">SensorError</span><span class="p">.</span><span class="n">stateError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 3 Universal error</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fatalError</span><span class="p">(</span><span class="s">&quot;Sensor get data failed!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>方案 4 Logic failure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sensorState</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">sensorState</span> <span class="o">==</span> <span class="p">.</span><span class="n">normal</span><span class="p">,</span> <span class="s">&quot;The sensor state is not normal&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">try</span><span class="o">!</span> <span class="n">sensor</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details>
  <summary><em>点击查看答案</em></summary></p>

<p>传感器由于种种原因暂时不能使用 (比如正在被其他进程占用，或者甚至设备上不存在对应的传感器)，是很有可能发生的情况。即使这个传感器的数据对应用是至关重要，不可或缺的，我们可能也会希望至少能给用户一些提示。基于这种考虑，使用方案2 Recoverable error是比较合理的选择。</p>

<p>方案1在传感器数据无关紧要的时候可能也会是一个更简单的选项。但是方案3和4会直接让程序崩溃，而且这实际上也并不是代码边界或者开发者的错误，所以不应该被考虑。
</details></p>

<p><a id="markdown-总结" name="总结"></a></p>

<h3>总结</h3>

<p>可以看到，其实在错误处理的时候，选用哪种错误是根据情景和处理需求而定的，我在参考答案也使用了很多诸如“可能”，“相较而言”等语句。虽然对于特定的场景，我们可以进行直观的考虑和决策，但这并不是教条主义般的一成不变。错误类型之间可以很容易地通过代码互相转换，这让我们在处理错误的时候可以自由选择使用的策略：比如API即使提供给我们的是Recoverable的throws形式，我们也还是可以按照需要，通过<code>try?</code>将其转为Simple domain error，或者用<code>try!</code>将其转为Logic failure。</p>

<p>能切实理解使用情景，利用这些错误类型转换的方式，灵活选取使用场景下最合适的错误类型，才能说是真正理解了这四种错误的分类依据。</p>

<p><a id="markdown-错误处理相关的辅助方法" name="错误处理相关的辅助方法"></a></p>

<h2>错误处理相关的辅助方法</h2>

<p>For custom errors in swift, refer to <a href="https://developer.apple.com/documentation/swift/error">Error</a> official document.</p>

<p><a id="markdown-use-custom-errors" name="use-custom-errors"></a></p>

<h3>Use Custom Errors</h3>

<h4>Using Enumerations as Errors</h4>

<p>Swift’s enumerations are well suited to represent simple errors. Create an enumeration that conforms to the Error protocol with a case for each possible error. If there are additional details about the error that could be helpful for recovery, use associated values to include that information.</p>

<p>The following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">IntParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">overflow</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">invalidInput</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Including More Data in Errors</h4>

<p>The following XMLParsingError conforms to Error and supply line and column position of the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">XMLParsingError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">ErrorKind</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">invalidCharacter</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">mismatchedTag</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">internalError</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">line</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">column</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">kind</span><span class="p">:</span> <span class="n">ErrorKind</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">parse</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">XMLDoc</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">throw</span> <span class="n">XMLParsingError</span><span class="p">(</span><span class="nl">line</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span> <span class="nl">column</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nl">kind</span><span class="p">:</span> <span class="p">.</span><span class="n">mismatchedTag</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s how you can catch any XMLParsingError errors thrown by the parse(_:) function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">xmlDoc</span> <span class="o">=</span> <span class="n">try</span> <span class="n">parse</span><span class="p">(</span><span class="n">myXMLData</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">e</span> <span class="kt">as</span> <span class="n">XMLParsingError</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Parsing error: \(e.kind) [\(e.line):\(e.column)]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Other error: \(error)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prints &quot;Parsing error: mismatchedTag [19:5]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-do-cleanup-work-using-defer" name="do-cleanup-work-using-defer"></a></p>

<h3>Do Cleanup Work Using <code>defer</code></h3>

<p>You use a <code>defer</code> statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as <code>return</code> or <code>break</code>. For example, you can use a <code>defer</code> statement to ensure that file descriptors are closed and manually allocated memory is freed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">processFile</span><span class="p">(</span><span class="nl">filename</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="k">let</span> <span class="n">line</span> <span class="o">=</span> <span class="n">try</span> <span class="n">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Work with the file.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// close(file) is called here, at the end of the scope.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">vend</span><span class="p">(</span><span class="n">itemNamed</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="n">throws</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defer</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do some clean work</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">invalidSelection</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">outOfStock</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">guard</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">&lt;=</span> <span class="n">coinsDeposited</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">throw</span> <span class="n">VendingMachineError</span><span class="p">.</span><span class="n">insufficientFunds</span><span class="p">(</span><span class="nl">coinsNeeded</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span> <span class="o">-</span> <span class="n">coinsDeposited</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">coinsDeposited</span> <span class="o">-=</span> <span class="n">item</span><span class="p">.</span><span class="n">price</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">newItem</span><span class="p">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">inventory</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">newItem</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Dispensing \(name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example uses a <code>defer</code> statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.</p>

<p><a id="markdown-参考" name="参考"></a></p>

<h2>参考</h2>

<ol>
<li><a href="https://onevcat.com/2017/10/swift-error-category/">关于 Swift Error 的分类</a></li>
<li><a href="https://onevcat.com/2016/03/swift-throws/">Swift 2 throws 全解析 - 从原理到实践</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508">Error Handling Official Site</a></li>
<li><a href="https://developer.apple.com/documentation/swift/error">Error from Apple Document</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码查重工具]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code/"/>
    <updated>2017-05-08T17:52:24+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/05/08/tools-for-detecting-duplicated-code</id>
    <content type="html"><![CDATA[<p>代码查重工具</p>

<!-- more -->


<h2>jscpd</h2>

<p><a href="https://github.com/kucherenko/jscpd">jscpd</a></p>

<p>Supported languages：</p>

<p>JavaScript  Java    YAML
CoffeeScript    C++ Haxe
PHP C#  TypeScript
Go  Python  Mixed HTML
Ruby    C   SCSS
Less    CSS erlang
<strong>Swift</strong>   xml/xslt    <strong>Objective-C</strong>
Puppet  Twig    Vue.js</p>

<h3>优点</h3>

<ul>
<li>安装使用简单</li>
<li>运行速度快。</li>
</ul>


<h3>缺点：</h3>

<ul>
<li>没有GUI</li>
<li>复制1行，修改其中的一行，就不会被认为复制。</li>
</ul>


<h2>PMD</h2>

<p><a href="https://pmd.github.io/">PMD</a></p>

<h3>Supported IDEs</h3>

<p>没有Xcode的插件，所以只能用命令行。</p>

<p>PMD is integrated with JDeveloper, Eclipse, JEdit, JBuilder, BlueJ, CodeGuide, NetBeans/Sun Java Studio Enterprise/Creator, IntelliJ IDEA, TextPad, Maven, Ant, Gel, JCreator, and Emacs.</p>

<ul>
<li>Maven PMD plugin</li>
<li>Gradle: The PMD Plugin</li>
<li>Eclipse plugin</li>
<li>NetBeans plugin</li>
<li>JBuilder plugin</li>
<li>JDeveloper plugin</li>
<li>IntelliJ IDEA plugin</li>
</ul>


<h3>Supported Languages of PMD commonded line:</h3>

<ul>
<li>java</li>
<li>ecmascript (JavaScript)</li>
<li>jsp</li>
<li>plsql</li>
<li>vm (Apache Velocity)</li>
<li>xml and xsl</li>
</ul>


<h3>Supported Languages of CPD:</h3>

<ul>
<li>cs</li>
<li>cpp</li>
<li>ecmascript (JavaScript)</li>
<li>fortran</li>
<li>go</li>
<li>java</li>
<li>jsp</li>
<li>matlab</li>
<li>objectivec</li>
<li>php</li>
<li>plsql</li>
<li>python</li>
<li>ruby</li>
<li>scala</li>
<li>swift</li>
</ul>


<h3>CPD has GUI</h3>

<p>On Mac, display the GUI by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./run.sh cpdgui</span></code></pre></td></tr></table></div></figure>


<p>The screen shot is like:</p>

<p><img src="http://hongchaozhang.github.io/images/screenshot_cpd.png" alt="screenshot_cpd" /></p>

<h3>将CPD集成到XCode里面</h3>

<p><a href="https://habrahabr.ru/post/137875/">Интегрируем Copy-Paste-Detection в Xcode, и не только</a>将CPD集成到了XCode里面。</p>

<h2>JenkinsCI-iOS</h2>

<p><a href="https://github.com/cyupa/JenkinsCI-iOS">JenkinsCI-iOS</a></p>

<p>The CPD in PMD is the core of JenkinsCI-iOS.</p>

<h2>NiCad4 Clone Detector</h2>

<p><a href="http://www.txl.ca/nicaddownload.html">NiCad4 Clone Detector</a></p>

<p>NiCad handles a range of languages, including C, Java, Python, and C#, and provides a range of normalizations, filters and abstractions.</p>

<h2>AppCode</h2>

<h2>Code Clone Detection</h2>

<p>Visual Studio Enterprise有自己的code clone analysis，see <a href="https://msdn.microsoft.com/en-us/library/hh205279.aspx">Finding Duplicate Code by using Code Clone Detection</a>。copy一段code，然后改了某个变量名称，仍然可以被检测出重复。</p>

<h2>Simian - Similarity Analyser</h2>

<p><a href="http://www.harukizaemon.com/simian/">Simian - Similarity Analyser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《哲学家们都干了些什么？》读后小结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/04/05/what-are-philosophers-doing/"/>
    <updated>2017-04-05T13:18:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/04/05/what-are-philosophers-doing</id>
    <content type="html"><![CDATA[<p>继续采用《苏菲的世界》读后小结的方式，摘抄一些观点，记录一下自己的想法。</p>

<!-- more -->


<h1>前言</h1>

<h1>上篇：理性的崛起</h1>

<h2>第一章 哲学好讨厌</h2>

<p>苏格拉底身上有知识分子身上几乎所有的毛病：</p>

<ul>
<li>总说别人不乐意听的；</li>
<li>在辩论中总占理；</li>
<li>说的别人哑口无言，还在那里假谦虚；</li>
<li>一身硬骨头。</li>
</ul>


<p>所以，最后苏格拉底被民意投死啦。</p>

<h2>第二章 少年国王</h2>

<p>雅典哲学的命运与亚历山大紧密相连。</p>

<p>马其顿打败希腊，并最终建立了横跨亚欧非的亚历山大帝国。这与秦始皇统一中国非常相似：</p>

<blockquote><p>它们差不多处于同一个历史时期，都位于中心文明（希腊文明/中华文明）的西北角，都是多山地形，土地贫瘠，初期经济和文化都比较落后。但是军事都很发达。</p>

<p>因为文化落后，最早处于中心文明的国家都不愿意接纳它们，直到后来它们军事能力强大了，就以武力把其他国家都统一了，建立了庞大的帝国。</p>

<p>在完成统一大业之前，两个国家都奉行开明的文化政策。既然自己文化落后，那么就广开言路，把别的国家的人才都吸引过来。这边在秦朝的知识分子阵营里，商鞅和吕不韦是卫国人，张仪是魏国人，李斯是楚国人。那边的马其顿也是猛学雅典知识，甘当雅典的小学生。</p></blockquote>

<p>虽然马其顿和秦国有上面很多相似的地方，但是秦始皇和亚历山大还是有一个很大的区别：文化统一。</p>

<ul>
<li>秦始皇通过残酷的手段，统一了中国文化。虽然残暴（焚书坑儒），但是成功了。可以说，秦始皇的文化统一奠定了中国日后的统一局面。</li>
<li>亚历山大对希腊哲学则采取包容的态度，使得希腊哲学得以随着亚历山大的铁骑，传播到东欧、北非和中亚。正是因为亚历山大没有进行文化的统一，所以在他死之后，他的帝国很快就分裂了。取而代之的罗马帝国统一了大部分欧洲，但是也同样没有采取文化统一的措施，使得希腊哲学继续传播。罗马帝国对文化的包容，直接导致欧洲今天分裂为很多小国。</li>
</ul>


<h2>第三章 使徒行传</h2>

<h3>保罗</h3>

<p>保罗做的最重要的一件事，就是向犹太人以外的民族传播基督教。这是一项很了不起的工作。在保罗之前，基督教大体上只限于犹太人自己信仰。因了保罗的传教，才使得基督教后来成为世界性的大宗教。</p>

<p>而保罗突破重重阻碍传播基督教，所使用的武器就是希腊哲学。</p>

<blockquote><p>历史有一个规律，在斗争中，哲学总是站在弱者这一边。这是因为哲学讲思维，讲道理，而只有弱者才需要去讲理，强者是不需要讲理的。</p></blockquote>

<p>虽然哲学帮助基督教打下了天下，但是哲学和宗教的矛盾是绝对不可以调和的：<strong>宗教要求信仰，哲学要求怀疑</strong>。在宗教看来，思考本身就是不对的。这应该是宗教和哲学的本质区别。</p>

<blockquote><p>宗教说：“你只要相信我就行了，其它都不用考虑。”哲学却说：“我为什么要相信你？”</p></blockquote>

<h3>奥古斯丁</h3>

<p>奥古斯丁对基督教的贡献，就是解决了长久以来困扰基督教的一个逻辑漏洞：</p>

<ul>
<li>《圣经》上说上帝是全知全能全善的，但是为什么允许世间存在这么多丑恶和痛苦？</li>
</ul>


<p>奥古斯丁的解释是，关键在于<strong>自由</strong>。上帝给了亚当夏娃和人类自由意志，所以也必须让人类有作恶的可能。</p>

<p>更具体地说，上帝是善的，而上帝的善表现在上帝对人类的行为要进行公正的赏罚。既然要赏罚，前提是人类必须拥有自由意志，必须有能力自己选择行善还是作恶，否则人类就不应该对自己的行为负责。</p>

<p>这段论证对我们的意义是：首先，它十分巧妙，把一个看似自相矛盾的说法给解释开了；其次，这解释强调了自由的重要性。</p>

<p>但是只要一思考，这个解释同样会产生诸多问题，比如：</p>

<blockquote><p>因为上帝是万能的，所以有能力预测出人们按照自由意志在未来会作出的各种恶，但是有很多恶上帝都没有阻止。可是，上帝不是全能的吗？</p></blockquote>

<p>还是那句话：在宗教看来，思考本身就是不对的。就拿奥古斯丁本人来说：</p>

<blockquote><p>虽然他是虔诚的基督徒，但只要他一开始思考，就注定要和宗教权威发生冲突。奥古斯丁早年相信摩尼教，后来发现宗教文献中一些关于天文学的知识和当时的科学结论不符，他还被要求不许怀疑这些错误，只许强行接受。奥古斯丁因此对摩尼教产生了怀疑。罗素因此说，如果奥古斯丁生活在伽利略时代，也就是科学家们在用天文知识挑战基督教的时代，那他该怎么做呢？奥古斯丁这个基督教的圣人，会不会也像怀疑摩尼教那样怀疑基督教呢？</p></blockquote>

<h2>第四章 上帝之城</h2>

<p>随着基督教的兴盛，罗马帝国开始残酷镇压。</p>

<blockquote><p>有句话说“能用钱解决的问题都不是问题”，其实还有另外一句话“必须用暴力解决的问题都是解决不了的问题”。</p></blockquote>

<p>在君士坦丁当罗马皇帝的时候，由于在关键的一战中受到基督的启示，君士坦丁开始信仰基督。第二年，君士坦丁颁布了著名的《米兰赦令》，使得基督教徒得到了法律的保护，并且鼓励基督教的发展。</p>

<p>与此同时，其它思想都成了“异端”，其中除了一些宗教，当然也包括哲学。</p>

<h2>第五章 异教徒</h2>

<p>希腊哲学传播的曲折路径：</p>

<p>首先，是希腊哲学家被罗马基督徒驱逐，来到罗马东边境叙利亚一带。在这里，希腊著作从拉丁文被翻译成叙利亚文。</p>

<p>然后东边的波斯被阿拉伯灭了。阿拉伯迅速扩张，占领了埃及。</p>

<blockquote><p>此时有一个争议极大的传说，据说阿拉伯人占领亚历山大的时候，把亚历山大图书馆付之一炬，并且还说了一句很有名的话：<em>如果亚历山大图书馆里的藏书和《古兰经》一致，那就没有留下的必要。如果不一致，就更不应该留下。</em></p></blockquote>

<p>阿拉伯对异教文化史非常包容的，它们组织了一个“百年翻译运动”，把希腊著作从叙利亚文翻译成了阿拉伯文。</p>

<p>然后希腊哲学到了西班牙，其中有的神父不懂阿拉伯文，就请人把希腊著作从阿拉伯文译为西班牙文，他再从西班牙文译成拉丁文。</p>

<p>所以那时的希腊著作是从最早的拉丁文翻译成叙利亚文，再翻译成阿拉伯文，再到西班牙文，再到拉丁文。然后咱们能看到的，还得再翻译成中文，没准懒点的兄弟还是从英语版本翻译过来的。这是多么折腾啊。</p>

<h2>第六章 神们自己</h2>

<p>闲来无事，基督徒们开始思考基督教教义了。这就是经院哲学时期，代表人物阿奎纳。</p>

<h2>第七章 群魔</h2>

<p>对基督教的思考必然产生分歧，于是基督教迎来了铲除异己的恐怖时期。</p>

<h2>第八章 异端的权利</h2>

<p>马丁路德挺身而出，来粉碎这个噤若寒蝉的时代，所使用的武器也是——哲学。</p>

<blockquote><p>马丁路德在阅读《圣经》中保罗的书信时发现保罗所持的是“<strong>因信称义</strong>”的观点。“因信称义”的意思就是说，真心相信上帝，就可以成为“义人”。</p>

<p>说白了，罗马教会认为，外在的行为很重要。而马丁・路德认为，内心的信仰比外在的行为更重要。只要内心真诚信仰上帝就能得救；而是否遵守罗马教会的规定，是否上缴税款，是否完成昂贵的宗教仪式，这些都不重要。</p></blockquote>

<p>马丁路德之所以成功，很大一部分原因是印刷术和造纸术的使用，使得人人拥有一本《圣经》成为可能，而不再是自由教父拥有一本羊皮版的《圣经》然后解释给众人听。造纸术和印刷术也是的马丁路德的思想可以很快地传播。</p>

<blockquote><p>12世纪造纸术通过阿拉伯传到欧洲，在此之前欧洲一直用羊皮纸。</p>

<p>1450年，德意志人古腾堡在美因茨城的工厂中发明了哥特体拉丁文金属活字印刷技术。</p></blockquote>

<p>马丁路德和罗马（代表基督教）打了个势均力敌。从此，欧洲基督教分为来两大派：罗马一方被称为天主教，马丁路德一方被称为新教。再加上之前东罗马帝国创建的东正教，我们今天看到的基督教三大主要教派就产生了。</p>

<p>当年马丁路德反抗基督教用的哲学。然而，在用哲学打败了天主教之后，新教用新霸权代替了原来的旧霸权。</p>

<blockquote><p>在宗教改革之前，只有一个罗马教廷负责审判哲学家。</p>

<p>在宗教改革之后，变成了两个教廷比赛审判。有时为了对付异端，这两个原本水火不容的敌对阵营竟然能联合起来，天主教的神父被邀请坐到了日内瓦的法官席上。</p></blockquote>

<p>历史再次证明了哲学和宗教的不相容。宗教只会把哲学当做获取天下的工具，一旦胜利，就会毫不犹豫地将哲学扔到一边。</p>

<blockquote><p>用哲学打天下，用宗教守天下。</p></blockquote>

<h2>第九章 奇怪的论调</h2>

<p>就像电子产品是科学的产品一样，世界观、人生观、价值观是哲学的产品。我们享受科学的产品，并没有一定要去学习一下《电子电路》弄清楚二极管的原理，而是直接买一部手机，用就是了。同样的，为了获得一个人生观，我们完全可以从现成的人生观中选一个就行了。</p>

<p>如果你不满意于现成的人生观，执意要翻开哲学书亲自研究一番，那就只有一个原因了：</p>

<ul>
<li>你不相信现成的答案。</li>
</ul>


<p>祝贺你，你被苏格拉底附体了。</p>

<h2>第十章 童年的终结</h2>

<p>笛卡尔开始怀疑一切，怀疑世界：我们怎么知道周围的人不是全部串通好的演员？我怎么知道自己不是生活在一个电脑虚拟的世界里？（当然笛卡尔根本不知道电脑，这里只是个类比）我怎么知道自己不是生活在梦中？</p>

<p>好啦，我什么都证明不了，但是，不管我再怎么怀疑，“我怀疑”这件事是确定的，它肯定存在吧？那么，只要有了怀疑的念头，就说明“我”肯定是存在的——“我”要是不存在就不会有这些念头了。</p>

<p>这就是名言“<strong>我思故我在</strong>”的意思。“我思”和“我在”不是因果关系，而是推演关系。</p>

<h2>第十一章 理性主义</h2>

<p>笛卡尔模仿欧几里得的《几何原本》开创了理性主义哲学。</p>

<p>欧氏几何有五条公设和五个公理，这些都是欧几里得硬性规定的，其它的所有定理都是基于这些进行证明的。</p>

<p>从《几何原本》，笛卡尔得到了两个成果：</p>

<ul>
<li>解析几何和笛卡尔坐标系。</li>
<li>理性主义哲学。</li>
</ul>


<h2>第十二章 形而上学</h2>

<p>先为形而上学正名。</p>

<p>马哲里面关于形而上学的说明肯定是有问题的：</p>

<ul>
<li>形而上学就是用孤立、静止、片面的方法看待问题。</li>
</ul>


<p>这就好像给别人起外号一样，有失偏颇。</p>

<p>下面让我们看看真正的形而上学是什么意思。</p>

<p>最初人们呢在整理亚里士多德的著作时，将其分为两类：“研究有形物体的事物”和“研究无形物体的事物”。“研究有形物体的事物”就是《物理学》（physics），“研究无形物体的事物”（metraphysics）直译为“物理学之后”。即形而上学（metraphysics）研究的是那些高于物理学的、看不见、摸不着的学问。</p>

<p>形而上学的翻译出自《易经》：</p>

<ul>
<li>形而上者谓之道，形而下者谓之器</li>
</ul>


<p>日本哲人井上哲次郎的这一翻译，可谓“信、达、雅”的典范。</p>

<p>我们现在所说的形而上学，可以简单滴理解成是用理性的思维去研究那些能统一世间一切问题的大道理。就像笛卡尔希望的那样，要寻求一个高于客观世界／统领一切事物的真理。比如世界的本质是什么，人生的意义是什么之类。</p>

<h2>第十三章 二元论</h2>

<p>这一章确实有意思：怎么应用哲学追求幸福？</p>

<h3>二元论和唯物主义唯心主义的关系</h3>

<p>笛卡尔只知道自己的意识存在，不知道外面的世界存在不存在。这个结论暗含了一个前提，那就是：他把我们讨论的世界分成两个部分，一个是我们自己的心灵，一个是心灵之外的部分。</p>

<p>这种观点就叫作“<strong>二元论</strong>”。心灵一个元，外界一个元，一共二元。这两个元是相互独立的、平等的，虽然可以互相影响，但谁也不能完全决定另一个。</p>

<p>因为世界分成二元了，所以这两个元之间是如何联系的，就成了大问题。在后来的好几百年中，无数哲学家在“<strong>精神世界怎么才能真实反映客观世界</strong>”上花费了大量的工夫，也很难有一个令人满意的答案。后来有的哲学家反应过来了，直接反对二元论，认为这种划分是我们对世界的一种误解。</p>

<p>其中一个反对二元论的学派就是我们熟知的<strong>唯物主义</strong>，说世界的本质是物质的，我们的精神世界不过是大脑生理活动的结果。换句话说，精神是从物质中产生的。这种观点就叫作物质一元论。当然，相应的也有*唯心主义**的一元论，认为世界的本质是精神的，外面的世界不过是我自己心灵的产物罢了。</p>

<h3>二元论与我们的幸福生活</h3>

<p>二元论可以帮助我们躲避痛苦，因为我们在自己的精神世界里是无敌的，而一切体验归根结底都是精神体验。</p>

<p>在二元论的观念下，世界被一分为二：外界和内心。痛苦虽然来自于外界，但真正承受痛苦的是我的内心。因此我们虽然仍旧需要尽力去改变外物，但在客观世界这一元里的得失其实不重要，关键是固守自己的内心这一元，固守住我们获得体验的最后一关。而在内心世界里，我们自己能完全做主，这就让人产生了很大的安全感。</p>

<p>举一个例子。传统的对待生活的方式是，我们想到“考试不及格会给我带来痛苦”，那我们的对策就是好好念书，努力考试及格。但辛苦念书会给我们带来肉体的痛苦，对考试的担心给我们带来了很强的不安全感，而且就算考试通过了，人又会自动产生新的欲望和新的焦虑，陷入永无止境的担忧之中。</p>

<p>而新的人生观是这样的。我想：不管考试的结果如何，外界对我的这些影响都只体现在我的精神世界里。只要我闭上眼睛，专心驾驭我的内心世界，那么外界发生任何事都不会伤害我。这样我也不用费心念书去忍受肉体痛苦，不用为担心考试的结果而惴惴不安，我不为任何外物所扰，反倒清静自在。这是什么境界？说不好听了，这是阿Q的境界；说好听了，这叫“他强由他强，清风拂山冈”，这是九阳神功的境界。</p>

<p>不过，上述这个人生观有一个痛苦解决不了，那就是我们关心的人对我们的负面评价。说白了，二元论可以让你放下压力不好好工作。但是当父母因此伤心的时候，二元论就没办法了。</p>

<p>从二元论的角度说，他人对我们的评价和我们的精神世界无关，我们可以完全忽视。但是对于我们在乎的人，这点是极难做到的。一旦做到了，我们也就成了完全不关心任何人的冷血动物。</p>

<blockquote><p>佛教的“六根清净”、“无欲则刚”需要你做到这一步。佛教在解释为什么需要这么做的时候，估计也是从二元论给出的解释。</p></blockquote>

<p>实际上，当我们在乎外人感受的时候，就相当于我们把自己的喜怒哀乐寄托于外物。我们既不可能控制一切外物，也不可能让他人的感受总符合我们的意愿。因此不仅是二元论，其他自我安慰的手段，对于我们所关心的人都有些束手无策。</p>

<h2>第十四章 唯我论</h2>

<p>从笛卡尔的“我思故我在”，可以推出唯我论。</p>

<p>首先，和二元论一样，唯我论也是无法证伪的。我们永远都可以质疑自己生活的世界是一片幻觉，或者只是一个梦。当你思考“世界的本质是什么”的时候，唯我论永远立在一旁幽幽地望着你。挥之不去。</p>

<p>其次，唯我论对我们的普通生活也有很大的影响。它可以让我们变得更坚强。在采用唯我论的时候，我们会感到天上地下唯我独大，我们不用害怕任何事物，只要面对自己的内心就可以了。</p>

<p>假如我是这世界唯一真实存在的事物，那么很容易想到，或许这些幻觉都是为了我才创造出来的吧。</p>

<p>电影《楚门的世界》里，主人公从小就生活在一个虚假的世界里。这个世界里的每一个人、每一个物件都是被别人布置好的。他的整个人生是一个被精心策划的电视直播节目。他拜访哪个商店，哪个商店才开始装模作样地运营。他走到哪里，哪里才会出现安排好的路人。</p>

<p>假如我们带着唯我论的观念生活，也会有这样的感觉。对于我来说，外界的一切事物，不都是等我感受到的时候才会出现吗？如果把世上的一切都想象成只为我一个人安排出来的，也可以说得通啊。没准只有我才是这个世界上最重要的主角，其他人只是木偶、演员或者是幻象。</p>

<h2>第十五章 寒冬夜行人</h2>

<p>首先，斯宾诺莎是笛卡尔的继承者。</p>

<p>我们说过，笛卡尔有一个很棒的想法，就是按照欧式几何学的模式来建立哲学体系。具体来说，就是先找出一些不言自明的公设，再以这些公设为基础，按照演绎推理的方法建立整个哲学体系。</p>

<p>笛卡尔的想法不错，具体工作却做得不太好。斯宾诺莎则完美实现了这个想法。</p>

<p>斯宾诺莎最有影响的著作叫《伦理学》，在他去世后才发表。这本书的全称是《按几何顺序证明的伦理学》。看明白了吗，用几何去论证伦理学（伦理学也是哲学研究的一部分），这不完全就是笛卡尔设计的路数嘛。等翻开这书，你肯定就崩溃了：里面净是一些定义、公理、命题等，俨然一本数学书。</p>

<p>各种假设和证明就跳过了，直接看斯宾诺莎的结论吧。</p>

<blockquote><p>斯宾诺莎承认上帝，但他心目中的上帝不是基督教或者犹太教中人格化的上帝，而是无所不在的实体。</p>

<p>简单地说，世间万物皆为上帝，我自己也为上帝的一部分，那么我与上帝同在，自然充满无限的力量。其他人即便与我作对，他们也是上帝的一部分，他们的行为也都是上帝的意志（这点和基督教是相同的）。所以无论外人如何对我，我都应该坦然接受。</p>

<p>复杂地说，实体永远存在，我属于实体，那么我也可以永远存在。即便肉体消失了，我也是实体的一部分。而且我和世间万物都是一体的。从这个设想中，我们可以感受到无限的力量和安全感，也就什么都不怕了。</p>

<p>再者，实体是善的，作为实体一部分的事物，即便单独看是邪恶的，它本身也是为了善的目的而存在，也是善的一部分。因此无论多么丑恶的现象，我们都应该宽容接受。</p></blockquote>

<p>这不就是中国的“天人合一”吗？</p>

<p>另外，这与阿西莫夫《基地》系列里面提到的盖亚星球也基本是这个思想：在这个星球上，所有的动物、植物甚至一草一木共同构成了一个整体，大家共享相同的意识、记忆、感情和感觉。星球上的生物个体死亡以后，组成该生物的原子会最终变成星球上其他生物和物体的一部分。所以这个星球上不存在真正意义的死亡，只有各种物体之间的转化。意识是全星球物体共享，因此也不会消失。</p>

<p><strong>来自斯宾诺莎的心灵鸡汤</strong></p>

<p>哲学史上有个不难理解的现象，生活越是困苦的哲学家，他的学说就越关注个人幸福。反之，生活富足的哲学家，学说更容易脱离现实。斯宾诺莎就是典型的前者。</p>

<p>当斯宾诺莎意识到自己的幸福应该通过理性思考来追求的时候，他发现，在得出最终答案之前还需要很长时间。那么在这段时间里，自己该怎么生活呢？他总结了几个可以暂时执行的原则，大意是：</p>

<ul>
<li>第一，说话要尽量让别人明白，只要别人对我们的要求不会影响我们实现自己的目标（比如求知），那就尽量满足。</li>
<li>第二，只享受为保持健康所必需的生活乐趣。</li>
<li>第三，只求取为生活和健康所必需的金钱。</li>
</ul>


<h2>第十六章 双星</h2>

<p>笛卡尔和斯宾诺莎用推演的方法在几个假设的基础上建立起了理性主义哲学，但是科学家们不干了。</p>

<p>和数学家不一样，科学家搞研究靠的是<strong>归纳法</strong>。归纳法的意思是，人们通过观察多个个别的现象，总结出普遍的规律。比如人观察到，每一次把石头扔出去，最后石头总要落地。那么他就能总结出“空中的石头总会落地”这么条规律来。</p>

<p>实际上，科学方法里既有归纳法，也有演绎推理，但其基础、起关键作用的，是归纳法。科学家们“轻视”演绎推理，关键在于他们发现演绎推理有一个巨大的缺陷。这个缺陷就是，</p>

<ul>
<li>演绎推理不能给我们带来任何新知识。</li>
</ul>


<p>数学理论，比如欧氏几何，都是先想出一些公设，然后就靠纯粹的演绎推理来得出其他的内容。但是<strong>推理是等价的</strong>，所以推理得出的内容其实都包含在它的前提条件里了。换句话说，一本《几何原本》的全部知识其实就是开头的那几条公设和公理，后面厚厚的十三卷内容不过是在不断用其他的形式去重复那些公设和公理罢了。</p>

<p>而科学的任务是探索自然界，获取新的知识。毫无疑问，数学是不可能完成这个任务的。归纳法是科学家们的唯一选择。</p>

<p>对于哲学事业，数学方法就更危险了。笛卡尔他们研究哲学，不都先要公设吗？问题是，这公设它有什么根据吗？斯宾诺莎说世上存在实体，你能做一实验给我证明吗？说白了，在科学家眼中，</p>

<ul>
<li>笛卡尔和斯宾诺莎构建的哲学世界，整个学说不过只是几句没有根据的假设。</li>
</ul>


<p>数学家们也不含糊，他们找到了科学家们的致命弱点：</p>

<ul>
<li>归纳法不能保证结论的可靠性。</li>
</ul>


<p>数学家们指出：归纳法永远都只能立足于有限的事实之上，而不可能把所有的现实全部实验一遍。比如你说“空中的石子一定落地”，那你实验过全宇宙古往今来的所有石子吗？你只是观察了一部分石子，就得出了这个结论。</p>

<p>所以，科学得出的真理顶多是一种概率真理。科学家不断做实验，顶多是把科学理论正确的概率提高了一点，却永远不能保证科学理论绝对正确。</p>

<p>由于这场论证影响非常大，哲学家们给双方起了个名字：以笛卡尔和斯宾诺莎为代表的数学家们，被称为“理性主义”，以洛克为代表的科学家们，被称为“经验主义”。</p>

<p>总结一下：</p>

<table>
<thead>
<tr>
<th>^ </th>
<th> 理性主义 </th>
<th> 经验主义</th>
</tr>
</thead>
<tbody>
<tr>
<td>代表人群 </td>
<td> 数学派哲学家 </td>
<td> 科学派哲学家</td>
</tr>
<tr>
<td>代表人物 </td>
<td> 笛卡尔，斯宾诺莎 </td>
<td> 洛克</td>
</tr>
<tr>
<td>研究方法 </td>
<td> 演绎法 </td>
<td> 归纳法</td>
</tr>
<tr>
<td>优点 </td>
<td> 严谨 </td>
<td> 产生新知识</td>
</tr>
<tr>
<td>缺点 </td>
<td> 不产生新知识，公设未必可靠 </td>
<td> 结论不能保证正确</td>
</tr>
</tbody>
</table>


<h2>第十七章 名利场</h2>

<p>英国人洛克率先举起了挑战理性主义的大旗。</p>

<h3>英国跟欧洲大陆“对着干”的历史</h3>

<p>假如我们翻开英国的学术史，我们就会发现，这简直就是“跟欧洲大陆对着干”的历史。英国人和欧洲大陆不一致是有传统的。</p>

<p>就说理性主义和经验主义之间的分歧吧，其实可以上溯到柏拉图和亚里士多德的分歧。他们俩对世界的看法就不一样。一个重视心灵理性，一个重视现实经验。</p>

<p>以“人”这个概念为例。</p>

<p>柏拉图说，“人”这个概念比“张三李四”这些具体的人更真实。“张三李四”生了又死，来去不定，只有“人”这个概念是恒久的。</p>

<p>亚里士多德则说，“张三李四”是具体的，我们看得见摸得着。而“人”这个概念，完全是我们看过了这么多具体的人，然后在脑子中产生的。所以真实存在的是具体的事物，不是概念。</p>

<p>亚里士多德是柏拉图的学生，但是观点和柏拉图相悖，为此亚里士多德还说了一句名言：</p>

<p>“吾爱吾师，吾更爱真理。”</p>

<p>你可以把这句话理解成亚里士多德对真理的浓浓爱意。但你也可以理解成：</p>

<p>“有理就说理，别拿辈份压我！”</p>

<p>到了经院哲学时期，英国的神学家们就开始和大陆神学家们不一样了。大陆神学家继承的是柏拉图，英国神学家继承的是亚里士多德，也是一顿吵架。到了笛卡尔时代就顺理成章地演变成：大陆哲学家大都是理性主义者，而英国哲学家大都是经验主义者。</p>

<blockquote><p>如果不怕被指责牵强的话，我们还可以说，重视个别经验、对独断论充满警惕之心的经验主义，是英国人古板的民族性格的体现。而试图从万物根本一劳永逸地建立一个大一统理论的理性主义，正是荷兰和法国浪漫精神的代表。我个人以为，英国之所以总和欧洲大陆不同，是因为中间隔了一道海。虽然不算太远，可终究什么事都得坐船来回，因此英国就保持了一定的独立性。</p></blockquote>

<h3>经验主义和理性主义的第一次交战：洛克vs莱布尼茨</h3>

<p>莱布尼茨是个数学家，在哲学上，当然站在理性主义这边，崇拜斯宾诺莎。</p>

<p>洛克说，理性主义者们所谓的一些先于经验的公设啊，理念啊，和动物的本能没有区别。</p>

<p>莱布尼茨针锋相对地反驳：你知道人跟禽兽有什么区别吗？区别就是禽兽做事只凭经验，人却能根据经验总结出必然规律。禽兽不知道思考，总以为过去发生的事情，在以后相似的场合下还会发生。所以人可以利用禽兽的习性，去设计陷阱捕捉禽兽。而你们这帮经验主义者，你们只强调经验，不承认必然规律，那你们的联想能力不就跟禽兽一样了吗？</p>

<p>话说得可真狠啊！</p>

<p>但应该强调的是，在论战中，莱布尼茨是非常有风度的。他把自己和洛克辩论的书信集结成了一本《人类理智新论》。但是当这本书写成的时候，洛克已经去世了。莱布尼茨认为对手不能答辩了，自己发表和他的辩论是不公平的，于是在自己生前一直藏着这本书没有发表。</p>

<h2>第十八章 巨匠与杰作</h2>

<p>洛克在和莱布尼茨的辩论中没有占到什么便宜，而且在51岁的时候，因为反对查理二世，被迫逃亡到荷兰这个自由的国度。</p>

<p>虽然第一回合失利，但是，很快，英国就有一个重量级的人物登场了——牛顿。</p>

<p>牛顿，旷世天才，伟大的物理学家、数学家、天文学家、哲学家、神学家、炼金术士、小心眼儿、世界末日预测者。</p>

<blockquote><p>对，你没听错，牛顿晚年通过复杂的公式，计算出了世界末日的具体时间，就在2060年。</p></blockquote>

<p>牛顿和洛克关系很好，而且洛克还利用自己的社会关系提携过牛顿。牛顿一看自己的好朋友被人欺负了，怎能咽下这口气，撸起袖子就上，宣布：</p>

<ul>
<li>我牛顿才是微积分的发明者，莱布尼茨是个大骗子。</li>
</ul>


<blockquote><p>牛顿当时是英国皇家学会会长，稍微使用两下阴招，莱布尼茨就败下阵来。比如这份说莱布尼茨是大骗子的调查报告就是牛顿自己写的，而且牛顿还写了很多为自己变化的文章，匿名！</p></blockquote>

<p>牛顿的学霸行为还表现在和胡克争夺万有引力的平方反比定律上，使得胡克郁郁而终。</p>

<p>当然，这两件事情都和理性主义经验主义之战关系不大。</p>

<h2>第十九章 机械论</h2>

<h3>牛顿力学体系</h3>

<p>大部分哲学家之所以能在哲学史上留下一笔，当然是因为他们亲自研究了哲学，就具体的哲学问题提出了出众的看法。而牛顿能给哲学留下影响，却不是因为他进行了什么哲学研究，而是他在物理学上的成就实在太大，余波就把哲学给影响了。这个成就就是他的力学。</p>

<p>简单地说，我们衡量某个学说、理论、定理是不是好用，有两个标准：</p>

<ul>
<li>第一看它能否准确地预测未来</li>
<li>第二看它是否足够简要。</li>
</ul>


<blockquote><p>之所以我们没选择“地心说”而选择了“日心说”，并不是因为前者不准确，而是因为在两者同样准确的前提下，“日心说”更加简洁。在哥白尼之前的时代，坚持“地心说”的天文学家们为了让理论能和观测结果符合，不得不给太阳等星球画出非常复杂的轨道来。比如让太阳在一个大圆周运动上再做小圆周运动，就像螺旋一样。如果他们按照观测结果不断地修正理论，那么这套“地心说”学说有一天也可以和“日心说”理论一样准确。但是模型和计算过程就无比复杂了。</p></blockquote>

<p>按照这两个标准来衡量牛顿的经典力学系统，那简直是完美。</p>

<p>学会了这几条公式的人就可以指着天空说：“星辰万物，皆服从于我”。再庞大复杂的世界，也敌不过几个数学公式。</p>

<p>从有文明开始，人类面对宇宙的种种奇妙现象只能俯首膜拜。这种情况已经有几千年了。这时牛顿轻轻一点手指，整个宇宙立刻缩身于他的三条定律中，不敢有半点造次。</p>

<p>就像英国诗人蒲柏在赞美牛顿的诗中说：</p>

<blockquote><p>自然和自然律隐藏在黑暗中，神说：“让牛顿去吧。”于是，一切俱成光明。</p></blockquote>

<h3>机械论</h3>

<p>原先人类难以给现象繁多的物理世界一个满意的解释，自然倾向于诉诸神力。如今牛顿给了解释，而且无比精确。</p>

<p>不仅是物理世界，连灵魂的存在也被局限得很小了。在古代，人们想当然地认为，没有生命的物体必须受到外力才会运动，有生命的物体自己就能运动。这就是存在灵魂的证据呀，灵魂是负责“驱动”身体的。然而牛顿和他之后的科学家们证明，生物的机体也遵守物理定律，也遵循能量守恒、动量守恒的规律。生物运动可还原为纯粹的力学现象，并不需要灵魂的“驱动”。</p>

<p>顺着牛顿力学的思路，有人开始想，既然世间万物都要臣服于运动规律，那么动物、人类的身体，是不是也会臣服于这些规律呢？进一步想，是不是人类的思想、感情也会符合运动规律呢？是不是我们头脑中的一切意识其实都不过是物质运动的结果呢？</p>

<p>用物理学来解释包括人类意识在内的整个世界，这种观点就叫作“<strong>机械论</strong>”。机械论很好理解，我们在学校的时候都受过辩证唯物主义的训练。<strong>机械论就是除掉了辩证法之后的唯物主义</strong>，也可以叫作“机械唯物主义”。</p>

<p>机械论虽然和经验主义理性主义都不一样，但是，很显然，机械论是偏向于经验主义的。你看，牛顿力学体系就是经验主义的结晶。</p>

<blockquote><p>经验主义和理性主义关心的是真理的来源，机械论讨论的是物质决定精神。</p></blockquote>

<p>在其他流派的哲学家看来，机械论未免过于冷冰冰，而且后面我们会说到，它还会导向一个非常危险的结论——决定论，因此它一直饱受批评。然而我觉得，无论最终对它的评价如何，机械论本身的初衷是很美好的：它要建立一个用数学统治的美丽新世界。</p>

<p>17、18世纪的人们崇拜牛顿的学说，那时的机械论也被认为有着伟大的前途。机械论者希望，有一天在医学、心理学、伦理学、政治哲学等领域，都可以应用牛顿力学，或者像牛顿力学那样用几个简单的数学公式去解释。</p>

<p>而且机械论还有日益强大的科学奇迹作后盾。只要人稍微了解一下现代医学，就很容易接受“意识乃是神经活动的结果”这一机械论最关键的结论。可以说，我们周围的大部分人，对生活的看法多少都带一些唯物的观点。</p>

<p>同时，机械论也面临着一些难以回答的质问：</p>

<p>当一个人的身体丧失生理功能而死去的时候，我们看到他一动不动，对刺激没有反应，我们认为他的意识消失了。但我们如何去证明这一点呢？或许这个人一动不动仅仅是因为身体失去了生理功能，而不是意识消失呢？虽然这个假设很古怪，但是机械论却难以反驳它。</p>

<p>还有另一个批评。唯物主义说物质不依赖意识存在。但是，当人没有意识的时候，又怎么知道那些物质是存在的呢？唯物主义者或许说，科学可以证明。但是科学要建立在经验的基础上。在意识无法触及的领域里，自然无法产生经验。因此科学对这些事物只能猜测，却证明不了任何东西。</p>

<h2>第二十章 决定论</h2>

<p>机械论虽然可以条理清晰地解释这个世界，但是按照机械论的说法，人类不过是这个世界中可有可无的一件事物而已，和桌子板凳、花鸟鱼虫没有本质的区别。我们的意识不过是一系列物质作用的结果，随时可以消失，毫无永存的希望，更谈不上还有什么人生意义。就像世间的其他事物一样，存在就存在了，消失就消失了。这很容易推导出<strong>虚无主义</strong>和<strong>享乐主义</strong>。</p>

<p>但这还不是最可怕的，最可怕的是这个：<strong>决定论</strong>。</p>

<p>何为决定论？决定论说，既然世间万物都可以用物理规律来解释，那么每一个事件之间必然要遵循严格的因果关系。如果人的意识是完全由物质决定的，那肯定也得服从严格的物理定律。那么，整个世界该如何发展，该走向何处，都是由自然定律决定好了的。就像人们根据力学可以预测星辰位置一样，人们也可以根据自然规律来预测未来所有的事件。</p>

<p>根据决定论的观点，严格意义上的随机数也是不存在的：当你摇骰子的时候，只要知道了一个时间点的所有数据，就可以算出最终的点数。数学家拉普拉斯说，只要他拥有足够多的数据，就可以按照机械定律推算出未来世界的全部面貌。</p>

<p>能预测未来，这听上去挺美妙的，为什么可怕呢？</p>

<p>可怕的地方就在于，一旦我们接受了最严格的决定论，那就意味着<strong>人类没有了自由意志</strong>。我们头脑中的每一个念头，在前一秒钟已经被决定好了。如果我们这么一环一环地回溯回去，那么我们一生中的一切所思所想、我这本书中的每一个字，您看这本书时在头脑中迸发出的每一个念头，其实都是在几万亿年前的宇宙大爆炸的那一瞬间就被决定好了的。</p>

<p>且不说这想法很诡异，关键是，那人生还有什么意思啊？既然一切都是决定好的，那我们为什么还要努力奋斗，为什么还要劳动？人生还有什么意义？如果人类只是被操控的木偶，活着听从因果律摆布，死后化为虚无。那还有什么人生意义呢？</p>

<p>这还算次要的，更要紧的是，人之所以要为自己的行为负责，是因为人有自由。这点我们在讲奥古斯丁的时候已经说过了。那么，假如人的全部意识都是事先被决定好的，人就没有自由，那不就没有道德可言了吗？人就不需要为自己的行为负责了呀，那也就不需要法律了。</p>

<blockquote><p>其实，决定论是不成立的。根据量子理论中的测不准原理，我们不可能同时精确测量一个原子的位置和动量。也就是说，我们没法得到一个时间点整个世界的所有数据，所以，也就没有办法预测未来。说不定，人类的自由意志就来源于测不准原理呢。</p></blockquote>

<h3>部分决定论</h3>

<p>除了建立在机械论上的严格的决定论之外，在哲学史上更流行的是<strong>部分决定论</strong>，也就是说物理世界是被决定的，但是人有自由意志。这当然更容易让人接受。古希腊的斯多葛学派就相信部分决定论。他们认为我们不能控制事物，但是可以控制我们自己对待生活的方式。所以这个学派提倡随遇而安的生活态度。</p>

<p>前面我们说过斯宾诺莎的哲学，应该还记得斯宾诺莎是用类似于几何的逻辑一步步推出哲学体系的。这意味着，他相信世间万物之间都有着严格的逻辑关系。这也会导致决定论。同时，斯宾诺莎认为世界是一个实体，世间万物以及我们自己都是实体的一部分，也就是神的一部分。那么人类就没有自由了，因为人的意志也是实体的一部分。</p>

<p>但斯宾诺莎又说，我们还是有追求自由的方法的。假如我们被动地按照必然律活着，那就成了必然律的奴隶。所以，我们应该用理性去领悟事物之间的关系。明白了我们在整个实体中的处境，也就实现了自由。更进一步说，当我们认为自己和万物是同一个实体的时候，就相当于扩大了我们自己的范围，世间发生的任何事情都属于我自己的一部分，这世界对我们的限制也就越来越小乃至于无，我们也就越来越自由。</p>

<p>这让人想到了佛教的理论。佛教强调因果，这和决定论很像。但佛教同时认为，人有自由去主动领悟世界的本质，假如能做到这一点，人和万物就没有区别，就实现了最大的自由，也就是成佛了。</p>

<h3>决定论与自我安慰</h3>

<p>决定论和宿命论很像。用宿命论来安慰自己，是中国人的老传统了。</p>

<p>当我们遇到挫折的时候，我们常会安慰自己说“这是命”。比如俗语说“人的命，天注定，胡思乱想没有用”，用来安慰人是很管用的。</p>

<p>然而中国人很狡猾，遇到好事的时候就不说是“命”了，男女相聚，说的是“缘”。缘是什么？佛教概念里讲的是因果报应。遇到好事讲“缘”，意思就是说这是因为我之前做过什么好事，这是我应得的。但自己遇到坏事就像前面说的，不讲因果改讲宿命论。但等到讨厌的人遇到坏事呢，就又是因果了，骂人家这是“报应”，这是“活该”。那么，要是自己讨厌的人遇到好事了，中国人怎么办呢？多半心中暗骂：某某某你等着，三十年河东三十年河西，谁笑到最后谁笑得最好——他又开始讲辩证法了！</p>

<h2>第二十一章 暴风雨</h2>

<h3>统一经验主义和理性主义</h3>

<p>休谟认为，你们讨论“何事真实存在”之类的问题，实际上这些问题人类根本没有能力回答，所以你们才能怎么说怎么都有理，正反两面的观点都能成立。不但空中楼阁式的理性主义者如此，连经验主义者也犯了类似的毛病。</p>

<p>举个例子。洛克不是有“白板说”吗？洛克认为人的经验是从后天的客观世界而来。在洛克之后还有另一个英国的经验主义者贝克莱，他则认为世界上没有物质，人的经验都是心灵中的观念。</p>

<p>这两个观点一个唯物、一个唯心，谁也说服不了谁。唯物者可以说，一个物体你不意识到它，它就不存在？这岂不是荒谬？唯心者可以说，我不意识到它它还存在？是因为还有其他人意识得到它。如果人人都意识不到它，你又怎么知道它是存在的呢？</p>

<p>这话说来说去近乎于抬杠了。于是休谟就说，你们都错了，错在你们讨论的问题超出了人的经验范围。“经验从哪儿来的”这个问题，我们根据经验回答不出来，所以，只能老老实实说不知道。</p>

<p>休谟的哲学观可以用来解决下面这个问题。</p>

<p>我们说过，我们永远没法证明自己是不是生活在《黑客帝国》式的虚拟世界里。那该怎么才能安心呢？休谟的回答是，不知道就不知道，没关系。我们能得到的经验就是眼前的生活，在没有明确的证据证明面前的生活都是幻觉之前，我们就照着自己平时的经验正常生活下去就可以了。我们没必要也没能力去无限地怀疑世界。反正想也想不出结果来，就别想了吧！</p>

<p>比如，如果有学生念着一半书突然产生了哲学思考：“天哪！万一我生活的世界是一团假象怎么办？太可怕了，我该怎么办？”休谟的反应跟孩子的妈是一样的，他会一拍桌子：“熊孩子，想那么多没用！继续念书吧！”</p>

<p>话说得远了点，正因为很多人不接受休谟的这个观点，才使得文艺创作者们有各种花招可以玩。比如《黑客帝国》后两集里的招数：让观众怀疑反抗军的基地也是虚拟出来的。比如《盗梦空间》里，让观众怀疑所谓的真实世界也是一个梦境。</p>

<p>休谟和笛卡尔一样被苏格拉底附体。他打算用怀疑论来抛掉前人所有不可信的经验。休谟想，有什么知识是切实可信的呢？他找到两种。</p>

<ul>
<li>第一种是不依赖于经验的知识。比如几何学，它自身是不矛盾的，完全符合逻辑规则，而且不依赖经验存在。
  我们前面说过，在现实世界中观察不到任何严格的三角形，但是我们仍旧有三角形这个概念。三角形不依赖外物存在。自然，像斯宾诺莎、莱布尼茨这些人的哲学体系，因为根基是可疑的，所以不在休谟的承认之列。</li>
<li>第二种可靠的知识是我们自己感受到的经验，摸到什么、看到什么，这些都是可信的（当然，还是那句话，这经验是不是来自于幻觉我们先不管）。</li>
</ul>


<p>休谟想来想去，觉得可信的知识就这两种，于是他很彪悍地说了一段话：<em>我们去图书馆随便拿起一本书，问这些书中包含着数和量的抽象推论吗？包含着关于实在事实和存在的任何经验的推论吗？如果都没有，就可以烧掉，因为里面只有诡辩和幻想</em>。</p>

<p>实际上，休谟对知识的界定很靠谱。从理性主义和经验主义的争论来看，人类仅有两种获得知识的办法，一个是靠演绎推理（而且还没得到新的知识），一个是靠经验。休谟把其中最不靠谱的——理性主义者们的那些公设都给去掉了。剩下的除了经验之外，还留下了纯粹靠演绎推理能成立的知识。与激进的经验主义者相比，休谟已经很厚道了。</p>

<h3>因果律是不存在的。</h3>

<p>研究科学，最重要、最基础的一条规律叫作因果律。就是说，凡事有因必有果。牛顿想，苹果落下来一定是由于什么原因造成的，这才有了万有引力定律。蒸汽上升是带动机器的原因，这才能有蒸汽机。总之，万事万物之间必须都存在因果律，我们才谈得上科学研究。</p>

<p>但是，休谟却说因果律是不可靠的知识，因为因果律不属于上面两种知识的人和一种。</p>

<p>首先，因果律属于第一类知识吗？我们能不依赖于经验，只靠逻辑推导出因果律吗？显然不能。一个因果律是否成立，总要关系到具体的事物。我们知道“点燃爆竹”和“爆竹爆炸”两者之间有因果关系。我们能知道这一点，纯粹是靠经验得来的。假如有一个原始人完全没见过、没听说过爆竹，那他无论怎么演绎推理，也不可能想出爆竹爆炸的原因。</p>

<p>那么，因果律可以靠经验总结出来吗？比如在地球上，苹果一离开树枝肯定会掉在地上，我们通过日常经验就可以认识到这一点。那么这算不算我们认识到了，“苹果离开树枝”和“苹果落在地上”这两件事中存在着因果关系呢？休谟说，不能，因为你就算之前多次看到苹果离开树枝落到地上这个现象，你也不能保证，下一次苹果还一定会落到地上。</p>

<blockquote><p>这一点是理性主义批判经验主义最有力的一招。</p></blockquote>

<p>休谟认为，<strong>人相信因果律其实是一种心理错觉，只因为我们发现两件事总在一起发生，我们就期待它们能再次一起发生。但这其中并没有可靠的根据。</strong></p>

<p>举个简单的例子，假如有一个没有科学知识的原始人，他通过观察发现，公鸡打鸣之后，总伴随着太阳升起，没有一天例外。那么他会认为，公鸡打鸣是太阳升起的原因。这显然是错的。</p>

<p>类似的误区在生活中常会遇到。统计学上有一句经典的话，“相关性不代表因果性”。意思是说，统计结果如果发现，有两个数据A和B，每当A上升的时候，B也跟着上升；每当A下降的时候，B也跟着下降。一般人会觉得，这说明了“A是引起B的原因”。实际上这是错的。</p>

<p>比如调查大学生的体重和交友数据表明，越是胖的人，身边的朋友就越多。这下调查人员兴奋了，立刻得出一个结论：身体胖是朋友多的原因。身体越胖的人，就越有魅力！然而，事实或许是这样，<u>这两件事有一个共同的第三方原因</u>，比如这些人都喜欢参加饭局。因为饭馆里的饭菜油水比较大，所以这些人的身体比较胖。同时，参加饭局的人社交范围比较广，所以朋友数量也多。因此，虽然“胖”和“朋友多”这两件事总在同一个人身上出现，但这两件事之间并没有因果关系，自然也得不出来“身体越胖的就越有魅力”这个古怪的结论。实际上，我们生活中常常遇到类似不靠谱的结论。比如因为“少年犯中80%的人都玩网络游戏”，就得出结论，说“玩网络游戏会导致青少年犯罪”。那“100%的少年犯每天都吃饭”该怎么解释？</p>

<h2>第二十二章 哲学怪兽</h2>

<p>理性主义已经被驳斥成独断论了，还剩一个经验主义。可经验主义吃饭的家伙是归纳法，这回也被休谟给整没了。</p>

<p>莱布尼茨曾经批评经验主义者说，人和禽兽的区别就是，人能得出必然命题；禽兽只有纯粹的联想，只知道过去发生的事情，未来还总能发生。休谟要听了这话，肯定会反驳说：你错了，我和禽兽不一样，我认为过去发生的事情，在未来不会发生。</p>

<p>休谟有一句名言，说<u>你怎么知道明天的太阳会照样升起</u>。对休谟不屑一顾的人，把这句话当作休谟白日做梦的笑话。而对于被休谟说服了的人，这句话代表的是休谟结论的可怕结果。</p>

<h3>哲学困境</h3>

<p>这好家伙，在因果律问题的两端，一边是休谟，说没有因果律，那科学就完蛋了；一边是科学，说有因果律，但就会没有了自由和道德（因为因果律可以推出决定论）。你说你相信哪个？两个都不好受。</p>

<p>当然，我们这些受过辩证唯物主义教育的人们，觉得还是有出路可走。我们可以说，为什么非要走极端呢？我们可以在极端中间选一个点嘛。比如说，我们可以相信意识依赖于物质存在，但是意识不被物质决定，我们的思想是自由的。这样，我们既在客观世界里保留了因果律，保留了科学，又在自己的头脑中保留了自由和道德。多完美！</p>

<p>这么想确实很舒服，不走极端，又左右逢源。然而这种狡猾的选择也要付出相应的代价。</p>

<p>我们说过，我们的原则是避免独断论。</p>

<p>那么，当你在左右两个极端里选择中庸的时候，你不能说我随便选择中间的哪一点都行，你必须说明白，为什么你要选一个点，为什么不能更靠左一点，或者更靠右一点。我们刚才在休谟的怀疑论和科学的决定论中间选了一点，对吧？我们认为因果律只存在于物质中，不存在于人的意识中，人的意识里保留了自由意志。那么我的问题就来了。</p>

<p>我们姑且认为人有自由意志。那么请问，动物有自由意志吗？植物有自由意志吗？如果说动物有植物没有，难道是因为前者能动后者不能动吗？那微生物有自由意志吗？细菌有自由意志吗？或者动植物的关键区别是前者有脑？那请问脑的定义是什么？这定义能决定自由意志的有无吗？无脊椎动物的神经中枢算脑吗？鱼是脊椎动物，有类似于高等动物的大脑结构，螃蟹虾米是无脊椎动物，后者所谓的大脑仅仅是神经节。那你的意思是说，螃蟹没有自由意志而鱼有？或者说，一个只有螃蟹虾米的鱼缸是决定论的，扔进去一条鱼就不是了？如果退一步，说自由意志的区别在于生命和非生命之间，那脱氧核糖核酸有自由意志吗？蛋白质有自由意志吗？你是说，一小块培养皿里的蛋白质有自由意志？如果进一步，说自由意志的区别在于人和动物之间，那人和动物之间的关键区别是什么？很多高智商动物如狗类会表现出感情，会向人类学习，它们这一切都是单纯的生理刺激的结果吗？如果说人和动物的关键区别在于理性，那婴儿有自由意志吗？原始人有自由意志吗？类人猿有吗？猩猩有吗？到底是在进化的哪一瞬间，人类和动物之间有了本质的区别？难道你是在说⋯⋯灵魂吗？如果区别在人类和动物之间，这不就意味着，人类在进化中的某一瞬突然“嘣”的一下就冒出自由意志来了？我们是不是可以说，宇宙从诞生开始，一直都按照严格的因果律按部就班地进化着。突然间，当某个星球出现“高级生命”或者什么“理性”的时候，从这些“高级生命”中突然迸发出一种东西，彻底地改变了整个宇宙的因果律，从此整个宇宙再也不是按照严格的决定论发展了。你是说⋯⋯理性可以改变整个宇宙？你是唯心主义者吗，同志？</p>

<p>如果理性有这么大的力量，这玩意儿是从哪儿来的？换句话说，如果你既是一个唯物主义者，又否认决定论的话，那么请问，自由意志这东西是从哪儿来的？如果人的意识仅仅是由脑神经决定的，是由符合因果律的物质决定的，为什么它能逃脱大自然的因果律，能够超越其上呢？那你还是唯物主义者吗？⋯⋯这样的讨论还可以无穷无尽地说下去。</p>

<p>明白了吗？假如咱们要取巧，要选择两个极端答案的中间一点，那你必须有充分的理由，把那个点分毫不差地精确地标出来。否则就必须面对无穷无尽的诘问。<em>如果你不能圆满地回答，那么你的答案显然是出自想当然，这又和宗教信仰有什么区别？</em></p>

<p>类似的困境，生活在休谟时代的经验主义者都遇到过。休谟的怀疑论是经验主义的必然结论，但经验主义者不愿意也不可能放弃归纳法。于是他们就说，不就是认为因果律和归纳法本身是循环论证，不能靠经验证明吗？那我们就像理性主义者那样，说<u>因果律和归纳法是人天生就有的理性知识</u>不就行了，反正科学也间接证明了归纳法的成功。这么一来，整个经验主义不就都立得住了？这有点像怀疑主义者说“所有的话都必须被怀疑”的时候，还必须补上后半句“除了本句话之外”，要不就成了自相矛盾了。</p>

<p>然而立刻有人会反对说，经验主义不是说一切知识都得从经验得出吗，那你凭什么又说因果律和归纳法可以是特例？假如它们是特例的话，为什么其他知识不能是特例？为什么不能一切知识都不从经验而来？这和我们前面说过的中庸困境一样。选择了中庸之道固然可以避免两个极端的缺点，但也同时失去了两个极端的理论支持，很容易被别人驳倒。</p>

<p>闲话少说，回过头来让我们看看那时哲学的困境吧。现在有两个会严重摧毁生活的哲学观点。一个是休谟的怀疑论，一个是科学的决定论。可怕的是，这两个观点正好是互相矛盾的两个极端。反对一个就等于拥护另一个，采取中庸之道的那些结论，更像是诡辩论而不是严谨的推理。</p>

<p>轮到康德出场了。</p>

<h3>关于因果律的一个有趣的讨论</h3>

<p>在康德出来解决这个问题之前，让我们插播一个关于因果律的有趣的讨论。</p>

<p>还记得前面说过的决定论吧？我们说过，决定论是从“万事万物都严格服从因果律”这一点推出来的。在这里，决定论是和因果律紧紧联系在一起的。然而，假如我们相信决定论，又会导致我们永远无法发现和使用因果律！这到底是怎么回事呢？刚才说了，因果律的意思就是“A发生以后，B必然发生”。我们假设这个世界有因果律，世界符合决定论。那么科学发现还是要用归纳法，对吧？所以科学家们要发现A和B之间有因果律，就必须不断地让A发生，再看是不是每一次B都会随之发生。</p>

<p>但这里有一个条件，就是A的发生必须是人能控制的。这样我们才能不断地改变A发生的条件和环境，才能绝对保证只有A，而不是其他因素造成B的发生原因。举例子就是，我们怎么知道苹果离开树枝是苹果落地的原因呢？我们得把各种可能同样是苹果落地的原因都排除了：天气啊，地理位置啊，苹果的品种啊。所以我们得在不同的天气下，在不同的地区，用不同的苹果来观察这个事件。结果发现，所有的条件都可以更换，但是苹果落地还是紧随着苹果离开树枝而发生。那么根据归纳法，我们就能知道，苹果离开树枝是苹果落地的原因了。</p>

<p>然而，假如我们生活在一个决定论的世界里，那么A的发生并不是我们能控制的，因为我们没有自由意志。因此，即便我们做再多的实验也无法确认A就是B的原因。就好比当我们看到苹果离开树枝和苹果落地这两个事件的时候，<u>这两个事件的发生其实都已经在宇宙生成的那一刻，由其他的什么东西（比如叫“原因C”）决定了。</u>无论我们如何更换苹果落地实验的天气、位置、苹果的种类去做这个实验，我们永远也无法排除那个“原因C”。甚至于连我们反复做这些实验的行为也都是“原因C”决定的，因此我们永远也无法发现因果律。这意思是，假如我们接受这世界是符合决定论的，那么我们可以相信这世上的确存在着因果律，但我们却永远无法把它们找出来。这并不能推翻决定论，不过可以让决定论陷入一种很尴尬的境地：<em>在决定论的世界里，科学同样是没有意义的。</em></p>

<h2>第二十三章 谎言的衰落</h2>

<p>这一章主要在讲中世纪的教廷和一些名人的关系，包括伽利略、霍布斯、牛顿、亨利四世等，虽然和哲学无关，但是当八卦看看也是不错的。</p>

<h2>第二十四章 远离尘嚣</h2>

<p>接下来是属于德国的时代。康德终于来了。</p>

<p>包括康德，以及后面的谢林、黑格尔、费尔巴哈、叔本华、尼采、马克思、胡塞尔、海德格尔，还有对哲学影响颇大的爱因斯坦、海森堡。这个超豪华阵容全部都是德意志人。他们中有不少是犹太人。后来希特勒迫害犹太人，致使一堆超级智囊人士脱离德国国籍到英美去作贡献了。</p>

<p>话说康德看了休谟的论述之后，很震撼。他觉得休谟说得没错，理性主义属于独断论，经验主义又不能证明事物之间存在因果关系。康德为此想了很久，突然，一个大胆到狂妄的念头产生了。康德说，当年大家都以为地心说正确，可是天文学家根据地心说怎么也计算不出正确的结果。哥白尼大胆地把地心说掉过来，改成日心说，一下子解决了问题。</p>

<p>那过去的哲学家呢，都认为我们的认识要符合客观世界，但是讨论了半天都没有结果。康德认为，<strong>我们应该把主客观世界的关系颠倒过来！</strong></p>

<h3>不可知论</h3>

<p>这⋯⋯不是疯话吧？咱们来研究研究康德这个大胆的想法是怎么回事。</p>

<p>首先，我们得拿出想象奇幻世界的劲头来，先只当康德是个奇幻作家，给我们设计了一个架空世界。这世界是什么样的呢？在这个世界里，人类是一种非常可怜的生物。人类永远无法认识到这个世界的真面目。人类所感受到的这个世界，都是通过人类心灵中某个特殊的机制加工处理过的。这个负责加工的机制，我们起个名字叫作“<strong>先天认识形式</strong>”。世界的真面目，起个名字叫“<strong>物自体</strong>”（也被译作“自在之物”）。人类感觉到的世界，也就是“物自体”经过“先天认识形式”加工后得到的东西，我们把他（们）叫作“<strong>表象</strong>”。这几个名词，得麻烦大伙记一下了。</p>

<p>回到康德。<u>在康德的哲学世界里，所有的知识（也就是来自于物自体的知识）都要先经过人类心灵的加工，才能被人类认识。所以他自比哲学界的哥白尼，在他的哲学里，不是心灵去感受经验，而是心灵加工经验，心灵生产了经验。</u></p>

<p>有一个最常用的比喻，有色眼镜。</p>

<p>这个比喻说，假设每个人终身都必须戴着一副蓝色的有色眼镜。这个世界上所有的事物，必须都通过有色眼镜的过滤才能被人看到。那么所有人看到的就是一个蓝色的世界，而世界真实的面貌是人永远看不到的。在这个比喻里，<u>有色眼镜是先天认识形式，事物原本的颜色是物自体，人类看到的蓝色的世界，是表象。</u>要注意的是，每个人的眼镜都是相同的，不会有人不一样。因而，戴着眼镜其实不会妨碍人类的正常生活，连物理研究的结论都不会影响。反正颜色只是人类自己起的名字而已，戴眼镜者根本没法察觉到自己的异常。</p>

<p>用白话说就是，康德认为，<strong>这世界（物自体）是人类永远无法真正认识的，人类看到的只是表象的世界。</strong>但是由于每个人对真实世界的表象方式（先天认识形式）都是相同的，所以人类看到的同一个东西的感受还是一样的，因此我们察觉不到真实的事物是否被扭曲了。所以这个世界观并不和我们的生活经验相悖。</p>

<h3>因果律与自由意志</h3>

<p>那因果律是怎么回事呢？</p>

<p>康德认为，我们这个先天认识形式里，包含了很多用来处理物自体的工具（一共有十二个先天范畴），其中一个就是因果律。而科学家们只能研究我们感觉到的事物。也就是说，科学家只能研究表象世界，因此科学家的研究对象都是带有因果律的。</p>

<p>那么，人的自由意志又在哪儿呢？我们自己的意识就是物自体啊！</p>

<p>因果律只存在于先天认识形式里，并不存在于物自体中。物自体是自由的，我们自己的意识也是自由的。</p>

<p>换句话说，康德让人的意志受到了先天认识形式的严密保护，因果律不能穿透先天认识形式去控制人的内心意志，所以人仍旧是自由的。当然，这也意味着作为物自体的自我意识，是没法被我们察觉和把握的。也就是说，科学是永远无法研究人的自由意志的。</p>

<p>问题完美解决。</p>

<p>康德之前的哲学危机，是休谟对因果律，乃至对人类理性能力的怀疑。康德的解决方法是，他把世界分成了两个部分。一个部分完全不可知，另一个部分则可以用理性把握。不可知的那部分因为永远不可知，所以对我们的生活没有什么影响。只要我们在可把握的世界里生活，理性就又恢复了威力。这样，既没有破坏休谟的理论（想破坏也没那能力），又让人类重新信任理性，重新踏实了。</p>

<h3>康德哲学的现实意义</h3>

<p><strong>阴谋论</strong></p>

<p>假如我们接受康德的世界观，我们就同意，这世上总有一些东西是我们无法认识的。我们只要安于在能认识的世界里生活就对了。这可以用来应对一些没有确凿根据的阴谋论。</p>

<p>我们的生活中永远不会缺少阴谋论。比如有人说，我们都生活在《黑客帝国》般的虚拟世界里，比如有人说，这世界是由秘密组织控制的，比如有人预测某年某月是世界末日等等。有的人会觉得，不能证明这些阴谋论为假，就活得不踏实。</p>

<p>但关键是，很多阴谋论是无法证伪的。我们永远也不能证明我们没生活在虚拟世界里；也没法证明我们所看到的世界全都是假象；也没法证明，下一秒钟世界不会被我们从未认识到的某种力量毁灭。</p>

<p>按照康德的世界观，这些阴谋论正是处于我们永远无法认识的世界里。那么我们该怎么办？——管它做甚！</p>

<p>阴谋论的真伪问题属于我们不能认识的领域，费劲去研究它只会徒劳无功。就像研究“二律背反”会出现矛盾结论一样，当我们谈论阴谋论的时候，正方反方都会说出一大堆互相对立的道理来。看着都有理，其实全都是空谈而已。我们不需要管它，该怎么生活继续怎么生活就是了。</p>

<p><strong>给上帝开脱</strong></p>

<p>关于上帝，一直会有一些棘手的问题，无论怎么回答，都会有逻辑上的漏洞。比如：</p>

<ul>
<li>上帝是否存在？</li>
<li>作为全知全能的上帝，为什么允许世间存在这么多恶？</li>
</ul>


<p>康德对理性的限制给了上帝可以不遵守逻辑规则的理由。康德论证了，理性并不是万能的。比如对于“二律背反”问题，理性就无法去讨论。因此，并不是一切事物都会遵守逻辑。上帝既然是绝对的存在，自然是属于“物自体”那边的存在，那么上帝也就用不着遵守逻辑了。上述对上帝的质疑也就都不能成立了。</p>

<p><strong>四维物体</strong></p>

<p>我们生活的空间是三维的。那么，有没有四维空间，四维空间是什么样子的呢？注意，我们这里说的第四维不是时间，而是纯空间上的四维。</p>

<p>我们可以先考虑这样一个问题：怎样让二维空间中的人想象我们三维空间中的正方体？</p>

<p>我们可以将三维正方体穿过二维平面，二维空间中的人就可以看到三维正方体在二维平面上的投影，这个投影随着时间不断变化。三维空间中的人，通过这样的投影变化，就可以想象出这个正方体在三维空间中的样子。但是，二维空间中的人肯定是想象不出来的，就像无论思维正方体怎么投影到我们三维空间，我们也无法想象出四维正方体到底是个什么样子一样。我们唯一能知道的就是四维正方体在三维空间中投出的“表象”（也就是那个投影），而对于四维正方体本身，我们没法认识。</p>

<h2>第二十五章 王者之风</h2>

<h3>黑格尔的辩证法</h3>

<p>在阐述黑格尔的辩证法之前，先声明一下：下面这种不是辩证法</p>

<blockquote><p>我们今天对辩证法有一种庸俗的理解，说辩证法就是“看待事物要分两个方面”。别人批评一个现象，你非要说“要辩证地看这件事，这件事也有好的一面嘛”。这是对辩证法的极大误读。这不叫辩证法，这叫诡辩法，它的唯一作用是把所有的事实都捣成一片糨糊，逃避一切有意义的结论。</p></blockquote>

<h4>矛盾律</h4>

<p>黑格尔的辩证法的核心是<strong>矛盾律</strong>。</p>

<p>黑格尔认为，矛盾的双方可以共存，但是处在互为差异、甚至互相冲突的动态之中。事物的正题和反题会发生强烈的冲突，这个冲突的结果并不是一方消灭另一方，而是正题和反题最终化为“合题”达到了协调，升华了。前面说过，有一个正题就可以找到它的反题，因此新的合题产生之后，它的反题也随之产生，这样就又产生了新的矛盾，又要有新的冲突和升华，再产生新的合题。</p>

<p>因此黑格尔认为，事物是不断变化的，这种变化是自发的、抑制不住的。同时，这种变化不是无序的，而是有方向的，这个方向就是较低级的正题和反题不断变成更高级的合题，也就是事物不断在向高级形态变化。</p>

<p>黑格尔的辩证法认为，矛盾可以存在，矛盾必须存在，矛盾就是世界的本质。</p>

<p>最适合诠释这个概念的并非西方哲学家，而是我们传统的“<strong>阴阳说</strong>”。中国古人早就认识到，阴和阳无处不在，凡事有阴又有阳。阴阳也不是你死我活的关系，而是既有冲突也可和谐共存的。就像“阴阳鱼”所画的那样，阴阳你中有我，我中有你，是一种互相冲突又互相依存的动态关系。</p>

<h4>绝对精神</h4>

<p>矛盾律变化到最后是什么呢？就是黑格尔的终极真理，黑格尔给它起个名字，叫做“<strong>绝对精神</strong>”。</p>

<p>之前哲学家们把世界分成了两部分：“主体”（“我”）和“客体”（客观世界）。既然世界成了分割开的两部分，那么主体中的概念，到底能不能符合客体中的现实，就成了难以解决的问题了。</p>

<p>用通俗的例子讲，我们一般人对世界的概念是这样的：这世上有两个东西是最真实的。一个是我自己大脑中的思维，一个是外面的客观世界。大脑和客观世界不是同一个东西，我们用什么来连接两者呢？用的是感觉器官，是感官告诉了我们的大脑，身边的世界是什么样子的。</p>

<p>问题在于，谁来保证这个感觉器官是可靠的？谁能保证就一定没有一个能力超强的家伙，在歪曲我们的感觉器官？谁又能保证，我们所有人的感觉器官都是可靠的？根本就没法保证嘛。</p>

<p>黑格尔说，之前的哲学家错就错在认为人的理性世界和客观世界是对立的、矛盾的两个事物。在黑格尔看来，矛盾的东西是统一的，因此人的理性和客观世界之间虽然是矛盾的，但并不是割裂的，而是可以通过不断地辩证统一，最终成为一个合题。这样，人的理性经过辩证运动后，就能和客观世界合为一体。换句话说，理性经过不断的辩证，就可以完全符合客观世界的真实面貌。理性就是世界的本质，世界的本质就是理性。所以说，宇宙的本质是精神，而且是一种理性精神。这个理性精神，就是黑格尔的“<strong>绝对精神</strong>”。</p>

<p>当然，绝对精神也是一样，也在不断地由低级到高级变化，也在不断地完善自己。</p>

<blockquote><p>绝对精神好难理解啊。</p></blockquote>

<h3>黑格尔的历史观</h3>

<p>接下来说说黑格尔的历史观。</p>

<p>黑格尔说世间万物的发展一定要符合绝对精神，因此他的绝对精神观是决定论的，他认为历史不是人类创造的，也不是个别事件的堆砌，历史有自己必然的进程，我们人类只是历史实现自己目的的工具。就算拿破仑那样的伟人，其实也是绝对精神的工具。并不是拿破仑自己要征服欧洲，而是绝对精神要利用拿破仑来推进历史的进程。所以黑格尔表面上赞扬的是拿破仑，其实是在赞扬绝对精神。</p>

<p>我们知道，黑格尔的历史观后来被马克思批判性地继承，变成了辩证唯物主义历史观——马克思也认为，历史的进程是有方向的，不可逆转、不可阻止的，但是可以预测的。</p>

<p>马克思预测历史通向的是共产主义，那么黑格尔的历史通向哪里呢？黑格尔的历史通向绝对精神。他认为宗教比自然科学更高级，哲学又比宗教高级。最后，绝对精神会通过哲学完成自己的发展，达到最完美的境界。</p>

<p>具体说来，那个被绝对精神决定了的、借以认识世界、实现绝对精神的人是谁呢？黑格尔说：就是我！哈哈哈哈！</p>

<h3>辩证法对生活的影响</h3>

<h4>个人思想的成长过程</h4>

<p>一个人是怎么成长的呢？一个人先有一个原有的思想（正题），然后在生活中遇到了这思想不能解决的问题（反题），思想和现实问题发生了冲突，才会引起他反思人生。这个反思的结果不可能说最后完全不顾以前的旧想法（正题），最后的新思想（合题）肯定是结合了正题和反题。这就代表着人变得更成熟了。</p>

<h4>幸福的最高境界</h4>

<p>我们追求个人幸福的最高境界并不是有钱有权有一大堆情人围着，并不是肉体享乐。哲学史上也没有哪个哲学家认为纵欲是快乐之道。连古希腊的享乐主义者追求的也不是肉欲的极限，而是适度的享乐、劳逸结合的生活。这是因为大家都发现一个问题，肉欲快乐固然很好，但是纵欲总是和它的反题——痛苦、空虚紧紧连在一起的。不存在某种只给人快乐、不带来痛苦的享乐。这正符合了辩证法的观点。</p>

<p>所以最后的结论就是，我们追求个人幸福的最高境界，不是纵欲，而是内心的平静。</p>

<h1>下篇：</h1>

<h2>第一章 傲慢与偏见</h2>

<p>叔本华的八卦。</p>

<h2>第二章 悲观主义</h2>

<h3>物自体</h3>

<p>叔本华骂黑格尔，自然也不会喜欢黑格尔的哲学。叔本华是康德思想的继承者。</p>

<p>我们前面说过，康德哲学的一大问题是，物自体这东西其实是自相矛盾的。</p>

<p>黑格尔的解决办法是取消主体和客体的对立关系，也就是说，“我”的理性就代表了真实的世界，根本没有物自体这个东西了。</p>

<p>叔本华的解决方法不同。他认同康德的形而上学，但是不认为物自体是完全不能认识的。物自体是超越理性，不能用理性知识体验的。但是我们观察自己的时候，可以不靠理性，而是靠非理性的“直觉”。用文绉绉的话说，叫“审视内心”。当我们处于这种状态的时候，就可以体会到物自体。</p>

<p>而且，叔本华还认为：物自体只有一个，这“一个”就是“生命意志”。</p>

<blockquote><p>但是“生命意志”这个词呢，在叔本华的理论中有专门的意思，跟我们平时聊天时的含义不同。除了“生命意志”，后面尼采的“权力意志”，存在主义的“存在”等等术语，也属于这个情况。</p></blockquote>

<h3>生命意志</h3>

<p>那么生命意志是个什么东西呢？</p>

<p>简单地说，<strong>生命意志是一股永不停歇的力量。这股力量驱使着万物去运动，去发展。</strong></p>

<p>比如人和动物的食欲性欲，比如植物破土而出的欲望。</p>

<p>动物没有理性，可是动物生下来就知道觅食、交配、躲避危险，在很多情况下比人的求生能力还要强。动物这么强大的生存能力哪儿来的呢？叔本华认为，这是背后的生命意志驱使的。生命意志的概念比一般的生物欲望还要宽泛，还包括没有生命的事物在内。</p>

<p>叔本华认为，宇宙中万事万物背后都有生命意志在驱动。小到磁石相吸，大到星球运行，背后的本质原因都是生命意志。在叔本华看来，生命意志是世界上最本质的东西，是不可抗拒的，是永不停歇的。</p>

<p>举例子说，我们以为自己生活、恋爱、结婚、工作是根据我们的理性选择的。而叔本华认为，真正驱动你的都是种种欲望：生殖的欲望、享乐的欲望、征服的欲望，等等。你以为你在靠理性生活，实际上躲在理性背后的是生命意志，生命意志在驱动你作出种种选择。</p>

<p>当然叔本华不会认为理性一点儿用都没有，他的形而上学就是理性的产物！那他认为，生命意志和理性之间是什么关系呢？我们可以打个比方：意志是个充满欲望的君王，但是它头脑糊涂，只知道发布命令，不知道该怎么去更好地达到目的。理性是个头脑清醒的老臣，它虽然对君王的命令有意见，但是限于身份，只能偶尔劝谏君王，大部分时候都是在用它的聪明才智去满足君王的欲望。理性不是没有用，只是实现意志的工具而已。</p>

<blockquote><p>叔本华对生命意志和理性关系的解读，和弗洛伊德在《梦的解析》中对“本我”（潜意识）、“自我”（意识）与“超我”（道德的自我）的解释如出一辙。</p></blockquote>

<h3>悲观主义</h3>

<p>在康德看来，理性就是我们这个世界的统治者。没错，理性确实管不了物自体，但是物自体也不影响我们的世界呀。叔本华说，不，物自体能影响我们的世界。不仅能影响，而且影响力超大，我们用理智控制不了。</p>

<p>在康德那里，这个世界的基础（理性）是井井有条的理性。在叔本华这里，这个世界的基础是无法控制的生命意志。</p>

<p>因此康德对世界的看法是乐观的。叔本华对世界的看法是悲观的。</p>

<h2>第三章 理性的危机</h2>

<h2>第四章 瞧！这个人</h2>

<h2>第五章 钢铁之躯</h2>

<h2>第六章 被侮辱的与被损害的</h2>

<h2>第七章 科学新发现：理性的反击</h2>

<h2>第八章 人猿星球</h2>

<h2>第九章 科学倒打一耙</h2>

<h2>第十章 寻欢作乐</h2>

<h2>第十一章 快乐王子</h2>

<h2>第十二章 逻辑实证主义</h2>

<h2>第十三章 实用主义</h2>

<h2>第十四章 终结形而上学</h2>

<h2>第十五章 实用主义的科学</h2>

<h2>第十六章 科学是什么</h2>

<h2>第十七章 永恒的终结</h2>

<h2>第十八章 存在与虚无</h2>

<h2>第十九章 西西弗的神话</h2>

<h2>第二十章 人生的意义</h2>

<h1>结束</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[layoutSubviews的调用机制]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/03/28/when-is-layoutsubviews-called/"/>
    <updated>2017-03-28T09:25:06+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/03/28/when-is-layoutsubviews-called</id>
    <content type="html"><![CDATA[<h2><code>layoutSubviews</code>什么时候被调用？</h2>

<p>为了方便描述，假设视图结构如下：</p>

<!-- more -->


<p><strong>父视图</strong>包含<strong>子视图1</strong>和<strong>子视图2</strong>。</p>

<ol>
<li><code>init</code>不会调用<code>layoutSubviews</code>，即使使用了<code>init(frame: CGRect)</code>进行初始化。</li>
<li>当调用<code>addSubview(:)</code>将子视图2加入父视图的时候，子视图2和父视图的<code>layoutSubviews</code>会被调用，但是子视图1的<code>layoutSubviews</code>方法不会被调用。</li>
<li>当我们设置子视图2的<code>frame</code>的时候，如果<code>frame</code>的<code>size</code>有变化，同结论2<code>addSubview</code>；如果<code>frame</code>的<code>size</code>没有变化，则不会有<code>layoutSubviews</code>被调用。</li>
<li>当调用<code>removeFromSuperview</code>将视图2从父视图中删除的时候，只有父视图的<code>layoutSubviews</code>会被调用。</li>
<li>当旋转设备的时候，只有根视图的<code>layoutSubviews</code>会被调用。</li>
<li>当滑动<code>UIScrollView</code>的时候，<code>UIScrollView</code>的<code>layoutSubviews</code>会被调用。</li>
</ol>


<h2>auto layout和autoSizing</h2>

<p>以上结论有个前提：视图通过设置<code>frame</code>或者autoSizing机制确定位置和大小，不使用auto layout。</p>

<blockquote><p><strong>auto layout和autoSizing的区别</strong>：autoSizing确定的是子视图和父视图之间的位置大小关系，auto layout确定的是子视图、父视图以及兄弟视图之间的位置大小关系。</p></blockquote>

<p>在使用auto layout的时候，当调用<code>addSubview(:)</code>将子视图2加入父视图的时候，子视图2和父视图的<code>layoutSubviews</code>会被调用，同时子视图1的<code>layoutSubviews</code>方法也会被调用。设置<code>frame</code>和<code>removeFromSuperview</code>有类似的结论。</p>

<h2><code>setNeedsLayout</code>和<code>layoutIfNeeded</code></h2>

<ul>
<li><code>setNeedsLayout</code>：如果一个视图调用了<code>setNeedsLayout</code>，那么在下一个更新周期该视图的<code>layoutSubviews</code>会被调用。</li>
<li><code>layoutIfNeeded</code>：如果一个视图调用了<code>layoutIfNeeded</code>，那么该视图的<code>layoutSubviews</code>会被<strong>立刻</strong>调用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理多个手势之间的关系]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures/"/>
    <updated>2017-03-03T13:11:55+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/03/03/relation-among-m-multiple-gestures</id>
    <content type="html"><![CDATA[<ol>
<li>可以为同一个view添加两个相同类型的手势吗？比如添加两个<code>UITapGestureRecognizer</code>到同一个view。</li>
<li>如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</li>
<li>如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</li>
</ol>


<!-- more -->


<p>单个手势的响应过程参考<a href="http://hongchaozhang.github.io/blog/2015/10/21/touch-event-in-ios/">iOS中的触控事件机制</a>。但是上面几个问题需要考虑多个手势之间的关系，超出了上面文章的讨论范围。下面，我们就来讨论一下上面几个问题。</p>

<h3>1. 可以为同一个view添加两个相同类型的手势吗？比如添加两个UITapGestureRecognizer到同一个view。</h3>

<p>可以为view添加多个不同的<code>UIGestureRecognizer</code>，比如pan和tap，可以同时起作用，但是如果你想<strong>加入两个tap手势，第二个会将第一个手势覆盖</strong>。这个时候，至少需要为其中一个tap手势添加delegate，并实现下面的方法，为两个tap同时存在的情况返回true：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRecognizeSimultaneouslyWith</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture&rsquo;s delegate may return YES.</p></blockquote>

<h3>2. 如果一个view中有多个手势（<code>UIGestureRecognizer</code>），应该怎么处理它们之间的关系？</h3>

<p>如果两个手势之间没有识别上的困难，那么不用任何处理，比如tap和pan，但是如果有关系，比如single tap和double tap，rotate和pinch，这需要明确两者之间的关系。</p>

<p>如果不希望在double tap的同时触发两次single tap，需要在single tap的delegate中实现方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRequireFailureOf</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，可以保证single tap会等待double tap失败之后再被触发。缺点是single tap反应迟钝。</p>

<p>如果希望在rotate的同时可以进行pinch，需要在pinch或者rotate的手势的delegate中实现方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optional</span> <span class="n">public</span> <span class="k">func</span> <span class="n">gestureRecognizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">gestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">,</span> <span class="n">shouldRecognizeSimultaneouslyWith</span> <span class="nl">otherGestureRecognizer</span><span class="p">:</span> <span class="bp">UIGestureRecognizer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，rotate和pinch就能同时被识别。</p>

<h3>3. 如果子view和父view中都有手势，这些手势之间的关系又是怎么样的呢？</h3>

<p><code>UIGestureRecognizerDelegate</code>中的方法并没有限制在同一个view之中，所以，不同view之间的手势关系与1和2的处理相同。</p>

<h3>注意</h3>

<p>如果为手势实现了delegate方法，那么<code>UIGestureRecognizer</code>里面的类似的方法将不再起作用。比如：</p>

<p>如果设置了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">singleTapOnMapWidgetViewerGestureRecognizerDelegate</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">require</span><span class="p">(</span><span class="nl">toFail</span><span class="p">:</span> <span class="n">doubleTap</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就不起作用了，必须通过<code>UIGestureRecognizerDelegate</code>里面的方法实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[室内定位技术现状]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/02/21/indoor-position/"/>
    <updated>2017-02-21T13:37:02+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/02/21/indoor-position</id>
    <content type="html"><![CDATA[<h2>室内定位技术简介</h2>

<p>室内定位的应用场景，参见<a href="https://senion.com/indoor-positioning-for-retail/">室内定位应用场合</a>。</p>

<h3>室内地图</h3>

<p>要进行室内定位，首先需要有室内地图。</p>

<!-- more -->


<h3>室内定位技术</h3>

<table>
<thead>
<tr>
<th>&mdash; </th>
<th> 工作原理 </th>
<th> 应用场合</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPS </td>
<td> 接收多个卫星信号计算位置，信号中包含卫星信息和时间戳，根据时间差计算距离。</td>
<td> 室外定位跟踪，农业和军事应用</td>
</tr>
<tr>
<td>基站定位 </td>
<td> 接收多个基站信号，信号中包含基站信息，根据信号强度计算距离。</td>
<td> &mdash; </td>
</tr>
<tr>
<td>Wi-Fi </td>
<td> 接收多个Wi-Fi信号，根据强度计算距离。</td>
<td> 室内定位</td>
</tr>
<tr>
<td>蓝牙 </td>
<td> 接收低功耗蓝牙beacon发射的信号获取beacon信息，通过信号强度计算距离。</td>
<td> 室内定位</td>
</tr>
<tr>
<td>RFID </td>
<td> &mdash; </td>
<td> 存货跟踪，厘米级精度定位要求 </td>
</tr>
<tr>
<td>地磁 </td>
<td> 在地磁指纹采集的基础上，通过磁感应器和网络请求获取位置信息。</td>
<td> &mdash; </td>
</tr>
<tr>
<td>NFC </td>
<td> &mdash; </td>
<td> 支付／票务 </td>
</tr>
<tr>
<td>陀螺 </td>
<td> 在初始状态已知的情况下，通过积分计算未来状态。</td>
<td> 和其它定位方式结合使用，在保证一定精度的基础上，降低功耗。</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>&mdash; </th>
<th> GPS </th>
<th> 基站定位 </th>
<th> Wi-Fi </th>
<th> 蓝牙 </th>
<th> RFID </th>
<th> 地磁 </th>
<th> NFC </th>
<th> 陀螺 </th>
</tr>
</thead>
<tbody>
<tr>
<td>配置密度 </td>
<td> 全球 </td>
<td> 200米-2000米 </td>
<td> 20米-50米 </td>
<td> 1米-50米 </td>
<td> 1厘米-100米 </td>
<td> 全球 </td>
<td> &mdash; </td>
<td> 不限 </td>
</tr>
<tr>
<td>可接入（1-5） </td>
<td> 4 </td>
<td> 4 </td>
<td> 3 </td>
<td> 4 </td>
<td> 2 </td>
<td> 2 </td>
<td> 3 </td>
<td> 4 </td>
</tr>
<tr>
<td>精度（1-5） </td>
<td> 1(10米) </td>
<td> 0.5(100米) </td>
<td> 3(3-5米) </td>
<td> 4(1-3米) </td>
<td> 5(厘米级别) </td>
<td> &mdash; </td>
<td> 5(厘米级别) </td>
<td> 0.5(10米／100米) </td>
</tr>
<tr>
<td>隐私安全（1-5） </td>
<td> 3 </td>
<td> 3 </td>
<td> 2 </td>
<td> 3 </td>
<td> 4 </td>
<td> 5 </td>
<td> 4.5 </td>
<td> 5 </td>
</tr>
<tr>
<td>代价（1-5） </td>
<td> 5 </td>
<td> 5 </td>
<td> 3 </td>
<td> 4 </td>
<td> 2 </td>
<td> 1.5 </td>
<td> 3 </td>
<td> 1 </td>
</tr>
</tbody>
</table>


<p> 参考：<a href="http://lighthouse.io/indoor-location-technologies-compared/">Indoor location technologies compared</a></p>

<p> <strong>指纹技术</strong></p>

<p> 直接根据Wi-Fi或者蓝牙的信号强度计算距离会有比较大的误差，因为每个接入点的信号强度衰减模型不统一，并且受所在环境（遮挡等）的影响比较大。所以，就实地采集每个位置处每个接入点的信号强度，并存入服务器供后续定位请求使用。</p>

<p> 其它定位原理参考<a href="http://bbs.lbsyun.baidu.com/forum.php?mod=viewthread&amp;tid=116547&amp;extra=page%3D1">室内定位技术原理揭秘</a>。</p>

<h2>各厂商实现的室内定位技术</h2>

<h3>苹果</h3>

<p>苹果在2014年的WWDC上（Taking Core Location Indoors）推出了iBeacon技术和协议，以及对应的SDK，实现室内定位。</p>

<p>关于iBeacon的几个问题。</p>

<ul>
<li><p>我部署的iBeacon节点是否会被别的商家使用？</p>

<p>  回答是Yes！由于iBeacon协议开放，而且易于伪造，你部署的节点完全可以被竞争企业使用。甚至是伪造一个跟你的ID完全相同的Beacon。防止冒用蹭用是一个课题。</p>

<p>  设备商应该会给出一个解决方案，但截止目前还是可以被冒用。由于现在还没大规模部署，还有时间去解决这个问题。</p></li>
<li><p>iBeacon的耗电量如何？</p>

<p>  现在市售方案除Estimote比较特殊外，基本上都是采用的TI2540或2541方案。Beacon作为蓝牙基站发射时间特别短只有4mS左右。</p>

<p>  Beacon的发射周期可调，比如苹果规定100mS发射一次，也就是说100mS里只发射4ms。不同的使用场景可以根据实际需要调整发射周期、发射频率，功耗也会有差别，短的半年，长的3-4年。</p></li>
</ul>


<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.voidcn.com/blog/u012716788/article/p-4590383.html">iBeacon能否精确室内定位等10个技术问题</a></li>
</ul>


<h3>高德</h3>

<p>高德地图支持Wi-Fi和蓝牙iBeacon室内定位。如果是iOS系统，只能用iBeacon定位，因为iOS系统不提供Wi-Fi底层数据接口。</p>

<table>
<thead>
<tr>
<th>设备 </th>
<th> 精度 </th>
<th> 支持系统 </th>
<th> 部署密度 </th>
<th> 设备单价 </th>
<th> 支持标准</th>
</tr>
</thead>
<tbody>
<tr>
<td>WIFI </td>
<td> 3~8米 </td>
<td> Android 4.0及以上 </td>
<td> 间隔30米部署，700平米1个 </td>
<td> 上百元 </td>
<td> 标准2.4G/5G频段</td>
</tr>
<tr>
<td>蓝牙 </td>
<td> 1~5米 </td>
<td> Android 4.3及以上，iOS 8及以上 </td>
<td> 间隔 8米部署，50平1个 </td>
<td> 数十元 </td>
<td> 标准蓝牙4.0广播协议</td>
</tr>
</tbody>
</table>


<p>应用高德进行室内定位的步骤：</p>

<ol>
<li>准备室内地图（使用高德已有的或者自己制作）。</li>
<li>铺设Wi-Fi或iBeacon接入点。</li>
<li>使用高德提供的定位数据采集工具进行数据采集。</li>
<li>数据采集完毕编译后，上传至服务器。</li>
<li>使用高德提供的定位数据检测工具现场体验定位效果。</li>
<li>开发应用，使用高德室内定位SDK获取位置，包括经纬度和楼层信息。</li>
</ol>


<p>关于室内地图：</p>

<ol>
<li><p>高德已覆盖数据</p>

<p> 高德已有室内地图数据，可免费申请使用。</p></li>
<li><p>高德未覆盖数据</p>

<p> 若为高德未覆盖室内地图数据，提供如下两种数据生产方案：</p>

<ul>
<li>委托与高德合作的第三方生产。</li>
<li>申请自主生产。</li>
</ul>
</li>
</ol>


<p><strong>参考</strong></p>

<ul>
<li><a href="https://lbs.amap.com/getting-started/locate">高德室外定位技术</a></li>
<li><a href="https://lbs.amap.com/getting-started/indoorlocation/">高德室内定位方案</a></li>
<li><a href="https://lbs.amap.com/getting-started/indoorintro">高德室内地图数据</a></li>
</ul>


<h3>百度</h3>

<p>大型商超内寻找店铺、停车场内反向寻车等业务的发展基础都是室内高精度定位。利用三角定位技术、增强WiFi指纹模型技术、地磁技术、蓝牙技术等， 提供精度1-3m的室内高精度定位服务。结合百度室内图服务，更好帮助开发者解决室内定位难题。</p>

<h3>识途</h3>

<p>特色：地磁定位技术。</p>

<p><a href="http://www.ubirouting.com/creator.php">定位和采集工具：识途 Creator</a></p>

<p>仅通过上面的视频很难理解其采集原理，但是，识途提出了采集过程中以下几点注意事项：</p>

<ol>
<li>在按下采集按钮开始采集的时候，请<strong>即刻</strong>开始行走；在到达终点停止行走后，请<strong>即刻</strong>按下采集按钮结束采集。</li>
<li>在采集过程中请保持<strong>统一、稳定、自然</strong>的行走速度, 尽可能保持在道路的中央行走，并且采集过程中尽可能避免晃动手机。</li>
<li>如果在某段路径受到了外界的严重干扰，无法保持一致的行走速度或预定的行走方向，务必针对这段路径进行重新采集。</li>
</ol>


<p>从上面的注意事项，可以大致猜测他是如何做到测量的地磁信号和地理位置的对应。</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://www.ubirouting.com/%E8%AF%86%E9%80%94%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E6%8A%80%E6%9C%AF%E7%BB%BC%E8%BF%B0.pdf">识途室内定位技术综述</a></li>
<li><a href="http://ubirouting.com/%E8%AF%86%E9%80%94%E5%AE%A4%E5%86%85%E5%9C%B0%E7%A3%81%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.pdf">识途室内地磁环境数据采集方法及注意事项</a></li>
</ul>


<h2>闲谈</h2>

<ul>
<li><p>GPS不是泛指，是特指。</p>

<p>  我们一提到定位，大家印象中最熟悉的技术可能就是GPS定位。其实更为准确的说法是GNSS(Global Navigation Satellite System)定位，中文含义就是全球卫星定位系统。GPS只是GNSS中的一种实现方法，该系统是由美国部署的。另外，还有其他类型的定位系统，例如，俄罗斯的格洛纳斯（GLONASS），欧洲的伽利略和中国的北斗。关系如下：</p>

<ul>
<li>GNSS

<ul>
<li>GPS（美国）</li>
<li>GLONASS（俄罗斯）</li>
<li>北斗（中国）</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>参考</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS语音控制系统]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/02/08/voice-command-implementation-for-ios/"/>
    <updated>2017-02-08T22:53:14+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/02/08/voice-command-implementation-for-ios</id>
    <content type="html"><![CDATA[<h2>语音识别</h2>

<p>ios10之前，用户和iOS系统进行语音交互有两种途径：</p>

<ol>
<li>Siri</li>
<li>通过键盘的麦克风按钮，进入听写模式</li>
</ol>


<!-- more -->


<p><strong>Siri</strong></p>

<p>缺点：</p>

<p>虽然Siri在iOS10中也开放了一些接口，但是非常有限：</p>

<ol>
<li>VoIP calling</li>
<li>Messaging</li>
<li>Payments</li>
<li>Photo</li>
<li>Workouts</li>
<li>Ride booking</li>
<li>CarPlay (automotive vendors only)</li>
<li>Restaurant reservations (requires additional support from Apple)</li>
</ol>


<p>而且，还必须以App Extension的形式实现。</p>

<p>优点：</p>

<p>但是优点也是很明显的，比如，在一个支持Siri的Messaging的应用中，可能出现下面的对话：</p>

<table>
<thead>
<tr>
<th>Siri </th>
<th> User</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Hi, Siri, send a app_name message.</td>
</tr>
<tr>
<td>to whom? </td>
<td></td>
</tr>
<tr>
<td></td>
<td> Hongchao</td>
</tr>
<tr>
<td>What do you want to say to Hongchao? </td>
<td></td>
</tr>
<tr>
<td></td>
<td> Good job on Jarvis for Map.</td>
</tr>
</tbody>
</table>


<p><strong>Speech</strong></p>

<p>iOS10除了通过SiriKit开发了Siri的一些功能之外，还开放了Siri使用的语音识别库Speech，该库是一个在线语音识别库。通过Speech进行语音识别非常简单、好用识别率高。详情参照<a href="https://developer.apple.com/reference/speech">官方文档</a>。</p>

<p>虽然ios10开放了Speech，但是也是有限制的开放：</p>

<ol>
<li>最长一分钟的持续时间。</li>
<li>对每个设备和每个应用，每天都有请求次数限制，但是具体次数没有公布。</li>
</ol>


<h2>命令提取</h2>

<p>Speech识别请求会返回最长一分钟的音频识别结果，如何从这段识别结果里面提取出需要执行的命令呢？我们使用下面两条原则：</p>

<ol>
<li>从后往前提取出第一个匹配命令库中的命令。</li>
<li>设计一些断句词帮助断句、提取命令。</li>
</ol>


<p>通过原则1，可以解决不带参数的固定命令的提取，但是对命令有个要求：</p>

<ul>
<li>任何命令不能是另一个命令的后缀。</li>
</ul>


<p>否则较长的命令就不能被执行。</p>

<p>对于有参数的变化命令，通过原则1就不能解决了。</p>

<p>比如，有命令<em>search for new york</em>，其中<em>search for</em>是命令，<em>new york</em>是参数。当执行完此命令之后，继续说了一些“无关紧要”的话，就会导致系统继续执行此命令。这里说的“无关紧要”是指：</p>

<ul>
<li>不是固定命令</li>
<li>不是断句词</li>
</ul>


<p>执行完带有参数的变化命令之后，需要使用断句词进行断句。这就是原则2的必要性。</p>

<p><strong>更自然的命令提取方法</strong></p>

<ul>
<li>只要能得到每个单词的时间戳，就可以通过停顿进行断句和命令提取，更加自然。</li>
<li>参考Siri在某个固定场景下的对话方式。</li>
</ul>


<h2>通过扬声器发声</h2>

<p>需要设置<code>AVAudioSession</code>的状态，保证既可以录音，也可以发声，同时发出的声音不应该再被录入。</p>

<p>这个需求应该可以通过<code>AVSpeechSynthesizerDelegate</code>中下面的方法实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">speechSynthesizer</span><span class="p">(</span><span class="n">_</span> <span class="nl">synthesizer</span><span class="p">:</span> <span class="bp">AVSpeechSynthesizer</span><span class="p">,</span> <span class="n">didFinish</span> <span class="nl">utterance</span><span class="p">:</span> <span class="bp">AVSpeechUtterance</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序]]></title>
    <link href="http://hongchaozhang.github.io/blog/2017/01/12/wechat-micro-program/"/>
    <updated>2017-01-12T14:18:20+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2017/01/12/wechat-micro-program</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>微信小程序项目2016.1.9启动，一年后的2017.1.9发布，正好是乔布斯发布iPhone（2007.1.9）整整十年后的同一天（12月28日微信公开课时，张小龙曾说发布日期是随便挑了一天）。</p>

<!-- more -->


<p><strong>版本需求</strong>：微信更新至iOS6.5.3版本或Android6.5.3版本。</p>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_1.png" alt="wechat_zhangxiaolong" width="360"></p>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_2.png" alt="wechat_zhangxiaolong_comment" width="360"></p>

<h2>小程序简介</h2>

<h3>小程序入口</h3>

<ol>
<li><p>小程序入口在哪？</p>

<p> 发现->小程序</p>

<p> <img src="http://hongchaozhang.github.io/images/wechat_micro_program_7.jpg" alt="where is micro program" width="360"></p></li>
<li><p>我怎么看不到小程序入口？</p>

<p> 至少使用一个。</p></li>
<li><p>怎么使用第一个？</p>

<p> 搜索或者扫描二维码。</p></li>
</ol>


<h3>关于小程序的几个问题</h3>

<ol>
<li><p>小程序的入口在哪里？</p>

<p> 哦，小程序在微信是没有官方入口的。如果你没有运行任何一个小程序的话，就没有入口，就像你没有订阅公众号就看不到入口一样。二维码是小程序的入口之一。</p></li>
<li><p>小程序商店？</p>

<p> 哦，对不起，这个也没有。微信一直秉承去中心化的原则，没有下载中心，没有分类，没有排行，也不会有推荐。与公众号的朋友圈分享类似，未来小程序也会依赖社会化推荐，那是一种不同形态的推荐，不会因为你用过一次日程管理软件而不停的给你推荐类似的软件。</p></li>
<li><p>小程序会有订阅关系吗？</p>

<p> 也没有。用户和小程序只有访问关系，而不是粉丝关系。</p></li>
<li><p>小程序能否搜到呢？</p>

<p> 能搜到，但是会限制搜索的能力，避免滥用。小程序不是基于流量分发的模式，只有在需要的时候才用到。至少在现在看来，微信能索引到的小程序数据太少了，就是简单的标题和最多 5 个 tag（标题还必须是精准匹配，但是腾讯自己的小程序好像不是这样。），用这点数据想准确描述小程序的能力，太不现实了。比如，我做了个小程序，提供各个城市攻略，但当用户想找北京攻略，进行搜索，很可能完全找不到它，因为我没法告诉微信，我都能支持哪些城市有哪些方面的攻略（只有 5 个 tag 嘛），那微信当然就不能帮用户找到它所需的小程序，这种搜索能力和大搜索、各种搜索 One Box 相比，太受限了。</p></li>
</ol>


<h3>小程序与公众号的区别</h3>

<table>
<thead>
<tr>
<th>&mdash; </th>
<th> 公众号 </th>
<th> 小程序 </th>
</tr>
</thead>
<tbody>
<tr>
<td>定位 </td>
<td> 服务于营销与信息传递 </td>
<td> 面向产品与服务</td>
</tr>
<tr>
<td>实现技术 </td>
<td> 基于H5 </td>
<td> 基于微信自身开发环境与开发语言</td>
</tr>
<tr>
<td>体验 </td>
<td> 延迟较大 </td>
<td> 接近原生app</td>
</tr>
<tr>
<td>推送 </td>
<td> 能 </td>
<td> 否</td>
</tr>
<tr>
<td>订阅关系 </td>
<td> 有 </td>
<td> 无</td>
</tr>
<tr>
<td>能够搜索到 </td>
<td> 无限制 </td>
<td> 有限制</td>
</tr>
<tr>
<td>分享范围 </td>
<td> 好友、群、朋友圈 </td>
<td> 好友、群</td>
</tr>
<tr>
<td>桌面图标 </td>
<td> 有（android可以，ios不可以） </td>
<td> 有（android可以，ios不可以）</td>
</tr>
<tr>
<td>长按二维码识别 </td>
<td> 可以 </td>
<td> 不可以</td>
</tr>
<tr>
<td><em>外链</em> </td>
<td> <em>允许</em> </td>
<td> <em>禁止</em></td>
</tr>
</tbody>
</table>


<p>最重要的应该是最后一条，这也能说明微信试图通过小程序构建自己的生态圈。</p>

<h2>技术与开发</h2>

<p>微信小程序的提出就不是技术导向的，他和微软开发一个新的语言不同，也和 Facebook 的 React 不同，他的产品色彩和利益相关更浓厚，更像是为了构建微信生态。</p>

<p>以下内容来自<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/">官方开发文档</a>。</p>

<p><strong>运行环境：</strong></p>

<p>微信小程序运行在三端：iOS、Android 和 用于调试的开发者工具。</p>

<p>三端的脚本执行环境聚以及用于渲染非原生组件的环境是各不相同的：</p>

<ul>
<li>在 iOS 上，小程序的 javascript 代码是运行在 JavaScriptCore 中，是由 WKWebView 来渲染的，环境有 iOS8、iOS9、iOS10。</li>
<li>在 Android 上，小程序的 javascript 代码是通过 X5 JSCore来解析，是由 X5 基于 Mobile Chrome 37 内核来渲染的。</li>
<li>在开发工具上，小程序的 javascript 代码是运行在 nwjs 中，是由 Chrome Webview 来渲染的。</li>
</ul>


<p><strong>对javascript库的支持：</strong></p>

<p>用到window对象和document对象的库，都无法使用，比如jquery。</p>

<h2>几个问题</h2>

<h3>苹果审核问题</h3>

<p>应用号的入口是在发现 tab 购物游戏下面，之所以叫小程序是因为 App Store 审核不通过应用号三个字，并且已经和苹果约法三章应用号不能做游戏产品，以及，一个用户只能添加 20 个。
作为一个只写 Script 语言的人我是很支持腾讯干掉 PhoneGap/Cordova/Ionic。不过我就想问一件事，苹果能允许么？</p>

<p>小程序安装或者升级的话要不要苹果再审核一遍？这就跟用 ReactJS Live Update 一样，属于苹果的灰色地带，一个普通 App 这么做可以睁一只眼闭一只眼，有潜力做成 OS 的话苹果能答应么？</p>

<blockquote><p>Apple’s guidelines explicitly permit you to push executable code directly to your app, bypassing the App Store, under these two conditions:
The code is run by Apple’s built-in WebKit framework or JavascriptCore.
The code does not provide, unlock or enable additional features or functionality.</p></blockquote>

<p>安装一个 App 就相当于微信不用苹果审核就增加一项功能，这比加个 Patch 快速修复一个 Bug 可过份*多了。</p>

<p>鉴于微信在苹果发布会上出现的频率，微信团队很可能跟苹果沟通过了，所以像 360 那样被下架的可能性比较小，不过如果别的厂子看见了也蠢蠢欲动，那可是动摇了 App Store 的根基啊。</p>

<p><strong>可能与此相关的事情：</strong></p>

<ol>
<li>应用号改名小程序。</li>
<li>苹果系统上面的小程序，不能放置图标到桌面。</li>
<li>没有应用商店。没有下载中心，没有分类，没有排行，没有推荐。</li>
</ol>


<h3>微信关系链问题</h3>

<p>当前一些应用使用微信号登陆时可以获取的权限大致如下：</p>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_3.png" alt="wechat_privillage" /></p>

<ol>
<li><p>只开放公开信息
 昵称、头像，其实也就是登陆 ID，所有的开发者都可以接入，比如航旅纵横。</p></li>
<li><p>有条件开放
 开放共同使用的好友。比如大众点评。所以基于大众点评，你可以看到有好友去哪。比如美团外卖，可以看到好友头条，比如 58 同城旗下的转转，能看到好友在卖，但很抱歉，这个关系链的开放，目前只有腾讯投资的公司，才能享受如此特权。</p></li>
<li><p>更大程度的开放
 除了登陆和好友关系，还开放了朋友圈权限，能把一些操作直接输送到朋友圈做动作，这个很抱歉，只有腾讯自由的产品才有，比如，QQ 音乐、腾讯视频等。</p></li>
</ol>


<p>大概的逻辑是：</p>

<ol>
<li>亲儿子，能得到全部关系。</li>
<li>干儿子，能得到重合的关系，你用，我也用，相互能看到，我用你不用，我不能跟你发生联系。</li>
<li>外人，只能刷个脸，其他的免谈。</li>
</ol>


<p><em>目前小程序只开放公开信息。</em></p>

<h3>什么类型的产品适合接入小程序</h3>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_4.png" alt="what is situable for micro program 1" width="480"></p>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_5.png" alt="what is situabel for micro program 2" width="480"></p>

<h3>小程序是否向个人开放</h3>

<p>申请过程中可以看到下面的页面，可以看出现在<strong>小程序是不向个人开放的</strong>。</p>

<p><img src="http://hongchaozhang.github.io/images/wechat_micro_program_6.png" alt="do_not_open_to_individual" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中多线程任务之间的同步]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/10/31/sync-between-multiplele-threads-tasks-in-ios-app/"/>
    <updated>2016-10-31T10:41:27+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/10/31/sync-between-multiplele-threads-tasks-in-ios-app</id>
    <content type="html"><![CDATA[<p>当我们使用iOS的多线程并发执行一些任务的时候，有时候需要考虑任务之间的同步问题，比如任务1和任务2执行完之后，才可以执行任务3，原因可能是任务3需要任务1和任务2执行得到的结果。</p>

<!-- more -->


<p>部分内容参考：
<a href="http://stackoverflow.com/questions/11909629/waiting-until-two-async-blocks-are-executed-before-starting-another-block">Waiting until two async blocks are executed before starting another block</a></p>

<h3>dispatch_group_notify</h3>

<p>当group中所有的block都执行完之后，<code>dispatch_group_notify</code>对应的block才会执行。并且放在同一个group中的block可以是不同queue里面的block。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block2</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block3</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">11</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">28.076</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">82366</span><span class="o">:</span><span class="mi">5830581</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">11</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">28.076</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">82366</span><span class="o">:</span><span class="mi">5830578</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">11</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">29.081</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">82366</span><span class="o">:</span><span class="mi">5830581</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">11</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">30.078</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">82366</span><span class="o">:</span><span class="mi">5830578</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">11</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">30.078</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">82366</span><span class="o">:</span><span class="mi">5830578</span><span class="p">]</span> <span class="n">Block3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dispatch_barrier_async</h3>

<p><code>dispatch_barrier_async</code>函数的作用与barrier的意思相同，在线程任务管理中起到一个栅栏的作用，它等待所有位于barrier函数之前的操作执行完毕后执行，并且在barrier函数执行之后，barrier函数之后的操作才会得到执行，该函数需要同<code>dispatch_queue_create</code>函数生成的并行队列一起使用，不能同<code>dispatch_get_global_queue</code>返回的并行队列一起使用。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// dispatch_barrier_async can not be used together with dispatch_get_global_queue</span>
</span><span class='line'><span class="c1">// dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span>
</span><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.company.app.queue&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block2</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block3</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block4</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">3.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">08.468</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867777</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">08.468</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867807</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">09.474</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867807</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">10.469</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867777</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">10.469</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867777</span><span class="p">]</span> <span class="n">Block3</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">10.470</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867777</span><span class="p">]</span> <span class="n">Block4</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">13.473</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">83918</span><span class="o">:</span><span class="mi">5867777</span><span class="p">]</span> <span class="n">Block4</span> <span class="n">End</span>
</span></code></pre></td></tr></table></div></figure>


<h3>addDependency</h3>

<p>苹果对GCD进行了封装，有了自己的<code>NSOperationQueue</code>和<code>NSBlockOperation</code>。其中<code>NSBlockOperation</code>中添加了<code>addDepencency:</code>方法可以指定operation block之间的依赖关系。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSOperationQueue</span> <span class="o">*</span><span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSOperation</span> <span class="o">*</span><span class="n">completionOperation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block3</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">completionOperation</span> <span class="nl">addDependency</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBlockOperation</span> <span class="nl">blockOperationWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block2</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">completionOperation</span> <span class="nl">addDependency</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">completionOperation</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">49.774</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84061</span><span class="o">:</span><span class="mi">5887605</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">49.774</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84061</span><span class="o">:</span><span class="mi">5887572</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">50.776</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84061</span><span class="o">:</span><span class="mi">5887572</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">51.848</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84061</span><span class="o">:</span><span class="mi">5887605</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">12</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">51.849</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84061</span><span class="o">:</span><span class="mi">5887605</span><span class="p">]</span> <span class="n">Block3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dispatch_semaphore</h3>

<p><a href="http://www.cnblogs.com/snailHL/p/3906112.html">关于dispatch_semaphore的使用</a>讲解的很详细。</p>

<p>dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是<code>dispatch_semaphore_create</code>、<code>dispatch_semaphore_signal</code>和<code>dispatch_semaphore_wait</code>。</p>

<p>下面我们逐一介绍三个函数：</p>

<p>（1）<code>dispatch_semaphore_create</code>的声明为：<code>dispatch_semaphore_t  dispatch_semaphore_create(long value);</code>
返回一个<code>dispatch_semaphore_t</code>类型且值为<code>value</code>的信号量。这里的传入的参数<code>value</code>必须大于或等于0，否则<code>dispatch_semaphore_create</code>会返回<code>NULL</code>。</p>

<p>（2）<code>dispatch_semaphore_signal</code>的声明为：<code>long dispatch_semaphore_signal(dispatch_semaphore_t dsema);</code>这个函数会使传入的信号量<code>dsema</code>的值加1。（至于返回值，参考<a href="http://www.cnblogs.com/snailHL/p/3906112.html">关于dispatch_semaphore的使用</a>。）</p>

<p> (3) <code>dispatch_semaphore_wait</code>的声明为：<code>long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)；</code>这个函数会使传入的信号量<code>dsema</code>的值减1。这个函数的作用是这样的：</p>

<ul>
<li>如果<code>dsema</code>信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；</li>
<li>如果<code>dsema</code>的值为0，那么这个函数就阻塞当前线程等待timeout，如果等待期间<code>dsema</code>的值被<code>dispatch_semaphore_signal</code>函数加1了，且该函数（即<code>dispatch_semaphore_wait</code>）所处线程获得了信号量，那么就继续向下执行并将信号量减1。</li>
<li>如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。</li>
</ul>


<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;my.conQ&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'><span class="kt">dispatch_semaphore_t</span> <span class="n">mySem</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">mySem</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block2</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">mySem</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">mySem</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">mySem</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// block3</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">22</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mf">34.402</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">85158</span><span class="o">:</span><span class="mi">6133417</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">22</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mf">34.402</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">85158</span><span class="o">:</span><span class="mi">6133423</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">22</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mf">35.405</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">85158</span><span class="o">:</span><span class="mi">6133423</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">22</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mf">36.403</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">85158</span><span class="o">:</span><span class="mi">6133417</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">22</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mf">36.404</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">85158</span><span class="o">:</span><span class="mi">6133426</span><span class="p">]</span> <span class="n">Block3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dispatch_group_enter和dispatch_group_leave</h3>

<p>当我们碰到block里面有嵌套的block的时候，简单地使用<code>dispatch_group_notify</code>就不能解决问题了：<code>dispatch_group_notify</code>不会等到嵌套的block执行完再执行。对于这种情况，如果还坚持用<code>dispatch_group_notify</code>，可以有两种解决方案：</p>

<p><strong>方案1：</strong></p>

<p>对于嵌套的block，仍然使用<code>dispatch_group_async</code>将block放入对应的group。比如下面的例子，对于Block1里面的Block4，我们仍然使用<code>dispatch_group_async</code>将Block4放入对应的group，即可以保证Block3在Block4之后执行。也就是说，只要是在<code>dispatch_group_notify</code>对应的Block3执行之前加入group的block，都需要执行，然后才能执行<code>dispatch_group_notify</code>对应的Block3，即，当<code>dispatch_group_notify</code>对应的Block3执行的时候，group中不能有任何没有执行的其它block存在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// block4 inside block 1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果嵌套的block对应的是服务器请求的callback（比如<code>onSuccess:</code>和<code>onFailure:</code>），就不方便将其加入对应的group中。这时候就需要使用方案2。</p>

<p><strong>方案2：</strong>
通过<code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>手动管理group关联的block的运行状态（或计数）。但是需要注意：进入和退出group次数必须匹配，不仅是code书写方面一致，code执行也要保证一致，否则<code>dispatch_group_notify</code>对应的Block3就不会执行到。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block1</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// block4 inside block 1</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 Start&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block4 inside Block1 End&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block2</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 Start&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block2 End&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// block3</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Block3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">23.512</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947063</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">23.512</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947080</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">24.518</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947063</span><span class="p">]</span> <span class="n">Block2</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">25.518</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947080</span><span class="p">]</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">25.518</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947080</span><span class="p">]</span> <span class="n">Block4</span> <span class="n">inside</span> <span class="n">Block1</span> <span class="n">Start</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">26.521</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947080</span><span class="p">]</span> <span class="n">Block4</span> <span class="n">inside</span> <span class="n">Block1</span> <span class="n">End</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">31</span> <span class="mi">13</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mf">26.522</span> <span class="n">OCPlayground</span><span class="p">[</span><span class="mi">84646</span><span class="o">:</span><span class="mi">5947063</span><span class="p">]</span> <span class="n">Block3</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中使用的度量单位px、dp、sp、pt、in、mm]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android/"/>
    <updated>2016-10-25T17:10:08+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/10/25/supporting-multiple-screens-for-android</id>
    <content type="html"><![CDATA[<p>关于多屏的支持，最好的文章当然是官方文档：<a href="https://developer.android.com/guide/practices/screens_support.html#testing">Supporting Multiple Screens</a>。一篇文章，从概念到解决方案，非常全面。</p>

<p>下面主要讨论一下开发过程中使用的度量单位的问题。</p>

<!-- more -->


<h2>单位的意义及其之间的转换</h2>

<p>对于不同的度量单位（<code>px</code>、<code>dp</code>、<code>sp</code>、<code>pt</code>、<code>in</code>、<code>mm</code>），可以从下面一张图看出它们之间的关系：</p>

<p><img src="http://hongchaozhang.github.io/images/android_font_size_tesst.png" alt="android_font_size_tesst" /></p>

<p>左上->右上->左下->右下，依次为ldpi->mdpi->hdpi->xhdpi（其大小不代表绝对大小，只用关注它们之间的相对大小即可）。结论如下：</p>

<h3><code>px</code></h3>

<p><code>px</code>是唯一一个显示大小与dpi有关系的单位，其它单位的显示大小都与dpi无关。</p>

<h3><code>dp</code></h3>

<p><code>dp</code>也叫<code>dip</code>，即<em>density-independent-pixel</em>，在dpi等于160的时候，其大小与px相等。因此，我们可以算出1dp等于<code>densityDpi / DENSITY_DEFAULT(160)） px</code>，也就是<code>density px</code>。具体关系参考下面介绍<code>DisplayMetrics</code>中属性的表格。</p>

<h3><code>sp</code></h3>

<p>除了具有<code>dp</code>的特征之外，<code>sp</code>还可以响应用户的font size preference设置其值像dp一样，也只能取一些离散的值。font size preference的设置界面如下：</p>

<p><img src="http://hongchaozhang.github.io/images/android_font_preference_setting.png" alt="android_font_preference_setting" /></p>

<h3><code>pt</code>、<code>in</code>、<code>mm</code></h3>

<p>这几个单位都是长度单位，其中pt等于1/72inch，都是用户最终看到的大小。这些值都是根据设备真实物理像素密度（<code>xdpi</code>和<code>ydpi</code>）算出来的，不会像<code>dp</code>和<code>sp</code>一样，只有几个离散的值。</p>

<p>在TypedValue.java中有所有单位到<code>px</code>的转换方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts an unpacked complex data value holding a dimension to its final floating </span>
</span><span class='line'><span class="cm"> * point value. The two parameters &lt;var&gt;unit&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt;</span>
</span><span class='line'><span class="cm"> * are as in {@link #TYPE_DIMENSION}.</span>
</span><span class='line'><span class="cm"> *  </span>
</span><span class='line'><span class="cm"> * @param unit The unit to convert from.</span>
</span><span class='line'><span class="cm"> * @param value The value to apply the unit to.</span>
</span><span class='line'><span class="cm"> * @param metrics Current display metrics to use in the conversion -- </span>
</span><span class='line'><span class="cm"> *                supplies display density and scaling information.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @return The complex floating point value multiplied by the appropriate </span>
</span><span class='line'><span class="cm"> * metrics depending on its unit. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">float</span> <span class="nf">applyDimension</span><span class="o">(</span><span class="kt">int</span> <span class="n">unit</span><span class="o">,</span> <span class="kt">float</span> <span class="n">value</span><span class="o">,</span>
</span><span class='line'>                                   <span class="n">DisplayMetrics</span> <span class="n">metrics</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_PX:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_DIP:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">density</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_SP:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">scaledDensity</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_PT:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0f</span><span class="o">/</span><span class="mi">72</span><span class="o">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_IN:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">COMPLEX_UNIT_MM:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">metrics</span><span class="o">.</span><span class="na">xdpi</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0f</span><span class="o">/</span><span class="mf">25.4f</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该函数将所有的单位转换为px，其中参数意义如下：</p>

<table>
<thead>
<tr>
<th>属性 </th>
<th> 意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>metrics.density</code> </td>
<td> 默认值为<code>densityDpi / (float) DENSITY_DEFAULT</code>。该值为归整之后的值：比如150dpi的设备，<code>density</code>值为1，即按照160dpi进行处理。<code>density</code>的典型值为0.75、1.0、1.5、2.0、3.0等。</td>
</tr>
<tr>
<td><code>metrics.densityDpi</code> </td>
<td> 设备物理像素密度，非精确的归整值，可取值为<code>DENSITY_LOW(120)</code>、<code>DENSITY_MEDIUM(160)</code>、<code>DENSITY_HIGH(240)</code>等。<code>density</code>的值是根据<code>densityDpi / DENSITY_DEFAULT</code>计算出来的，所以取值也是一些典型的离散值。</td>
</tr>
<tr>
<td><code>metrics.scaledDensity</code> </td>
<td> 具有<code>density</code>所有的特征，如果用户设置了font size preference，还需要乘以一个scale系数。</td>
</tr>
<tr>
<td><code>metrics.xdpi</code> </td>
<td> <code>x</code>方向的物理像素密度，精确的值，单位px/inch。同样的有<code>ydpi</code>。</td>
</tr>
<tr>
<td><code>DENSITY_DEFAULT</code> </td>
<td> dpi的参考值，值为160px/inch。</td>
</tr>
</tbody>
</table>


<h3><code>dp</code>转换为<code>px</code></h3>

<p>有时候我们必须使用<code>px</code>作为单位，比如某个api接受的参数只能是<code>px</code>。这个时候，需要将<code>dp</code>转化为<code>px</code>。在code中我们可以使用下面的方法将<code>dp</code>转化为<code>px</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// The gesture threshold expressed in dp</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">GESTURE_THRESHOLD_DP</span> <span class="o">=</span> <span class="mf">16.0f</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the screen&#39;s density scale</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">float</span> <span class="n">scale</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">().</span><span class="na">density</span><span class="o">;</span>
</span><span class='line'><span class="c1">// Convert the dps to pixels, based on density scale</span>
</span><span class='line'><span class="n">mGestureThreshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">GESTURE_THRESHOLD_DP</span> <span class="o">*</span> <span class="n">scale</span> <span class="o">+</span> <span class="mf">0.5f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use mGestureThreshold as a distance in pixels...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Best Practice</h2>

<ol>
<li>Use <code>wrap_content</code>, <code>match_parent</code>, or <code>dp</code> units when specifying dimensions in an XML layout file</li>
<li>Do not use hard coded pixel values in your application code</li>
<li>Do not use <code>AbsoluteLayout</code> (it&rsquo;s deprecated). Use <code>RelativeLayout</code> instead.</li>
<li>Supply alternative bitmap drawables for different screen densities</li>
</ol>


<p>另外一篇关于网页上字体大小单位的讨论：<a href="http://hongchaozhang.github.io/blog/2015/08/03/Font-size-in-Html/">Font Size in Html - Px, Em, Rem</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《苏菲的世界》读后小结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/09/16/summerize-of-sohpie-world/"/>
    <updated>2016-09-16T16:29:04+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/09/16/summerize-of-sohpie-world</id>
    <content type="html"><![CDATA[<p>利用这一周的课余时间，读了《苏菲的世界》。这是一本非常好的西方哲学发展史的入门书，对于每个哲学家的观点阐述的简明扼要。由于主人翁是一个15岁的小女孩，所以，为了讲清楚，书中给了很多例子，生动形象易于理解。另外，采用对话的形式，而且知识点不是非常密集，读起来不会很累。</p>

<p>下面总结一下书中的观点，并加入一些自己的思考，如果有的话。</p>

<!-- more -->


<h2>伊甸园</h2>

<p>&hellip;在某个时刻事物必然从无到有。&hellip;</p>

<p>典型的哲学问题：</p>

<ol>
<li>你是谁？</li>
<li>世界从何而来？</li>
<li>&hellip;</li>
</ol>


<h2>魔术师的礼帽</h2>

<p>&hellip;要成为一个优秀的哲学家只有一个条件：要有好奇心。&hellip;</p>

<p>直到今天，我们每个人仍然必须各自寻找自己对这些哲学问题的答案。你无法在百科全书中查到有关“上帝是否存在？”与“人死后是否还有生命？”这些问题的答案。百科全书也不会告诉我们应该如何生活。不过，读一读别人的意见倒可以帮助我们建立自己对生命的看法。</p>

<h3>关于小白兔：</h3>

<p>魔术师从礼帽里面拉出来的那只小白兔，我们最好将它比作整个宇宙，而我们人类则是寄居在兔子皮毛深处的微生虫。不过，哲学家总是试图沿着兔子的细毛往上爬，以便将魔术师和整个兔子看个清楚；而普通人则安静地生活在皮毛深处，并且不努力往外爬。</p>

<h3>关于“孩子是天生的哲学家”：</h3>

<p>对于孩子而言，世上的种种都是新鲜而令人惊奇的。对于大人而言则不然。大多数成人都把这世界当成一种理所当然的存在，尤其在你生活了数年的地方。所以，我们时不时去旅游一趟，可以刺激我们思考一下这些根本的哲学问题。</p>

<h2>神话</h2>

<p>&hellip;善与恶之间脆弱的平衡。&hellip;</p>

<p>神话、宗教和哲学都是为了解释为何生命是这番面貌。</p>

<p>所谓哲学，我们指的是耶稣基督降生前六百年左右，在希腊演进的一种崭新的思考方式。在那之前，人们在各种宗教中找到了他们心中问题的答案。这些宗教上的解释透过神话的形式代代流传下来。比如北欧神话，希腊神话等。</p>

<h2>自然派哲学家</h2>

<p>&hellip;没有一个事物可以来自空无。&hellip;</p>

<p>自然派哲学家关注的主题是大自然与它的循环变化，希望找寻到其中隐含的自然法则。</p>

<p>对于早期的哲学家，我们最感兴趣的不是他们找到了什么答案，而是他们问了什么问题。我们对他们的思考方式较感兴趣，而不是他们思考的内容。</p>

<p>泰勒斯（Thales）认为水是万物之源。还有一些哲学家也认为“宇宙间有一种基本物质是所有事物的源头”。</p>

<p>帕梅尼德斯（Parmenides）认为世上根本没有真正的变化，没有任何事物可以变成另外一种事物。而人的感官认知却认为事物是变化的。在矛盾的二者中，帕梅尼德斯选择了前者，认为人的感官认知是不可靠的。即：</p>

<ol>
<li>没有任何事物会改变；</li>
<li>我们的感官认知是不可靠的。</li>
</ol>


<p>赫拉克利特斯（Heraclitus）则认为所有的事物处在不停的变化之中，没有静止的事物，并认为有一种“普遍的理性”指导着这种变化。概括一下：</p>

<ol>
<li>万物都会改变，即“一切事物都是流动的”；</li>
<li>我们的感官认知是可靠的。</li>
</ol>


<p>恩培窦可里斯（Empedocles）将帕梅尼德斯和赫拉克利特斯之间的矛盾进行了辩证统一。认为前面二人之所以存在不可调和的矛盾，是因为其都认为世间只有一种元素。恩培窦可里斯认为世界由四个“根”组成：土、气、火与水。这四种元素是永远不变的。人的感官察觉到的变化只是由于不同的事物由不同比例的四种元素构成。所以，其观点为：</p>

<ol>
<li>没有任何事物会改变；</li>
<li>我们的感官认知是可靠的。</li>
</ol>


<p>恩培窦可里斯的高明之处就在于：<strong>只要世界是由多于一种物质构成，那么自然就可能在万事万物实际上未曾改变的情况下产生种种变化。</strong></p>

<p>恩培窦可里斯对于我们为什么会看到东西的解释挺有意思：我们的眼睛是由土、气、火、水构成，并且其中的“土”可以看见周围环境中的“土”，我们眼睛中的“气”可以看到周围的“气”等等。这个观点和现在眼睛中的三色感光细胞的概念是多么的相像。</p>

<blockquote><p>帕梅尼德斯、赫拉克利特斯和恩培窦可里斯的这个发展过程，不正是黑格尔所谓的辩证统一的历史发展模式吗！</p></blockquote>

<h2>德谟克里特斯</h2>

<p>&hellip;世界上最巧妙的玩具是积木。&hellip;</p>

<p>德谟克里特斯认为世界上所有事物都是由原子构成的，这些原子是不可再分的。这些原子具有不同的种类，因此可以构成不同的事物，并且能很好地解释事物的变化。并且这些原子是永恒的，因为没有一件事物是来自于虚无。</p>

<p>但是德谟克里特斯并不相信有任何“力量”或者“灵魂”介入大自然的变化过程。他认为世间唯一存在的东西就是原子和虚空。由于其只相信物质的东西，因此我们称他为“唯物论者”。</p>

<h2>命运</h2>

<p>&hellip;算命者试图预测某些事实上机不可测的事物。&hellip;</p>

<h2>苏格拉底</h2>

<p>&hellip;最聪明的是明白自己无知的人。&hellip;</p>

<p>苏格拉底之前的哲学统称“自然派哲学”，苏格拉底学说则开辟了一个新时代。他和他的两个传人（柏拉图和亚里斯多德）都在雅典生活工作，雅典也因此成为希腊文化的中心。</p>

<p>与苏格拉底的哲学相关的几个问题结论：</p>

<ol>
<li>是否有人天生就是害羞的？</li>
<li>最聪明的是明白自己无知的人。</li>
<li>真正的智慧来自内心。</li>
<li>明辨是非者必能进退合宜。</li>
</ol>


<p>苏格拉底没有著书立说，其言论是通过其学生柏拉图的《对话录》流传下来的。这就像耶稣一样，都只跟人闲谈，其言论由后人记录在书中——《圣经》。其实苏格拉底和耶稣的结局也是非常相似的。</p>

<h3>苏格拉底的谈话艺术</h3>

<p>苏格拉底与人谈话的高明之处在于他与人谈话时看来并无意要指导别人。事实上他给人的印象是他很想从与他谈话的人那里学到一些东西。他所做的只不过是提出问题而已。尤其是在刚开始与人谈话时，仿佛他一无所知似的。</p>

<p>就像助产士帮助孕妇产子一样，苏格拉底认为他的工作就是帮助人们“生出”正确的思想。因为真正的知识是来自内心，而不是别人的传授。同时，唯有出自内心的知识，才能使人拥有真正的智慧。</p>

<p>借着假装无知的方式，苏格拉底强迫他所遇见的人们运用本来的常识。这种装傻的方式，我们称为“苏格拉底式的反讽”。</p>

<p>所谓哲学家（philosopher,“一个爱好智慧的人”），就是那些领悟到自己有很多事情并不知道，并因此而感到苦恼的人。这是苏格拉底和其当代那些诡辩家的非常重要的一点不同。苏格拉底说：“我只知道一件事，就是我一无所知。”其实，最具有颠覆性的人就是那些提出问题的人，而回答问题则比较安全。任何一个问题可能比一千个答案更具有爆炸性。</p>

<p>确切来说，人类面临了许多难解的问题，而我们对这些问题还没有找到满意的答案。因此现在我们面临两种选择：一个是假装拥有所有的知识，借此自欺欺人。另一个是闭上眼睛，从此不去理会，并放弃一切我们迄今为止所有的成就。就这方面而言，人类的意见并不一致。人们通常不是太过笃定，就是漠不关心。这两种人都是在兔子的毛皮深处蠕动的虫子。</p>

<p>苏格拉底还认为“知善者必能行善”，也就是说人只要有正确的见解，就会采取正确的行动。这也是我们为什么必须不断学习的原因。苏格拉底认为，人如果违反自己的理性就不会快乐。而那些知道如何找到快乐的人就会遵照自己的理性行事。因此，明白是非者必然不会为恶，因为，世间哪有人会想要成为一个不快乐的人呢？如果你一直做一些自己深知不对的事情，你还会活的很快乐吗？</p>

<h2>雅典</h2>

<p>&hellip;废墟中升起的几栋高楼。&hellip;</p>

<h2>柏拉图</h2>

<p>&hellip;回归灵魂世界的渴望。&hellip;</p>

<p>苏菲得到的几个引导其走向柏拉图学说的问题：</p>

<ol>
<li>面包师傅如何做出五十个一模一样的饼干？</li>
<li>为何所有的马都一样？</li>
<li>人有没有不朽的灵魂？</li>
<li>女人和男人一样有理性吗？</li>
</ol>


<h3>柏拉图的理型论</h3>

<p>柏拉图认为在“物质世界的背后，必定有一个实在存在。他称这个实在存在为‘理型的世界’，其中包含存在于自然界各种现象背后、永恒不变的模式。”这种观点我们称之为“柏拉图的理型论”。</p>

<p>柏拉图认为我们对实在世界的认识可以分为两个领域：</p>

<ol>
<li>感官的世界。我们只能用我们的不精确的感官来约略认识这个世界。在这个世界中，“每一件事物都会流动”，而且没有一样东西是永久不变的。这里面存在的都是一些生生灭灭的事物。</li>
<li>理型的世界。我们可以用理性来确实认识这个世界。我们无法通过感官来察知这个世界，但这些模型（或者形式）是永恒不变的。</li>
</ol>


<p>根据柏拉图的说法，人是一种具有双重性质的生物。我们的身体是“流动”的，与感官的世界不可分割，而且其命运与世界上其它事物（如肥皂泡）都一样。我们所有的感官都是以身体为基础的，所以都是不可靠的。但是，我们同时也有一个不朽的灵魂，而这个灵魂则是理性的天下。由于灵魂不是物质，因此可以探索理性的世界。</p>

<p>柏拉图认为，自然界所有的现象都是永恒形式或理型的影子。但是大多数人活在影子之间就已经感到心满意足了。他们从不去思考是什么东西投射出了这些影子，甚至都不曾认清世间万物都只是影子，更别提试图走出这个黑暗的洞穴。</p>

<h2>少校的小木屋</h2>

<p>&hellip;镜中的女孩双眼眨了一眨。&hellip;</p>

<p>几个引导苏菲思考亚里斯多德理论的问题：</p>

<ol>
<li>鸡和鸡的“观念”是何者先有？——对理型论的批判</li>
<li>人是否生来就有一些观念呢？——对理型论的批判</li>
<li>植物、动物和人类之间有何区别？——逻辑</li>
<li>天为何会下雨？——目的因</li>
<li>人需要什么才能过好的生活？——伦理</li>
</ol>


<h2>亚里斯多德</h2>

<p>&hellip;一位希望澄清我们观念的严谨的逻辑学家。&hellip;</p>

<h3>对于柏拉图“理型论”的批判</h3>

<p>亚里斯多德也承认“理型”的存在，但是：</p>

<ol>
<li>不像柏拉图认为的感觉来自理型，恰恰相反，亚里斯多德认为理型来自感觉。比如他认为，马的理型来自于我们看过若干匹马之后形成的概念。</li>
<li>理型不能独立于感觉而存在。亚里斯多德所指的马的理型，乃是指所有马匹都共有的特征。</li>
</ol>


<p>可以说，柏拉图用他的理性，亚里斯多德则同时也用他的感官。</p>

<h3>目的因</h3>

<p>以“天为什么会下雨？”来说明一下亚里斯多德的目的因。</p>

<p>当我们思考天下雨的原因时，我们想到的可能是：云层中的湿气冷却变成雨滴，然后受重力的吸引，降落到地上。</p>

<p>对于这个回答，亚里斯多德也会点头，但是他认为还不够，他会补充说我们只回答了其中的三个肇因：“质料因”是空气冷却时湿气（云层）正好在那。“主动因”是湿气冷却。“形式因”是水的形式（或称天性）就会降落到地面。还有一个原因：植物和动物需要雨水才能生长。这就是他所谓的“目的因”。</p>

<p>亚里斯多德相信自然界中的每一件事物都有其目的。天空下雨是因为要让植物生长，柳橙和葡萄之所以生长是为了供人类食用。</p>

<p>就因果律而言，我们往往认为亚里斯多德是错误的。但真的是这样吗？许多人相信上帝创造这个世界，是为了让其所有子民可以生活于其间。从这种说法来看，我们自然可以宣称河流里面之所以有水是因为动物与人类需要水才能生存。</p>

<h3>逻辑</h3>

<p>首先，亚里斯多德将自然界的东西彻底分门别类，并基于此创立了逻辑学。</p>

<p>举个例子：</p>

<p>如果我先肯定“所有的生物都会死”，然后再肯定“汉密士是生物”，则我可以从容地得出一个结论：“汉密士会死”。这个例子显示出了亚里斯多德的推理是建立在名词之间的相互关系之上的。</p>

<p>让我们看看亚里斯多德对自然界的分类：首先自然界的万事万物被分为两类：生物和无生物。区分标准是是否有主动改变的潜能。生物分为动物和植物。动物分为禽兽和人类。</p>

<h3>伦理学</h3>

<p>对于“人需要什么才能过上良好的生活？”这个问题，亚里斯多德的回答是：</p>

<p>快乐有三种形式：</p>

<ol>
<li>过着享乐的生活；</li>
<li>做一个自由而负责的公民；</li>
<li>做一个思想家与哲学家。</li>
</ol>


<p>人要同时达到这三个标准才能找到幸福与满足。</p>

<p>亚里斯多德还提出了“黄金中庸”的观点，作为人们在交际、生活中的规范：唯有平衡、节制，人才能过着快乐和谐的生活。</p>

<blockquote><p>中国的孔子提出中庸之道，是在公元前500年前后，亚里斯多德则是在公元前350年左右提出，晚于孔子150年左右。</p></blockquote>

<h3>政治学</h3>

<p>亚里斯多德还提出了三种良好的政治制度，厉害：</p>

<ol>
<li>君主制。统治者不能致力于谋求私利，以免沦为“专制政治”。</li>
<li>贵族政治。国家由一群人来统治，要小心不要沦为“寡头政治”。</li>
<li>民主政治。这种制度也有不好的一面，因为它很容易沦为暴民政治。</li>
</ol>


<h3>对女人的看法</h3>

<p>认为女人是“未完成的男人”，这一点和圣经故事一致：圣经中女人是用男人的一段肋骨做成的。</p>

<p>亚里斯多德认为，在生育方面，女性是被动的，只能接受。并坚信小孩的全部特质来源于父亲，母亲只是提供土壤而已，即男人提供“形式”，女人仅贡献“质料”。</p>

<p>亚里斯多德对于两性的错误观点带来了很大的负面作用，因为整个中世纪时期都受到他（而不是柏拉图）的看法的影响。教会也因此继承了一种歧视女性的观点。</p>

<h2>希腊文化</h2>

<p>&hellip;一丝火花。&hellip;</p>

<p>关键词：</p>

<p>希腊文化（前400年-前50年），罗马时期（近古时期，前50年-公元400年），新柏拉图学派的普罗汀（Plotinus）。</p>

<h2>明信片</h2>

<p>&hellip;我对自己实施严格的检查制度。&hellip;</p>

<h2>两种文化</h2>

<p>&hellip;避免在真空中漂浮的唯一方式。&hellip;</p>

<table>
<thead>
<tr>
<th style="text-align:right;">类别</th>
<th>印欧文化</th>
<th>闪族文化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">神：</td>
<td>多神论</td>
<td>一神论</td>
</tr>
<tr>
<td style="text-align:right;">历史：</td>
<td>历史是循环的</td>
<td>历史是线性的</td>
</tr>
<tr>
<td style="text-align:right;">宗教种类：</td>
<td>印度教、佛教</td>
<td>犹太教、基督教、伊斯兰教</td>
</tr>
<tr>
<td style="text-align:right;">宗教目的：</td>
<td>脱离轮回</td>
<td>从罪恶与谴责中得救</td>
</tr>
<tr>
<td style="text-align:right;">修炼方式：</td>
<td>自省与打坐</td>
<td>祈祷、布道和研究圣经</td>
</tr>
</tbody>
</table>


<h2>中世纪</h2>

<p>&hellip;对了一部分并不等于错。&hellip;</p>

<p>中世纪（大约公元400年-公元1400年）初期，公元529年，教会关闭雅典的柏拉图学园，这是基督教会钳制希腊哲学的一个象征。从此以后，修道院垄断了所有的教育与思想。</p>

<p>中世纪的哲学家几乎认定基督教义就是真理。他们的问题在于：我们是否一定要相信基督教的启示？还是可以借助理性来探索基督教的真理？希腊哲学家与圣经的记载有何关系？圣经与理性之间有冲突吗？还是信仰与知识是可以相容的？几乎所有的中世纪哲学家都是围绕这些问题工作的。</p>

<p>让我们看看中世纪两大哲学家如何处理这些问题。</p>

<h3>圣奥古斯丁</h3>

<p>圣奥古斯丁（St. Augustine， 354-430）是百分之百的基督教徒，他同时也认为柏拉图哲学也是正确的，基督教与柏拉图哲学是可以统一的。</p>

<p>圣奥古斯丁认为<strong>上帝在创造世界之前，那些“理型”乃是存在于上帝的心中，藉此保存了柏拉图有关永恒理型的看法</strong>。可以说，圣奥古斯丁将柏拉图加以“基督教化”。</p>

<h3>圣多玛斯</h3>

<p>圣多玛斯（Thomas Aquinas， 1225-1274）是一位哲学家，同时也是一位神学家。当时，哲学与神学并没有明显的区分。</p>

<p>就像中世纪初期圣奥古斯丁将柏拉图“基督教化”一样，圣多玛斯将亚里斯多德加以“基督教化”。</p>

<p>其实，所谓的“基督教化”只是将这两位哲学家的观念，用一种不至于对基督教义造成威胁的方式加以诠释。圣多玛斯将信仰与知识融合在一起，采取的方式是进入亚里斯多德的哲学世界，并以他的话来诠释圣经。</p>

<p>但是，圣多玛斯并不能用亚里斯多德的理论解释圣经中的所有事情，比如“上帝在六天内创造了世界”、“耶稣是上帝之子”等，就没法用亚里斯多德的理论去解释，这些所谓的“信仰的事实”只能透过信仰与基督的启示得知。</p>

<p>但圣多玛斯认为世间有若干“自然的神学真理”既可以透过基督教的信仰，也可以透过我们与生俱来的理性得知。这里说的“理性”指的就是亚里斯多德的理论。下面我们一条条看看。</p>

<h4>上帝存在</h4>

<p>亚里斯多德通过所谓的“目的因”阐述了上帝的存在。圣多玛斯认为，我们用理性可以体认到我们周遭的事物必然有个“目的因”。这是因为上帝既通过圣经，也通过理性向人类显现，所以世上既有“信仰神学”，也有“自然神学”。这点就像我们无论看到闪电或者听到雷声，都可以知道有雷雨要来了一样。</p>

<h4>生命层级</h4>

<p>圣多玛斯认为亚里斯多德的生命层级的概念也可以与基督教的神学取得共识。圣多玛斯认为，万物存在分若干渐进的层次。最低的是植物，其次是动物，再其次是人类，再其次是天使，最上面是上帝。动物有身体和感官，但是不能思考。人类除了有动物一样的身体和感官之外，还可以进行理性的思考。天使既没有身体也没有感官，具有自发的、直接的智慧，不需要通过思考和推理获得。由于没有一个终将要离开的身体，天使是不会死亡的。</p>

<h4>对女人的观点</h4>

<p>圣多玛斯对女人的观点同亚里斯多德一样，认为女人是一个不完整的男人，小孩子所有的特征来自父亲。这些观点与圣经上一致：夏娃是由亚当的肋骨造成的。</p>

<h2>文艺复兴</h2>

<p>&hellip;啊！藏在凡俗身躯里的神明子孙哪！&hellip;</p>

<p>在圣多玛斯时代过后不久，原本团结一致的天主教文化开始出现分裂的现象。哲学与科学逐渐脱离教会的神学，使得宗教生活与理性思考之间的关系变得比较自由。新的科学方法与新的宗教狂热于是逐渐产生。在这种环境下，十五与十六世纪发生了两大变动：文艺复兴运动与宗教改革运动。这其中，罗盘、火器与印刷术这三大发明，乃是文艺复兴时期所以形成的重要因素。</p>

<blockquote><p>从上面可以看出，哲学与宗教在中世纪及以前是不可分割的，即使现在可以分割，其界限也没有那么明显。</p></blockquote>

<h3>人文主义</h3>

<p>文艺复兴，字面意思是“重生”的意思，说的是古代艺术与文化的再生，也是人道主义的复兴，因为在漫长的中世纪，生命中的一切都是从神的观点来解释，但是到了文艺复兴时期，一切又重新以人为中心。当时的口号是“回归本源”，所谓的本源主要是指古代的人文主义。</p>

<p>文艺复兴运动的重要影响是改变了大家对人类自身的看法，其带来的人文主义精神使得大家对人本身和人的价值重新产生了信心。这种对人的新观念创造了一个全新的视野：人并不是为神而存在。有了这种新的自由，任何事情都是可能的。</p>

<p>文艺复兴时期的人文主义和古代的人文主义不同，其更强调个人主义。因此，不同于古代人文主义强调的宁静、中庸（苏格拉底）与节制，文艺复兴时期的人文主义强调自由，冲破藩篱与禁忌。这对于艺术、建筑、文学、音乐、哲学和科学的发展都是有好处的。布鲁诺（Giordano Bruno）由于提出了一些与教会冲突的观念——神存在于大自然中，宇宙是无限大的——被活活烧死。</p>

<h3>新世界观</h3>

<p>哥白尼（Nicolaus CCopernicus）的《天体运行论》认为地球是围绕太阳运动的，驳斥了神学一直认为的“地球是宇宙的中心”这一说法。相比于布鲁诺，哥白尼对于发表自己的言论比较谨慎：他在自己死的那一天才将自己的著作公之于世。</p>

<p>开普勒（Kepler）三大定律驳斥了“天体是圆形的，且绕着圆圈转”这一说法。</p>

<h3>实证法</h3>

<p>文艺复兴强调用我们的感官来调查研究大自然。自从十四世纪以来，愈来愈多的思想家警告人们不要盲目相信权威，无论是宗教教条或者亚里斯多德的哲学。在整个中世纪期间，人们过度迷信理性思考的重要性。到了文艺复兴时期，则认为研究大自然现象必须以观察、经验与实验为基础。我们称之为“实证法”。</p>

<p>伽利略（Galileo Galilei）通过实验研究运动与力的关系。</p>

<p>牛顿（Isaac Newton，1642-1727）发现万有引力定律和牛顿三大定律，并认为可以适用于宇宙每个地方，他因此推翻了中世纪人们认为的天上与人间适用两套不同的规律的说法。</p>

<p>实证法和后来的进化论使得人类失去了他们在造物中的一部分特殊地位，因此遭到了教会的强大阻力。</p>

<h3>宗教改革</h3>

<p>文艺复兴时期，圣经被从希伯来文和希腊文翻译成各国语言，这是导致宗教革命的主要因素。</p>

<p>马丁路德认为人们不需要教会或者教士居中代祷才能获得上帝的赦免。同时，要取得上帝的赦免也不是靠买教会所售卖的“赎罪券”。并提倡“我们只信靠经文。”他希望以这个口号将基督教带回它的源头，就像文艺复兴时期的人文主义者希望回到艺术与文化的古老源头一样。马丁路德将圣经翻译成德文（因此创造了德文的文字），并认为每个人都应该读懂圣经，做自己的教士。</p>

<h2>巴洛克时期</h2>

<p>&hellip;宛如梦中的事物。&hellip;</p>

<p>巴洛克时期（Baroque Period）一般是指十七世纪。整体来说，十七世纪主要特色就是在各种相互矛盾的对比中呈现张力。当时有许多人抱持文艺复兴时期持续不坠的乐观精神，另一方面又有许多人过着退隐山林、禁欲苦修的宗教生活。无论在艺术还是现实生活上，我们都可以看到夸张华丽的自我表达形式，但另外一方面也有一股退隐避世的潮流逐渐兴起。换句话说，当时“既有宏伟华丽的宫廷，也有僻静的修道院”。</p>

<p>巴洛克时期的主要观点就是“人生如戏”。现代戏剧就是巴洛克时期诞生的。莎士比亚的很多作品也是这个时期完成的，充满了悲观主意色彩。莎士比亚最著名的一句话：存在或不存在，这是问题所在。（To be or not to be, that is the question.）</p>

<h3>巴洛克时期的哲学</h3>

<p>这个时期的哲学也是两种完全相反的思想模式并存，而且两者之间充满了强烈的冲突。</p>

<ol>
<li>理想主义。理想主义认为生命基本上具有一种崇高的特质。</li>
<li>唯物主义。唯物主义认为生命中所有的自然现象都是从肉体感官而来的哲学。</li>
</ol>


<p>这个时期的唯物主义不仅认为所有的现象——包括人和动物——都由物质的分子组成。就连人类的意识（也就是灵魂）也是由人脑中微小分子的运动而产生的。</p>

<p>牛顿基于自己的几个理论，认为自然界的变化都可以用宇宙重力和物体移动的定律来加以解释。就这样，牛顿成就了“机械论的世界观”。</p>

<blockquote><p>其实哲学发展到这个阶段，就像我们在学校学习了几年科学之后，信心膨胀地认为世间所有的现象都可以用科学加以解释。对于一些灵异现象嗤之以鼻，认为只是我自己不能用科学观点解释而已，或者科学暂时不能解释而已，但是心中坚信科学总有一天会弄明白整个宇宙中的所有的现象。称为绝对的“唯物主义者”。但是随着年龄的增长，这种坚定的唯物主义信念会变得不再那么坚定。</p></blockquote>

<p>后来，法国的拉普拉斯（Laplace）也表达了极端机械论的观点，认为：如果某些神袛在某个时刻能知道所有物质分子的位置和状态，则“没有任何事情是他们所不知道的，同时他们也能够看到所有过去和未来的事情”。他认为所有事情都是命中注定的，一件事情会不会发生，都是冥冥中早就有定数的。世间没有自由意志这回事。这个观点被称为“决定论”。</p>

<blockquote><p>十七世纪的一位重要的哲学家莱布尼茨指出了物质和意识的不同点：物质可以不断被分割成更小的单位，但是灵魂却连分割成一半也不可能。</p></blockquote>

<h2>笛卡尔</h2>

<p>&hellip;他希望清除工地上所有的瓦砾。&hellip;</p>

<p>笛卡尔最感兴趣的题目是：</p>

<ol>
<li>我们拥有的确实知识；</li>
<li>肉体与灵魂之间的关系。</li>
</ol>


<h3>我思故我在</h3>

<p>笛卡尔认为我们不能信任我们的器官，因为感官可能会误导我们。笛卡尔发现人在清醒的时候与做梦的状态并不一定有所分别，进而说道：<strong>你怎么确定你的生命不是一场梦呢？</strong></p>

<p>笛卡尔怀疑每一件事，而这正是他唯一能够确定的事情。此时他悟出一个道理：有一件事情必定是真实的，那就是他在怀疑。当他怀疑时，他必然是在思考，而由于她在思考，那么他必定是个会思考的存在者。用他自己的话来说，就是：我思故我在。</p>

<p>笛卡尔还认为宇宙间有一个完美实体——上帝。并且这个完美实体可以保证我们用理智所认知到的一切事物必然会与现实世界相符。</p>

<p>总结一下笛卡尔的观点：</p>

<ol>
<li>人是会思考的生物；</li>
<li>上帝是存在的；</li>
<li>宇宙有一个外在的真实世界。</li>
</ol>


<h3>二元论</h3>

<p>上面所说的外在的真实世界与我们思想的真实世界是不同的。笛卡尔宣称宇宙间共有两种不同形式的真实世界（或称“实体”）：</p>

<ol>
<li>一种实体称为思想或者灵魂。思想纯粹是属于意识的，不占空间，因此也不能再分解为更小的单位。</li>
<li>另一种则称为扩延（Extension），或称物质。物质纯粹是扩延，会占空间，因此可以一再被分解为更小的单位，却没有意识。</li>
</ol>


<p>这两种实体都来自上帝，因为唯有上帝本身是独立存在的，不隶属于任何事物。而且思想和扩延彼此没有任何接触，思想不受物质的影响，反之，物质的变化也不受思想的影响。这就是笛卡尔的“二元论”。</p>

<h2>史宾诺莎</h2>

<p>&hellip;上帝不是一个傀儡戏师傅。&hellip;</p>

<p>史宾诺莎和笛卡尔一样都是理性主义者，但是史宾诺莎的理论不如笛卡尔那般容易理解。</p>

<h3>一元论</h3>

<p>对史宾诺莎来说，上帝创造这个世界并不是为了要置身事外。不，上帝就是世界。他拒绝接受笛卡尔的二元论，认为宇宙间只有一种实体。既存的每样事物都可以被分解、简化成一个他称为“实体”的真实事物。他有时称之为“上帝”或者“大自然”。他将大自然与万物的情况简化为一个单一实体。</p>

<p>上帝不是一个傀儡戏师傅。傀儡戏师傅通过拉动绳子，从外面来操作他的木偶，因此傀儡戏师傅是木偶做出各种动作的“外在因”。上帝是透过自然法则来主宰世界。因此上帝（或自然）是每一件事情的“内在因”。这表示物质世界中发生的每一件事情都有其必要性。</p>

<h3>自然法则</h3>

<p>史宾诺莎强调世间只有一种存在是完全自主，且可以充分自由行动的，那就是上帝（或自然）。唯有上帝或自然可以表现这种自由、“非偶然”的过程。人可以争取自由，以便去除外在的束缚，但他永远不可能获得“自由意志”。从物质角度来说，我们不能控制我们体内的每一件事情；从意识方面来说，我们不能“选择”自己的思想。因此，人并没有自由的灵魂。</p>

<h3>关于幸福</h3>

<p>史宾诺莎指出使我们无法获得真正的幸福与和谐的是我们内心的各种冲动。例如我们的野心和欲望。但如果我们体认到每一件事的发展都有其必然性，我们就可以凭直觉理解整个大自然。我们会很清楚地领悟到每一件事都有关联，每一件事情都是一体的。最后的目标是以一种全然接纳的观点来理解世间的事物。只有这样，我们才能获得真正的幸福与满足。用史宾诺莎自己的话说，就是“从永恒的观点来看每一件事情”。</p>

<h2>洛克</h2>

<p>&hellip;赤裸、空虚一如教师来到教室前的黑板。&hellip;</p>

<table>
<thead>
<tr>
<th>理性主义</th>
<th>经验主义</th>
</tr>
</thead>
<tbody>
<tr>
<td>笛卡尔，史宾诺莎</td>
<td>洛克，休姆，柏克莱</td>
</tr>
<tr>
<td>相信理性是知识的源泉</td>
<td> 相信来自感官的经验是知识的源泉</td>
</tr>
<tr>
<td>人在还没有任何经验之前，心中已经有了一些与生俱来的概念</td>
<td>如果没有感官的体验，我们心中将一无所有</td>
</tr>
<tr>
<td>欧陆的理性主义：笛卡尔是法国人，史宾诺莎是荷兰人，莱布尼茨是德国人</td>
<td>英国的经验主义：洛克、柏克莱和休姆都是英国人</td>
</tr>
<tr>
<td>与柏拉图类似。柏拉图认为人生下来就从观念世界带来了一整套的“观念”。</td>
<td>与亚里斯多德类似。亚里斯多德认为我们心灵中的所有的事物都是先透过感官而来的。</td>
</tr>
</tbody>
</table>


<p>下面具体看一下洛克（John Locke，1632-1704）的哲学观点。洛克的主要作品是《论人之理解力》，试图澄清两个问题：</p>

<ol>
<li>我们的概念从何而来？</li>
<li>我们是否可以信赖感官的经验？</li>
</ol>


<h3>我们的概念从何而来？</h3>

<p>对于这个问题，洛克认为在我们的感官察知任何事物前，我们对心灵就像老师还没有进教室之前的黑板一样空白。后来我们开始经验一些事物，此时我们的心灵除了被动接受外界的印象之外，同时也积极地进行某种活动。它以思考、推理、相信、怀疑等方式来处理它所得到的各种单一感官概念，产生了洛克所谓的“思维（reflection）”。</p>

<p>洛克强调我们唯一能感知的事物是那些“单一感觉”。例如当我们吃一个苹果的时候，我们并不能一次性地将苹果的所有特征都感觉到。事实上，我们接收到的是一连串的“单一感觉”，诸如绿色、闻起来很新鲜、尝起来很甜&hellip;等。经过一定的事件，我们接收到了足够的感觉，我才能说：我正在吃“苹果”。我们就这样一点一滴地将许多相关的感觉放在一起，形成了“苹果”、“梨子”或“橘子”这些复合的概念。但根本上，是我们得以认识这个世界的所有材料都来自感官。那些无法回溯到一种单一感觉的知识都是虚假的知识，我们不应该接受。</p>

<h3>我们是否可以信赖感官的经验？</h3>

<p>对于第二个问题，洛克将感觉的性质分为“主要”和“次要”两种。在这方面他承认受笛卡尔等大哲学家的影响。</p>

<ol>
<li>主要性质。主要性质指扩延的世界特质，如重量、运动和数量等。在这一点上洛克是同意笛卡尔的说法的，认为确实有些性质是人可以用理智来了解的。</li>
<li>次要性质。次要性质指并不能真正反映事物本身的固有性质的一些属性，比如颜色、气息、味道、声音等，这些性质只反映外在实体在我们的感官上所产生的作用。</li>
</ol>


<blockquote><p>可以说主要性质是客观的，而次要性质是主观的，因人而异的。</p>

<p>对于洛克相信上帝的存在这一点，真是比较费解，感觉和他自己的理论是冲突的。因为在这一点上，洛克相信关于上帝的概念是原本就存在于人的理性之内的。</p></blockquote>

<h2>休姆</h2>

<p>&hellip;将它付之一炬。&hellip;</p>

<p>休姆（David Hume，1711-1776）是经验主义哲学中最重要的一位，也是启发大哲学家康德，并使他走上哲学研究道路的人。</p>

<h3>印象与观念</h3>

<p>休姆首先断定人有两种知觉：印象和观念。印象指的是对于外界实在的直接感受，观念指的是对印象的回忆。比如你被炉子烫到了，你马上会有一个“印象”。事后你会回想自己被烫到这件事，这就是休姆所谓的“观念”。</p>

<p>休姆说我们有时会将世界中原本并不共存的概念放在一起。比如天使将人和翅膀放在一起，天马将马和翅膀放在一起等。这些概念中的每一个元素都曾经由我们的感官体验过，并以真正“印象”的形式进入心灵。事实上，没有一件事物是由我们的心灵创造的。我们的心灵只是把不同的事物放在一起，创造一个虚假的“观念”罢了。</p>

<blockquote><p>所以，为了给创造提供更多素材，必须见多识广。正所谓“行万里路，读万卷书”，通过行万里路亲自经验，通过读万卷书了解别人的经验。</p></blockquote>

<p>对于上帝，休姆认为，是一个无限“智慧、聪明、善良的事物”，上帝这个观念就是由某个无限智慧、某个无限聪明与某个无限善良的事物共同组成的一个“复合概念”。如果我们不知道何谓智慧、何谓聪明、何谓善良的话，我们绝对不可能形成一个这样的上帝的观念。</p>

<p>总之，只要是无法回溯到特定感官认知经验的思想与观念，休姆便不接受。</p>

<h3>不可知论</h3>

<p>关于灵魂和上帝，休姆认为人类没有必要去证明灵魂不朽或上帝确实存在。这并不是因为休姆认为人没有不休的灵魂，或者上帝并不存在，而是因为他认为要用人类的理性来证明宗教信仰是不可能的。休姆不是一个基督徒，但也不是一个无神论者，他是我们所谓的“不可知论者”，就是一个怀疑灵魂是否不朽，怀疑上帝是否存在的人。休姆不相信灵魂不朽和上帝的存在，是因为他从来没有体验过。但是没有体验过也不能证明不存在。就是这样一个逻辑。</p>

<h3>习惯性期待</h3>

<p>如果看到一个人在天花板上行走，成人和婴儿谁会看的津津有味？应该是成人。在婴儿还不了解自然法则之前，看到违反自然法则的现象时，是不会感到特别惊讶的。那个孩子还没有成为“习惯性期待”的奴隶。具有婴儿视角的人更容易成为哲学家，因为他们完全没有任何先入为主的观念，这正是哲学家与众不同的地方。婴儿眼中所见到的乃是世界的原貌，他不会添加任何的东西。</p>

<blockquote><p>习惯性期待实际上是一种预测，是人类适应环境的结果，有利于物种的生存。</p>

<p>习惯性期待是阻挡我们对真理寻根究底的障碍，因为这种期待让我们认为眼前的一切都是理所当然，从而放弃了进一步研究的欲望。</p></blockquote>

<p>比如对于黑球撞击白球，白球移动这一现象，在休姆的眼中应该是这样的：我所经验的唯一事件是白球移动了，我并没有经验到它滚动的实际原因。我只经验到一件事情发生之后，另外一件事情跟着发生，但我并没有经验到第一件事情是第二件事情的原因。</p>

<p>休姆认为“自然法则”和“因果律”实际上是我们所期待的现象，并非“理当如此”。休姆并不否认有不变的自然法则，但他认为，由于我们无法体验到自然法则本身，因此很容易做出错误的结论。</p>

<p>比如我这一辈子看到的乌鸦都是黑色，但这并不表示世间没有白色的乌鸦。无论哲学家，还是科学家，都不能否认世间可能存在白乌鸦。这是很重要的。我们几乎可以说科学的主要任务就是找寻白乌鸦。</p>

<p>再举个例子。很多人会认为闪电是造成打雷的原因，因为每次闪电之后就会打雷，这个例子和黑球撞击白球并没有什么不同。事实上，打雷并不是闪电造成的，这两者是同时发生的，都是由于放点作用导致的。</p>

<p>所以，我们可以知道：一件事情跟着另一件事情发生，并不一定表示两者之间必有关联。哲学的目的之一就是教人们不要妄下定论，因为，妄下定论可能会导致许多迷信。</p>

<h3>伦理学</h3>

<p>休姆反对理性主义者在伦理方面的观点。理性主义者认为人的理性天生就能辨别是非对错。但休姆认为，我们的言语和行为并不是由理性决定的，而是由感情决定的。</p>

<p>让我们看一段苏菲和艾伯特的对话：</p>

<p>苏菲：譬如每一个人的理性都知道杀人是不对的。
艾伯特：有时候，除掉一个人并不一定是不智的，甚至可能是个好办法，如果你想达成某个目的的话。
苏菲：我反对。
艾伯特：那请你告诉我，为什么你认为我们不应该把一个使我们头疼的人杀掉？
苏菲：那个人也想活下去啊，因此你不应该杀他。
艾伯特：这是没有逻辑的，如果这个成立的话，那么下面几个论断是否也成立？比如“有很多人逃漏税，因此我也应该逃漏税。”，再比如“愈来愈多人出门时想搭飞机，因此我们应该兴建更多的机场。”
苏菲：&hellip;</p>

<p>因此，休姆认为我们不能以理智作为我们行事的标准。因为，我们之所以做出负责任的举动并不是因为我们的理智发达的结果，而是因为我们同情别人的处境。休姆说“一个人可能宁可整个地球遭到毁灭也不愿意自己的手指被割伤。这与理智并没有什么冲突。”</p>

<h2>柏克莱</h2>

<p>&hellip;宛如燃烧的恒星旁一颗晕眩的行星。&hellip;</p>

<p>洛克和笛卡尔、史宾诺莎一样，认为物质世界是真实的。但是柏克莱（George Berkeley，1685-1753）利用经验主义的逻辑对这一点提出了疑问：世间所存在的只是那些我们感受到的事情。但我们并未感受到“物质”或“质料”。我们无法察知我们所感受到的事物是否确实存在。他认为，如果我们认定自己所感知到的事物之下有“实体”存在，我们就是在妄下结论，因为我们绝对没有任何经验可以支持这样的说法。</p>

<p>比如你拍了一下桌子，感觉桌子很硬。可是你并没有感觉到实际存在于桌子里面的物质。同样的，你可以梦见自己碰到了一个硬物，可是梦里不会有硬的东西，对不对？</p>

<p>但是我们为什么会感觉到桌子“硬”呢？柏克莱相信人有“灵”。我们所有的观念都有一个我们意识不到的成因。但这个成因不是物质的，而是精神的。</p>

<h3>灵</h3>

<p>根据柏克莱的说法，我们的灵魂可能是形成我们本身各种概念的原因，就像我们在做梦时一样。此时，莎士比亚的to be or not to be, that is the question已经不是唯一的问题了。问题在于我们是什么。我们真的是血肉之躯的人类吗？我们的世界是由真实的事物组成的吗？或者我们只是受到心灵的包围？</p>

<blockquote><p>太可怕了！</p></blockquote>

<p>柏克莱不只是质疑物质真实性的问题，他也提出了“时间”和“空间”是否绝对存在或独立存在的问题。他认为，我们对于事件和空间的认知可能也只是由我们的心灵所虚构的产物而已。我们对一、两个星期并不一定等于上帝的一、两个星期。</p>

<blockquote><p>柏克莱已经开始思考时间的相对性了，这比爱因斯坦可早了二百多年呢。</p></blockquote>

<h2>柏客来</h2>

<p>&hellip;曾祖母向一名吉普赛妇人买的一面古老魔镜。&hellip;</p>

<h2>启蒙</h2>

<p>&hellip;从制针的技术到铸造大炮的方法。&hellip;</p>

<p>十八世纪的法国出现了许多重要的哲学家。我们可以说，十八世纪前半，欧洲的哲学中心是在英国，十八世纪中期，是在法国，十八世纪末，则是在德国。就这样从西边一直换到东边。</p>

<p>从以下七个方面阐述了法国启蒙运动的思想：</p>

<ol>
<li>反抗权威</li>
<li>理性主义</li>
<li>启蒙运动</li>
<li>文化上的乐观态度</li>
<li>回归自然</li>
<li>自然宗教</li>
<li>人权</li>
</ol>


<h3>1.反抗权威</h3>

<p>当时很多法国哲学家去过英国，受到英国自然科学——尤其是牛顿的宇宙物理学——的吸引，也受到英国哲学——尤其是洛克的政治哲学——的启发。他们回国后对于传统的权威愈来愈不能认同，认为有必要对前任所谓的真理抱持怀疑的态度，即：每个人都必须自行找寻问题的答案。这方面他们受笛卡尔的启发很大。反抗权威的口号也有一部分是针对当时的教士、国王和贵族。于是，1789年发生了法国大革命。</p>

<h3>2.理性主义</h3>

<p>洛克的经验主义前后并不一致，例如他相信上帝的信仰和若干道德规范是人的理性中所固有的。这个想法是法国启蒙运动的核心。从这一点可以看出，法国人比英国人更理性。大多数启蒙时期的哲学家跟苏格拉底这些古代的人文主义着一样，坚决相信人的理性，所以法国启蒙运动时期常被称为“理性时代”。当时，新兴的自然科学已经证明自然是受理性所管制的，于是哲学家们认为他们也有责任依据人不变的理性为道德、宗教、伦理奠定基础。启蒙运动因此产生。</p>

<h3>3.启蒙运动</h3>

<p>启蒙运动想要“启”发群众的“蒙”昧，以建立更好的社会。他们认为人民之所以过着贫穷、备受压迫的生活，是因为他们无知、迷信所致。因此，他们创立了教育学。并出版了一套大规模的百科全书，并声称“在这套书中可以查到所有的知识，上自铸造大炮的方法，下至制针的技术。”</p>

<h3>4.文化上的乐观态度</h3>

<p>启蒙时期的哲学家任务一旦人的理性发达、知识普及之后，人性就会有很大的进步，所有非理性的行为与无知的做法迟早都会被“文明”的人性取代。</p>

<h3>5.回归自然</h3>

<p>对于启蒙时期的哲学家而言，“自然”几乎就代表“理性”，因为人的理性乃是自然的赐予，而不是宗教或“文明”的产物。他们认为：所谓的“原始民族”常常比欧洲人更健康、更快乐，因为他们还没有被“文明化”。卢梭提出“人类应该回归自然”的口号，因为自然是好的，所以人如果能处于自然的状态就是好的，可惜他们却往往受到文明的败坏。卢梭并且认为大人应该让小孩尽量停留在他们天真无邪的“自然”状态里。</p>

<h3>6.自然宗教</h3>

<p>除了认为人应该自然化，他们还认为宗教也应该加以自然化，即宗教必须与“自然”的理性和谐共存。但是很多人为建立“自然宗教”而奋斗。</p>

<p>所谓“自然神论”是指相信上帝在万古之前创造了世界，但从此以后就没有再现身。上帝成了一个“至高的存在”，只透过大自然与自然法则向人类显现，绝不会透过任何“超自然”的方式现身。我们在亚里斯多德的著作中也可以发现类似的这种“哲学上帝”的说法。对他而言，上帝乃是“目的因”或“最初的推动者”。</p>

<h3>7.人权</h3>

<p>法国启蒙时期的哲学家对于一般人在社会中的地位并不满意。他们积极争取所谓的“自然权利”，并且发起一项反对言论管制、争取新闻自由的运动。此外，他们认为个人在宗教、道德与政治方面的思想与言论自由也有待争取，并积极提倡废除奴隶制度，以合乎人性的方式对待罪犯。1789年，法国国民议会通过了“人权与民权宣言”，确立了“个人权利不可侵犯”。</p>

<h2>康德</h2>

<p>&hellip;头上闪烁的星空与心中的道德规范。&hellip;</p>

<p>康德生于1724年，他及其家人都是非常虔诚的教徒，他的宗教信仰也成为他的哲学的重要背景之一。他和柏克莱一样，觉得有必要巩固基督教信仰的基础。</p>

<p>不同于理性主义和经验主义，康德认为我们对于这个世界的观念是我们同时透过感官与理性而得到的。首先，康德同意休姆和经验主义者的说法，认为我们对于世界的了解都是透过感官获得的，但是他也赞成理性主义者的部分说法，认为我们的理性中也有一些因素可以决定我们如何认知周遭的世界。换句话说，我们对于世界的观念会受到人类心灵中某些状况的影响。</p>

<h3>因果律</h3>

<p>康德宣称，不仅心灵会顺应事物的形状，事物也会顺应心灵。他把这个现象称为人类认知问题的“哥白尼革命”。</p>

<p>休姆认为我们无法证明因果律，因为我们无法体验到因果律，我们只能体要到事物发生的先后顺序。康德则认为：因果律是根植于我们的内心的。他同意休姆的说法，认为我们无法确知世界本来的真貌，我们只能根据自己的认识来了解世界。康德认为“事物本身”和“我眼中的事物”是不一样的。这一点很重要。我们永远无法知道事物“本来”的面貌，我们所知道的只是我们眼中“看到”的事物。从另外一个角度来看，我们在每一次经验之前都可以预知我们的心灵将如何认知事物。</p>

<h3>信仰</h3>

<p>笛卡尔等理性主义者试图证明上帝的存在，理由是：我们都有一个关于“至高存在”的概念。亚里斯多德和圣多玛斯等人之所以相信上帝存在的理由是：一切事物必然有一个最初的原因。</p>

<p>康德则认为无论理性和经验都无法证明上帝的存在。但是这对于一个虔诚的教徒来说是不可以接受的。于是，康德开创了一个宗教的空间。在这个空间中理性和经验都派不上用场，因此形成了一种真空的状况。这种真空只能用信仰来填补。这就是康德挽救基督教的方法。</p>

<h3>伦理学</h3>

<p>康德在是非标准方面同意理性主义者的说法，认为每个人心中的是非观念并不是后天学来的，而是人心固有的观念。按照康德自己的说法，就是每一个人都天生具有“实践理性”。</p>

<p>康德认为就像我们能够感知因果关系的智慧一样，我们也能够感知普遍的道德法则。这个道德法则在于每个经验之先，因此它是“形式的”，也就是说，它必不限于任何特定的情况。它适宜于古往今来每个社会每个个人，所以它不会告诉你在什么情况下应该做什么事情，而是告诉你在所有的情况下应该有的行为。这套道德法则乃是“无上命令”，是“无条件的”，是绝对权威的。康德也说明“无上命令”的意义乃是：尊重每一个人的本身，而不要将他当成达成某种外在目的的手段。</p>

<p>让我们用康德的墓志铭来做个总结：有两件事情我愈是思考愈觉神奇，心中也愈充满敬畏，那就是我头顶上的星空与我内心的道德准则。它们向我印证：上帝在我头顶，亦在我心中。</p>

<h2>浪漫主义</h2>

<p>&hellip;神秘之路通向内心。&hellip;</p>

<p>继文艺复兴、巴洛克时期与启蒙运动，我们来到了浪漫主义。浪漫主义可以说是欧洲最后一个伟大的文化纪元。它从十八世纪末开始，持续到十九世纪中期。1850年以后，就不再有一个涵盖诗、哲学、艺术、科学与音乐的“纪元”了。</p>

<p>浪漫主义开始于德国，最初是为了反对启蒙时期的哲学家过于强调理性的做法。在康德和他那冷静的知性主义成为过去后，德国的青年仿佛松了一口气，如释重负。当时的新口号是“感情”、“想象”、“经验”和“渴望”。人们开始批评浪漫主义的做法，隐而不显的浪漫主义开始成为德国的主流。</p>

<p>许多浪漫主义者自认为康德的传人，他们赞同康德所说的“我们对于‘物自身’所知有限”，同时也强调自我的作用对于知识（或认知）的重要性。在这种情况下个人完全可以随心所欲地以自己的方式来诠释生命。这份“随心所欲”为我们带来了许多艺术方面的天才。贝多芬就是其中之一。</p>

<p>和文艺复兴时期相似，浪漫主义也强调艺术对人类认知的重要性。在这方面康德的贡献很大。他在他的美学理论中研究了当我们受到美（比如一幅艺术品）的感动时会发生什么情况。他认为，当我们忘记自我，忘记一切，完全沉浸于艺术作品的时候，我们就比较能够体验到“物自身”。因此，浪漫主义也认为，艺术家可以提供一些哲学家无法表达的东西，唯有艺术家才能使我们更接近那“无以言喻”的经验。有人甚至将艺术家比作上帝。</p>

<p>1800年左右的第一代浪漫主义者都是年轻人，有些像150年后的嬉皮。曾有人说：“闲散是天才的理想，懒惰是浪漫主义者的美德。”浪漫主义者的职责就是体验生活——或是成天做白日梦、浪费生命。至于日常事务，留给那些俗人去做就行了。</p>

<p>浪漫主义者认为大自然就是一个大“我”，他们同时使用“世界灵魂”与“世界精神”等名称。</p>

<h3>谢林</h3>

<p>浪漫主义时期主要的哲学家是谢林（Schelling，1775-1854）。他主张心灵与物质合二为一，并认为大自然的全部——包括人的灵魂与物质世界——都是一个“绝对存在”（或世界精神）的表现。</p>

<p>史代芬（Henrik Steffens）曾一语道破浪漫主义的特色：“我们厌倦了无休无止地与粗糙的物质世界奋战，因此决定选择另外一个方式，企图拥抱无限。我们进入自己的内心，在那里创造了一个新的世界&hellip;”</p>

<p>谢林发现在大自然中，从泥土、岩石到人类的心灵，有一种逐渐发展的现象。他提醒人们注意大自然从无生物逐渐发展到较复杂的生命体的现象。大致上说，浪漫主义把大自然视为一个有机体，也就是一个不断发展其内在潜能的一个整体。大自然就像一株不断伸展枝叶与花瓣的花，也像一个不断吟咏出诗歌的诗人。</p>

<h2>黑格尔</h2>

<p>&hellip;可以站得住脚的就是有道理的。&hellip;</p>

<p>黑格尔（Georg Wihelm Friedrich Hegel）统一了所有曾在浪漫主义时期出现的理念，并加以发展。“黑格尔主义”在德国吸引了无数的信徒。</p>

<h3>历史之河</h3>

<p>通常所谓的“黑格尔哲学”主要是指一种理解历史进展的方法。</p>

<p>黑格尔之前的哲学体系有一个共同点：试图为人们对世界的知识建立一套永恒的标准，并认为人类对于世界的知识是不受时间影响的。笛卡尔、史宾诺莎、休姆和康德等人都是如此。黑格尔认为这是不可能的。他相信人类认知的基础代代不同，因此世间没有永恒的真理。</p>

<p>从思想（或理性）的历史来看，我们的思考方式乃是受到宛如河水般向前推进的传统思潮与当时的物质条件的影响。因此，你永远无法宣称一种思想永远是对的。只不过就你所知身之处而言，这种思想可能是正确的。我们的理性事实上是动态的，是一种过程。而“真理”就是这个过程，因为在这个历史的过程之外，没有外在的标准可以断定什么是真，什么是合理。</p>

<h3>辩证法</h3>

<p>假设笛卡尔的理性主义为“正”，与之相反的休姆的经验主义为“反”。这两种思想处于矛盾或紧张的状态，后来被康德的“合”给消除了。“正”、“反”、“合”是康德认为的思想发展的三个基本阶段。康德同时吸收了理性主义和经验主义的部分论点，形成了自己的“合”的论点。但是故事并非到此结束。康德的“合”现在成了另一个三段式发展的起点，也会出现一个“反”与之相抵触。</p>

<h2>祁克果</h2>

<p>&hellip;欧洲正迈向破产的地步。&hellip;</p>

<p>祁克果认为真理是“主观的”，真正的真理是属于个人的，只是“对我而言是真的”。对于“上帝是否存在”这个问题，每一个人都必须独自回答。而这类根本性的问题只能经由信仰来找寻答案。按照祁克果的看法，那些我们能经由理性而得知的事情（也就是知识）是完全不重要的。换句话说，正因为它是非理性的，所以我才相信。</p>

<h2>马克思</h2>

<p>&hellip;在欧洲游荡的幽灵。&hellip;</p>

<p>马克思曾说，直到现在为止，“哲学家只诠释了世界，可是重点在于他们应该去改变世界。”马克思的思想有一个实际或政治的目的。我们可以说他不只是一个哲学家，同时也是一个历史学家、社会学家和经济学家。</p>

<h3>辩证历史唯物主义</h3>

<p>马克思并不像古代的原子论者和十七、十八世纪的机械论唯物主义者一样是一个哲学性的唯物主义。不过他认为我们的思考方式是一大部分受到社会中的物质因素的影响。此外，这类物质因素无疑也左右了历史的发展。</p>

<p>马克思受黑格尔思想的影响，但是他不同意黑格尔的世界精神。黑格尔认为历史是辩证发展的，并把推动历史前进的力量叫做世界精神或世界理性。马克思认为这种说法正好与事实相反。他想证明物质的变化才是推动历史的力量：“精神关系”并不会造成物质的改变，而是物质的改变造成了新的“精神关系”。马克思特别强调，促成改变并因此把历史向前推进的，其实是一个社会的经济力量，即我们在政治课里面所学的“生产力决定生产关系”、“经济基础决定上层建筑”。马克思相信物质条件“支持”着一个社会里的每一种思想和看法。马克思继承了黑格尔的辩证历史发展观，并用“物质”代替了“世界精神”，这就是“辩证历史唯物主义”。</p>

<blockquote><p>这应该就是唯物主义和唯心主义的区别：是精神决定物质，还是物质决定精神。</p></blockquote>

<h3>阶级斗争</h3>

<p>马克思相信资本主义的生产方式本身有若干内在的矛盾。他说，资本主义是一种自我毁灭式的经济制度，因为它缺少理性的控制。资本主义的内在因素会驱使它走向灭亡。</p>

<blockquote><p>中文翻译版本删除了关于“共产主义无法实现”的讨论。找来英文版看了一下，大致是说：当代经济学家认为马克思的共产主义理论没有考虑到很多东西，共产主义是不可能实现的，人类就是在不停地制造问题、解决问题的过程中不断发展的。</p></blockquote>

<h2>达尔文</h2>

<p>&hellip;满载基因航行过生命的一艘小船。&hellip;</p>

<p>达尔文1882年死于伦敦，之后一年，马克思也在伦敦去世。恩格斯怀念说：达尔文创立了有机物进化的理论，而马克思则创立了人类历史进化的理论。</p>

<h3>自然主义</h3>

<p>广泛地谈一下从十九世纪中期到我们这个时代所流行的一股自然主义风潮。自然主义指的是一种认为除了大自然和感官世界之外，别无其他真实事物的态度。因此，自然主义者也认为人是大自然的一部分。一个自然主义的科学家只相信自然现象，而不相信任何理性假设或圣灵的启示。马克思、达尔文和弗洛伊德都是自然主义者。马克思指出人类的意识形态是社会基础的产物，达尔文则证明人类是生物逐渐演化的结果，而弗洛伊德对潜意识的研究则发现人们的行为多半是受到“动物”本能驱策的结果。</p>

<h3>进化论</h3>

<p>物竞天择，适者生存。</p>

<h2>弗洛伊德</h2>

<p>&hellip;他内心出发那股令人讨厌的自大的冲动。&hellip;</p>

<h3>潜意识</h3>

<p>弗洛伊德认为我们的行动并不像十八世纪的理性主义者所想的那么理性。非理性的冲动经常左右我们的思想、梦境和行动。这种不理性的冲动可能是反映我们的基本需求。例如，人类的性冲动就像婴儿吸奶的本能一样是一种基本的驱策力。这并不是什么新发现，但是弗洛伊德指出这些基本需求可能会被“伪装”或“升华”，并在我们无从察觉的情况下主宰我们的行动。</p>

<p>比如“说溜嘴”等现象就是潜意识在作怪。另外，精神分析学家在病人的配合下，可以在病人的心灵深处挖掘，并找出那些造成病人心理失调的经验。因为根据弗洛伊德的说法，我们都会把所有经验的记忆储藏在内心深处。</p>

<h4>潜意识机转</h4>

<p>有时候我们会把自己内心试图压抑的潜意识转移到别人身上。譬如一个很吝啬的人会说别人斤斤计较，而一个不愿意承认自己满脑子想着性的人可能俞容易对别人成天想着性的样子感到愤怒。</p>

<p>弗洛伊德宣称，我们每天的生活中充满了这类潜意识的机转。我们时常会忘记某个人的名字，在说话时摸弄自己的衣服或移动房间里面随意放置的物品。我们时常结结巴巴或看似无辜地说错字，写错字。这些举动并不像我们所想的那样是意外或无心的。这些错误事实上可能正泄露我们内心最深处的秘密。</p>

<p>面对这些潜意识的机转，我们无法逃避。我们所能做的就是不要太过努力地将不愉快的记忆埋藏在潜意识中。因为那就像试图把水鼠巢穴的入口堵住一样。水鼠一定会从其它的洞口进入花园。因此，让意识与潜意识之间的门半遮半掩事实上是一件很健康的事。</p>

<h4>解梦</h4>

<p>洞悉我们潜意识的最好途径就是透过我们的梦境。弗洛伊德的主要作品就是讨论这个话题的——《梦的解析》。</p>

<h4>灵感</h4>

<p>所有的艺术家都有这种经验：突然间好像所有的门、所有的抽屉都打开了，每个东西都自己滚了出来，所有原来苦思不得解的字句和意象都浮现了出来。这就是潜意识的“盖子”被揭开了，我们称之为“灵感”。</p>

<p>对于过度疲劳的儿童，经常出现这种现象：突然间他们开始讲故事，而且所说的话仿佛是他们还没有学过的。事实上，他们已经学过了。只是这些字眼和意念都“潜藏”在他们的潜意识中，而当所有的防备和管制都放松时，它们就浮现出来了。对于艺术家来说，不要让理性或思维压制潜意识的表达是非常重要的。</p>

<h3>快乐原则、现实原则和道德原则</h3>

<h4>快乐原则</h4>

<p>当我们刚来到这个世界的时候，我们会用一种直接而毫不感到羞耻的方式来满足我们身体与心灵的需求。如果我们没有奶喝或尿布湿了，我们就会大哭。我们也会直接表达我们对身体上的接触或温暖拥抱的需求。弗洛伊德称我们这种“快乐原则”为“本我”。当我们还是一个婴儿的时候，几乎就只有一个“本我”。</p>

<h4>现实原则</h4>

<p>我们带着我们内心的这个“本我”或“快乐原则”长大成人。逐渐地，我们学会如何调整自己的需求以适应环境，我们学到如何调整这个“快乐原则”以迁就“现实原则”。用弗洛伊德的术语来说，我们发展出了一个具有这种调节功能的“自我”。这时，即使我们想要或需要某个东西，我们也不能躺下来一直哭到我们得到那件东西为止。</p>

<h4>道德原则</h4>

<p>从婴儿时期，我们就不断面对我们的父母和社会的道德要求。当我们做错事情的时候，我们的父母会说：“不要那样！”或“别调皮了，那样不好！”即使长大成人后，我们在脑海中仍可以听到这类道德要求和价值判断的回声。似乎这种世界的道德规范已经深入我们的内心，成为我们的一部分。弗洛伊德称这部分为“超我”。良心是超我的一部分。</p>

<h2>我们这个时代</h2>

<p>&hellip;人是注定要受自由之苦的。&hellip;</p>

<p>所谓哲学问题的定义就是每一个世代，甚至每一个人，都必须要一再地问自己的一些问题。借着提出这些问题，我们才知道自己活着。当人们追寻这些根本问题的答案时，他们总是会发现许多其他问题，并因此而有了清楚明确的解决方法。科学、研究和科技都是我们哲学思考的副产品。</p>

<h2>花园宴会</h2>

<p>&hellip;一只白色的乌鸦。&hellip;</p>

<h2>对位法</h2>

<p>&hellip;两首或多首旋律齐响。&hellip;</p>

<h2>那轰然一响</h2>

<p>&hellip;我们也是星尘。&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Unit Test With Junit]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit/"/>
    <updated>2016-08-25T13:27:16+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/08/25/android-unit-test-with-junit</id>
    <content type="html"><![CDATA[<h2>Test Types</h2>

<p>When using Android Studio to write any of your tests, your test code must go into one of two different code directories (source sets). For each module in your project, Android Studio includes both source sets, corresponding to the following test types:</p>

<!-- more -->


<h3>Local unit tests</h3>

<p>Located at <em>module-name/src/test/java/</em>.
These tests run on the local JVM and do not have access to functional Android framework APIs.</p>

<h3>Instrumented tests</h3>

<p>Located at <em>module-name/src/androidTest/java/</em>.
These are all tests that must run on an Android hardware device or an Android emulator.</p>

<p>In the following, we will only focus on local unit test.</p>

<h2>Set Up Your Testing Environment</h2>

<p>In your app&rsquo;s top-level build.gradle file, you need to specify these libraries as dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    // Required -- JUnit 4 framework
</span><span class='line'>    testCompile 'junit:junit:4.12'
</span><span class='line'>    // Optional -- Mockito framework
</span><span class='line'>    testCompile 'org.mockito:mockito-core:1.10.19'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Create a Local Unit Test Class</h2>

<h3>Manualy create junit4 unit test</h3>

<p>Your local unit test class should be written as a JUnit 4 test class. <a href="http://junit.org/junit4/">JUnit</a> is the most popular and widely-used unit testing framework for Java. The latest version of this framework, JUnit 4, allows you to write tests in a cleaner and more flexible way than its predecessor versions. Unlike the previous approach to Android unit testing based on JUnit 3, with JUnit 4, you do not need to extend the junit.framework.TestCase class. You also do not need to prefix your test method name with the ‘test’ keyword, or use any classes in the junit.framework or junit.extensions package.</p>

<p>To create a basic JUnit 4 test class, create a Java class that contains one or more test methods. A test method begins with the @Test annotation and contains the code to exercise and verify a single functionality in the component that you want to test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertFalse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailValidatorTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">emailValidator_CorrectEmailSimple_ReturnsTrue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">EmailValidator</span><span class="o">.</span><span class="na">isValidEmail</span><span class="o">(</span><span class="s">&quot;name@email.com&quot;</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Auto create junit4 unit test with the help of Android Studio</h3>

<p>Right click inside the class you are to test, and select <em>Go to -> Test</em> (Shift + Command + T), then select <em>create new test&hellip;</em>. You will see:</p>

<p><img src="http://hongchaozhang.github.io/images/auto_create_junit4_unit_test.png" alt="auto_create_junit4_unit_test.png" /></p>

<p>In the above window, select the test class name, the methods you want to test, and some other helper methods like <code>setUp</code> and <code>tearDown</code>.</p>

<p>Then fill out all the test cases.</p>

<h3>Some annotations</h3>

<table>
<thead>
<tr>
<th>Annotation </th>
<th> Meaning </th>
<th> Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Test </td>
<td> for test cases </td>
<td></td>
</tr>
<tr>
<td>@Before </td>
<td> excute before every test case </td>
<td></td>
</tr>
<tr>
<td>@After </td>
<td> excute after every test case </td>
<td></td>
</tr>
<tr>
<td>@BeforeClass </td>
<td> static, excute only once, before the first test case begin </td>
<td></td>
</tr>
<tr>
<td>@AfterClass </td>
<td> see @BeforeClass </td>
<td></td>
</tr>
<tr>
<td>@Rule </td>
<td></td>
<td></td>
</tr>
</tbody>
</table>


<h2><code>Mock</code> and <code>Spy</code></h2>

<h4>Difference between mock and spy</h4>

<p><strong>Mock</strong>: Mock will wrap the Class of an Type, not from an actual instance. The mock simply creates a bare-bones shell instance of the Class. In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p><strong>Spy</strong>: Spy will wrap an existing instance. In this case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>For <code>mock</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Stock</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getQuantity</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getValue</span><span class="o">()).</span><span class="na">thenCallRealMethod</span><span class="o">();</span>  <span class="c1">// Real implementation</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case, each method implementation is mocked, unless specify <code>thenCallRealMethod()</code> in the <code>when(..)</code> clause.</p>

<p>For <code>spy</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="k">new</span> <span class="nf">Stock</span><span class="o">());</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">stock</span><span class="o">.</span><span class="na">getQuantity</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="c1">// All other method call will use the real implementations</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case, all method implementation are the real one, expect if you have defined a mocked behaviour with <code>when(..)</code>.</p>

<p>There is one important pitfall when you use <code>when(Object)</code> with spy like in the previous example. The real method will be called (because <code>stock.getPrice()</code> is evaluated before <code>when(..)</code> at runtime). This can be a problem if your method contains logic that should not be called. You can write the previous example like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Stock</span> <span class="n">stock</span> <span class="o">=</span> <span class="n">spy</span><span class="o">(</span><span class="k">new</span> <span class="nf">Stock</span><span class="o">());</span>
</span><span class='line'><span class="n">doReturn</span><span class="o">(</span><span class="mf">100.00</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">stock</span><span class="o">).</span><span class="na">getPrice</span><span class="o">();</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="n">doReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">stock</span><span class="o">).</span><span class="na">getQuantity</span><span class="o">();</span>    <span class="c1">// Mock implementation</span>
</span><span class='line'><span class="c1">// All other method call will use the real implementations</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mock Android Dependencies</h2>

<p>To do.</p>

<h2>Use Hamcrest for Assertion</h2>

<p>Use <a href="https://github.com/hamcrest/hamcrest-junit">hamcrest</a> to make the code more readable.</p>

<p>Instead of using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="s">&quot;the two values should be the same&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">assertNotNull</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>we can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;the two values should be the same&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">NotNullValue</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<p><a href="https://developer.android.com/training/testing/start/index.html">Getting Started with Testing</a>: official site from Google.</p>

<p><a href="http://stackoverflow.com/questions/14970516/use-mockito-to-mock-some-methods-but-not-others">Use Mockito to mock some methods but not others</a>讲解Mock和Spy的用法，简单易懂。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在UITableViewCell中异步加载图片]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/08/02/asynchronously-load-online-images-into-uitableviewcells/"/>
    <updated>2016-08-02T16:13:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/08/02/asynchronously-load-online-images-into-uitableviewcells</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>当我们在<code>UITableViewCell</code>中进行比较费时的工作（比如绘图，或者加载网络图片）的时候，通常会出现下面的问题：</p>

<!-- more -->


<ol>
<li>当<code>UITableViewCell</code>移出视图的时候，这个<code>UITableViewCell</code>对应的异步操作仍然在执行。这通常会造成系统资源浪费，还可能由于这个异步操作不知道返回到哪个<code>UITableViewCell</code>而导致<code>UITableView</code>一些诡异的行为。</li>
<li><code>UITableViewCell</code>通常是重复利用的实例，这就会导致当前<code>UITableViewCell</code>可能会加载之前出现在视图中但是现在不在视图中的<code>UITableViewCell</code>的内容，在你面前变换一下<code>UITableViewCell</code>里面的内容，这是我们都不想看到的。</li>
</ol>


<h2>解决</h2>

<p>2012年的WWDC中的<em>Session 211</em> <a href="https://developer.apple.com/videos/play/wwdc2012/211/">Building Concurrent User Interfaces on iOS</a>很好地讲解了如何在一个<code>UITableViewCell</code>里面做比较费时的事情（比如绘图，或者网络请求图片），而保持app流畅，我下面的代码和<a href="https://stavash.wordpress.com/2012/12/14/advanced-issues-asynchronous-uitableviewcell-content-loading-done-right/">Advanced issues: Asynchronous UITableViewCell content loading done right</a>这一篇文章都是根据这个session实现的。</p>

<p>解决上述两个问题的基本想法：当<code>tableView:cellForRowAtIndexPath:</code>被调用的时候，去网络请求<code>UITableViewCell</code>对应的图片。当请求成功时，判断当前的<code>UITableViewCell</code>是否仍然在视图中：如果在，将请求的图片设置到<code>UITableViewCell</code>中，否则，不设置。另外，当<code>UITableViewCell</code>移出视图的时候，要取消其对应的请求，防止对后续请求造成影响。</p>

<p><a href="https://developer.apple.com/library/ios/samplecode/LazyTableImages/Introduction/Intro.html">LazyTableImages: Populating UITableView content asynchronously</a>这个实现相对简单一点：这个实现通过<code>UIScrollViewDelegate</code>中的方法，保证在用户滚动<code>UITableView</code>和<code>UITableView</code>停止之前都停止<code>UITableViewCell</code>里面的更新，只有当<code>UITableView</code>静止的时候，才去更新当前视图中的所有<code>UITableViewCell</code>。而上面的实现则能保证在用户进行滚动的同时，请求并加载图片到正确的位置。</p>

<p>主要代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span><span class="p">,</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UIScrollViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">rowIndexToOperationDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span><span class="bp">NSBlockOperation</span><span class="p">]()</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">downloadImageOperationQueue</span><span class="p">:</span> <span class="bp">NSOperationQueue</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">queue</span> <span class="o">=</span> <span class="bp">NSOperationQueue</span><span class="p">()</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;download image queue&quot;</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">maxConcurrentOperationCount</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">queue</span>
</span><span class='line'>    <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="mi">100</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;\(i)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">tableView</span> <span class="o">=</span> <span class="bp">UITableView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">tableView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when table view disappears, cancel all operations</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidDisappear</span><span class="p">(</span><span class="nl">animated</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">downloadImageOperationQueue</span><span class="p">.</span><span class="n">cancelAllOperations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">100</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nl">section</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s">&quot;cell&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span> <span class="o">=</span> <span class="bp">UITableViewCell</span><span class="p">(</span><span class="nl">style</span><span class="p">:</span> <span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="nl">reuseIdentifier</span><span class="p">:</span> <span class="s">&quot;cell&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cell</span><span class="o">!</span><span class="p">.</span><span class="n">textLabel</span><span class="o">!</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">loadImageInfoCellOperation</span> <span class="o">=</span> <span class="bp">NSBlockOperation</span><span class="p">()</span>
</span><span class='line'>        <span class="k">weak</span> <span class="k">var</span> <span class="n">weakLoadImageInfoCellOperation</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span>
</span><span class='line'>        <span class="k">func</span> <span class="n">loadImageOperationBlock</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="bp">NSData</span><span class="p">(</span><span class="nl">contentsOfURL</span><span class="p">:</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://dummyimage.com/100x100/222/fff.png&amp;text=&quot;</span><span class="o">+</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>            <span class="k">var</span> <span class="nl">imageIcon</span><span class="p">:</span><span class="bp">UIImage</span><span class="o">?</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">imageData</span> <span class="o">=</span> <span class="n">imageData</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">imageIcon</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">imageData</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">func</span> <span class="n">updateImageOperationBlock</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="k">let</span> <span class="n">operation</span> <span class="o">=</span> <span class="n">weakLoadImageInfoCellOperation</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">operation</span><span class="p">.</span><span class="n">cancelled</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">theCell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">cellForRowAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">theCell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="o">!</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">imageIcon</span>
</span><span class='line'>                        <span class="n">theCell</span><span class="o">?</span><span class="p">.</span><span class="n">setNeedsLayout</span><span class="p">()</span>
</span><span class='line'>                        <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="bp">NSOperationQueue</span><span class="p">.</span><span class="n">mainQueue</span><span class="p">().</span><span class="n">addOperationWithBlock</span><span class="p">(</span><span class="n">updateImageOperationBlock</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">loadImageInfoCellOperation</span><span class="p">.</span><span class="n">addExecutionBlock</span><span class="p">(</span><span class="n">loadImageOperationBlock</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rowIndexToOperationDictionary</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]]</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span>
</span><span class='line'>        <span class="n">downloadImageOperationQueue</span><span class="p">.</span><span class="n">addOperation</span><span class="p">(</span><span class="n">loadImageInfoCellOperation</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cell</span><span class="o">?</span><span class="p">.</span><span class="n">imageView</span><span class="o">!</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when cell is out of scene, cancel the operation</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">didEndDisplayingCell</span> <span class="nl">cell</span><span class="p">:</span> <span class="bp">UITableViewCell</span><span class="p">,</span> <span class="n">forRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">loadImageInfoCellOperation</span><span class="p">:</span><span class="bp">NSBlockOperation</span><span class="o">?</span> <span class="o">=</span> <span class="n">rowIndexToOperationDictionary</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">op</span> <span class="o">=</span> <span class="n">loadImageInfoCellOperation</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">op</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>
</span><span class='line'>            <span class="n">rowIndexToOperationDictionary</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其它问题</h3>

<ol>
<li><p>修改应用安全权限，确保能下载http资源。参考：<a href="http://stackoverflow.com/questions/30731785/how-do-i-load-an-http-url-with-app-transport-security-enabled-in-ios-9">How do I load an HTTP URL with App Transport Security enabled in iOS 9?</a></p></li>
<li><p>当设置的<code>UITableViewCell</code>中的图片的时候，需要调用一下<code>[cell setNeedsLayout]</code>确保其显示出来。否则，只有当你点击的时候图片才会更新出来。参考
<a href="http://stackoverflow.com/questions/9352638/cell-imageview-in-uitableview-doesnt-appear-until-selected">cell imageView in UITableView doesn&rsquo;t appear until selected</a>。</p></li>
</ol>


<h3>资源</h3>

<p>这是一个神奇的网站！可以在线定制图片颜色和内容，然后生成对应的url。参考：<a href="http://dummyimage.com/">Dynamic Dummy Image Generator</a>。所以才会有下面的效果，方便检查每个cell的图片是否正确：</p>

<p><img src="http://hongchaozhang.github.io/images/async_load_online_images_into_uitableviewcells.png" alt="async_load_online_images_into_uitableviewcells.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中Property和Method的可见性]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c/"/>
    <updated>2016-06-16T21:48:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/06/16/property-and-method-visuability-of-category-and-inheritence-in-objective-c</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>本来只想思考一下<em>Objective-C里Category和Inheritence中的Property和Method的可见性</em>，搜着搜着，主题有些变化，所以题目也改了。</p>

<p>这里只是一些来自参考博客的结论和自己测试得到的结论。</p>

<!-- more -->


<p>具体参考博客如下：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4869935/objective-c-private-vs-protected-vs-public">Objective-C - Private vs Protected vs Public</a></li>
<li><a href="http://stackoverflow.com/questions/12633627/expose-a-private-objective-c-method-or-property-to-subclasses">实现public、private和protected属性和方法</a></li>
<li><a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a></li>
<li><a href="http://bootstragram.com/blog/simulating-protected-modifier-with-objective-c/">Simulating protected properties and selectors in Objective-C</a></li>
</ul>


<p>自己的测试代码为：OCPlayground。</p>

<h2>结论</h2>

<h3>来自参考博客的结论</h3>

<ol>
<li>点操作(.)只和property有关和iVar没有关系。</li>
<li><code>-&gt;</code>操作只和iVar有关，和property无关。</li>
<li>ivar中的关键字<code>public</code>、<code>private</code>和<code>protected</code>只对ivar有效，表明的是ivar的可见性，默认<code>protected</code>。子类中想用继承来的ivar，需要使用->操作符，不能使用dot操作符（dot操作符只用于property）。实例中想用ivar，只能用具有<code>public</code>属性的ivar。</li>
</ol>


<h3>来自代码测试的结论</h3>

<h4>结论1</h4>

<p>We can use <code>@property</code> in Extension the same way as <em>.h</em> file of the class. Compiler can generate the setter and getter methods for us. But in Category, compiler will not generate the setter and getter methods for us, you need to implement them manually or by using <code>@dynamic</code> to tell the compiler that the setter and getter methods are implemented somewhere else.</p>

<p>The difference comes from the fact that instance variables can be added into Extension but not Category.</p>

<h4>结论2</h4>

<p>to define whether a category can use the extended class&rsquo;s property or method, just define whether the property or method is in one &ldquo;interface&rdquo; that the category can &ldquo;see&rdquo;.</p>

<h4>结论3</h4>

<p>visibility(<code>private</code>, <code>public</code>, <code>protected</code>) does not affect methods. methods are as good as public when visible to clients (and potential pitfalls/bugs when invisible to clients). instead, visibility affects instance variables.</p>

<h4>结论4</h4>

<p>The same priciple as Category: to define whether I can use a property or method (in super class), just define whether the property or method is in an &ldquo;@interface&rdquo; the context (where you are trying to use the property or method) can &ldquo;see&rdquo;.</p>

<p>One exception: <code>performSelector:</code> can run method that are not ready in compile time but ready in runtime. However there will be one warning from the compiler. You can dismiss the warning by declaring a method with the same name in the class in which you are coding, but will introduce another warning saying that &ldquo;Method definition for *** is not found&rdquo;.</p>

<h3>Protected method</h3>

<p>来自<a href="http://stackoverflow.com/questions/3725857/protected-methods-in-objective-c">Protected methods in Objective-C</a>的protected method的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/////// SuperClass.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SuperClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////// SuperClass.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SuperClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">protectedMethod</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////// SubClass.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SubClass</span> : <span class="nc">SuperClass</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////// SubClass.m</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SubClass</span> <span class="nl">(Protected)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">protectedMethod</span> <span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SubClass</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">callerOfProtectedMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">protectedMethod</span><span class="p">]</span> <span class="p">;</span> <span class="c1">// this will not generate warning</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting in Xcode With HeaderDoc Tutorial]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial/"/>
    <updated>2016-04-19T10:50:00+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/04/19/documenting-in-xcode-e-with-headerdoc-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial">Documenting in Xcode with HeaderDoc Tutorial</a> 讲解的非常全面详细可操作。</p>

<p>补充一点：如果最终导出的html文件想转换成docx或者pdf文件，只需要用word打开，然后另存为你想要的格式即可，多数情况下，word可以处理好格式的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios MultiplePagesViewController Usage]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage/"/>
    <updated>2016-03-27T16:58:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/27/ios-multiple-page-view-controller-usage</id>
    <content type="html"><![CDATA[<p>先上截图：</p>

<p><img src="http://hongchaozhang.github.io/images/multiple_pages_view_controller_demo.gif" alt="multiple_pages_view_controller_demo.gif" /></p>

<p>demo地址：<a href="https://github.com/hongchaozhang/MultiplePagesViewControllerDemo.git">MultiplePagesViewControllerDemo</a></p>

<!-- more -->


<h3>demo解释</h3>

<p>首先，创建<code>MultiplePagesViewController</code>的实例，并将其和其view加入到需要的view controller 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">addChildViewController</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>self.multiplePagesViewController</code>对应的getter函数如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">MultiplePagesViewController</span><span class="o">*</span><span class="p">)</span><span class="nf">multiplePagesViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_multiplePagesViewController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_multiplePagesViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MultiplePagesViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_multiplePagesViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_multiplePagesViewController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且，在<code>viewDidLayoutSubviews</code>中重新调整view的大小，以解决转屏等问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLayoutSubviews</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLayoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，只需要将你的UIViewController的实例加入<code>self.multiplePagesViewController</code>就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addDefaultPageViewControllers</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">vcCount</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vcCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SampleViewController</span> <span class="o">*</span><span class="n">svc</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SampleViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithText</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">multiplePagesViewController</span> <span class="nl">addViewController</span><span class="p">:</span><span class="n">svc</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MultiplePagesViewController</code>主要的两个接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  add a new &lt;UIViewController*&gt; instance</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param viewController</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addViewController:</span><span class="p">(</span><span class="bp">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="nv">viewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  remove an existing view controller by index</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  @param viewControllerIndex</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeViewController:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">viewControllerIndex</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，可以在<code>MultiplePagesViewController</code>的父view controller中实现下面接口，当切换page的时候做些其它事情，比如更新view controller的title信息等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">MultiplePagesViewControllerDelegate</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pageChangedTo</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">pageIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用node-xlsx进行excel文件的读写]]></title>
    <link href="http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module/"/>
    <updated>2016-03-04T14:54:54+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2016/03/04/parsing-and-write-excel-file-using-node-module</id>
    <content type="html"><![CDATA[<h3>解析excel文件</h3>

<p>在我的应用中需要对excel文件内容进行搜索，所以需要一个解析excel文件的插件。</p>

<p><a href="https://www.npmjs.com/package/node-xlsx">node-xlsx</a>插件可以让我们解析、修改、新建excel文件。</p>

<!-- more -->


<p>安装到所在文件夹：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install excel node-xlsx</span></code></pre></td></tr></table></div></figure>


<p>或者安装为全局应用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g excel node-xlsx</span></code></pre></td></tr></table></div></figure>


<p>然后就可以这样解析excel文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/myFile.xlsx&#39;</span><span class="p">);</span> <span class="c1">// parses a file </span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是一段样例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Include modules.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// read xlsx file and analyse</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">excelObj</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;fileName.xlsx&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">sheet</span> <span class="k">in</span> <span class="nx">excelObj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">sheet</span> <span class="o">!==</span> <span class="s1">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">excelObj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">sheet</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// sheet is &#39;0&#39;, &#39;1&#39;, ...</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">sheetData</span> <span class="o">=</span> <span class="nx">excelObj</span><span class="p">[</span><span class="nx">sheet</span><span class="p">].</span><span class="nx">data</span><span class="p">;</span> <span class="c1">// data inside a sheet, which is an two-dimention array</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">rowCount</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">activityCountDic</span><span class="p">[</span><span class="nx">sheet</span><span class="p">]</span> <span class="o">=</span> <span class="nx">rowCount</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rowCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">rowData</span> <span class="o">=</span> <span class="nx">sheetData</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// data inside one row, which is an one-dimention array</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">columnCount</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">columnCount</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">cellData</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// data in j column of the given row</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cellData</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>写入excel文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Include modules.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xlsx</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-xlsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 写入excel之后是一个一行两列的表格</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data1</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 写入excel之后是一个三行两列的表格</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;zhang san&#39;</span><span class="p">,</span> <span class="s1">&#39;10&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;li si&#39;</span><span class="p">,</span> <span class="s1">&#39;11&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">xlsx</span><span class="p">.</span><span class="nx">build</span><span class="p">([</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span><span class="nx">data1</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sheet2&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span><span class="nx">data2</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s1">&#39;book.xlsx&#39;</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flag&#39;</span><span class="o">:</span><span class="s1">&#39;w&#39;</span><span class="p">});</span> <span class="c1">// 如果文件存在，覆盖</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
