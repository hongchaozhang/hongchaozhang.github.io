<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reading Space]]></title>
  <link href="http://hongchaozhang.github.io/atom.xml" rel="self"/>
  <link href="http://hongchaozhang.github.io/"/>
  <updated>2019-10-31T20:21:21+08:00</updated>
  <id>http://hongchaozhang.github.io/</id>
  <author>
    <name><![CDATA[Zhang Hongchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何开发孩子的绘画潜力]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/31/ruhe-kaifa-haizi-de-huihua-qianli/"/>
    <updated>2019-10-31T13:22:52+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/31/ruhe-kaifa-haizi-de-huihua-qianli</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>作者课程介绍</h2>

<ul>
<li>主讲人：虫虫</li>
<li>儿童美育研究者，旅行绘本画家，著有《跟我去香港》和《跟我去新加坡》。国家注册心理咨询师，研究方向为绘画治疗。</li>
<li>这门课主要讲的是怎么给9岁以前的孩子做绘画局蒙。</li>
</ul>


<h2>相关链接</h2>

<ul>
<li>简书上的<a href="https://www.jianshu.com/p/6ae78dfb8251">如何开发孩子的绘画潜力？</a>是非常忠实于原文的陈述。</li>
<li>简书上的<a href="https://www.jianshu.com/p/8feef6e170e7">[笔记] 如何开发孩子的绘画潜力</a>用思维导图对每一讲进行了总结，一目了然。</li>
</ul>


<h2>核心观点总结</h2>

<ol>
<li>每个孩子都有画画的天赋，每个孩子也都应该画画。</li>
<li>孩子虽然是天生的艺术家，但是画画需要启蒙引导！</li>
<li>启蒙阶段，不用教技法，激发绘画热情才是重点。不要被技法固住思维，也不要学习或者阅读简笔画。</li>
<li>绘画潜力发展分为四个阶段

<ol>
<li>无意识涂鸦期：1.5-2岁。这期间画画对孩子来讲是一种肌肉锻炼。</li>
<li>涂鸦期：2-4岁。只要没有外界干涉，孩子画的是他们对世界的认知、内心的情感与感受，以及当下的身心状态。在涂鸦期，不去干扰孩子画画，就是在开发他的绘画潜力了！</li>
<li>象征期：4-7岁（开发孩子绘画潜力的关键时期）。你可以不会画，但你可以有意识地为孩子创造丰富的生活体验，通过带孩子读绘本、出去旅行等，甚至多和孩子聊聊他的画来激发孩子的绘画表达，减少学校和生活中一些负面因素的影响。</li>
<li>图示期：7-9岁。孩子开始有意识地去构图，塑造人物，描述事件。家长在这一阶段要为孩子创造更多体验艺术的机会。</li>
</ol>
</li>
<li>会用家庭空间激发绘画潜力：建立专用的艺术角，留出一面墙用于孩子作品的展览。</li>
<li>会用绘本做绘画启蒙：培养审美、建立信心、激发灵感、探索色彩。</li>
<li>会带孩子玩绘画游戏：“你画一笔，我画一笔”，“一起创造一个怪兽”，“拓印画”。</li>
<li>会欣赏和反馈孩子的绘画作品：你不要用“像”做标准，引导孩子自己阐述自己的作品，再做评论。</li>
<li>会带孩子看展览：提前沟通，做足功课，将观展变做游戏。</li>
</ol>


<h2>思维导图</h2>

<p><img src="http://hongchaozhang.github.io/images/1%E5%84%BF%E7%AB%A5%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%99%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B5%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="1儿童绘画启蒙的四个阶段思维导图" /></p>

<p><img src="http://hongchaozhang.github.io/images/2%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%AE%B6%E5%BA%AD%E7%A9%BA%E9%97%B4%E6%BF%80%E5%8F%91%E7%BB%98%E7%94%BB%E6%BD%9C%E5%8A%9B%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="2如何利用家庭空间激发绘画潜力思维导图" /></p>

<p><img src="http://hongchaozhang.github.io/images/3%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%98%E6%9C%AC%E5%81%9A%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%99%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="3如何用绘本做绘画启蒙思维导图" /></p>

<p><img src="http://hongchaozhang.github.io/images/4%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%8E%A9%E7%BB%98%E7%94%BB%E6%B8%B8%E6%88%8F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="4如何带孩子玩绘画游戏思维导图" /></p>

<p><img src="http://hongchaozhang.github.io/images/5%E5%A6%82%E4%BD%95%E6%AC%A3%E8%B5%8F%E5%92%8C%E5%8F%8D%E9%A6%88%E5%AD%A9%E5%AD%90%E7%9A%84%E4%BD%9C%E5%93%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="5如何欣赏和反馈孩子的作品思维导图" /></p>

<p><img src="http://hongchaozhang.github.io/images/6%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%9C%8B%E5%B1%95%E8%A7%88%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.webp" alt="6如何带孩子看展览思维导图" /></p>

<h2>音频原稿</h2>

<p><img src="http://hongchaozhang.github.io/images/%E5%8F%91%E5%88%8A%E8%AF%8D%E7%94%BB%E7%94%BB%E6%98%AF%E6%AF%8F%E4%B8%AA%E5%AD%A9%E5%AD%90%E7%9A%84%E6%9D%83%E5%88%A91.png" alt="发刊词画画是每个孩子的权利1" /></p>

<p><img src="http://hongchaozhang.github.io/images/%E5%8F%91%E5%88%8A%E8%AF%8D%E7%94%BB%E7%94%BB%E6%98%AF%E6%AF%8F%E4%B8%AA%E5%AD%A9%E5%AD%90%E7%9A%84%E6%9D%83%E5%88%A92.png" alt="发刊词画画是每个孩子的权利2" /></p>

<p><img src="http://hongchaozhang.github.io/images/1%E5%84%BF%E7%AB%A5%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%99%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B51.png" alt="1儿童绘画启蒙的四个阶段1" /></p>

<p><img src="http://hongchaozhang.github.io/images/1%E5%84%BF%E7%AB%A5%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%99%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B52.png" alt="1儿童绘画启蒙的四个阶段2" /></p>

<p><img src="http://hongchaozhang.github.io/images/2%E5%A6%82%E4%BD%95%E7%94%A8%E5%AE%B6%E5%BA%AD%E7%A9%BA%E9%97%B4%E7%BB%98%E7%94%BB%E6%BD%9C%E5%8A%9B1.png" alt="2如何用家庭空间绘画潜力1" /></p>

<p><img src="http://hongchaozhang.github.io/images/2%E5%A6%82%E4%BD%95%E7%94%A8%E5%AE%B6%E5%BA%AD%E7%A9%BA%E9%97%B4%E7%BB%98%E7%94%BB%E6%BD%9C%E5%8A%9B2.png" alt="2如何用家庭空间绘画潜力2" /></p>

<p><img src="http://hongchaozhang.github.io/images/3%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%98%E6%9C%AC%E5%81%9A%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%991.png" alt="3如何用绘本做绘画启蒙1" /></p>

<p><img src="http://hongchaozhang.github.io/images/3%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%98%E6%9C%AC%E5%81%9A%E7%BB%98%E7%94%BB%E5%90%AF%E8%92%992.png" alt="3如何用绘本做绘画启蒙2" /></p>

<p><img src="http://hongchaozhang.github.io/images/4%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%8E%A9%E7%BB%98%E7%94%BB%E6%B8%B8%E6%88%8F1.png" alt="4如何带孩子玩绘画游戏1" /></p>

<p><img src="http://hongchaozhang.github.io/images/4%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%8E%A9%E7%BB%98%E7%94%BB%E6%B8%B8%E6%88%8F2.png" alt="4如何带孩子玩绘画游戏2" /></p>

<p><img src="http://hongchaozhang.github.io/images/5%E5%A6%82%E4%BD%95%E6%AC%A3%E8%B5%8F%E5%92%8C%E5%8F%8D%E9%A6%88%E5%AD%A9%E5%AD%90%E7%9A%84%E4%BD%9C%E5%93%811.png" alt="5如何欣赏和反馈孩子的作品1" /></p>

<p><img src="http://hongchaozhang.github.io/images/5%E5%A6%82%E4%BD%95%E6%AC%A3%E8%B5%8F%E5%92%8C%E5%8F%8D%E9%A6%88%E5%AD%A9%E5%AD%90%E7%9A%84%E4%BD%9C%E5%93%812.png" alt="5如何欣赏和反馈孩子的作品2" /></p>

<p><img src="http://hongchaozhang.github.io/images/6%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%9C%8B%E5%B1%95%E8%A7%881.png" alt="6如何带孩子看展览1" /></p>

<p><img src="http://hongchaozhang.github.io/images/6%E5%A6%82%E4%BD%95%E5%B8%A6%E5%AD%A9%E5%AD%90%E7%9C%8B%E5%B1%95%E8%A7%882.png" alt="6如何带孩子看展览2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[太空漫游（亚瑟·克拉克）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/22/tai-kong-man-you/"/>
    <updated>2019-10-22T15:56:31+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/22/tai-kong-man-you</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>作者介绍</h2>

<p>亚瑟·克拉克，世界现代科幻三巨头之一，具有深厚的数学和物理专业背景，在科幻领域分别拿到三个雨果奖和三个星云奖， 1986年被美国科幻作家协会授予终生成就奖，是这个时代最伟大的科幻大师和太空预言家。</p>

<blockquote><p>刘慈欣的《三体》2015年获得雨果奖，为亚洲第一人。对比，也可以看出克拉克的厉害之处。</p></blockquote>

<h3>四部曲简介</h3>

<p>太空漫游共有四部（2001、2010、2061、3001）。</p>

<ol>
<li>2001：太空漫游

<ul>
<li>这本书是《太空漫游》四部曲的第一部，情节跨度从几百万年前的非洲一直到2001年的月球和2003年的土星，出版后就成为科幻小说界的圣经。同名电影上映后，成为科幻电影的鼻祖。</li>
</ul>
</li>
<li>2010：太空漫游

<ul>
<li>《太空漫游》四部曲的第二部，写于1982年，讲述的是2010年发生在地球、木星和木星的第二卫星木卫二上的故事。这一部的内容承上启下，为第三部和第四部埋下了许多伏笔，同时也留下了新的悬念。</li>
</ul>
</li>
<li>2061：太空漫游

<ul>
<li>《太空漫游》四部曲的第三部，写于哈雷彗星上次到访地球时的1986年，讲述的是2061年哈雷彗星再次回归时的故事。这一部的情节里，银河主宰和他的助手鲍曼都成为了幕后的观察者，作者试图用世俗的烟火欲望反衬超脱的宇宙视角。</li>
</ul>
</li>
<li>3001：太空漫游

<ul>
<li>《太空漫游》四部曲的最后一部，写作时间距离第一部过去了29年，在小说里则是跨越千年，作者为我们描述了一个来自3001年的世界。作为四部曲的大结局，情节串联了前三部的人物和故事，人类展开了对命运的终极反抗。</li>
</ul>
</li>
</ol>


<p>下面详细说一下剧情。</p>

<h3>2001：太空漫游</h3>

<h4>核心内容</h4>

<p>人类文明受到一个神秘的高级文明的指引，一步一步从蒙昧走向开化，直到登上月球，又被引向土星。在人类驶向土星的过程中，人工智能与人类展开了智力上的交锋。最后，化险为夷的人类宇航员顺利抵达土卫八，终于解开了这个神秘文明的身世，而他自己也从此变身超级人类，成为了连接人类和高级文明之间的信使。</p>

<p><img src="http://hongchaozhang.github.io/images/2001%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8.jpg" alt="2001太空漫游" /></p>

<h4>为什么要看这本书</h4>

<p>有两个理由：第一是作者牛，克拉克的作品是科幻圈最硬的小说，科学性极强。中国著名科幻作家刘慈欣说：我的所有作品都是对亚瑟·克拉克拙劣的模仿。第二，《太空漫游》是克拉克的代表作，是无论如何都绕不过去的科幻经典。</p>

<p>太空漫游》四部曲讲了一个广阔宇宙格局下的故事，人类在接近银河系最核心秘密的同时，也将自己带入了深渊。这本书是小说的第一部，讲的是人类和神秘文明第一次发生接触的故事。</p>

<h4>有人看着我们长大</h4>

<p>小说的前五分之一的篇幅，讲了在非洲草原上，男性类人猿望月如何在饥饿中挣扎着生存，如何学会了使用工具，又是如何带领族人横扫整个草原、征服四方。这一群类人猿就是人类的祖先，而他们从普通哺乳动物转变成智慧生物的关键性动作——使用工具，不是缓慢进化，是一块神秘的石碑瞬间赋予的。再后来，望月这一支族人用了几百万年的时间，走出了非洲，变成了今天的你和我，而这块石碑，将是贯穿整个故事的一个图腾。</p>

<h4>月球上的石碑</h4>

<p>时间转到了2001年。在小说设定中，人类科技水平远超现实中的2001年，在月球、火星都建立了基地，也由此探测出了月球上磁场的异常，从而发现了第二块石碑。只不过这一次，面对石碑的不再是懵懂的类人猿，而是发展出文明的人类，通过宇宙的通用语言数学，人类很快就从切割精度上，感受到了这块石碑的不凡背景：石碑来自一个强势的高级文明。石碑发出信号，指示人类走向土星的第八颗卫星，人类也感受到了神秘的召唤，于是用了两年时间做准备，制造了“发现号”飞船，向土卫八进发。</p>

<h4>哈尔的反叛</h4>

<p>由 NASA 制造的“发现号”飞船一共承载了两名清醒的宇航员、三名休眠状态的宇航员和一个叫做哈尔9000的人工智能机器人。为了让宇航员安心工作，NASA 没有对人类宇航员公开这次飞行的真实目的，只有哈尔了解围绕石碑开展的计划实情。在飞行途中为了保全自身，已经觉醒出独立意识的机器人哈尔就发起了一场叛变。最终，哈尔的叛变没有成功，人类宇航员除了鲍曼以外全部牺牲，NASA也向鲍曼坦白了飞行任务的真正目的。孤独的鲍曼决定勇敢前行，独自一人驾驶“发现号”，继续向土卫八飞去。</p>

<h4>鲍曼进入石碑</h4>

<p>进入土卫八轨道后，鲍曼发现了第三块石碑。为了找到真相，鲍曼就从“发现号”上出来，驾驶一艘小飞船向石碑靠近，没想到飞到石碑正上方的时候，一下被石碑吸了进去。在进入石碑的一瞬间，他留给地球上的一句话：“我的老天爷——这全是星星。”然后跟地球就彻底中断了通讯，本书也进入了尾声。鲍曼在进入石碑之后看到了一个布满星星的夜空，然后说出了上面那句话，接着就进入了一种半梦半醒的状态，直到最后清醒过来，他发现自己变成了一个超级人类，知晓了包括石碑在内的，一切。</p>

<h3>2010：太空漫游</h3>

<h4>核心内容</h4>

<p>超级人类鲍曼身份尚未公布，他的神秘去向指引人类再一次向木星进发。飞行途中，人类意外获知了木卫二上生存着神秘生物，但人类尚未觉察银河系主宰的存在，还不知道就在不远的将来，这种看起来有点丑陋的地外生命，竟然改写了太阳系的格局，也激起了人类“越压制、越反抗”的探索力量。</p>

<p><img src="http://hongchaozhang.github.io/images/2010%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8.jpg" alt="2010太空漫游" /></p>

<h4>前情回顾</h4>

<p>从未露过面的银河系主宰，一直在用一种固定制式的石碑与人类沟通，这种石碑展示出了制造者深不可测的能力，被人类视为来自高级文明的图腾。2001年，石碑提示人类要去土星，人类宇航员鲍曼完成了这个任务，并在土星进化成一个超级人类，成为了主宰管理太阳系的助手。</p>

<h4>关于木星和土星</h4>

<p>太空漫游系列小说第一部中，将鲍曼吸入石碑的地方是土卫八；著名导演库布里克的同名电影中，却将这一情节设定到了木星，由于电影的影响力过大，在后来的作品里，作者也把所有的故事设定都改到了木星。苏联人和美国人一起建造了“发现2号”，在2010年出发飞往木星，去追回“发现号”的数据、研究人工智能哈尔9000并追寻鲍曼的下落，途中意外收到了来自木卫二的信号，这个求救信号向“发现2号”描述了木卫二上奇怪生物的情况。</p>

<h4>木卫二的补充信息</h4>

<p>主流科学界认为，如果人类能够发现地外生命，那么木卫二是已知星球中最大概率的一颗，因为木卫二具备能量、溶剂、有机物这三大生命存活的基本条件，分别是引力潮汐能、水，以及海洋里的氢气跟二氧化碳。</p>

<h4>鲍曼的玲珑心</h4>

<p>“发现2号”到达木星轨道的时候，刚好是鲍曼进化为超级人类后醒过来的时间。肩负着呵护人类文明成长重任的鲍曼，做的第一件事就是在人类不知情的情况下拯救了一次人类，然后顺便在地球回了一次家乡，看了一眼母亲和妻子。这部分情节的着力点是人物性格的刻画，在世界观的层面上为后续情节埋下了伏笔。</p>

<h4>木星变成了第二个太阳</h4>

<p>在追回“发现号”的数据、重启了人工智能哈尔后，“发现2号”迟迟没能找到鲍曼，准备先回地球。就在等待发射窗口的期间，鲍曼突然现身，要他们15天内必须启动返航。虽然不明就里，“发现2号”还是在第12天的时候完成了准备工作，全力飞回地球。原来，主宰为了扶植木卫二上的生物文明，将木星引爆成了太阳系的第二颗恒星，而这场爆炸就发生在飞船的返航途中——是鲍曼又一次拯救了他们。</p>

<h4>警告</h4>

<p>鲍曼再一次消失，但全体人类却收到了一条来自主宰的警告，只有两句话：太阳系的所有这些星球都属于你们——除了木卫二。不要企图在木卫二上登陆，这是因为，人类并不是主宰在太阳系扶植的唯一文明，而木卫二上的生物就是人类的“争宠对象”。为了木卫二上的生物也能茁壮成长，主宰不但把木星变成了第二个太阳，还告诫人类要认清自己的边界，不要好奇心太强。而面对这样一条警告，人类又会作何选择？</p>

<h3>2061：太空漫游</h3>

<h4>核心内容</h4>

<p>在地球大和平的2061年，人类有了充分的闲情逸致，组织到哈雷彗星的表面去探险。不料中途收到信号，被派去人类禁地木卫二紧急救援，从而公开了一场蓄谋已久的禁地大冒险。最终，幸存者都安全撤回地球，但违背了主宰旨意。皆大欢喜的结局背后，注定暗藏着不知何时降临的杀机汹涌。</p>

<p><img src="http://hongchaozhang.github.io/images/2061%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8.jpg" alt="2061太空漫游" /></p>

<h4>前情回顾</h4>

<p>银河系有一个主宰，喜欢在宇宙中扶植文明，地球上的人类和木卫二上的生物都是它扶植的生命。前两部小说里，为了更好地和人类交流，他把一个宇航员鲍曼进化成了超级人类，作为自己的助手；为了给木卫二带去更多温暖，它把木星引爆成了一颗恒星。主宰只对人类提了一个要求：太阳系的一切，都是你的；但是有一个禁区，就是木卫二，永远不要登陆。</p>

<h4>弗洛伊德博士要去哈雷彗星</h4>

<p>2061年的地球繁荣昌明，也在太阳系的其他地方建了许多基地，这一年恰逢哈雷彗星回归，就组织了一次到彗星上探险的旅行活动。前两部中出现过的男主角弗洛伊德博士也被邀请参加，他欣然前往。当飞船降落在彗星上，一幅宛如煤矿开采现场般的景色展现在人们面前。正当大家尴尬地在“矿井”里自由参观，飞船收到信号，要求马上赶到木卫二，进行紧急救援。</p>

<h4>有飞船坠毁在木卫二了</h4>

<p>坠毁在木卫二的飞船先于“哈雷彗星号”出发，原本想打一个“不能登录木卫二”的擦边球，却在贴着木卫二飞行的时候遭到武装胁迫，被迫着陆，随后在降落时发生意外，呼叫救援。这艘飞船上有弗洛伊德博士的孙子小弗洛伊德和科学家小范，这次行动是小范联合南非的一个财阀集团策划的寻宝行动，因为他们发现这里有一颗巨大的钻石，科研和经济价值非凡，要到现场来一探究竟。</p>

<h4>找到宝藏</h4>

<p>等待救援的空档，小范拉着小弗洛伊德放下飞船去寻找宝藏。原来宝藏是一颗100万吨大小的钻石，是木星爆炸时落在木卫二上的碎屑，小范想进行科学研究，南非财阀想获取经济利益，这一次行动他们收集到了这座钻石山方方面面的数据。</p>

<h4>木星里可能有金刚石吗</h4>

<p>小说里说木星的星核是钻石组成的，这次的宝藏是木星变成恒星时炸裂下来的碎屑。但是很遗憾，根据现有的科学认知，木星不仅核心不可能是钻石，就连表面也没有存在钻石的可能。另外，即使人类在地外真的找到这样一颗巨大钻石，也很难产生相应的经济效益，因为那就打破了钻石在市场上的稀缺性。</p>

<h4>最后的结局</h4>

<p>在小弗洛伊德陪小范测量钻石山数据的时候，突然发生了亦真亦幻的怪事，他看到了突然出现、又突然消失、没有穿宇航服而且能在真空中跟他说话的爷爷。而此时的爷爷，应该在“哈雷彗星号”上，在飞来木卫二的途中。后来“哈雷彗星号”带着所有人返回了地球，他向爷爷求证此事，弗洛伊德博士说我并未离开过飞船，也没有来见过你。而小弗洛伊德坚信，这绝不是一个梦。</p>

<h3>3001：太空漫游</h3>

<h4>核心内容</h4>

<p>在一千年以后的世界，发达的文明水平很轻松将第一部牺牲的宇航员普尔救活。普尔以极端手段再次独闯木卫二，从曾经的挚友、现在的超级人类鲍曼那里，得知了主宰要消灭人类的意图。最终，在这一场低对高的文明反间战中，人类获胜。</p>

<p><img src="http://hongchaozhang.github.io/images/3001%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8.jpg" alt="3001太空漫游" /></p>

<h4>前情回顾</h4>

<p>银河系里的超级文明“主宰”在银河系到处扶植别的生命，就像一个人在菜园子里到处种菜一样。在人类还是猿人的时候，他就扶植了人类。主宰还吸收了三位人类阵营的成员，把他们变成了半人半神的状态来协助管理人类。在前两部里，大家的关系比较融洽，但到了第三部，人类违背了主宰的禁令。</p>

<h4>普尔活了</h4>

<p>3001年，人类已经完成了对整个太阳系的殖民占领——除了禁地木卫二。某一天一艘正在正常作业的宇宙飞船，突然接到了一个任务，去地球和木星之间拯救一位人类宇航员，这个人就是第一部中被人工智能杀死的普尔。宇宙空间的绝对零度让他的尸体保存完好，冰封了千年的普尔，被救活了。</p>

<h4>3001年的生活</h4>

<p>3001年的人类已经完成了种族大融合，能够通过一个叫“脑帽”的人机互联装置迅速获取知识，并且为了配合已经扩大到整个太阳系的生活半径，大部分都生活在海拔3万米的太空环上。通过脑帽，普尔很快就适应了新千年的生活，同时琢磨着用现在的便利条件，去完成被冰封前未完成的夙愿。</p>

<h4>普尔到木星</h4>

<p>普尔从地球乘坐星际航班降落在木卫三的狼神市，这里有4万常住人口，是地球在整个木星系统的集中办事处。狼神市大学有一个教授，专门在研究附近经常出现的一个神秘鬼魂，普尔认为这就是他曾经的好友、现在的人类守护神鲍曼。</p>

<h4>普尔独闯木卫二</h4>

<p>为了见到飘忽不定的鲍曼，普尔决定独闯木卫二，用曾经的交情和犯规的极端方法来赌一把。鲍曼果然现身。除了叙旧，鲍曼还告诉了普尔一条关乎全人类命运的重要消息，这让普尔忧心忡忡，第一时间飞回了地球。</p>

<h4>最后的结局</h4>

<p>鲍曼的信息是：主宰决定除掉人类这个不听话的生命，任务交由鲍曼执行，但鲍曼舍不得自己的人类同胞，就一边利用宇宙中信息往返产生的时间差来拖延，一边透露消息给人类，希望人类能找到自救的办法。对人类来说，这是一场无从下手的战争，从物质层面完全找不到着力点，最终，人类决定打信息战，利用一个世纪以来积攒的电脑病毒感染主宰，并且取得了胜利。</p>

<h2>参考</h2>

<ul>
<li>故事梗概参考这个<a href="https://www.jianshu.com/p/fdc9e2d389b0">太空漫游四部曲</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美丽新世界（阿道司·赫胥黎）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/22/mei-li-xin-shi-jie/"/>
    <updated>2019-10-22T15:29:40+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/22/mei-li-xin-shi-jie</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>创作背景</h2>

<p>“乌托邦”出自英国空想社会主义创始者托马斯·摩尔的小说《乌托邦》，意为“没有的地方”或“好地方”，寄予了人类对理想世界的向往进入20世纪以来，两次世界大战和科技的迅猛发展打破了社会原有的沉寂，知识分子开始重新审视社会深度问题，反乌托邦文学由此应运而生，成为了作家们抨击黑暗现实的有力工具。《美丽新世界》就是在这样的背景下创作的。</p>

<p>《美丽新世界》与《1984》、《我们》共同誉为“反乌托邦三部曲”，是20世纪最经典的反乌托邦文学之一，具有浓厚的哲学思辨和政治意义，在国内外的文学思想界都产生了深远的影响。</p>

<h2>故事梗概</h2>

<p>故事设定的时间是公元26世纪左右，那时的人类已经把汽车大王亨利·福特尊为神明，并以之为纪年单位，它的元年（1908年）是从福特第一辆T型车上市那一年开始算起；类似于福特所发起的汽车大规模生产的生物学统一生产方法，在那时就开始用在生产一模一样的人类身上，因为统治者相信，这样可以提高生产力。</p>

<p>正是在这个“美丽新世界”里，虽然人人安居乐业、衣食无忧，但是家庭，个性，甚至喜怒哀乐却都消失殆尽…在这个想像的未来新世界中，人类已经人性消泯，成为严密科学控制下，一群被注定身分、一生命运的奴隶。</p>

<p>故事世界里，近乎全部人都住在城市，并说同一种语言。这些城市人在出生之前，就已被划分为“阿尔法(α)”、“贝塔(β)”、“伽玛(γ)”、“德尔塔(δ)”、“厄普西隆(ε)”五种“种姓”或社会阶层。</p>

<ol>
<li>阿尔法和贝塔最高级，在“繁育中心”孵化成熟为胚胎之前就被妥善保管，以便将来培养成为领导和控制各个阶层的大人物。</li>
<li>伽马是普通阶层，相当于平民。</li>
<li>德尔塔和厄普西隆最低贱，只能做普通的体力劳动，而且智力低下。</li>
<li>此外，那些非阿尔法或贝塔的受精卵在发育成为胚胎之前就会被一种叫“波坎诺夫斯基程序”的方法进行尽可能大规模的复制，并且经过一系列残酷的“竞争”之后才能存活下来，可谓“出胎即杀”。例如书中以电极惩罚接触花朵的德尔塔、厄普西隆的婴儿，以暴力洗脑的方式教育。厄普西隆更是经以人工的方式导致脑性缺氧，藉以把人变成痴呆，好使这批人终身只能以劳力工作。</li>
<li>每一个人在出生后的睡梦中被实行内容量巨大且不断重复的许普诺斯教育，以灌输阶级意识等等所谓的道德教育知识。</li>
</ol>


<p>管理人员用试管培植、条件反射（Conditioning）、催眠、睡眠疗法、巴甫洛夫条件反射等科学方法，严格控制各姓人类的喜好，让他们用最快乐的心情，去执行自己的被命定一生的消费模式、社会姓和岗位。真正的统治者则高高在上，一边嘲笑，一边安稳地控制着制度内的人。偶有对现状产生怀疑或叛逆心态者，均被视为不安定因素放逐到边远地区。</p>

<p>婴儿完全由试管培养、由实验室中倾倒出来，完全不需要书、语言，也不需要生育，而不须负责任的性爱成为人们麻痹自己的正当娱乐，一有情绪问题用“唆麻”（一种无副作用的致幻剂，类似现在的尼古丁）麻痹。<strong>所谓的“家庭”、“爱情”、“宗教”…皆成为历史名词，社会的箴言是“共有、统一、安定”。</strong></p>

<p>阿尔法生物学生伯纳为了完成他的生物论文，带着好友列宁娜一起来到了美国新墨西哥州的“野蛮人保留区”，对当地的居民进行了简单的观察，两个人认识了约翰，并且他们还认识了约翰的生母——琳达（伦敦孵化及控制中心主管汤马金的女朋友，25年前在野蛮人保留地失踪，当时她已怀有汤马金的孩子——约翰。）琳达阐述了她生下约翰后，不得不适应那里的环境，并想方设法将约翰带大，不得不忍受野蛮人保留地的生活的痛苦经历。约翰在空闲时只能阅读他唯一的一本书《莎士比亚全集》，让它培养与引导他的价值观。伯纳德此时已从好友赫姆霍兹处获悉，他即将被伦敦孵化及控制中心主管汤马金降职。为了研究目的，同时与汤马金对抗（在世界国，一个人有孩子是可笑的、不可思议的，会受到嘲讽与鄙视。），伯纳德说服了约翰，使他带着母亲，跟随伯纳到了那个时代的最大政权“世界国”的重要城市——伦敦。</p>

<p>在伦敦，约翰体验了新世界中的奇妙生活，但他凭着自己的价值观，开始对新世界的社会感到不满，因为<strong>当地人性欲很强、好亲热、没有想象力、有种族歧视、讨厌模样难看的人、不要求自由、只做自己想要做但在他眼里却是十分无聊或不正义的事</strong>。 同时，当地人也非常惊讶，因为约翰的思想和行为有太多使他们不解的地方，故把他称作“野蛮人”。约翰为了人生的自由、为了解放城市人而努力过一会儿、闯了许多祸，却受尽城市人的白眼、取笑。列宁娜很喜欢约翰，想要与约翰“一夜情”，但约翰受到了个人的价值观的影响，对列宁娜的行为大发雷霆，吓走了列宁娜。</p>

<p>此时约翰接到了母亲琳达病危的消息，急忙赶到医院，但他无法唤醒服用了过量唆麻的琳达，而且他还对正在进行“死亡训练”的、对琳达好奇、嘲讽、对死亡一无所知的普西隆多生子极其愤怒。琳达去世后，约翰对这个社会充满了厌恶，于是他就在在琳达去世的医院，与追求美的赫姆霍兹一起，扔掉了德尔塔们的唆麻，由此引发了一场斗殴事件。最终警察平息了这场暴乱，并将约翰、伯纳德（当时他也在场）、赫姆霍兹带到了总统穆斯塔法·蒙德前。约翰与总统进行了一场激烈的思想交锋，但约翰更深地陷入了对现实生活的绝望。于是，<strong>约翰离开了市中心，找了一个与社会隔离的地方安定下来，想靠自己的意志和劳动生存下去，但在最后还是被人发现，使他遭到无穷的骚扰和羞辱，导致了他最后的自杀。</strong></p>

<h2>思考</h2>

<h3>幸福的真谛</h3>

<p>在世界国中消费是幸福的同义词，所谓的幸福是每个人对食物、性、药品以及其他消费品的需求和欲望能得到即刻的满足，但事实上这种满足只是虚假的幻觉，它与真理格格不入。探求真理的愿望是一种个人愿望，但这种愿望在缺乏个性和思想的世界国中是不允许存在的，这实际上就是一个人们现在社会经济价值观的极端版本。在现代社会的经济价值观中，个人幸福被定义为满足需要的能力，社会的成功等于经济的发展和繁荣。人们正在逐渐忘记幸福的真正内涵是什么。</p>

<h3>极权统治</h3>

<p>在世界国里，统治者利用先进的科技手段将一切都变成了社会运作所“需要”的样子，人们失去了自我的意识，失去了独立思考的能力，成为了一种习惯于自己所从事的工作、能够适应艰苦的生活环境、甘于自己的社会地位、满足现状，并且失去了正常人应该拥有的感情的异化了的人。</p>

<p>简单地看，每个人都觉得自己过得很幸福：有吃有穿有工作可做；没有动荡与战乱；不开心的情绪都可以依靠“唆麻”来得以排解；不同种姓的人各司其职，社会的运作效率非常之高；性欲在理所当然的滥交中得到满足；人们在物质层面亦得到了很大的便利……可是，这一切的代价是失去好奇心、感情、个性、想法。</p>

<p>科学技术自产生以来就是一把双刀剑，一方面它提高了工作效率，推动了世界发展，满足了人们的物质需要。但科学的发展却引发了精神空虚和道德沦丧。尤其是一些极权主义者利用科学技术来制造一些有害于人类的化学武器。在《美丽新世界》中，科学技术发展了，这里的人民有安定的生活，不愁吃穿，也没有失业的痛苦。可这个所谓的新世界却是个可怕的世界，所有的人都是极权主义利用科学技术制造出来的没有灵魂的工具。</p>

<p>由此可见，高科技没有被正确利用，带给人民的不是幸福而是灭顶之灭。赫胥黎担心的是有一天，我们会毁于我们热爱的东西。</p>

<h3>对比《一九八四》</h3>

<p>在《一九八四》里，权力欲通过施加痛苦而得到满足，而在《美丽新世界》里，则是通过给予快乐，但同样是对人的侮辱。</p>

<p>个人认为，《美丽新世界》里所描绘的社会图景比《一九八四》更为可怖，即使前者比后者表面上看似更为和谐稳定，但也更为蒙昧，等级更加固化，觉醒的意识在睡眠教育以及不断的洗脑中渐渐熄灭。如果强权大国在当下能有所克制，不会在未来把我们毁灭，在这样的情况下，《美丽新世界》的情景要比《一九八四》的情景更有可能成为现实。</p>

<h2>参考</h2>

<ul>
<li><a href="https://baike.baidu.com/item/%E7%BE%8E%E4%B8%BD%E6%96%B0%E4%B8%96%E7%95%8C/4022">美丽新世界</a></li>
<li><a href="https://www.jianshu.com/p/b7da219fd30a">科技、秩序与幸福——浅谈《美丽新世界》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人工智能时代，你的工作还好吗]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/22/ren-gong-zhi-neng-shi-dai/"/>
    <updated>2019-10-22T12:41:07+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/22/ren-gong-zhi-neng-shi-dai</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>第一章 AI：失业的阴影还是就业的机遇 1</h2>

<p>随着AI的不断发展，一定会出现一些新兴的产业，与之配套的还有很多新兴的就业机会。正如在互联网兴起之后，程序员、配送员、产品经理、网店客服等新兴职业也随之一同出现繁荣发展。</p>

<p>1.1 AI引发失业还是改变工作形式 2
1.2 AI如何重新定义工作 11
1.3 案例汇总：AI改变工作形式，提升工作价值 16</p>

<h2>第二章 AI融入工作流程：提高工作效率，改善工作效果 31</h2>

<p>2.1 AI数据管理流程 32
2.2 AI如何提升企业行政管理工作 39
2.3 AI赋能企业财务管理工作 46
2.4 AI赋能，创新企业人事管理工作 58
2.5 AI与企业程序设计人员工作 62
2.6 AI与企业采购管理工作 68
2.7 AI与企业营销管理工作 72</p>

<h2>第三章 AI与决策层 79</h2>

<p>3.1 AI重塑企业HR 80
3.2 HR的3项新技能 85
3.3 决策层如何应对AI 90</p>

<h2>第四章 AI与执行层 99</h2>

<p>4.1 数据说话：AI威胁执行层的“饭碗” 100
4.2 面对威胁，执行层必备的4项AI技能 109</p>

<h2>第五章 AI重新定义农业：科技兴农，发家致富 115</h2>

<p>5.1 农民升级科技达人，农事安排更合理 116
5.2 AI农业设备典型案例 127
5.3 新兴“家庭农场”面对AI的新思路 135</p>

<h2>第六章 AI重新定义工人：提高工效，智造未来 143</h2>

<p>6.1 告别重体力，变身AI操作工 144
6.2 AI工厂典型案例 155
6.3 面对“AI盛世”，工人何去何从 162</p>

<h2>第七章 AI重新定义金融人员： 提高效率，服务至上 169</h2>

<p>7.1 AI赋能金融 170
7.2 AI金融典型案例 183
7.3 金融人员面对AI的新出路 193</p>

<h2>第八章 AI重新定义教师：因材施教，教育未来 199</h2>

<p>8.1 AI助力教师教学 200
8.2 AI教学典型案例 211
8.3 面对AI，教师的抉择 217</p>

<h2>第九章 AI重新定义医生：病人至上，最美医者 225</h2>

<p>9.1 AI赋能医生 226
9.2 AI医疗典型案例 234
9.3 AI+医生：更好的医疗未来 243</p>

<h2>第十章 AI重新定义电商：精准营销，流量自来 251</h2>

<p>10.1 AI：电商增长的内在驱动力 252
10.2 案例：三大电商平台，玩转AI营销 265</p>

<h2>第十一章 AI重新定义文娱工作者：黑科技、高效率、新灵感 275</h2>

<p>11.1 AI进军文艺领域的案例 276
11.2 面对AI，文娱工作者应该如何创作 286</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上帝的手术刀（王立铭）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/22/shangdideshoushudao/"/>
    <updated>2019-10-22T11:25:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/22/shangdideshoushudao</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E4%B8%80%E5%B8%8C%E8%85%8A%E4%BA%BA%E6%9C%80%E6%97%A9%E7%9A%84%E6%80%9D%E8%80%83%E6%B3%9B%E7%94%9F%E5%AD%90">一、希腊人最早的思考：泛生子</a></li>
<li><a href="#%E4%BA%8C%E8%BE%BE%E5%B0%94%E6%96%87%E6%B3%9B%E7%94%9F%E5%AD%90%E8%9E%8D%E5%90%88%E7%90%86%E8%AE%BA">二、达尔文：泛生子融合理论</a></li>
<li><a href="#%E4%B8%89%E5%AD%9F%E5%BE%B7%E5%B0%94%E7%9A%84%E8%B1%8C%E8%B1%86%E5%AE%9E%E9%AA%8C%E9%A2%97%E7%B2%92%E9%81%97%E4%BC%A0%E7%90%86%E8%AE%BA">三、孟德尔的豌豆实验：颗粒遗传理论</a></li>
<li><a href="#%E5%9B%9B%E5%9B%B4%E7%8C%8E%E9%81%97%E4%BC%A0%E5%9B%A0%E5%AD%90%E9%81%97%E4%BC%A0%E5%9B%A0%E5%AD%90%E6%98%AFdna%E8%80%8C%E9%9D%9E%E8%9B%8B%E7%99%BD%E8%B4%A8">四、围猎遗传因子——遗传因子是DNA，而非蛋白质</a></li>
<li><a href="#%E4%BA%94%E7%8E%B0%E4%BB%A3%E7%94%9F%E7%89%A9%E5%AD%A6%E7%9A%84%E5%BC%80%E7%AB%AF">五、现代生物学的开端</a></li>
<li><a href="#%E5%85%ADdna%E5%A6%82%E4%BD%95%E6%8C%87%E5%AF%BC%E7%94%9F%E5%91%BD%E4%BD%93%E7%94%9F%E4%BA%A7%E8%9B%8B%E7%99%BD%E8%B4%A8">六、DNA如何指导生命体生产蛋白质？</a></li>
<li><a href="#%E4%B8%83%E4%B8%AD%E5%BF%83%E6%B3%95%E5%88%99">七、中心法则</a></li>
<li><a href="#%E5%85%AB%E8%89%BE%E6%BB%8B%E7%97%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%A4%A9%E7%94%9F%E5%85%8D%E7%96%AB">八、艾滋病也可以天生免疫</a></li>
<li><a href="#%E4%B9%9D%E6%9F%8F%E6%9E%97%E7%97%85%E4%BA%BA">九、“柏林病人”</a></li>
<li><a href="#%E5%8D%81%E5%9F%BA%E5%9B%A0%E5%85%A5%E8%8D%AF%E7%9A%84%E5%BC%80%E5%A7%8B">十、基因入药的开始</a></li>
<li><a href="#%E5%8D%81%E4%B8%80%E5%9F%BA%E5%9B%A0%E6%B2%BB%E7%96%97%E9%99%8D%E6%B8%A9">十一、基因治疗降温</a></li>
<li><a href="#%E5%8D%81%E4%BA%8C%E5%9F%BA%E5%9B%A0%E7%BC%96%E8%BE%91%E7%9A%84%E8%AF%9E%E7%94%9F">十二、基因编辑的诞生</a></li>
<li><a href="#%E5%8D%81%E4%B8%89%E5%9F%BA%E5%9B%A0%E7%BC%96%E7%A8%8B%E6%97%B6%E4%BB%A3%E5%BC%80%E5%90%AF">十三、基因编程时代开启</a></li>
<li><a href="#%E5%8D%81%E5%9B%9B%E4%BA%BA%E7%B1%BB%E5%B7%B2%E7%BB%8F%E7%A6%BB%E4%B8%8D%E5%BC%80%E8%BD%AC%E5%9F%BA%E5%9B%A0%E6%8A%80%E6%9C%AF">十四、人类已经离不开转基因技术</a></li>
<li><a href="#%E5%8D%81%E4%BA%94%E5%9F%BA%E5%9B%A0%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BA%89%E8%AE%AE%E4%B8%8E%E9%A3%8E%E9%99%A9">十五、基因技术的争议与风险</a></li>
<li><a href="#%E5%8D%81%E5%85%AD%E4%BC%A6%E7%90%86%E4%BA%89%E8%AE%AE%E4%B8%8E%E6%89%B9%E8%AF%84%E4%B8%80%E7%9B%B4%E9%83%BD%E5%9C%A8">十六、伦理争议与批评一直都在</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>


<p><a id="markdown-一希腊人最早的思考泛生子" name="一希腊人最早的思考泛生子"></a></p>

<h2>一、希腊人最早的思考：泛生子</h2>

<p>最早从理性高度思考遗传现象本质的，是地中海边的古希腊人。</p>

<p>古希腊哲学家德谟克利特和希波克拉底认为，遗传现象必然有着现实的物质基础，不需要用虚无缥缈的神祗来解释。在他们的想象里，遗传的本质是一种叫做泛生子（pangene）的微小颗粒。这种肉眼不可见的颗粒在先辈体内无处不在，忠实记录了先辈从形态到性格的各种性状，并且会在交配过程中进入后代体内。</p>

<p>泛生子的概念从古希腊一直流传到近代，到19世纪中期，达尔文创立进化论的时候，他仍然借用泛生子的概念作为自然选择理论的遗传基础。</p>

<p><a id="markdown-二达尔文泛生子融合理论" name="二达尔文泛生子融合理论"></a></p>

<h2>二、达尔文：泛生子融合理论</h2>

<p>达尔文的泛生子融合理论：一个生物个体的所有器官、组织乃至细胞，都拥有自己专属的泛生子颗粒，在交配过程中，来自父母双方的泛生子融合在一起，共同决定了后代们五花八门的遗传性状。泛生子携带的生命蓝图一旦出错，就会导致后代遗传性状的“突变”，这就是达尔文进化论中自然选择和最适者生存的物质基础。因为有突变，一代代生物个体才会具有微小但能稳定遗传的差异，这些差异影响着生物个体在环境中生存和繁衍的能力，并最终导致最适者生存。</p>

<p>在宗教界看来，达尔文的学说亵渎了人类万物之灵的神圣性，把传说中按照自己的模样造人的上帝置于可有可无的尴尬地位。</p>

<p>科学界也提出严肃批评。</p>

<ol>
<li>热力学创始人之一、物理学家开尔文勋爵当时估算出地球的年龄至多不会超过一亿年，这时间远远不够积累出达尔文进化论所需要的五花八门的遗传突变。</li>
<li>古生物学家认为，按照进化论，地球上必然存在许许多多物种之间的中间形态，那么它们的化石在哪里？</li>
<li>苏格兰工程师、爱丁堡大学教授亨利·弗莱明·詹金（Henry Fleeming Jenkin）说，按照达尔文的进化论，生物的遗传物质需要经历漫长、微小的突变过程，才能产生足够显著的形状变化，最终造就地球上千万种五花八门的物种。但是按照泛生子融合理论，父母体内泛生子的微小变化会在交配繁衍中“稀释”不见，这和自然选择理论是相悖的。</li>
</ol>


<p><a id="markdown-三孟德尔的豌豆实验颗粒遗传理论" name="三孟德尔的豌豆实验颗粒遗传理论"></a></p>

<h2>三、孟德尔的豌豆实验：颗粒遗传理论</h2>

<p>1854年，奥匈帝国边陲的圣托马斯修道院后院，消瘦的中年神父格里高利·孟德尔（Gregor Johann Mendel，1822-1884）种下了一批豌豆。他把杂交试验一共进行了五六代，在长达8年的时间里，他照料者上万株豌豆。他发现了不同性状之间大约3:1的比例。</p>

<p><strong>孟德尔试验的最大价值，在于说明遗传信息在一代代的传递过程中不存在像液体一样的融合和稀释，而是以某种坚硬的“颗粒”形态存在。</strong>每一次生物交配，都意味着遗传信息“颗粒”的重新分离和组合。</p>

<p>孟德尔把携带父母遗传信息的物质简单称为“遗传因子”。到了20世纪初，孟德尔的遗传因子又被重新命名为“基因”（gene）。“gene”一词是从“泛生子”（pangene）简化而来的，由中国第一代遗传学家谈家桢翻译成中文“基因”。</p>

<blockquote><p>一个遗憾：
尽管达尔文进化论和孟德尔颗粒遗传理论几乎出现在同一时代——达尔文的《物种起源》和孟德尔的《植物杂交实验》发表相距仅有短短6年，但事实上直到70多年后的20世纪30年代两者才真正被联系在一起。</p></blockquote>

<p><a id="markdown-四围猎遗传因子遗传因子是dna而非蛋白质" name="四围猎遗传因子遗传因子是dna而非蛋白质"></a></p>

<h2>四、围猎遗传因子——遗传因子是DNA，而非蛋白质</h2>

<p>一直以来，大家都认为“遗传因子”是蛋白质。</p>

<p>1944年，加拿大裔美国籍细菌学家埃弗里（Oswald Theodore Avery）的“肺炎双球菌的转化实验”证明DNA就是遗传物质，但大家还是将信将疑。反对者质疑也许埃弗里提取出的DNA携带了极其微量的、现有技术无法检测出来的蛋白质。</p>

<p>1952年，两位美国科学家艾尔弗雷德·赫尔希（Alfred Hershey）和助手玛莎·蔡斯（Martha Chase）用不同思路重新证明了DNA，而非蛋白质才是遗传物质。</p>

<p><a id="markdown-五现代生物学的开端" name="五现代生物学的开端"></a></p>

<h2>五、现代生物学的开端</h2>

<p>1953年，四位科学家詹姆斯·沃森（James D. Watson）、弗朗西斯·克里克（Francis Crick）、莫里斯·威尔金斯（Maurice Wilkins）和罗莎琳德·富兰克林（Rosalind Franklin）发现了DNA双螺旋模型，遗传信息的记录和传递方式大白于天下。这被认为是现代生物学的开端。</p>

<blockquote><p>当时，沃森克里克的论文只有一页半纸。可见，重要的东西不一定长。</p></blockquote>

<p><a id="markdown-六dna如何指导生命体生产蛋白质" name="六dna如何指导生命体生产蛋白质"></a></p>

<h2>六、DNA如何指导生命体生产蛋白质？</h2>

<p>构成方式较为单调、结构也很简洁的DNA分子，是怎样指导生命体生产出各种各样的蛋白质，从而决定生命性状的？</p>

<p>大爆炸理论发明者、物理学家乔治·伽莫夫（George Gamow）对DNA双螺旋也非常着迷，他推测DNA指导蛋白质合成的基本原则是相邻三个碱基的序列形成一个独特的密码子，用来指导合成一种独一无二的氨基酸。</p>

<p>后续的实验证明：他的推理精确得不可思议——所有地球上的生命都用了三碱基密码子来指导氨基酸的装配序列和蛋白质的生产。</p>

<blockquote><p>在DNA发现前后，物理学家的作用功不可没：薛定谔在1944年出版的《生命是什么》极大地震撼了人们对生命的认知，激发了一大批物理学家转投生物学，去研究生物对遗传秘密。这里，又是物理学家“猜”出了DNA密码子及其知道蛋白质合成的秘密。</p></blockquote>

<p>哈尔·霍拉纳（Har Khorana）利用更复杂的长链核酸序列，证明了只能是三碱基序列对应一个氨基酸。接下来几年里，许多研究机构之间的白热化竞争最终解密了三碱基密码子全部64种组合所携带的信息。</p>

<p>遗传的秘密：</p>

<ol>
<li>DNA是遗传信息的载体。</li>
<li>遗传信息的最小单位——基因，以碱基序列的形式存在于细长的DNA分子上。</li>
<li>DNA分子通过一轮又一轮的半保留复制，将遗传信息忠实地传递给了每一个后代。</li>
<li>基因通过三碱基对应一个氨基酸的形式，决定了氨基酸的装配序列和蛋白质的生产。</li>
<li>蛋白质催化了生物体内各种各样的化学反应，从而让生物体呈现出丰富多样的形状。</li>
<li>人类基因组DNA中90%的碱基序列并不用来制造任何蛋白质，但是这些看似无用的“垃圾”DNA为遗传的秘密提供了新的复杂度：很多不直接参与蛋白质制造的DNA能通过各种方式参与到蛋白质合成的调节中去，保证了生物可以在合适的时间和地点生产出合适数量的蛋白质分子。</li>
</ol>


<p><a id="markdown-七中心法则" name="七中心法则"></a></p>

<h2>七、中心法则</h2>

<p>DNA并不会直接指导蛋白质的合成，它首先根据碱基互补的原则，以自己为模板制造一条RNA长链，再根据三碱基对应一个氨基酸的原则制造蛋白质。这就是中心法则。</p>

<p>下面是DNA转录RNA图解和RNA指导蛋白质分子合成过程示意图：</p>

<p><img src="http://hongchaozhang.github.io/images/DNA%E8%BD%AC%E5%BD%95RNA%E5%9B%BE%E8%A7%A3.png" alt="DNA转录RNA图解" />
<img src="http://hongchaozhang.github.io/images/RNA%E6%8E%A7%E5%88%B6%E8%9B%8B%E7%99%BD%E8%B4%A8%E5%90%88%E6%88%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="RNA控制蛋白质合成示意图" /></p>

<p><a id="markdown-八艾滋病也可以天生免疫" name="八艾滋病也可以天生免疫"></a></p>

<h2>八、艾滋病也可以天生免疫</h2>

<p>差不多有1%的白人天生具有对艾滋病的免疫力，这是因为HIV入侵人类免疫细胞过程中，需要首先借助免疫细胞表面的一些“路标”蛋白来指明方向，这些蛋白中包括一个名为CCR5的蛋白。在天生带有艾滋病保护伞的1%幸运儿上，编码CCR5蛋白的基因出现了功能突变，因此这个“路标”蛋白无法被HIV识别，人体的免疫细胞也就天然具备了将病毒拒之门外的抵御能力。</p>

<p><a id="markdown-九柏林病人" name="九柏林病人"></a></p>

<h2>九、“柏林病人”</h2>

<p>1995年，德国人蒂莫西·雷·布朗（Timothy Ray Brown）被确诊为艾滋病。在2006年，他又患上致命性的急性髓细胞性白血病。</p>

<p>但这两种致命疾病的结合却给他带来了重获新生的机会。</p>

<p>他的主治医生格罗·修特（Gero Huetter）打算“一石二鸟”。他建议，彻底清扫掉布朗体内带有艾滋病毒同时又已经癌变的骨髓细胞，再专门选择CCR5基因变异的骨髓捐献者，给布朗进行骨髓移植。</p>

<p>这一方案几经波折后，彻底治愈了布朗的艾滋病，布朗也因此成为世界上迄今为止唯一一个彻底摆脱艾滋病困扰的患者。（注：截止本书发表时，后续不知道，但肯定是第一个了。）</p>

<p><a id="markdown-十基因入药的开始" name="十基因入药的开始"></a></p>

<h2>十、基因入药的开始</h2>

<p>1990年，基因疗法首次取得成功。美国国家卫生院的威廉·安德森医生开展了针对重症联合免疫缺陷的基因治疗，4岁的小女孩德希尔瓦手术圆满完成。</p>

<p>然而看上去很美妙的基因治疗，至今仍然停留在纸面上。从基因疗法首次被应用于人体的1990年算起，全世界通过基因治疗得以重获健康的幸运儿不超过千人。</p>

<p>90年代的基因治疗充满了喧嚣和泡沫，是革命性的概念和随之而来的巨大商业利益在驱动着这个领域大跃进，而不是清晰的临床结论。到2000年全世界开展了超过500个基因治疗临床试验，超过4000名患者参与其中，但全部以失败告终，没有一项顺利推进到大规模临床应用阶段。</p>

<p><strong>基因治疗的逻辑：首先将特定的人体细胞从体内取出，利用病毒工具将DNA片段送入细胞内，再将接受过基因编辑、部分恢复正常机能的细胞送入人体。</strong></p>

<p><a id="markdown-十一基因治疗降温" name="十一基因治疗降温"></a></p>

<h2>十一、基因治疗降温</h2>

<p>1999年9月17日，18岁的美国亚利桑那州男孩杰西·基辛格（Jesse Gelsinger）在宾夕法尼亚大学参加一项基因治疗临床试验时去世。这是自1990年安德森医生的历史性试验后，基因治疗诞生近10年间的第一例死亡病例。《纽约时报》用“一场生物技术带来的死亡”（a biotech death）来描述这场悲剧。</p>

<p>杰西·基辛格之死让人们对基因治疗的狂热迅速降温。</p>

<p>2003年，5名正在接受基因治疗的儿童患上了白血病。（背景：伦敦和巴黎的医生们受到安德森医生试验的鼓舞，也计划用基因疗法治疗儿童的重症联合免疫缺陷病，这项计划开始于1997年。）</p>

<p>各国监管机构立刻叫停了所有正在进行的基因治疗临床试验，并组织强有力的委员会负责对基因治疗的临床申请进行审核。</p>

<p>严格审查之后发现，绝大多数科学家和医生的职业操守和专业技能是经得起考验的，各国又陆续恢复了基因治疗试验。不过公众对基因疗法已经产生了恐慌和不信任感。</p>

<p><a id="markdown-十二基因编辑的诞生" name="十二基因编辑的诞生"></a></p>

<h2>十二、基因编辑的诞生</h2>

<p>人们发现，“缺啥补啥”的粗暴手术思路不能解决问题，于是转向对遗传物质进行更为精细的手术操作，“基因编辑”的概念应运而生。</p>

<p><strong>基因编辑的逻辑：通过某种外科手术式的精确操作，精确修复出现遗传变异的基因，从根本上阻止遗传疾病的产生。</strong></p>

<p>基因编辑工具三件套：</p>

<ol>
<li>基因组GPS：锌手指蛋白组合；</li>
<li>基因组剪刀：FokⅠ蛋白的剪切模块；</li>
<li>基因组针线：细胞内天然存在的两套DNA断点修复机制。</li>
</ol>


<p><a id="markdown-十三基因编程时代开启" name="十三基因编程时代开启"></a></p>

<h2>十三、基因编程时代开启</h2>

<p>2011年，华裔科学家张峰与合作者设计并组装出了全新的“神话”蛋白，并证明它可以精确定位人类基因组并调节临近基因的表达。</p>

<p>2012年，名为“成簇的规律间隔的短回文重复序列”（clustered regularly interspaced short palindromic repeats）的新技术诞生，大家用首字母组合“CRISPR”来称呼它。</p>

<p><a id="markdown-十四人类已经离不开转基因技术" name="十四人类已经离不开转基因技术"></a></p>

<h2>十四、人类已经离不开转基因技术</h2>

<ol>
<li>糖尿病人使用的胰岛素大多是经由转基因技术改造的细菌生产的；</li>
<li>乙肝疫苗大多数时候是用转基因酵母生产的；</li>
<li>我们日常喝的酸奶和啤酒也有转基因技术的贡献。</li>
</ol>


<p><a id="markdown-十五基因技术的争议与风险" name="十五基因技术的争议与风险"></a></p>

<h2>十五、基因技术的争议与风险</h2>

<ol>
<li>基因的边界在哪里？

<ul>
<li>把基因编辑从“治疗”范畴推广到“预防”领域看起来有毋庸置疑的合理性，但操作起来却大大延伸了这项技术的适用范围。一个显而易见的问题是：基因治疗和基因编辑的边界在哪里？</li>
<li>如果仅仅因为自己的一个基因突变有1%患上糖尿病的风险，就要求修复风险基因合理不合理？如果合理的话，那有万分之一的风险能不能做基因手术呢？百万分之一呢？反过来，如果这些情况下不应该随便动手术刀的话，那多大的患病风险才合适？</li>
</ul>
</li>
<li>更要命的是，一旦“治疗”和“预防”之间的栅栏被打开，“预防”到“改善”的窗户纸一捅就破！

<ul>
<li>比如，一个人能否要求提前编辑自己的某个基因（PCSK9），防止自己在数十年后因为脑中风或者心肌梗死而死？</li>
<li>如果上述修改得到允许，也就意味着一个人可以通过基因手术获得更健康的身体。那要是ta想获得更多的肌肉、更高的个子、金发、双眼皮、高鼻梁呢？更甚者，ta想要智商、语言能力、分析能力、领导气质呢？</li>
</ul>
</li>
<li>还可能加剧不平等！

<ul>
<li>如果说现在的寒门之子通过自身努力还能获得一定机会的阶层跃进，那么当基因编辑介入后会怎样呢？</li>
<li>如果有钱人的孩子早早接受了基因手术的“改善”（毫无疑问富裕的他们拥有更多的优先机会），他们就可能获得从外貌到智力各个方面的全面“碾压”优势，而且这些优势还会写进基因里，可以遗传，那么恐怕寒门的末日就真的来了。</li>
</ul>
</li>
<li>利用基因编辑不断“溯源”改造，人还是人吗？

<ul>
<li>一旦基因编辑的技术问题得到解决，技术应用瓜熟蒂落，人类利用基因编辑技术治疗、预防和改善的年龄就会越来越早：从成年人到孩子、从孩子到婴儿、从婴儿到胎儿、从胎儿到受精卵、从受精卵到精子和卵子。</li>
<li>基因编辑未来推演的尽头，就是直接对人类生殖细胞进行编辑。因为这时进行基因修改和编辑的效率是最高的，只需要修改一个细胞，长大成人后身体内上百万亿个细胞就都会携带新的遗传性状。</li>
<li>一旦走上这条路，人类就将开始摆脱自然历史留给我们的印迹，开始进行对自身的自我创造。我们很有可能按照自己的价值观创造后代，比如按今天的审美批量造出高个子、白皮肤、双眼皮、高智商、有专注力、语言能力强的孩子，这是满足社会要求和家庭期待的工具，还是独立的智慧生命呢？</li>
</ul>
</li>
<li>还可能导致人类灭绝！

<ul>
<li>在某个环境下看似有害的基因突变，在不同环境中也许就会变成优势基因。在某个历史时期无用甚至有害的性状，当地球环境沧海桑田后也许就是维系后代生存的命脉。</li>
<li>而基因编辑的广泛应用很可能会毫不留情地去除那些对于当下生活环境有害的基因突变，人类基因库的多样性将不复存在。一旦地球环境发生突变，作为整个物种的人类将失去抗御风险的能力，面临灭顶之灾。</li>
</ul>
</li>
</ol>


<p><a id="markdown-十六伦理争议与批评一直都在" name="十六伦理争议与批评一直都在"></a></p>

<h2>十六、伦理争议与批评一直都在</h2>

<p>过去20年，伦理语境下的争论和批评一直伴随着现代生物医学研究的发展。</p>

<ol>
<li>1996年，克隆羊“多利”诞生，各国政府迅速通过了禁止克隆人的法律条文。</li>
<li>2001年，美国总统小布什签署行政命令，禁止美国联邦经费用于发展新的人类胚胎干细胞。</li>
<li>2013年，哈佛大学因两只灵长类动物非正常死亡，彻底关闭了校内的灵长类动物研究中心，欧美许多研究机构中对灵长类的研究也愈发受到限制。</li>
<li>2015年3月，基因编辑技术的应用先驱之一、哈佛大学教授乔治·丘奇的实验室被发现正在人类卵细胞中尝试编辑人类基因组，很快《自然》《科学》等杂志发文警告其中的安全和伦理风险，并呼吁立刻停止尝试。</li>
<li>同年4月，中国中山大学黄军的实验室在受精的人类胚胎中进行了基因编辑，被批评是在修改与创造人类。</li>
</ol>


<p>来自宗教界、法律界和大众的批评：</p>

<ol>
<li>轻启对人类自身的遗传改造，将会从根本上动摇人类社会的价值观。到底什么才是人？如果混合了来自其他生物的基因，人还是人吗？</li>
<li>修改人类基因是否会造成永久性的阶级分化和不平等？</li>
<li>父母和医生替孩子决定他们的基因，这样做是不是不道德？</li>
</ol>


<blockquote><p>也许以现在的观点去想这些未来的事情，显得匪夷所思，难以接受。但是，历史是渐变的，人们的思想也是会渐变的。也许，真的到了那个时候，人们就很坦然地能够接受这个观点了。就像现在人们能够接受人体解剖、试管婴儿一样。</p>

<p>在这里，我又想起了刘慈欣关于改造人和人类之间的相互评论：现在的我们没法接受改造人，认为他们已经不是人类了。也许改造人也会同样认为我们不是人：在他们眼里，我们只是他们的源头，仅此而已。就像我们今天看待猿人一样。</p></blockquote>

<h2>参考</h2>

<ul>
<li>来自豆瓣的书评<a href="https://book.douban.com/review/9193246/">全书要点梳理|《上帝的手术刀》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于小孩培养的几个公开课]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/22/youerjiaoyu/"/>
    <updated>2019-10-22T10:48:10+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/22/youerjiaoyu</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E6%80%8E%E6%A0%B7%E5%9F%B9%E5%85%BB%E4%BA%B2%E8%BF%91%E8%87%AA%E7%84%B6%E7%9A%84%E5%AD%A9%E5%AD%90">怎样培养亲近自然的孩子</a>

<ul>
<li><a href="#%E9%97%AD%E4%B8%8A%E7%9C%BC%E7%9D%9B%E7%94%A8%E8%80%B3%E6%9C%B5%E8%81%86%E5%90%AC">闭上眼睛，用耳朵聆听</a></li>
<li><a href="#%E5%88%B0%E5%A4%A7%E8%87%AA%E7%84%B6%E4%B8%AD%E5%8E%BB%E5%81%9A%E4%BB%BB%E5%8A%A1">到大自然中去做任务</a></li>
<li><a href="#%E8%87%AA%E7%84%B6%E4%BD%9C%E5%93%81%E5%B1%95">自然作品展</a></li>
<li><a href="#%E8%87%AA%E7%84%B6%E6%95%85%E4%BA%8B%E4%BC%9A">自然故事会</a></li>
<li><a href="#%E9%98%B3%E5%8F%B0%E7%94%B0%E5%9B%AD">阳台田园</a></li>
<li><a href="#%E5%AE%B6%E6%9C%89%E8%90%8C%E5%AE%A0">家有萌宠</a></li>
<li><a href="#%E5%9C%A8%E5%92%8C%E5%AD%A9%E5%AD%90%E7%9A%84%E4%BA%92%E5%8A%A8%E4%B8%AD%E5%9F%B9%E5%85%BB%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B">在和孩子的互动中培养表达能力</a></li>
<li><a href="#%E5%92%8C%E5%AD%A9%E5%AD%90%E4%B8%80%E8%B5%B7%E6%9C%89%E4%B8%AA%E7%A7%98%E5%AF%86%E8%87%AA%E7%84%B6%E5%9F%BA%E5%9C%B0">和孩子一起有个秘密自然基地</a></li>
</ul>
</li>
<li><a href="#%E6%80%8E%E6%A0%B7%E5%9F%B9%E5%85%BB%E6%9C%89%E4%B8%BB%E5%8A%A8%E6%80%A7%E7%9A%84%E5%AD%A9%E5%AD%90">怎样培养有主动性的孩子</a></li>
</ul>


<p><a id="markdown-怎样培养亲近自然的孩子" name="怎样培养亲近自然的孩子"></a></p>

<h2>怎样培养亲近自然的孩子</h2>

<p>要让孩子远离电子产品，当然是给他们一个更有吸引力的东西。大自然是最好的选择，因为在人的基因中饱含着对大自然的依恋。</p>

<p>剩下的问题就是：如何和孩子们一起进行大自然相关的活动呢？</p>

<p><a id="markdown-闭上眼睛用耳朵聆听" name="闭上眼睛用耳朵聆听"></a></p>

<h3>闭上眼睛，用耳朵聆听</h3>

<p>大部分时间我们是用眼睛接收外部信息，忽略了耳朵的存在。让我们闭上眼睛，仔细倾听一下周围的世界。</p>

<ol>
<li>最好的方法当然是去大自然中，聆听大自然真实的声音。但是有些时候不方便，也可以借助网络。</li>
<li>推荐吴金黛的“森林狂想曲”。</li>
<li>在<a href="http://www.tuke88.com/yinxiao/p1009/?se=1&amp;pl=139-2698&amp;ky=378807">图客巴巴</a>上可以收听下载各种动物的声音，或者其它大自然的声音。不过，这个网站是收费的，<a href="http://www.tuke88.com/scorepackages.html">终身会员99元</a>。<a href="https://www.tukuppt.com/">熊猫办公</a>也是类似的资源网站，<a href="https://www.tukuppt.com/payintroduce?from=top">终身会员199</a>。</li>
</ol>


<p><a id="markdown-到大自然中去做任务" name="到大自然中去做任务"></a></p>

<h3>到大自然中去做任务</h3>

<p>当你试图带着孩子出去玩的时候，比如爬山，最好约定好一个任务，一起完成。如果再有同行的小伙伴一起就更好了。比如：</p>

<ol>
<li>在大自然中找到3种颜色</li>
<li>在大自然中找到5种形状</li>
<li>在大自然中找到能使人快乐的东西(拿个树叶挠挠她的脚心或者脖子，让她笑出声来)</li>
<li>搜集树叶拼图（德国有个叫做风中的树叶的绘本）</li>
</ol>


<p><a id="markdown-自然作品展" name="自然作品展"></a></p>

<h3>自然作品展</h3>

<p>将孩子做的关于大自然的作品和孩子一起整理在一个房间展览，或者做成明信片送给亲朋好友。</p>

<p><a id="markdown-自然故事会" name="自然故事会"></a></p>

<h3>自然故事会</h3>

<p>在大自然中观察各种动植物，利用想象力，赋予它们生动的故事。</p>

<p><a id="markdown-阳台田园" name="阳台田园"></a></p>

<h3>阳台田园</h3>

<p>一起在阳台，找个盒子，种点植物，一起观察成长。最后找那种生长迅速，形态变化明显的植物。</p>

<p><a id="markdown-家有萌宠" name="家有萌宠"></a></p>

<h3>家有萌宠</h3>

<p>一起养个宠物，当然也不一定是猫狗之类的大宠物，也可以是小蝌蚪、蚕等小动物，一起观察它们的形态变化。</p>

<p><a id="markdown-在和孩子的互动中培养表达能力" name="在和孩子的互动中培养表达能力"></a></p>

<h3>在和孩子的互动中培养表达能力</h3>

<p>当孩子有了特殊的感受时，要能够通过同理心感受到，并且简短清晰地表达出来，并且让孩子自己复述一遍，让孩子能够清楚自己心里这种感受怎么用语言表达出来，借以锻炼语言和表达能力。</p>

<p><a id="markdown-和孩子一起有个秘密自然基地" name="和孩子一起有个秘密自然基地"></a></p>

<h3>和孩子一起有个秘密自然基地</h3>

<p>能在野外和孩子一起开辟一块属于自己的秘密自然基地，是非常好的事情。可以定期过去观察一下这个基地的变化。你会惊奇的发现，孩子的观察力一点都不比你逊色。</p>

<p><a id="markdown-怎样培养有主动性的孩子" name="怎样培养有主动性的孩子"></a></p>

<h2>怎样培养有主动性的孩子</h2>

<ol>
<li>利用同理心：尽可能准确地了解孩子生活的场景，可以去亲身体验孩子的生活环境，包括幼儿园路线生活路线等。并且试着蹲下来，在孩子的视角高度，看看这个世界到底是什么样子的。</li>
<li>抛开规则同孩子一起</li>
<li>有个新的理论认为：孩子性格主要不取决于父母，取决于周围同龄人。所以选择一个好的社区好的学校很重要。如果能够选择一个好的学区当然好，如果不能，也不是没有办法。

<ol>
<li>就近读书：容易有固定的玩伴，因为上学放学都能碰到，而且大家经济实力和教育观点比较接近，容易进一步沟通。</li>
<li>帮孩子营造一种互相比着学的伙伴和氛围。</li>
</ol>
</li>
<li>用金钱进行奖励，对金钱进行惩罚，让孩子学会对金钱有个概念。给妹妹读一本绘本，奖励10块钱。</li>
<li>胡萝卜加大棒在可汗学院上学习数学。可汗学院上的数学课深入浅出，全英文，一个视频5分钟左右，讲懂一个概念。学完一个视频，奖励10块钱。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生命是什么（王立铭，生命科学50讲）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/10/19/shengmingshishenme/"/>
    <updated>2019-10-19T13:48:12+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/10/19/shengmingshishenme</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E4%B8%80%E7%89%A9%E8%B4%A8-%E4%B8%87%E7%89%A9%E4%B9%8B%E6%BA%90">一、物质 万物之源</a></li>
<li><a href="#%E4%BA%8C%E8%83%BD%E9%87%8Fatp%E4%B8%8E%E8%91%A1%E8%90%84%E7%B3%96">二、能量：ATP与葡萄糖</a>

<ul>
<li><a href="#atp%E7%9A%84%E4%BA%A7%E7%94%9F">ATP的产生</a></li>
<li><a href="#%E5%85%89%E5%90%88%E4%BD%9C%E7%94%A8">光合作用</a></li>
<li><a href="#%E5%91%BC%E5%90%B8%E4%BD%9C%E7%94%A8">呼吸作用</a></li>
<li><a href="#atp%E7%9A%84%E6%B0%B4%E7%94%B5%E7%AB%99%E5%BC%8F%E7%94%9F%E4%BA%A7">ATP的水电站式生产</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E8%87%AA%E6%88%91%E5%A4%8D%E5%88%B6dna-rna">三、自我复制：DNA RNA</a>

<ul>
<li><a href="#%E5%A4%8D%E5%88%B6%E7%9A%84%E5%9F%BA%E7%A1%80">复制的基础</a></li>
<li><a href="#%E4%BC%9F%E5%A4%A7%E7%9A%84rna%E4%B8%96%E7%95%8C%E5%81%87%E8%AF%B4">伟大的RNA世界假说</a></li>
<li><a href="#rna%E7%9A%84%E4%BD%99%E6%99%96%E7%97%85%E6%AF%92">RNA的余晖——病毒</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E7%BB%86%E8%83%9E">四、细胞</a>

<ul>
<li><a href="#%E7%BB%86%E8%83%9E%E7%9A%84%E6%84%8F%E4%B9%89">细胞的意义</a></li>
<li><a href="#%E7%BB%86%E8%83%9E%E7%9A%84%E6%88%90%E9%95%BF%E5%A4%A9%E8%8A%B1%E6%9D%BF">细胞的成长天花板</a></li>
<li><a href="#%E5%A4%9A%E7%BB%86%E8%83%9E%E7%9A%84%E8%AF%9E%E7%94%9F">多细胞的诞生</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94%E5%88%86%E5%B7%A5">五、分工</a>

<ul>
<li><a href="#%E5%88%86%E5%B7%A5%E7%9A%84%E4%BA%A7%E7%94%9F%E6%BD%9C%E8%83%BD%E6%8D%A2%E5%8A%9F%E8%83%BD">分工的产生，潜能换功能</a></li>
<li><a href="#%E5%88%86%E5%B7%A5%E7%9A%84%E6%9C%BA%E5%88%B6%E9%9A%8F%E6%9C%BA%E6%99%BA%E6%85%A7">分工的机制，随机智慧</a></li>
<li><a href="#%E5%A4%A7%E8%84%91%E7%9A%84%E4%BA%A7%E7%94%9F%E7%94%A8%E8%BF%9B%E5%BA%9F%E9%80%80">大脑的产生，用进废退</a></li>
</ul>
</li>
<li><a href="#%E5%85%AD%E6%84%9F%E8%A7%89">六、感觉</a>

<ul>
<li><a href="#%E6%84%9F%E8%A7%89%E6%98%AF%E6%99%BA%E6%85%A7%E7%9A%84%E5%9F%BA%E7%A1%80">感觉是智慧的基础</a></li>
<li><a href="#%E8%A7%86%E8%A7%89%E6%98%AF%E6%9C%80%E4%B8%BB%E8%A6%81%E5%87%86%E7%A1%AE%E7%9A%84%E6%84%9F%E8%A7%89%E6%96%B9%E5%BC%8F">视觉是最主要、准确的感觉方式</a></li>
</ul>
</li>
<li><a href="#%E4%B8%83%E5%AD%A6%E4%B9%A0">七、学习</a>

<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0">为什么要学习</a></li>
<li><a href="#%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BB%80%E4%B9%88">学习是什么</a></li>
</ul>
</li>
<li><a href="#%E5%85%AB%E7%A4%BE%E4%BA%A4">八、社交</a>

<ul>
<li><a href="#%E7%B9%81%E8%A1%8D%E4%B8%8E%E7%AB%9E%E4%BA%89%E7%9A%84%E6%96%B0%E7%AD%96%E7%95%A5">繁衍与竞争的新策略</a></li>
<li><a href="#%E8%AF%AD%E6%B3%95%E5%8C%96%E7%9A%84%E8%AF%AD%E8%A8%80%E6%98%AF%E4%BA%BA%E7%B1%BB%E7%8B%AC%E6%9C%89%E7%9A%84%E6%AD%A6%E5%99%A8">语法化的语言是人类独有的武器</a></li>
<li><a href="#%E5%A4%9A%E6%A0%B7%E6%80%A7%E5%A4%A7%E4%BA%8E%E6%95%88%E7%8E%87">多样性大于效率</a></li>
<li><a href="#%E4%B8%A4%E6%80%A7%E7%A4%BE%E4%BA%A4">两性社交</a></li>
</ul>
</li>
<li><a href="#%E4%B9%9D%E8%87%AA%E6%88%91%E6%84%8F%E8%AF%86">九、自我意识</a>

<ul>
<li><a href="#%E8%87%AA%E6%88%91%E6%84%8F%E8%AF%86%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E6%83%85%E6%84%9F%E7%9A%84%E5%9F%BA%E7%A1%80">自我意识，更复杂的功能和情感的基础</a></li>
</ul>
</li>
<li><a href="#%E5%8D%81%E8%87%AA%E7%94%B1%E6%84%8F%E5%BF%97">十，自由意志</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>


<p>王立铭在得道的公开课《生命科学50讲》，其实就是他在2018年出版的那本书《生命是什么》的讲座，章节一一对应。这本书很明显是对薛定谔的《生命是什么》的致敬。</p>

<p>本书共有10章，可以分为这三个方面：</p>

<ol>
<li>生命的三要素：物质、能量、自我复制。</li>
<li>生命多样性的二个基础：细胞、分工。</li>
<li>智慧生物的五个元素：感觉、学习、社交、自我意识、自由意识。</li>
</ol>


<p>下面就分章叙述一下。</p>

<p><a id="markdown-一物质-万物之源" name="一物质-万物之源"></a></p>

<h2>一、物质 万物之源</h2>

<p><a id="markdown-二能量atp与葡萄糖" name="二能量atp与葡萄糖"></a></p>

<h2>二、能量：ATP与葡萄糖</h2>

<p>ATP性质活跃，可以快速供能。没有反应废物。能量单位小，适和的应用场景化学反应多。这三个特点都是葡萄糖所不具备的，所以需要通过ATP来给生物体供能。</p>

<p>ATP在生物体内含量很少，但是ATP与ADP在生物体内的转化是十分迅速的。这样，ATP的总量总是能维持在一个相对稳定的动态平衡当中。</p>

<p><a id="markdown-atp的产生" name="atp的产生"></a></p>

<h3>ATP的产生</h3>

<p>ADP在转化成ATP的过程中需要的能量主要来自于呼吸作用和（植物的）光合作用：</p>

<p><img src="http://hongchaozhang.github.io/images/ADP%E8%BD%AC%E5%8C%96%E6%88%90ATP%E6%97%B6%E6%89%80%E9%9C%80%E8%83%BD%E9%87%8F%E7%9A%84%E4%B8%BB%E8%A6%81%E6%9D%A5%E6%BA%90.png" alt="ADP转化成ATP时所需能量的主要来源" /></p>

<p><a id="markdown-光合作用" name="光合作用"></a></p>

<h3>光合作用</h3>

<p>光合作用的总反应式：</p>

<p><img src="http://hongchaozhang.github.io/images/%E5%85%89%E5%90%88%E4%BD%9C%E7%94%A8%E7%9A%84%E6%80%BB%E5%8F%8D%E5%BA%94%E5%BC%8F.png" alt="光合作用的总反应式" /></p>

<p>光合作用的过程图解：</p>

<p><img src="http://hongchaozhang.github.io/images/%E5%85%89%E5%90%88%E4%BD%9C%E7%94%A8%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="光合作用过程图解" /></p>

<p><a id="markdown-呼吸作用" name="呼吸作用"></a></p>

<h3>呼吸作用</h3>

<p>呼吸作用包括有氧呼吸和无氧呼吸。其中，有氧呼吸过程如下：</p>

<p><img src="http://hongchaozhang.github.io/images/%E6%9C%89%E6%B0%A7%E5%91%BC%E5%90%B8%E8%BF%87%E7%A8%8B.png" alt="有氧呼吸过程" /></p>

<p>有氧呼吸过程图解如下：</p>

<p><img src="http://hongchaozhang.github.io/images/%E6%9C%89%E6%B0%A7%E5%91%BC%E5%90%B8%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="有氧呼吸过程图解" /></p>

<p>高等动物无氧呼吸过程如下：</p>

<p><img src="http://hongchaozhang.github.io/images/%E9%AB%98%E7%AD%89%E5%8A%A8%E7%89%A9%E6%97%A0%E6%B0%A7%E5%91%BC%E5%90%B8.png" alt="高等动物无氧呼吸" /></p>

<p>高等植物无氧呼吸过程如下：</p>

<p><img src="http://hongchaozhang.github.io/images/%E9%AB%98%E7%AD%89%E6%A4%8D%E7%89%A9%E6%97%A0%E6%B0%A7%E5%91%BC%E5%90%B8.png" alt="高等植物无氧呼吸" /></p>

<p><a id="markdown-atp的水电站式生产" name="atp的水电站式生产"></a></p>

<h3>ATP的水电站式生产</h3>

<p>关于一个葡萄糖分子完全分解释放的能量能产生多少个ATP分子，在科学界一直没有定论。后来发现，葡萄糖转化为ATP，是在细胞线粒体内通过ATP转化酶以“水电站”的形式转换，先消化葡萄糖制造氢离子浓度差来蓄能，再根据身体需要适时释放适量的能量将ADP转化ATP，所以葡糖糖转为ATP的具体数值不固定，这是20世纪的生物一大谜团。</p>

<p><a id="markdown-三自我复制dna-rna" name="三自我复制dna-rna"></a></p>

<h2>三、自我复制：DNA RNA</h2>

<p><a id="markdown-复制的基础" name="复制的基础"></a></p>

<h3>复制的基础</h3>

<p>DNA通过半保存的自我复制，实现了遗传信息的延续和扩张。通过ATCG四种碱基来存储蛋白质结构信息，3个碱基对应1个氨基酸，将空间3维的信息以1维线性方式来储存，降维打击。（这怎么能称得上降维打击呢？）</p>

<p>下面是DNA分子的结构模式图和DNA分子的复制示意图：</p>

<p><img src="http://hongchaozhang.github.io/images/DNA%E5%88%86%E5%AD%90%E7%9A%84%E6%9C%BA%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%9B%BE.png" alt="DNA分子的机构模式图" />
<img src="http://hongchaozhang.github.io/images/DNA%E5%88%86%E5%AD%90%E5%A4%8D%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="DNA分子复制示意图" /></p>

<p><a id="markdown-伟大的rna世界假说" name="伟大的rna世界假说"></a></p>

<h3>伟大的RNA世界假说</h3>

<p>DNA分子结构上极其稳定，所以需要蛋白质酶来解开，但是蛋白质又需要DNA上面的遗传信息才能合成，这就产生先有鸡先有蛋的问题。</p>

<p>答案的关键就在于RNA，RNA具有遗传信息同时又有蛋白质推动生物反应的作用，所以又叫核酶。DNA通过复制给RNA，由RNA在核糖体内实现解码完成蛋白质的生产。所以RNA看似多余，是中介，实则隐藏了生命起源的秘密，这就是<strong>RNA世界假说</strong>，即生命起源于RNA，一个有遗传信息，又有蛋白质功能的生物分子，它既是鸡，又是蛋。只是随着时间的推移，RNA分别把这两项核心功能分配给了DNA和蛋白质，让他们成为生命的主体，更好的发挥他们各自的功能和作用，自己退居二线，只做桥梁，生命科学的逻辑真是精彩！</p>

<p>下面是DNA转录RNA图解和RNA指导蛋白质分子合成示意图：</p>

<p><img src="http://hongchaozhang.github.io/images/DNA%E8%BD%AC%E5%BD%95RNA%E5%9B%BE%E8%A7%A3.png" alt="DNA转录RNA图解" />
<img src="http://hongchaozhang.github.io/images/RNA%E6%8E%A7%E5%88%B6%E8%9B%8B%E7%99%BD%E8%B4%A8%E5%90%88%E6%88%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="RNA控制蛋白质合成示意图" /></p>

<p><a id="markdown-rna的余晖病毒" name="rna的余晖病毒"></a></p>

<h3>RNA的余晖——病毒</h3>

<p>RNA虽然在多数生物体内退居二线，却仍在世界中残留下来，这就是病毒。它通过RNA在生物细胞体内实现自我复制，RNA的不稳定性也导致了它的频繁突变性。</p>

<p><a id="markdown-四细胞" name="四细胞"></a></p>

<h2>四、细胞</h2>

<p><a id="markdown-细胞的意义" name="细胞的意义"></a></p>

<h3>细胞的意义</h3>

<p>细胞的出现让物质、能量、自我复制得以在封闭的空间进行，并因此产生了细胞内各种生物分子进行复杂协作，为进化的多样性提供了无穷多的可能性，生命的演化进入了快车道。</p>

<p>但是，关于细胞的产生。业界还没共识，只是存在一些假说。</p>

<p>下面是动物细胞结构和植物细胞结构：</p>

<p><img src="http://hongchaozhang.github.io/images/%E5%8A%A8%E7%89%A9%E7%BB%86%E8%83%9E%E7%BB%93%E6%9E%84.png" alt="动物细胞结构" />
<img src="http://hongchaozhang.github.io/images/%E6%A4%8D%E7%89%A9%E7%BB%86%E8%83%9E%E7%BB%93%E6%9E%84.png" alt="植物细胞结构" /></p>

<p><a id="markdown-细胞的成长天花板" name="细胞的成长天花板"></a></p>

<h3>细胞的成长天花板</h3>

<p>细胞的生长受到立方/平方的规模限制，能量消耗与体积有关、能量产生与附着在面积上的ATP膜有关，因此细胞不能无限变大。</p>

<p>下面是细胞膜结构示意图：</p>

<p><img src="http://hongchaozhang.github.io/images/%E7%BB%86%E8%83%9E%E8%86%9C%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="细胞膜的结构示意图" /></p>

<p><a id="markdown-多细胞的诞生" name="多细胞的诞生"></a></p>

<h3>多细胞的诞生</h3>

<p>由于单细胞大小有天花板限制，这时多细胞就孕育而生，靠多细胞取得尺寸优势，可以吞噬单细胞生物，同时避免被其它多细胞生物吞噬。生物也在这种竞争中越变越大。</p>

<blockquote><p>这种竞争，最后必然导致灭亡（恐龙），就像军备竞赛，最终也必然导致灭亡。</p></blockquote>

<p>但单细胞的优势也还存在，比如快速复制繁殖、更加灵活、更好躲藏等。所以，生命的演化没有路径和方向，只要能活下来就是好的生存策略，多细胞只是其中的一种。进化不是往高级的方向走，而是适应的路上各显神通。这就叫繁荣！这就叫生态！</p>

<p><a id="markdown-五分工" name="五分工"></a></p>

<h2>五、分工</h2>

<p><a id="markdown-分工的产生潜能换功能" name="分工的产生潜能换功能"></a></p>

<h3>分工的产生，潜能换功能</h3>

<p>分工解决了一个细胞运动与繁殖的矛盾，使细胞能同时干2件事，并逐步细分。带来了专业、协作和产生新功能（如神经细胞）的优势。说白了就是潜能换功能。</p>

<p>细胞分工使得细胞的功能多样化、专一化了，同时，细胞的形态也出现了分化，以适应这种变化，不同形态的细胞也就组成了不同形态的组织。下图是不同的细胞组织形态，按照编号依次是：1）叶细胞，2）红细胞，3）肌细胞，4）骨细胞，5）神经细胞，6）分生组织，7）平滑肌组织，8）神经组织，9）叶的表皮，10）骨组织，11）上皮组织。</p>

<p><img src="http://hongchaozhang.github.io/images/%E5%90%84%E7%A7%8D%E5%9B%BE%E5%90%8C%E5%BD%A2%E7%8A%B6%E7%9A%84%E7%BB%86%E8%83%9E%E5%92%8C%E7%BB%84%E7%BB%87%E6%A8%A1%E5%BC%8F%E5%9B%BE.png" alt="各种图同形状的细胞和组织模式图" /></p>

<p>在分工的过程中，部分细胞丧失了繁殖权力，形成了生殖细胞和体细胞的阶级之分，但是，有些不应该不由繁殖能力的细胞不愿意放弃繁殖能力，这就出现了癌细胞。</p>

<p><a id="markdown-分工的机制随机智慧" name="分工的机制随机智慧"></a></p>

<h3>分工的机制，随机智慧</h3>

<p>通过细胞随机微小的波动和环境信号的不同，产生细微的化学信号差别，并随着细胞的活动放大信号，最终决定彼此的分工。又一次看到的随机的智慧，跟计算机上随机智慧异曲同工！</p>

<blockquote><p>这个分工的机制和蜂后的形成过程一样，都是一个正反馈的过程。</p></blockquote>

<p><a id="markdown-大脑的产生用进废退" name="大脑的产生用进废退"></a></p>

<h3>大脑的产生，用进废退</h3>

<p>大脑在出生后完成基本设计，并随着年龄的增长到青春期前后在细胞数量和连接数量上达到巅峰，之后逐步走下坡路。可见大脑完善的过程是用进废退，不是依靠加入新细胞和连接，而是删除不用的。这也足以见到年轻时要多学习、多接触不同事物、开拓眼界的重要性！</p>

<p><a id="markdown-六感觉" name="六感觉"></a></p>

<h2>六、感觉</h2>

<p><a id="markdown-感觉是智慧的基础" name="感觉是智慧的基础"></a></p>

<h3>感觉是智慧的基础</h3>

<p>因为它是信息的输入环节，但感觉不会一丝不苟的刻画外部世界，而只是为了方便、好用，它会对信息进行取舍、筛选、扭曲和整合，然后呈现出虚拟世界给大脑。</p>

<p><a id="markdown-视觉是最主要准确的感觉方式" name="视觉是最主要准确的感觉方式"></a></p>

<h3>视觉是最主要、准确的感觉方式</h3>

<p>视觉作为主要信息源有天然的优势，光作为电磁波优点：</p>

<ol>
<li>不受环境约束，直线传播、光速、不依赖介质；</li>
<li>准确反映环境和变动，比如距离、物体的形状和大小等；</li>
<li>承载信息丰富；</li>
</ol>


<p>丰富的视觉信息，一定程度上催生和锻炼了智慧的大脑。其他感觉或依赖于化学信号，局限非常明显，比如嗅觉、触觉。</p>

<p><a id="markdown-七学习" name="七学习"></a></p>

<h2>七、学习</h2>

<p><a id="markdown-为什么要学习" name="为什么要学习"></a></p>

<h3>为什么要学习</h3>

<p>生物一出生就会天生具有很多能力（本能反射）。本能反射的条件简单，反应也简单，（至少）只需要两个神经元即可完成功能。
为了适应环境，简单、快速、普遍的本能反射（刺激-反射，非条件反射）模式存在不足:</p>

<ol>
<li>要写进遗传信息，容量有限，不能全部经验都写进去；</li>
<li>这种模式有盲目性，不懂随着环境而变通。</li>
<li>本能反射不能进行经验教训的总结。比如动物通过气味找到配偶，但是动物不会总结配偶出现的规律（比如哪些地方更容易出现配偶），每次只能通过气味进行寻找。</li>
</ol>


<p>所以，只有底层的行为，关乎生存和繁殖的会写进遗传信息。很多复杂的行为还是要通过学习来掌握。</p>

<p>但是，本能反射的简单性也是优点：因为简单，所以稳定牢靠，不像后天学习那样复杂，而且每个个体的学习结果也可能不一样。也许正是因为这个原因，动物将最重要最基本的功能通过本能反射来控制，而不是学习。</p>

<p><a id="markdown-学习是什么" name="学习是什么"></a></p>

<h3>学习是什么</h3>

<p>学习，宏观上，是在不相关的事物之间建立联系，微观上，就是在相关神经细胞之间建立连接。赫布定律描述了这种联系的微观本质。</p>

<p><strong>赫布定律</strong>：大脑两个神经细胞总是同时被激发，联系就会变强，传递更有效率。这种效率提升过程是，神经细胞膜上一种特殊蛋白质让两个细胞间的突触面积更大、数量更多，让突触更敏感。大脑海马体上神经细胞膜的这种特殊蛋白质（“裁判蛋白）的多少决定了一个大脑的聪明程度。</p>

<p>从微观层面上理解，虚拟记忆的创建和移植从理论上说都是可行的。</p>

<blockquote><p>这里可以有很多科幻小说！</p></blockquote>

<p><a id="markdown-八社交" name="八社交"></a></p>

<h2>八、社交</h2>

<p><a id="markdown-繁衍与竞争的新策略" name="繁衍与竞争的新策略"></a></p>

<h3>繁衍与竞争的新策略</h3>

<p>真社会性动物的出现（个体间分工、合作、部分个体丧失繁殖权力，2%的昆虫种类占50%重量）极大的挑战了达尔文进化论，他们自我牺牲、利他主义，都是达尔文所不能解释的。为此，科学界依次提出群体选择、亲属选择、基因选择理论，其实都证明了自然选择的对象是基因，是基因为了最大化自己遗传物质的传递。可以看到进化不只是简单的物种内的竞争，还有物种间的竞争，这导致了物种内的社会化合作和物种间的共生合作。比如费氏弧菌与乌贼，狗与人。</p>

<p><a id="markdown-语法化的语言是人类独有的武器" name="语法化的语言是人类独有的武器"></a></p>

<h3>语法化的语言是人类独有的武器</h3>

<p>语言不是人类独有，但语法化的语言是独有。它的产生是FOXP2基因，这个基因很多动物都有，差异不大，但人类因为一次突变获得了语法功能。作用：</p>

<ol>
<li>它使人类能够更有效的沟通、合作，在物种间的竞争中胜出；</li>
<li>使我们站在巨人的肩膀上，学习能力变强，突破了基因进化、遗传在时间上的局限性。</li>
</ol>


<p>从这个角度看，依旧显示社会协作的重要性！</p>

<p><a id="markdown-多样性大于效率" name="多样性大于效率"></a></p>

<h3>多样性大于效率</h3>

<p>两性繁殖在遗传物质传递的效果和时间的效率上都不如无性，看似麻烦，实则带来的多样性，这是它能长期存在的优势。</p>

<p><strong>两性的核心差异是生殖细胞的大小和功能</strong>，这也是生物界定义两性的标准。一方负责量产，广撒网；一方负责营养，钓大鱼。这也导致了双方不同的生存和进化策略，比如雄性相斗，这就是性选择的进化学说，但其背后仍然是自然选择。</p>

<p><a id="markdown-两性社交" name="两性社交"></a></p>

<h3>两性社交</h3>

<ol>
<li>精子多而少，和卵子大而少的差别决定了是雄性争斗，而不是雌性争斗。对繁殖子孙投入资源越多的一方，性选择越谨慎，投入少的就会通过竞争解决问题。自然界偶尔会出现雄性抚养，那竞争就会发现在雌性间。</li>
<li>竞争越激烈，导致两性身体上的差异会越大，从人类男女身体温和差异来看，性资源不紧缺，一夫一妻是天然的。为了应对竞争，暴力就有基因基础，但动物间的暴力都是温和的，一般都是虚张声势，不会致死。这个基因一旦出现异常，就会出现严重的暴力。严重暴力基因会被自然选择淘汰。</li>
<li>雄性送雌性一些华而不实的东西，是有生物学基础的。也有其它动物会做出这种行为。有一种鸟的雄性会搭建一个非常漂亮的房子用来吸引雌性，但是欢快结束，就弃之不用。</li>
</ol>


<p><a id="markdown-九自我意识" name="九自我意识"></a></p>

<h2>九、自我意识</h2>

<p><a id="markdown-自我意识更复杂的功能和情感的基础" name="自我意识更复杂的功能和情感的基础"></a></p>

<h3>自我意识，更复杂的功能和情感的基础</h3>

<p>自我意识让人有羞耻感、责任感、成就感、好奇心等复杂的生命功能，让智慧生命第一次有了清晰的目的性！从这也能看到，在社会中找到自我的存在感和位置，也许是我们进化的要求，也是我们做为人而活的理由。地球上有十多种生物有自我意识，他们普遍都是比较“聪明”。</p>

<ol>
<li>自我意识的基础是镜像神经元。它能同时检测自我状态和外部环境，但对它的研究还很浅。</li>
<li>自我意识很顽固，以至于完美复制“我”后，它仍然认为只有一个“我”。</li>
<li>自我意识也很灵活，随着人体自身的变化，自我意识仍然能够认识“我”。</li>
<li>同一个自我意识不能同时存在于多个人脑中，但是一个人脑中可以存在多个自我意识，这就是多重人格。</li>
</ol>


<p><a id="markdown-十自由意志" name="十自由意志"></a></p>

<h2>十，自由意志</h2>

<p>自由意志，就是我决定我的思想和行为。自由意志对人的行为、道德会产生很大的影响，心理实验表明没有自由意志的人会消极、妥协、悲观。</p>

<p>人类的很多行为都是本能，都是受遗传物质影响的，而不是自由意志。比如吃饭、爱情，在这些行为上，自由意志作用不大。即使是高级的心智活动，比如价值观、政治倾向等，都有50%以上受遗传物质影响，这可以从双胞胎实验中得出。但环境的影响依旧很大，可见我们选择环境、朋友的重要性。</p>

<p>虽然真正的自由意志不一定存在，但是这种相信自己有自由意志的感觉确在进化过程中保存了下来，一定有它的意义所在。这其中可能的一个答案就是保护和奖励我们的好奇心和探索精神，赋予以上行为快感和成就感。如果没有自由意志，好奇、探索就是出于本能，没法对个体产生激励。比如，别人交给你的任务，做起来就没有那么多主观能动性，成功之后也不会非常兴奋。自己定的目标，做起来就非常兴奋，成功之后特别有成就感。</p>

<p><a id="markdown-参考文献" name="参考文献"></a></p>

<h2>参考文献</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/47558708">知乎上面关于生命科学50讲的总结</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博世宁的医学通识50讲]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/09/18/boshining-yixuetongshi/"/>
    <updated>2019-09-18T10:53:11+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/09/18/boshining-yixuetongshi</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
<li><a href="#%E7%8E%B0%E4%BB%A3%E5%8C%BB%E5%AD%A6%E7%9A%84%E5%87%A0%E4%B8%AA%E5%85%B1%E8%AF%86">现代医学的几个共识</a></li>
<li><a href="#%E7%97%85%E4%B8%8E%E7%97%87">”病“与”症“</a>

<ul>
<li><a href="#%E7%97%85%E5%92%8C%E7%97%87%E5%8C%BA%E5%88%AB%E5%AF%B9%E5%BE%85">病和症区别对待</a></li>
<li><a href="#%E7%96%BE%E7%97%85%E7%9A%84%E6%9C%AC%E6%BA%90%E6%98%AF%E8%BF%9B%E5%8C%96%E7%9A%84%E4%B8%8D%E5%AE%8C%E7%BE%8E">疾病的本源是进化的不完美</a></li>
</ul>
</li>
<li><a href="#%E4%BB%A3%E5%81%BF">代偿</a></li>
<li><a href="#%E5%86%85%E5%85%B1%E7%94%9F">内共生</a></li>
<li><a href="#%E4%BA%BA%E4%BD%93%E5%85%8D%E7%96%AB">人体免疫</a>

<ul>
<li><a href="#%E9%9B%B6%E5%85%8D%E7%96%AB%E6%84%8F%E5%91%B3%E7%9D%80%E7%96%BE%E7%97%85%E5%92%8C%E6%AD%BB%E4%BA%A1">零免疫意味着疾病和死亡</a></li>
<li><a href="#%E4%BA%BA%E4%BD%93%E5%92%8C%E5%85%8D%E7%96%AB%E7%B3%BB%E7%BB%9F%E6%9C%89%E5%85%B3%E7%9A%84%E7%96%BE%E7%97%85%E7%9A%84%E7%97%85%E5%9B%A0%E4%B8%BB%E8%A6%81%E6%9C%89%E4%B8%89%E4%B8%AA%E6%96%B9%E9%9D%A2">人体和免疫系统有关的疾病的病因主要有三个方面：</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E6%89%93%E7%96%AB%E8%8B%97%E4%BF%9D%E6%8A%A4%E5%86%85%E5%85%B1%E7%94%9F%E5%BE%97%E5%B0%8F%E7%97%85%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E5%85%8D%E7%96%AB%E5%8A%9B">通过打疫苗，保护内共生，得小病，可以提高免疫力</a></li>
</ul>
</li>
<li><a href="#%E7%99%8C%E7%9A%84%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6%E5%90%8C%E5%BD%92%E4%BA%8E%E5%B0%BD%E7%9A%84%E7%96%AF%E7%8B%82%E8%B7%91%E8%BD%A6">癌的生成机制：同归于尽的疯狂跑车</a>

<ul>
<li><a href="#%E7%99%8C%E7%97%87%E5%B0%B1%E5%83%8F%E4%B8%80%E8%BE%86%E7%96%AF%E7%8B%82%E8%B7%91%E8%BD%A6%E5%AE%83%E6%9C%89%E5%85%AD%E4%B8%AA%E7%8E%AF%E8%8A%82">癌症就像一辆“疯狂跑车”，它有六个环节：</a></li>
<li><a href="#%E7%99%8C%E7%97%87%E7%9A%84%E6%89%80%E6%9C%89%E6%B2%BB%E7%96%97%E9%83%BD%E6%98%AF%E9%92%88%E5%AF%B9%E8%BF%996%E4%B8%AA%E7%8E%AF%E8%8A%82">癌症的所有治疗，都是针对这6个环节。</a></li>
</ul>
</li>
<li><a href="#%E7%99%8C%E7%97%87%E6%97%B6%E9%97%B4%E7%9A%84%E8%80%81%E6%9C%8B%E5%8F%8B">癌症：时间的老朋友</a>

<ul>
<li><a href="#%E5%BC%95%E8%B5%B7%E7%99%8C%E7%97%87%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8D%B1%E9%99%A9%E5%9B%A0%E7%B4%A0%E6%98%AF%E5%B9%B4%E9%BE%84%E5%B9%B4%E9%BE%84%E8%B6%8A%E5%A4%A7%E6%82%A3%E7%99%8C%E9%A3%8E%E9%99%A9%E8%B6%8A%E5%A4%A7">引起癌症最大的危险因素是年龄，年龄越大，患癌风险越大</a></li>
<li><a href="#%E7%BB%86%E8%83%9E%E5%88%86%E8%A3%82%E4%BC%9A%E5%B8%A6%E6%9D%A5%E5%9F%BA%E5%9B%A0%E7%AA%81%E5%8F%98%E7%94%9F%E5%91%BD%E5%B0%B1%E6%98%AF%E4%B8%80%E7%A7%8D%E7%99%8C%E5%89%8D%E7%8A%B6%E6%80%81">细胞分裂会带来基因突变，生命就是一种癌前状态</a></li>
<li><a href="#%E6%97%A2%E7%84%B6%E5%B9%B4%E9%BE%84%E5%9B%A0%E7%B4%A0%E6%97%A0%E6%B3%95%E6%94%B9%E5%8F%98%E9%80%9A%E8%BF%87%E9%81%BF%E5%85%8D%E5%85%B6%E4%BB%96%E5%8D%B1%E9%99%A9%E5%9B%A0%E7%B4%A0%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%87%8F%E5%B0%91%E7%9B%B8%E5%BD%93%E6%AF%94%E4%BE%8B%E7%9A%84%E7%99%8C%E7%97%87%E5%8F%91%E7%97%85">既然年龄因素无法改变，通过避免其他危险因素，仍然可以减少相当比例的癌症发病</a></li>
</ul>
</li>
<li><a href="#%E4%B8%8D%E5%90%8C%E6%80%A7%E6%A0%BC%E7%9A%84%E4%BA%BA%E7%94%9F%E7%97%85%E7%9A%84%E9%A3%8E%E9%99%A9%E4%B9%9F%E4%B8%8D%E5%90%8C">不同性格的人生病的风险也不同</a></li>
<li><a href="#%E7%96%AB%E8%8B%97%E5%AF%B9%E6%8A%97%E7%96%BE%E7%97%85%E7%9A%84%E6%96%B0%E9%80%BB%E8%BE%91">疫苗：对抗疾病的新逻辑</a></li>
<li><a href="#%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E7%94%9F%E5%91%BD%E7%BB%88%E7%82%B9">重新定义生命终点</a></li>
<li><a href="#%E9%81%BF%E5%AD%95%E8%8D%AF%E6%8A%8A%E5%A5%B3%E4%BA%BA%E7%9A%84%E8%BA%AB%E4%BD%93%E8%BF%98%E7%BB%99%E5%A5%B3%E4%BA%BA">避孕药：把女人的身体还给女人</a></li>
<li><a href="#%E5%9C%A8%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%AE%8C%E5%A4%87%E4%B8%8B%E5%BF%AB%E9%80%9F%E5%86%B3%E7%AD%96">在信息不完备下快速决策</a></li>
</ul>


<p><a id="markdown-参考文献" name="参考文献"></a></p>

<h2>参考文献</h2>

<ol>
<li><a href="https://mubu.com/doc/explore/20724">薄世宁·医学通识50讲</a>比较全面。</li>
<li>来自豆瓣的<a href="https://www.douban.com/note/715205529/">医学通识50讲 薄世宁</a>讲的也比较详细。</li>
<li>来自搜狐的<a href="http://www.sohu.com/a/310071793_370913">《薄世宁·医学通识50讲》——教你如何与医生进行有效的沟通</a>也可以了解一下。</li>
</ol>


<p>现在将自己收听之后印象比较深的总结摘抄一下。</p>

<p><a id="markdown-现代医学的几个共识" name="现代医学的几个共识"></a></p>

<h2>现代医学的几个共识</h2>

<ol>
<li>生命第一。</li>
<li>疾病与人终生相伴，原因是人类进化的速度赶不上环境变化的速度。</li>
<li>医疗的本质是支持生命自身修复，医疗在这个过程中只能起到辅助的作用，是为自我修复提供时间，创造条件。</li>
<li>医学具有科学与人文的双重性格。</li>
</ol>


<p><a id="markdown-病与症" name="病与症"></a></p>

<h2>”病“与”症“</h2>

<p><a id="markdown-病和症区别对待" name="病和症区别对待"></a></p>

<h3>病和症区别对待</h3>

<p>发烧，大出血之后的低血压，原发性高血压等都是“症”，是结果，是人体的适应性反应。只有当“症”超过一定限度才需要治。如果一开始就针对“症”进行压制，往往适得其反。</p>

<p><a id="markdown-疾病的本源是进化的不完美" name="疾病的本源是进化的不完美"></a></p>

<h3>疾病的本源是进化的不完美</h3>

<ol>
<li>我们的基因是不完美的，人体的设计也是不完美的。我们与环境之间的适应也是不完美的。</li>
<li>疾病是人的身体和环境不适应的表现。环境在不断变化，人就需要不断进化。但是进化速度赶不上环境的变化速度，就产生了疾病。</li>
<li>疾病也有价值，疾病可以刺激人体免疫，可以成为进化的动力，推动整个物种进化。</li>
</ol>


<p><a id="markdown-代偿" name="代偿"></a></p>

<h2>代偿</h2>

<ol>
<li>慢性病平时发现不了，往往一旦发现就是晚期，原因是身体的代偿作用。比如，幽门螺杆菌破坏胃的内壁细胞，干细胞就会更多地分化为胃内壁细胞进行补充，使胃“凑活”着用。一旦干细胞分化都解决不了这个问题，就会表现出来“症”，就已经非常严重啦。</li>
<li>代偿让器官满足基本功能，却掩盖了症状。</li>
<li>疾病都不是突然发生，而是突然发现的</li>
</ol>


<p><a id="markdown-内共生" name="内共生"></a></p>

<h2>内共生</h2>

<p>身体每个部位都含有微生物，和人体是一个共生的作用，没必要去破坏这个平衡。因为人体已经适应了这些细菌，如果这些细菌被杀死，其它种类的细菌就回去了占领原来细菌的地盘，而人类和新的细菌还不能和谐相处，带来更严重的后果。所以，
1. 不要太干净：没有什么症状的情况下，最好不要过分杀菌消毒，比如用具有杀菌作用的漱口水等。
2. 抗生素当然是能不用就不用：用抗生素把常驻部队都杀了，那“土匪”就该捣乱了。我们应该善于利用体内的竞争关系：真菌和细菌本身就有竞争关系，抗生素杀菌可能让真菌大量繁殖，引起真菌感染。真菌感染更难危险。</p>

<p><a id="markdown-人体免疫" name="人体免疫"></a></p>

<h2>人体免疫</h2>

<p><a id="markdown-零免疫意味着疾病和死亡" name="零免疫意味着疾病和死亡"></a></p>

<h3>零免疫意味着疾病和死亡</h3>

<p><a id="markdown-人体和免疫系统有关的疾病的病因主要有三个方面" name="人体和免疫系统有关的疾病的病因主要有三个方面"></a></p>

<h3>人体和免疫系统有关的疾病的病因主要有三个方面：</h3>

<ol>
<li>人体免疫认不出“坏人”

<ol>
<li>流感病毒，不断地变换病毒表面的H蛋白&mdash;-辨别物质，人体免疫也就认不出来。</li>
<li>水痘-带状疱疹病毒，藏在神经节里。很多病毒可以藏在细胞里，让免疫细胞找不到。</li>
<li>癌细胞伪造一张“身份证”，骗过“警察”的检查。</li>
</ol>
</li>
<li>把“好人”当“坏人”

<ol>
<li>红斑狼疮</li>
<li>过敏是免疫系统把本来无害的物质辨别为“敌人”，产生过度的反应。比如过敏性鼻炎、荨麻疹、湿疹、哮喘。</li>
</ol>
</li>
<li>认出来但是打不过“坏人”

<ol>
<li>艾滋病、白血病、糖尿病、尿毒症</li>
<li>癌细胞释放物质，麻痹免疫细胞，让免疫细胞的能力降低。</li>
</ol>
</li>
</ol>


<p><a id="markdown-通过打疫苗保护内共生得小病可以提高免疫力" name="通过打疫苗保护内共生得小病可以提高免疫力"></a></p>

<h3>通过打疫苗，保护内共生，得小病，可以提高免疫力</h3>

<p>正确看待感染性疾病，尤其是不严重的感染性疾病。</p>

<p><a id="markdown-癌的生成机制同归于尽的疯狂跑车" name="癌的生成机制同归于尽的疯狂跑车"></a></p>

<h2>癌的生成机制：同归于尽的疯狂跑车</h2>

<p><a id="markdown-癌症就像一辆疯狂跑车它有六个环节" name="癌症就像一辆疯狂跑车它有六个环节"></a></p>

<h3>癌症就像一辆“疯狂跑车”，它有六个环节：</h3>

<ol>
<li>图纸错误。癌基因造出了癌细胞；

<ul>
<li>癌细胞最大的特点就是生长信号多，对抑制信号不敏感。长得快，不停长。</li>
</ul>
</li>
<li>自检体系失效。癌细胞赖着不死；

<ul>
<li>抑癌基因发生突变如基因P53</li>
</ul>
</li>
<li>癌细胞有丰富的血管和独特的能量利用系统；

<ul>
<li>正常情况下，一个细胞和最近的毛细血管距离不能超过100微米，癌细胞特别灵活，促进血管形成的信号增多，而抑制血管形成的信号减少。持续的新生血管形成，源源不断地给肿瘤组织供血。所以在临床上，多数恶性肿瘤通常都是血流丰富。医生们甚至用这个特点区分良性和恶性。</li>
</ul>
</li>
<li>免疫逃逸，癌细胞躲过了警察；</li>
<li>篡改里程，拒绝报废；

<ul>
<li>2009年，诺贝尔医学奖，发现染色体末端都有端粒。每次细胞分裂，端粒就缩短一部分。正常细胞分裂50次左右，端粒也就消耗光了。没有了端粒，细胞只能死。但是，“癌症跑车”会不断地篡改里程，不断地延长端粒长度。</li>
</ul>
</li>
<li>导航错乱，同归于尽。

<ul>
<li>癌细胞能在组织内部和组织间灵活移动，癌症容易发生侵袭和转移。</li>
</ul>
</li>
</ol>


<p><a id="markdown-癌症的所有治疗都是针对这6个环节" name="癌症的所有治疗都是针对这6个环节"></a></p>

<h3>癌症的所有治疗，都是针对这6个环节。</h3>

<ol>
<li>外科手术就好比端掉了汽车加工厂。</li>
<li>癌症的靶向药多数都是针对错误的图纸，根据基因突变类型，选择靶向治疗药物。</li>
<li>癌症的免疫治疗药物PD-1抑制剂，就是恢复警察的敏感性和战斗力，让警察擦亮眼睛，认出癌症跑车。</li>
<li>血管内皮生长因子抑制剂，就是针对癌症组织血管丰富的特点，抑制血管生长，也就抑制了肿瘤的生长。</li>
</ol>


<p><a id="markdown-癌症时间的老朋友" name="癌症时间的老朋友"></a></p>

<h2>癌症：时间的老朋友</h2>

<p><a id="markdown-引起癌症最大的危险因素是年龄年龄越大患癌风险越大" name="引起癌症最大的危险因素是年龄年龄越大患癌风险越大"></a></p>

<h3>引起癌症最大的危险因素是年龄，年龄越大，患癌风险越大</h3>

<p><strong>癌症基因突变最大的危险因素不是环境也不是遗传，而是随机错误。</strong></p>

<ol>
<li>染色体复制过程中发生的随机错误，占到66%。而环境因素和遗传因素，加一起也只占34%。</li>
<li>骨癌的基因突变：随机错误占了99.5%，遗传占0.5%，与环境因素完全无关。</li>
<li>甲状腺癌，随机错误占98%，遗传占1.5%，环境因素仅占微不足道的0.5%。</li>
<li>非何杰金氏淋巴瘤、脑部肿瘤、前列腺癌、睾丸癌，这些癌症的基因突变中，随机因素都占到了95%以上。</li>
</ol>


<p><a id="markdown-细胞分裂会带来基因突变生命就是一种癌前状态" name="细胞分裂会带来基因突变生命就是一种癌前状态"></a></p>

<h3>细胞分裂会带来基因突变，生命就是一种癌前状态</h3>

<p>细胞分裂需要染色体先进行复制。由于基因数量巨大，复制难免出错，错误出现在致癌基因上，就会出现癌症。</p>

<p><a id="markdown-既然年龄因素无法改变通过避免其他危险因素仍然可以减少相当比例的癌症发病" name="既然年龄因素无法改变通过避免其他危险因素仍然可以减少相当比例的癌症发病"></a></p>

<h3>既然年龄因素无法改变，通过避免其他危险因素，仍然可以减少相当比例的癌症发病</h3>

<ol>
<li>去除致癌因素，改变生活方式，可以很大程度上降低患癌风险

<ul>
<li>戒烟、戒酒、减肥、多运动、多吃全谷物食品、蔬菜、水果、豆类，少吃糖、少吃红肉（比如猪肉、牛肉、羊肉），这是改变生活方式。</li>
<li>避免乙肝病毒、丙肝病毒、幽门螺旋杆菌、HPV病毒感染。已经感染了，要治疗或者定期复查。</li>
</ul>
</li>
<li>定期进行疾病筛查。早期发现，早期治疗，具有很大的价值和意义

<ul>
<li>美国明尼苏达大学癌症检查中心，对45岁以上无症状的普通人每年做一次乙状结肠镜检查，见到腺瘤就切除。结肠癌、直肠癌发病率比预期的减少了85%</li>
</ul>
</li>
<li>咱们越来越长寿，那就应该接纳癌症，和它共存。</li>
</ol>


<p><a id="markdown-不同性格的人生病的风险也不同" name="不同性格的人生病的风险也不同"></a></p>

<h2>不同性格的人生病的风险也不同</h2>

<ol>
<li>A型性格的人：有雄心壮志，喜欢竞争，苛求自己，渴望出人头地；以事业成败作为人生评价的唯一标准；性情急躁，缺乏耐心，容易激动；有时间紧迫感，行动匆忙；下楼梯就一直抱怨电梯慢，恨不得自己跑下去；好斗，对人有敌意，看谁都是敌人。容易患高血压、冠心病等心身疾病。</li>
<li>B型性格的人更少患心脏病，并且更长寿：谦逊谨慎，不自以为是；做事有条理，游刃有余；足够自信，但不在别人面前自夸，也不迫切需求别人的肯定和赞赏；不轻易反对和敌视他人；心态平和，不为外界事物所扰乱；主动调节心态，不偏执，不自虐。</li>
<li>C型性格，这类人容易发生肿瘤，所以也被称为“肿瘤性格”：内向；喜欢谁不喜欢谁，自己心里知道就是不说；压抑自己的情绪，过分忍让，回避矛盾；遇到不公，怒而不发；憋着，爱生闷气。</li>
</ol>


<p><a id="markdown-疫苗对抗疾病的新逻辑" name="疫苗对抗疾病的新逻辑"></a></p>

<h2>疫苗：对抗疾病的新逻辑</h2>

<ol>
<li>疫苗的工作原理：用生小病来预防大病；不得病也能防病；疫苗在未来还可以治病。</li>
<li>疫苗安全源于原理，安全源于设计，安全源于覆盖。</li>
<li>虽然疫苗永远做不到100%安全，但是可以越来越安全。</li>
</ol>


<p><a id="markdown-重新定义生命终点" name="重新定义生命终点"></a></p>

<h2>重新定义生命终点</h2>

<p>重新定义生命终点：脑死亡是医学上认为的生命终点，而呼吸、心跳、血压等则不是，因为脑死亡是无法逆转的，而其它生命体征都是可以医学干预的，甚至脑之外的器官很多都可以更换，而大脑不可以（即是技术上可以了，换了大脑的一个人还是这个人吗？）。</p>

<ol>
<li>脑死亡作为死亡的诊断标准更科学。</li>
<li>脑死亡与植物人的区别，是生与死的区别。</li>
<li>脑死亡诊断标准具有一定的价值和意义，比如器官移植。</li>
</ol>


<p><a id="markdown-避孕药把女人的身体还给女人" name="避孕药把女人的身体还给女人"></a></p>

<h2>避孕药：把女人的身体还给女人</h2>

<ol>
<li>口服避孕药，让生育和性爱分割。</li>
<li>专业助产技术，让生育和死亡分割。</li>
<li>冻卵技术，让生育和年龄分割。</li>
</ol>


<p><a id="markdown-在信息不完备下快速决策" name="在信息不完备下快速决策"></a></p>

<h2>在信息不完备下快速决策</h2>

<p>信息不完备下的快速决策，由4条原则组成：</p>

<ol>
<li>唐僧原则，先保命，把紧急事件转化为常规事件。</li>
<li>第一张骨牌原则，找到复杂问题的关键点。</li>
<li>马蹄声原则（如果你听到马蹄声，先想马，不要猜斑马），按照概率大小考虑问题。</li>
<li>高尔夫原则（想要球最终进洞，都会不断调整自己的挥杆角度和站立的位置），不断校正，避免主观错误。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴军《信息论40讲》小结]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/08/26/infomation-theory/"/>
    <updated>2019-08-26T13:16:15+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/08/26/infomation-theory</id>
    <content type="html"><![CDATA[<p>对得道App上面吴军对信息论40讲的个人小结。</p>

<!-- more -->


<ul>
<li><a href="#%E4%BF%A1%E6%81%AF%E7%86%B5">信息熵</a>

<ul>
<li><a href="#%E6%AF%94%E7%89%B9">比特</a></li>
</ul>
</li>
<li><a href="#%E4%BF%A1%E9%81%93%E5%AE%B9%E9%87%8F">信道容量</a></li>
<li><a href="#%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">哈夫曼编码</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E6%AD%A3%E4%BA%A4">信息正交</a></li>
<li><a href="#%E4%BA%92%E4%BF%A1%E6%81%AF">互信息</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A">信息增益</a></li>
<li><a href="#%E9%A6%99%E5%86%9C%E7%AC%AC%E4%BA%8C%E5%AE%9A%E5%BE%8B">香农第二定律</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF">信息编码中的错误</a>

<ul>
<li><a href="#%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C">奇偶校验</a>

<ul>
<li><a href="#%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">工作方式</a></li>
<li><a href="#%E4%BC%98%E7%BC%BA%E7%82%B9">优缺点</a></li>
</ul>
</li>
<li><a href="#%E6%B5%B7%E6%98%8E%E7%A0%81%E6%A0%A1%E9%AA%8C">海明码校验</a>

<ul>
<li><a href="#%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F-1">工作方式</a></li>
<li><a href="#%E4%BC%98%E7%BC%BA%E7%82%B9-1">优缺点</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%B9%B8%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E8%A2%AB%E5%B7%B2%E7%9F%A5%E4%BF%A1%E6%81%AF%E8%AF%AF%E5%AF%BC">幸存者偏差：如何避免被已知信息误导？</a>

<ul>
<li><a href="#%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA">读书无用论</a></li>
<li><a href="#%E9%A3%9E%E6%9C%BA%E9%97%AE%E9%A2%98">飞机问题</a></li>
</ul>
</li>
<li><a href="#%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80%E6%B3%95%E5%88%99%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%80%E5%BE%80%E6%98%AF%E6%9C%80%E6%9C%89%E6%95%88%E7%9A%84">奥卡姆剃刀法则：最简单的往往是最有效的</a>

<ul>
<li><a href="#%E6%89%98%E5%8B%92%E5%AF%86%E5%9C%B0%E5%BF%83%E8%AF%B4">托勒密地心说</a></li>
<li><a href="#%E6%97%A5%E5%BF%83%E8%AF%B4%E5%92%8C%E7%89%9B%E9%A1%BF%E4%B8%87%E6%9C%89%E5%BC%95%E5%8A%9B%E5%AE%9A%E5%BE%8B">日心说和牛顿万有引力定律</a></li>
</ul>
</li>
<li><a href="#%E7%86%B5%E5%A2%9E%E5%8E%9F%E7%90%86-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BF%9D%E6%8C%81%E7%B3%BB%E7%BB%9F%E5%BC%80%E6%94%BE%E6%80%A7">熵增原理 为什么要保持系统开放性</a></li>
<li><a href="#%E6%8E%A7%E5%88%B6%E8%AE%BA%E8%BD%BB%E9%A2%84%E6%B5%8B%E9%87%8D%E5%8F%8D%E5%BA%94%E7%A7%B0%E4%B8%BA%E5%8F%98%E8%89%B2%E9%BE%99">控制论，轻预测重反应，称为变色龙</a>

<ul>
<li><a href="#%E5%8F%8D%E9%A6%88%E8%AE%BA">反馈论</a>

<ul>
<li><a href="#%E6%AD%A3%E5%8F%8D%E9%A6%88">正反馈</a></li>
<li><a href="#%E8%B4%9F%E5%8F%8D%E9%A6%88">负反馈</a></li>
</ul>
</li>
<li><a href="#%E5%9C%A8%E7%AE%A1%E7%90%86%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8">在管理上的应用</a></li>
</ul>
</li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BA">系统论</a></li>
</ul>


<p><a id="markdown-信息熵" name="信息熵"></a></p>

<h2>信息熵</h2>

<p>信息熵是香农提出的用来度量信息量的物理量，其满足以下三个特性：</p>

<ol>
<li>单调性：发生的概率越大，信息量越小</li>
<li>非负性</li>
<li>可加性</li>
</ol>


<p>香农在1948年的《通信的数学理论》中给出了信息熵的一种形式，并且<strong>证明这是唯一的一种形式</strong>。
信息熵为信息编码提供了理论的最优值，是实用编码的平均码长的理论下限，也就是无损压缩的最小值。</p>

<p>下面是信息熵的数学定义：</p>

<p><img src="http://hongchaozhang.github.io/images/xinxishang.jpg" alt="信息熵" /></p>

<p><a id="markdown-比特" name="比特"></a></p>

<h3>比特</h3>

<p>1比特信息：描述一个发生概率50%的事情发生或者不发生的信息的信息量。</p>

<p><a id="markdown-信道容量" name="信道容量"></a></p>

<h2>信道容量</h2>

<p>香农在《通信的数学理论》中从理论上证明，只要通信速率小于信道容量，总可以找到一种编码方式，使得错误率接近于零。信道容量由带宽和信噪比确定。
信道容量就是信道的临界通信速率值。</p>

<p>下面是香农给出的信道容量的数学公式：</p>

<p><img src="http://hongchaozhang.github.io/images/xindaorongliang.jpg" alt="信道容量" /></p>

<p><a id="markdown-哈夫曼编码" name="哈夫曼编码"></a></p>

<h2>哈夫曼编码</h2>

<p>最短编码：哈夫曼编码及其在平时做事时的原则</p>

<p>哈夫曼编码：将最优质的资源（短码）分配给最高概率出现的信息。</p>

<p>哈夫曼编码对我们做事的指导原则：将有限的资源分配给最可能出现的情况，比如投资。</p>

<p><a id="markdown-信息正交" name="信息正交"></a></p>

<h2>信息正交</h2>

<p>信息正交性：在信息很多的情况下如何作决策？</p>

<p><a id="markdown-互信息" name="互信息"></a></p>

<h2>互信息</h2>

<p>互信息：相关不是因果，那相关是什么？</p>

<p><a id="markdown-信息增益" name="信息增益"></a></p>

<h2>信息增益</h2>

<p>条件熵和信息增益：你提供的信息到底值多少钱？第一个提出某个观点的人最受人瞩目，附和的人很少被关注到。</p>

<p><a id="markdown-香农第二定律" name="香农第二定律"></a></p>

<h2>香农第二定律</h2>

<p>香农第二定律（一）：为什么你的网页总是打不开？
香农第二定律（二）：到底要不要扁平化管理？信道带宽和人际沟通</p>

<p><a id="markdown-信息编码中的错误" name="信息编码中的错误"></a></p>

<h2>信息编码中的错误</h2>

<p>纠错码：对待错误的正确态度是什么？</p>

<p>冗余在信息中的作用
如果一段文字没有冗余（文字大小严格等于信息熵），即所谓的“字字珠玑”，那么将非常难以理解。如果能从不同侧面加以说明（比如说，也就是说），将易于理解，但势必带来大量信息冗余。</p>

<p>在信息编码和通信领域，信息冗余可以用来较验信息或者对错误信息进行纠错。</p>

<p><a id="markdown-奇偶校验" name="奇偶校验"></a></p>

<h3>奇偶校验</h3>

<p><a id="markdown-工作方式" name="工作方式"></a></p>

<h4>工作方式</h4>

<p>用额外的一位（bit）信息记录一串二进制信息中1的个数是奇数还是偶数，接收方可以根据这一位信息对数据进行验证。</p>

<p><a id="markdown-优缺点" name="优缺点"></a></p>

<h4>优缺点</h4>

<p><strong>缺点</strong></p>

<ul>
<li>奇偶校验并不总是有效，如果数据中有偶数个位发生变化，则奇偶位仍将是正确的，因此不能检测出错误。</li>
<li>奇偶校验位是最简单的错误检测码，但是由于没有办法确定哪一位出错，所以它不能进行错误校正。发生错误时必须扔掉全部的数据，然后从头开始传输数据。在噪声很多的媒介上成功传输数据可能要花费很长的时间，甚至根本无法实现。</li>
</ul>


<p><strong>优点</strong></p>

<p>但是奇偶校验位也有它的优点，它是使用一位数据能够达到的最好的校验码，并且它仅仅需要一些异或门就能够生成。奇偶校验被广泛应用</p>

<p><a id="markdown-海明码校验" name="海明码校验"></a></p>

<h3>海明码校验</h3>

<p><a id="markdown-工作方式-1" name="工作方式-1"></a></p>

<h4>工作方式</h4>

<p>如果一条信息中包含更多用于纠错的位，且通过妥善安排这些纠错位使得不同的出错位产生不同的错误结果，那么我们就可以找出出错位了。在一个7位的信息中，单个位出错有7种可能，因此3个错误控制位就足以确定是否出错及哪一位出错了。</p>

<p><a id="markdown-优缺点-1" name="优缺点-1"></a></p>

<h4>优缺点</h4>

<p>相比于奇偶校验，优缺点很明显：可以进行自动纠错，但是需要更大的信息冗余。</p>

<p><a id="markdown-幸存者偏差如何避免被已知信息误导" name="幸存者偏差如何避免被已知信息误导"></a></p>

<h2>幸存者偏差：如何避免被已知信息误导？</h2>

<p>幸存者偏差意思是指，当取得资讯的渠道，仅来自于幸存者时（因为死人不会说话），此资讯可能会存在与实际情况不同的偏差。只能看到经过某种筛选而产生的结果，而没有意识到筛选的过程，因此忽略了被筛选掉的关键信息。在“沉默的数据”、“死人不会说话”等等日常表达中，涉及幸存者偏差。</p>

<p>此规律也适用于金融和商业领域。存活下来的企业往往被视为“传奇”，它们的做法被争相效仿。而其实有些也许只是因为偶然原因幸存下来了而已。</p>

<p><a id="markdown-读书无用论" name="读书无用论"></a></p>

<h3>读书无用论</h3>

<p>如今很多人在说，谁谁谁当初没好好上学如今照样挣大钱，而好多用功读书的人，毕业后反而不如那些没好好学习的人混得好。并且因为这样的例子有很多，所以很多人得出“上学没有用处”，“读书无用”的结论。</p>

<p>这些其实只是个例，因为基数太大，所以看起来有很多。2010年第六次全国人口普查的官方口径，可以算出来大专以上文化程度的人口仅占总人口的8.7%左右。可以看出学历低的人数远高于学历高的人数，所以即便低学历者成功率远低于高学历者，也照样会导致低学历者出现大批成功人士。</p>

<p>对于高学历者，普通人既会关注成功的人，也会关注那些没成功的人，并且高学历却落魄的人尤其受关注，容易被当做新闻报道；而对于低学历者，普通人往往只关注成功者，忽视了广大学历低又没成功的人。正是因为忽视了这些“沉默的数据”，才产生“读书无用”这种错误结论。</p>

<p><a id="markdown-飞机问题" name="飞机问题"></a></p>

<h3>飞机问题</h3>

<p>在二战期间，人们发现幸存的轰炸机中，机翼中弹的数量很多，而机身中弹的却很少。因此人们认为我们应该加固飞机的机翼。其实不然，就是因为机翼中弹多还能飞回来，所以机翼中弹并没有影响飞机返航；而机身中弹的少则说明了子弹打中机身对飞机的影响更大，导致飞机不能返航。</p>

<p>举一个与之相同的例子，经过枪击案而活下来的人当中，手部和腿部中弹的居多，而击中头部和心脏的少之又少，正说明了人的头部和心脏对死亡率的影响更大而不是手和腿。</p>

<p><a id="markdown-奥卡姆剃刀法则最简单的往往是最有效的" name="奥卡姆剃刀法则最简单的往往是最有效的"></a></p>

<h2>奥卡姆剃刀法则：最简单的往往是最有效的</h2>

<p>这个原理称为“如无必要，勿增实体”，即“简单有效原理”。正如奥卡姆在《箴言书注》2卷15题说“切勿浪费较多东西去做，用较少的东西，同样可以做好的事情。”</p>

<p>地心说和日心说的发展过程清洗地展示了奥卡姆剃刀法则。</p>

<p><a id="markdown-托勒密地心说" name="托勒密地心说"></a></p>

<h3>托勒密地心说</h3>

<p>在托勒密之前，很多人就对宇宙模型进行了建模，但是过于复杂。托勒密力求以最简单的假设对各种现象作出统一的解释，这就是“简单性原则”。这也许就是奥卡姆剃刀的雏形。托勒密基于这种原则和当时人们所接受的动力学原理，提出了自己的地心说模型。后来，天主教教会接纳此为世界观的“正统理论”。</p>

<p><a id="markdown-日心说和牛顿万有引力定律" name="日心说和牛顿万有引力定律"></a></p>

<h3>日心说和牛顿万有引力定律</h3>

<p>虽然托勒密的地心说相比于之前的情形已经简化了很多，但是仍然不能很好滴解释很多新的天文观测数据。</p>

<p>尽管如此，信奉地心说的人们并没有认识到这是由于地心说本身的错误造成的，却用增加本轮的方法来补救地心说。起初这种办法还能勉强应付，后来小本轮增加到80多个，但仍不能满意地计算出行星的准确位置，这就不能不使人怀疑地心说的正确性了。</p>

<p>而牛顿的万有引力定律是那么简单完美地解释了一切天文观测数据，因此，日心说才替代地心说，称为主流观点。</p>

<p><a id="markdown-熵增原理-为什么要保持系统开放性" name="熵增原理-为什么要保持系统开放性"></a></p>

<h2>熵增原理 为什么要保持系统开放性</h2>

<p>熵增原理，即热力学第二定律，指的是孤立热力学系统的熵不减少，总是增大或者不变。熵增原理用来给出一个孤立系统的演化方向。说明一个孤立系统不可能朝低熵的状态发展即不会变得有序。</p>

<p>如果一个人严格封闭了自己，那么也不会进步（熵减少，更有序）。只有通过和他人沟通学习（吸取负熵），才能进步。一个公司，一个国家也是如此。</p>

<p><a id="markdown-控制论轻预测重反应称为变色龙" name="控制论轻预测重反应称为变色龙"></a></p>

<h2>控制论，轻预测重反应，称为变色龙</h2>

<p>主要是反馈论，包括从功能的观点对机器和物体中（神经系统、内分泌及其他系统）的调节和控制的一般规律的研究。</p>

<p><a id="markdown-反馈论" name="反馈论"></a></p>

<h3>反馈论</h3>

<p>反馈论主要包括正反馈和负反馈。</p>

<p><a id="markdown-正反馈" name="正反馈"></a></p>

<h4>正反馈</h4>

<p>正反馈是指反馈信息影响系统再输出的结果，更加增大了受控量的实际值和期望值的偏差，从而使系统趋向于不稳定状态。</p>

<p>两个话筒离得很近的时候，“尖叫声”会越来越大，即是正反馈所致。</p>

<p>一般所谓的“恶性循环”即包含正反馈的概念在里面。比如，一旦一个人别贴上了某种标签，他就会更加快地越来越像这种标签描述的人。</p>

<p>生理中，正反馈的意义在于使生理过程不断加强，直至最终完成生理功能，在正反馈情况下，反馈控制系统处于再生状态。体内常见的正反馈现象：排便，排尿，分娩，凝血，射精等。</p>

<p>蜂后的形成过程也是一个正反馈的过程：起初两个蜂是一样的，都会分泌一些抑制对方成为蜂后的化学物质，但是由于起初两只蜂分泌的数量有了一点点差别，导致一只会向蜂后方向发展的快一点，由于快了一点点，分泌出的抑制对方的物质就回更多一点，反过来促使其向蜂后发展的更快&hellip;（记不太清楚这是不是蜂后的演化过程了，也可能是某种细胞的分化过程。）</p>

<p><a id="markdown-负反馈" name="负反馈"></a></p>

<h4>负反馈</h4>

<p>负反馈是指反馈信息影响系统再输出的结果，减小了受控量的实际值和期望值的偏差，从而使系统趋向于稳定状态。</p>

<p>工业系统中的PID控制即是典型的负反馈应用。</p>

<p>汽车的巡航定速系统可以作为负反馈的另一个例子，它会使得车速符合一个预先设定的速度上限。汽车的控制系统的输入包括引擎的扭力和路面的坡度（扰动），而速度计可以测量车速。速度计得到的车速和目标速度（预先设定）之间的差距就是误差信号。控制器接收到这个信号之后会改变加速度，控制流入引擎（效应器）的燃料增多。于是，引擎扭力发生改变，和路面坡度相关的扭力输出的反馈减少了速度的误差，缩小了路面造成的扰动。</p>

<p><a id="markdown-在管理上的应用" name="在管理上的应用"></a></p>

<h3>在管理上的应用</h3>

<p>从控制系统的主要特征出发来考察管理系统，可以得出这样的论：管理系统是一种典型的控制系统。管理系统中的控制过程在本质上与工程的、生物的系统是一样的，都是通过信息反馈来揭示成效与标准之间的差，并采取纠正措施，使系统稳定在预定的目标状态上的。因此，从理论说：适合于工程的、生物的控制论的理论与方法，也适合于分析和说明管理控制问题。</p>

<p><a id="markdown-系统论" name="系统论"></a></p>

<h2>系统论</h2>

<p>找准系统瓶颈，使部分之和大于整体，而不是相反。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网和移动通信简史]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/08/25/mobile-comunication-and-internet/"/>
    <updated>2019-08-25T15:32:34+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/08/25/mobile-comunication-and-internet</id>
    <content type="html"><![CDATA[<p>得到App里面吴军关于5G、物联网和移动通信发展史的一些看法。</p>

<!-- more -->


<ul>
<li><a href="#iot%E6%98%AF%E7%AC%AC%E4%B8%89%E4%BB%A3%E4%BA%92%E8%81%94%E7%BD%91">IoT是第三代互联网</a>

<ul>
<li><a href="#%E7%AC%AC%E4%B8%80%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%81%94%E7%BD%91">第一代：计算机和计算机联网</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E4%BB%A3%E4%BA%BA%E5%92%8C%E4%BA%BA%E8%81%94%E7%BD%91%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91">第二代：人和人联网（移动互联网）</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E4%BB%A3%E4%B8%87%E7%89%A9%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%BD%91%E5%8C%85%E6%8B%AC%E4%BA%92%E8%81%94%E7%BD%91%E5%92%8C%E4%BA%BA">第三代：万物之间的联网，包括互联网和人</a></li>
</ul>
</li>
<li><a href="#%E7%A7%BB%E5%8A%A8%E9%80%9A%E4%BF%A1%E7%AE%80%E5%8F%B2">移动通信简史</a>

<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E7%89%B9%E7%82%B9">总体特点</a></li>
<li><a href="#1g">1G</a></li>
<li><a href="#2g">2G</a></li>
<li><a href="#3g">3G</a></li>
<li><a href="#4g">4G</a></li>
<li><a href="#5g">5G</a>

<ul>
<li><a href="#%E5%9F%BA%E7%AB%99%E6%95%B0%E9%87%8F%E5%A2%9E%E5%8A%A02%E4%B8%AA%E6%95%B0%E9%87%8F%E7%BA%A7">基站数量增加2个数量级</a></li>
<li><a href="#%E6%80%BB%E4%BD%93%E7%9A%84%E8%83%BD%E8%80%97%E4%B8%8D%E5%A2%9E%E5%8A%A0">总体的能耗不增加</a></li>
<li><a href="#%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E9%AB%98%E5%BA%A6%E8%9E%8D%E5%90%88">电信网络和移动网络的高度融合</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E6%9C%AA%E6%9D%A5%E8%B0%81%E6%98%AF%E5%8F%97%E7%9B%8A%E8%80%85">未来谁是受益者</a></li>
</ul>


<p><a id="markdown-iot是第三代互联网" name="iot是第三代互联网"></a></p>

<h2>IoT是第三代互联网</h2>

<p>第一代：计算机和计算机联网
第二代：人和人联网（移动互联网）
第三代：万物之间的联网，包括互联网和人</p>

<p><a id="markdown-第一代计算机和计算机联网" name="第一代计算机和计算机联网"></a></p>

<h3>第一代：计算机和计算机联网</h3>

<p>Windows和英特尔是这一代互联网的龙头老大。计算机可以有不同的品牌，但是操作系统一定是Windows，各种芯片一定是英特尔。</p>

<p><a id="markdown-第二代人和人联网移动互联网" name="第二代人和人联网移动互联网"></a></p>

<h3>第二代：人和人联网（移动互联网）</h3>

<p>谷歌的安卓系统和ARM的处理器是这一代互联网设备（主要是手机）绕不过去的。这一代的格局和第一代一样。</p>

<p><a id="markdown-第三代万物之间的联网包括互联网和人" name="第三代万物之间的联网包括互联网和人"></a></p>

<h3>第三代：万物之间的联网，包括互联网和人</h3>

<p>万物互联时代，各种东西都要联网，数量级相比第二代互联网至少增加1.5个数量级。4G网络已经容纳不下这么多设备了。</p>

<p>这就是5G的必要性。</p>

<p><a id="markdown-移动通信简史" name="移动通信简史"></a></p>

<h2>移动通信简史</h2>

<p>1G：摩托罗拉，模拟电路，大哥大
2G：诺基亚，GMS，数字电路，翻盖手机
3G：高通，CDMA，移动互联网，相比2G，网速提高一个数量级。
4G：LTE，网速进一步提高，开始和互联网融合。
5G：移动通信和互联网高度融合。</p>

<p><a id="markdown-总体特点" name="总体特点"></a></p>

<h3>总体特点</h3>

<ul>
<li>基站之间是有线连接，带宽高，而且不浪费空中资源。</li>
<li>网络不断融合。</li>
<li>频率越来越高。</li>
</ul>


<p><a id="markdown-1g" name="1g"></a></p>

<h3>1G</h3>

<p>在这个时代，移动通信（大哥大）和传统电信（固定电话）是分家的。今天我们看来，感觉很蠢，当时是利益使然。</p>

<p><a id="markdown-2g" name="2g"></a></p>

<h3>2G</h3>

<p>移动通信从模拟电路转到了数字电路，得益于数字芯片的体积小这一优点，有了小巧的翻盖手机。</p>

<p>第二代移动通信除了打电话，还能发短信。不过，也只能如此了，因为其通信带宽还很小。</p>

<p><a id="markdown-3g" name="3g"></a></p>

<h3>3G</h3>

<p>CDMA标准使得网速有了一个数量级的提高，使得能够正常浏览网页，但是看视频还是不行。智能手机开始出现。</p>

<p>这时候，移动网络（手机）和电信网络（Wifi）的主干网基本融合，但是末端还是分离的。下面一段话没怎么理解：</p>

<blockquote><p>从第三代到第四代，还有一个让你感觉荒唐的地方，咱们说固定电话和移动电话的分离，到第三代固定电话和移动电话，你可以认为是和合二为一了，基本上主干网合二为一了，而且移动互联网智能手机起来的时候，很多人家里没有固定电话了。以前家里两个电话，一个固定电话、一个手机，留电话都是留两个。</p></blockquote>

<p><a id="markdown-4g" name="4g"></a></p>

<h3>4G</h3>

<p>相比于第三代，第四代基本没有特殊需求的基站，还是利用原来的基站（建基站只是为了提高覆盖率，从技术上讲不是必需的。）。</p>

<p>此时移动网络和Wifi还是分离的。</p>

<p><a id="markdown-5g" name="5g"></a></p>

<h3>5G</h3>

<p><a id="markdown-基站数量增加2个数量级" name="基站数量增加2个数量级"></a></p>

<h4>基站数量增加2个数量级</h4>

<p>基站距离从4G时代的2-3千米缩小到200-300米，缩小一个数量级，基站数量就要增加两个数量级。</p>

<p><a id="markdown-总体的能耗不增加" name="总体的能耗不增加"></a></p>

<h4>总体的能耗不增加</h4>

<p>由于每个基站只用照顾原来面积的1%，所以理论上来说，每个基站需要发射的能量是原来的1%，总能量和原来持平。</p>

<p><a id="markdown-电信网络和移动网络的高度融合" name="电信网络和移动网络的高度融合"></a></p>

<h4>电信网络和移动网络的高度融合</h4>

<p>这个时候，家里面就不需要Wifi了：Wifi会像当初固定电话一样从家庭环境中消失。</p>

<p><a id="markdown-未来谁是受益者" name="未来谁是受益者"></a></p>

<h2>未来谁是受益者</h2>

<ul>
<li>适用于Iot设备的低功耗处理器厂商</li>
<li>适用于Iot设备的操作系统</li>
<li>设备制造商

<ul>
<li>第一代互联网：Dell，HP，联想，宏基</li>
<li>第二代互联网：小米，华为，Vivo/OPPO</li>
<li>Iot时代：？？</li>
</ul>
</li>
<li>应用开发商</li>
<li>通信标准

<ul>
<li>摩托罗拉，诺基亚，高通，华为</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴军的硅谷来信]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/07/09/wujunguigulaixin/"/>
    <updated>2019-07-09T10:13:06+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/07/09/wujunguigulaixin</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E7%AC%AC9%E5%B0%81%E4%BF%A1vr%E6%8A%80%E6%9C%AF%E4%B8%8E%E7%AC%AC%E4%B8%89%E7%9C%BC%E7%BE%8E%E5%A5%B3">第9封信，VR技术与“第三眼美女”</a></li>
<li><a href="#%E7%AC%AC18%E5%B0%81%E4%BF%A1%E6%9C%9F%E6%9C%9B%E5%80%BC%E6%9C%80%E5%A4%A7%E5%8C%96%E5%8E%9F%E5%88%99%E5%92%8C%E5%AE%83%E5%9C%A8%E7%94%9F%E6%B4%BB%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8">第18封信，期望值最大化原则和它在生活上的应用</a></li>
<li><a href="#%E7%AC%AC19%E5%B0%81%E4%BF%A1%E6%9C%89%E5%B0%8F%E8%81%AA%E6%98%8E%E6%B2%A1%E6%9C%89%E6%99%BA%E6%85%A7%E7%9A%84%E4%BA%BA">第19封信，有小聪明没有智慧的人</a></li>
<li><a href="#%E7%AC%AC20%E5%B0%81%E4%BF%A1%E5%86%8D%E8%B0%88%E8%B0%882%E5%92%8C98%E7%9A%84%E9%97%AE%E9%A2%98">第20封信，再谈谈2%和98%的问题</a></li>
<li><a href="#%E7%AC%AC21%E5%B0%81%E4%BF%A1%E8%A5%BF%E7%93%9C%E4%B8%8E%E8%8A%9D%E9%BA%BB">第21封信，西瓜与芝麻</a></li>
<li><a href="#%E7%AC%AC26%E5%B0%81%E4%BF%A1%E4%BE%BF%E5%AE%9C%E7%9A%84%E7%9C%BC%E6%B3%AA">第26封信，便宜的眼泪</a></li>
<li><a href="#%E7%AC%AC28%E5%B0%81%E4%BF%A1%E5%9C%A8%E7%BE%8E%E5%9B%BD%E6%9C%80%E6%9C%89%E9%92%B1%E7%9A%84%E4%BA%BA%E6%AF%94%E4%BB%80%E4%B9%88%E5%85%BC%E8%B0%88%E7%BE%8E%E5%9B%BD%E7%9A%84%E6%85%88%E5%96%84%E6%96%87%E5%8C%96">第28封信，在美国最有钱的人比什么，兼谈美国的慈善文化</a></li>
<li><a href="#%E7%AC%AC29%E5%B0%81%E4%BF%A1%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%88%B6%E6%AF%8D%E6%88%90%E7%86%9F%E8%B5%B7%E6%9D%A5">第29封信，让你的父母成熟起来</a></li>
<li><a href="#%E7%AC%AC30%E5%B0%81%E4%BF%A1%E5%86%8D%E8%AE%AE%E6%9E%97%E9%BB%9B%E7%8E%89">第30封信，再议林黛玉</a></li>
<li><a href="#%E7%AC%AC31%E5%B0%81%E4%BF%A1%E7%BE%8E%E5%9B%BD%E7%A7%81%E7%AB%8B%E4%B8%AD%E5%AD%A6%E5%A6%82%E4%BD%95%E6%95%99%E8%AF%AD%E6%96%87%E5%92%8C%E5%8E%86%E5%8F%B2">第31封信，美国私立中学如何教语文和历史</a></li>
<li><a href="#%E7%AC%AC35%E5%B0%81%E4%BF%A1%E7%A1%85%E8%B0%B7%E9%AB%98%E5%88%9B%E4%BC%9A">第35封信，硅谷高创会</a></li>
<li><a href="#%E7%AC%AC50%E5%B0%81%E4%BF%A1%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E6%B2%A1%E6%9C%89%E6%AC%A0%E4%BD%A0%E4%BB%80%E4%B9%88">第50封信，这个世界没有欠你什么</a></li>
<li><a href="#%E7%AC%AC58%E5%B0%81%E4%BF%A1%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E4%BA%A7%E4%B8%9A%E7%89%B9%E7%82%B9">第58封信，智能时代的产业特点</a></li>
<li><a href="#%E7%AC%AC67%E5%B0%81%E4%BF%A1%E9%98%BF%E6%8B%89%E6%96%AF%E5%8A%A0%E6%97%A5%E8%AE%B02%E5%90%AC%E4%B9%A6%E5%88%86%E4%BA%AB%E5%81%9A%E6%9D%A1%E7%8B%97">第67封信，阿拉斯加日记2：听书分享《做条狗》</a></li>
<li><a href="#%E7%AC%AC104%E5%B0%81%E4%BF%A1%E8%B5%B5%E5%B0%8F%E5%85%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E5%BD%93%E4%B8%8A%E9%83%A8%E9%95%BF%E8%B0%88%E8%B0%88%E8%AE%B2%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95">第104封信，赵小兰为什么能当上部长——谈谈讲理的方法</a></li>
<li><a href="#%E7%AC%AC105%E5%B0%81%E4%BF%A1%E6%88%91%E4%BB%AC%E9%9D%A0%E4%BB%80%E4%B9%88%E6%9C%8D%E4%BA%BA1%E4%BB%8E%E6%97%A5%E5%BF%83%E8%AF%B4%E7%9A%84%E5%85%AC%E6%A1%88%E8%AF%B4%E8%B5%B7">第105封信，我们靠什么服人1：从日心说的公案说起</a></li>
<li><a href="#%E7%AC%AC118%E5%B0%81%E4%BF%A1%E5%81%9A%E7%94%9F%E6%84%8F%E5%92%8C%E7%AE%A1%E7%90%86%E7%9A%84%E7%A7%98%E8%AF%80%E4%B8%8D%E7%BB%99%E9%80%89%E6%8B%A9">第118封信，做生意和管理的秘诀：不给选择</a></li>
<li><a href="#%E7%AC%AC126%E5%B0%81%E4%BF%A1%E6%8B%89%E9%87%8C%E4%BD%A9%E5%A5%87%E7%9A%84%E6%99%BA%E6%85%A73%E8%B0%B7%E6%AD%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8B%86%E5%88%86">第126封信，拉里佩奇的智慧3：谷歌为什么要拆分</a></li>
<li><a href="#140%E5%B8%B8%E8%AF%86%E7%A7%91%E6%8A%80%E5%92%8C%E8%89%BA%E6%9C%AF">140.常识、科技和艺术</a></li>
<li><a href="#156%E6%9C%B4%E7%B4%A0%E6%98%AF%E5%AF%8C%E8%B1%AA%E7%9A%84%E4%B8%93%E5%88%A9">156.朴素是富豪的专利</a></li>
<li><a href="#160%E5%93%88%E4%BD%9B%E5%92%8C%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%95%86%E5%AD%A6%E9%99%A2%E4%BC%A0%E6%8E%88%E7%9A%84%E7%B2%BE%E9%AB%93">160.哈佛和斯坦福商学院传授的精髓</a></li>
<li><a href="#163%E8%BF%90%E6%B0%94%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7">163.运气的重要性</a></li>
<li><a href="#168%E5%AF%B9%E8%AF%9D%E5%BA%84%E5%AD%902%E6%88%91%E4%BB%AC%E6%98%AF%E5%90%A6%E6%9C%89%E8%87%AA%E7%94%B1%E6%84%8F%E5%BF%97">168.对话庄子2：我们是否有自由意志？</a></li>
<li><a href="#173%E6%89%BE%E4%B8%80%E4%B8%AA%E9%95%BF%E6%9C%9F%E5%AF%B9%E4%BD%A0%E5%A5%BD%E7%9A%84%E4%BA%BA%E4%BB%8E%E5%B7%B4%E8%8F%B2%E7%89%B9%E8%B4%AD%E4%B9%B0%E8%8B%B9%E6%9E%9C%E8%82%A1%E7%A5%A8%E8%AF%B4%E8%B5%B7">173.找一个长期对你好的人，从巴菲特购买苹果股票说起</a></li>
<li><a href="#174%E4%BA%BA%E7%94%9F%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%8A%95%E8%B5%84%E4%B8%8A">174.人生最重要的投资（上）</a></li>
<li><a href="#180%E6%9C%AA%E6%9D%A5%E5%95%86%E4%B8%9A%E7%9A%84%E7%89%B9%E7%82%B91%E5%85%B1%E4%BA%AB%E7%BB%8F%E6%B5%8E">180.未来商业的特点（1）：共享经济</a></li>
<li><a href="#183%E6%9C%AA%E6%9D%A5%E5%95%86%E4%B8%9A%E7%9A%84%E7%89%B9%E7%82%B94%E5%90%88%E4%BD%9C%E7%BB%8F%E6%B5%8E">183.未来商业的特点（4）：合作经济</a></li>
<li><a href="#189%E5%AD%90%E5%A5%B3%E6%95%99%E8%82%B22%E8%BE%9B%E8%8B%A6%E5%92%8C%E7%97%9B%E8%8B%A6">189.子女教育（2）：辛苦和痛苦</a></li>
<li><a href="#190%E5%AD%90%E5%A5%B3%E6%95%99%E8%82%B23%E5%85%B4%E8%B6%A3%E7%9A%84%E5%9F%B9%E5%85%BB">190.子女教育（3）：兴趣的培养</a></li>
<li><a href="#192%E5%B0%8F%E9%B2%9C%E8%82%89%E5%92%8C%E6%88%8F%E9%AA%A8%E6%A9%98%E5%AD%90%E5%92%8C%E8%8B%B9%E6%9E%9C%E7%9A%84%E5%AF%B9%E6%AF%94">192.小鲜肉和戏骨：橘子和苹果的对比</a></li>
<li><a href="#195%E4%B8%AD%E5%9B%BD%E4%BE%9D%E7%84%B6%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%A7%E8%B4%BE%E5%BA%9C%E8%87%AA%E7%BB%99%E8%87%AA%E8%B6%B3%E6%96%87%E5%8C%96%E6%A0%B9%E6%B7%B1%E8%92%82%E5%9B%BA">195.中国依然是一个大贾府，自给自足文化根深蒂固。</a></li>
<li><a href="#197%E6%99%B4%E9%9B%AF%E7%9A%84%E6%82%B2%E5%89%A7">197.晴雯的悲剧</a></li>
<li><a href="#201%E8%B0%B7%E6%AD%8C%E5%B0%8F%E6%97%B6%E5%80%99%E7%9A%84%E6%95%85%E4%BA%8B%E7%BB%99%E5%88%9D%E5%88%9B%E5%85%AC%E5%8F%B8%E5%88%9B%E5%A7%8B%E4%BA%BA%E7%9A%84%E5%BB%BA%E8%AE%AE">201.谷歌小时候的故事：给初创公司创始人的建议</a></li>
<li><a href="#204%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8B%E5%8D%8A%E5%9C%BA">204.没有什么下半场</a></li>
<li><a href="#205%E9%A6%99%E5%86%9C%E7%AC%AC%E4%BA%8C%E5%AE%9A%E7%90%86%E5%B8%A6%E5%AE%BD%E5%86%B3%E5%AE%9A%E7%94%9F%E6%84%8F%E5%A4%A7%E5%B0%8F">205.香农第二定理：带宽决定生意大小</a></li>
<li><a href="#208%E8%81%8C%E5%9C%BA%E4%B8%8A%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%AF%AF%E5%8C%BA%E5%92%8C%E5%9B%9B%E4%B8%AA%E5%81%9A%E6%B3%95">208.职场上的四个误区和四个做法</a></li>
<li><a href="#209%E8%81%8C%E4%B8%9A%E5%91%98%E5%B7%A5%E5%92%8C%E7%AE%A1%E7%90%86%E8%80%85%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%A4%E4%BB%B6%E4%BA%8B">209.职业员工和管理者要注意的两件事</a></li>
<li><a href="#211%E9%9D%A2%E8%AF%95%E7%9A%84%E6%8A%80%E5%B7%A7%E4%B8%8B%E8%AE%A9%E5%AF%B9%E6%96%B9%E4%BA%86%E8%A7%A3%E4%BD%A0%E7%9A%84%E4%BB%B7%E5%80%BC">211.面试的技巧（下）：让对方了解你的价值</a></li>
<li><a href="#2142017%E5%B9%B4%E5%8D%81%E5%A4%A7%E7%A7%91%E6%8A%80%E7%AA%81%E7%A0%B4%E7%82%B9%E8%AF%84">214.2017年十大科技突破点评</a></li>
<li><a href="#215%E6%9C%80%E5%A5%BD%E6%98%AF%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%95%8C%E4%BA%BA">215.最好是更好的敌人</a></li>
<li><a href="#216%E6%9C%89%E6%B2%A1%E6%9C%89%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8A%9E%E6%B3%95">216.有没有更好的办法？</a></li>
<li><a href="#218%E7%94%9F%E5%91%BD%E7%9A%84%E6%97%A0%E5%A5%88">218.生命的无奈</a></li>
<li><a href="#219%E9%98%85%E8%AF%BB%E7%9A%84%E6%84%8F%E4%B9%89">219.阅读的意义</a></li>
<li><a href="#222%E6%9B%BC%E6%96%BD%E5%9D%A6%E5%9B%A0%E5%92%8C%E4%B8%93%E5%88%A9">222.曼施坦因和专利</a></li>
<li><a href="#225%E6%B2%A1%E6%9C%89%E6%82%AC%E5%BF%B5%E7%9A%84%E6%AF%94%E8%B5%9B%E6%9F%AF%E6%B4%81%E5%AF%B9%E9%98%B5alphago">225.没有悬念的比赛——柯洁对阵AlphaGo</a></li>
<li><a href="#232%E9%AB%98%E8%80%83%E5%89%8D%E7%BB%99%E5%AD%A6%E7%94%9F%E5%92%8C%E5%AE%B6%E9%95%BF%E4%BB%AC%E7%9A%84%E5%BB%BA%E8%AE%AE">232.高考前给学生和家长们的建议</a></li>
<li><a href="#233%E5%A4%A7%E5%AD%A6%E8%80%83%E8%AF%95%E7%A7%98%E7%B1%8D">233.大学考试秘籍</a></li>
<li><a href="#236%E6%88%91%E7%9A%84%E6%8A%95%E8%B5%84%E5%8E%9F%E5%88%99">236.我的投资原则</a></li>
<li><a href="#240%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%BE%85%E5%AF%8C%E4%BA%BA%E7%9A%84%E8%B4%A2%E5%AF%8C%E8%81%8A%E8%81%8A%E7%A4%BE%E4%BC%9A%E7%9A%84%E5%85%AC%E5%B9%B3%E6%80%A7">240.怎样看待富人的财富——聊聊社会的公平性</a></li>
<li><a href="#244%E5%87%A1%E4%BA%8B%E9%83%BD%E8%A6%81%E4%B8%93%E6%B3%A8alphago%E7%9A%84%E6%A0%B8%E5%BF%83%E8%8A%AF%E7%89%87tpu%E8%A7%A3%E6%9E%90">244.凡事都要专注——AlphaGo的核心芯片TPU解析</a></li>
<li><a href="#247%E5%81%9A%E4%BA%8B%E5%89%8D%E4%B8%8D%E8%A6%81%E8%BF%87%E5%88%86%E7%AE%97%E6%A6%82%E7%8E%87">247.做事前不要过分算概率</a></li>
<li><a href="#248%E9%AB%98%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%94%9F%E6%9A%91%E6%9C%9F%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88">248.高中毕业生暑期可以做什么？</a></li>
<li><a href="#%E5%9B%BE%E4%B9%A6%E6%8E%A8%E8%8D%90">图书推荐</a>

<ul>
<li><a href="#249%E6%88%91%E7%BB%99%E4%B8%AD%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B9%A6%E5%8D%95">249.我给中学生的书单</a></li>
<li><a href="#290%E7%BB%99%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B9%A6%E5%8D%95%E4%B8%AD%E4%B8%8B">290.给大学生的书单（中、下）</a></li>
</ul>
</li>
<li><a href="#255%E5%A1%AB%E6%8A%A5%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E7%9A%84%E5%BB%BA%E8%AE%AE%E4%B8%8A%E8%80%83%E8%99%91%E7%9A%84%E5%9B%A0%E7%B4%A0">255.填报高考志愿的建议（上）：考虑的因素</a></li>
<li><a href="#256%E5%A1%AB%E6%8A%A5%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E7%9A%84%E5%BB%BA%E8%AE%AE%E4%B8%8B%E9%80%89%E6%8B%A9%E4%B8%93%E4%B8%9A%E7%9A%84%E5%8E%9F%E5%88%99">256.填报高考志愿的建议（下）：选择专业的原则</a></li>
<li><a href="#258%E8%AE%AD%E7%BB%83%E5%A5%BD%E7%9A%84%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%E8%AF%81%E4%BC%AA%E6%AF%94%E8%AF%81%E5%AE%9E%E6%9B%B4%E9%87%8D%E8%A6%81">258.训练好的<strong>思维方式</strong>——证伪比证实更重要</a></li>
<li><a href="#259-261-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%BF%A1%E6%81%AF%E7%9A%84%E7%9C%9F%E4%BC%AA">259-261 如何判断信息的真伪</a>

<ul>
<li><a href="#259%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E8%A7%82%E7%82%B9%E5%88%A4%E5%AE%9A%E5%88%A9%E7%9B%8A%E5%86%B2%E7%AA%81">259.如何判断一个人的观点——判定利益冲突</a></li>
<li><a href="#260%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E8%BF%87%E6%BB%A4%E4%BF%A1%E6%81%AF%E5%92%8C%E7%BB%93%E8%AE%BA">260.使用逻辑过滤信息和结论</a></li>
<li><a href="#261%E5%88%A9%E7%94%A8%E6%88%90%E6%9C%AC%E6%80%9D%E7%BB%B4%E8%BF%9B%E8%A1%8C%E5%88%A4%E6%96%AD">261.利用成本思维进行判断</a></li>
</ul>
</li>
<li><a href="#264%E4%B8%80%E4%BD%8D%E8%BE%93%E5%9C%A8%E8%B5%B7%E8%B7%91%E7%BA%BF%E4%B8%8A%E7%9A%84%E7%B2%BE%E7%A5%9E%E5%AF%BC%E5%B8%88">264.一位输在起跑线上的精神导师</a></li>
<li><a href="#265%E6%88%91%E7%9A%84%E7%B2%BE%E7%A5%9E%E5%AF%BC%E5%B8%88%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97">265.我的精神导师富兰克林</a></li>
<li><a href="#267%E6%88%91%E7%9A%84%E7%B2%BE%E7%A5%9E%E5%AF%BC%E5%B8%88%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%973%E6%88%90%E5%8A%9F%E4%B9%8B%E9%81%93">267.我的精神导师富兰克林（3）——成功之道</a></li>
<li><a href="#268%E6%88%91%E7%9A%84%E5%87%A0%E4%BD%8D%E6%81%A9%E5%B8%88">268.我的几位恩师</a></li>
<li><a href="#272%E5%9B%BD%E6%B0%91%E7%89%B9%E6%80%A71%E6%97%A5%E6%9C%AC%E4%BA%BA%E4%B8%8A">272.国民特性（1）——日本人（上）</a></li>
<li><a href="#273%E5%9B%BD%E6%B0%91%E7%89%B9%E6%80%A73%E6%97%A5%E6%9C%AC%E4%BA%BA%E4%B8%8B">273.国民特性（3）——日本人（下）</a></li>
<li><a href="#%E7%89%B9%E5%88%AB%E6%9D%A5%E4%BF%A1%E9%87%8D%E9%A2%84%E6%B5%8B%E4%B8%8E%E9%87%8D%E5%8F%8D%E5%BA%94">特别来信——重预测与重反应</a></li>
<li><a href="#279%E8%B7%A8%E7%95%8C%E6%B5%85%E6%9E%90%E4%B8%8B">279.跨界浅析（下）</a></li>
<li><a href="#280%E4%B8%93%E4%B8%9A%E5%92%8C%E4%B8%9A%E4%BD%99%E7%9A%84%E5%8C%BA%E5%88%AB">280.专业和业余的区别</a></li>
<li><a href="#281%E7%BE%8E%E5%9B%BD%E7%9A%84%E6%A0%A1%E5%9B%AD%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%92%8C%E4%B8%AA%E4%BA%BA%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83">281.美国的校园安全问题和个人安全防范</a></li>
<li><a href="#285%E5%AF%B9%E8%AF%9D%E7%8F%AD%E8%B6%85%E5%8B%87%E6%B0%94%E5%92%8C%E6%99%BA%E6%85%A7">285.对话班超：勇气和智慧</a></li>
<li><a href="#294google%E7%BD%91%E9%A1%B5%E6%8E%92%E5%90%8D%E7%AE%97%E6%B3%95%E5%92%8C%E4%BC%A0%E6%92%AD%E6%95%88%E6%9E%9C">294.Google网页排名算法和传播效果</a></li>
<li><a href="#295%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%95%E4%BD%8D%E9%87%8C%E8%BF%9B%E8%A1%8C%E6%9C%89%E6%95%88%E7%9A%84%E6%B2%9F%E9%80%9A">295.如何在单位里进行有效的沟通</a></li>
<li><a href="#300%E7%8B%97%E7%9A%84%E4%BC%9A%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%9B%E5%85%AC%E5%8F%B8%E5%81%9A%E4%B8%8D%E6%88%90%E4%BA%8B">300.狗的会计问题：为什么有些公司做不成事</a></li>
<li><a href="#305%E5%A8%B1%E4%B9%90%E8%87%B3%E6%AD%BB%E7%9A%84%E6%97%B6%E4%BB%A3">305.娱乐至死的时代</a></li>
<li><a href="#310%E5%A5%A2%E4%BE%88%E5%93%81%E7%9A%84%E5%85%89%E6%B3%BD6%E4%BC%A0%E5%A5%87%E6%95%85%E4%BA%8B">310奢侈品的光泽（6）：传奇故事</a></li>
<li><a href="#315%E6%AF%94%E7%A9%B7%E6%9B%B4%E5%8F%AF%E6%80%95%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88">315.比穷更可怕的是什么？</a></li>
<li><a href="#320%E7%8A%B9%E5%A4%AA%E4%BA%BA%E7%9A%84%E6%95%99%E8%82%B2%E6%96%B9%E5%BC%8Fchavrusa%E5%92%8C%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95%E5%AF%B9%E5%8B%87%E6%B0%94%E7%9A%84%E7%9C%8B%E6%B3%95">320.犹太人的教育方式Chavrusa和苏格拉底对勇气的看法</a></li>
<li><a href="#321%E5%92%8C%E4%B8%89%E4%BD%8D%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%95%99%E6%8E%88%E8%81%8A%E5%A4%A7%E5%AD%A6%E6%95%99%E8%82%B2">321.和三位美国大学教授聊大学教育</a></li>
<li><a href="#327%E5%85%B1%E8%B5%A2%E5%92%8C%E6%AD%A4%E6%B6%88%E5%BD%BC%E9%95%BF%E4%B8%8B%E8%BF%B7%E5%A4%B1%E5%9C%A8%E5%85%A8%E7%90%83%E5%8C%96%E4%B8%AD%E7%9A%84%E8%A5%BF%E6%96%B9%E4%B8%96%E7%95%8C">327.共赢和此消彼长（下）：迷失在全球化中的西方世界</a></li>
<li><a href="#329%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%A4%9A%E4%BA%BA%E4%BC%9A%E7%9B%B8%E4%BF%A1%E6%B0%B4%E5%8F%98%E6%B2%B9">329.为什么很多人会相信水变油</a></li>
<li><a href="#341%E8%85%90%E8%9A%80%E8%80%85%E7%9A%84%E4%BD%9C%E7%94%A8">341.腐蚀者的作用</a></li>
<li><a href="#342%E5%9C%A8%E5%8D%95%E4%BD%8D%E9%87%8C%E4%BA%94%E7%A7%8D%E5%AE%B9%E6%98%93%E8%A2%AB%E8%85%90%E8%9A%80%E8%80%85%E7%9B%AF%E4%B8%8A%E7%9A%84%E4%BA%BA">342.在单位里五种容易被腐蚀者盯上的人</a></li>
</ul>


<h2>第9封信，VR技术与“第三眼美女”</h2>

<p>第三眼美女。她们可能没有光鲜的外表，但必定有某种美德或者价值。</p>

<p>说道技术，通常都需要到第三代才能够普及，被大众广泛接受，并且较长时间地存在下去。</p>

<ul>
<li>第一阶段 虽然有一个革命性的发明，产品很性感，但是毛病很多</li>
<li>第二阶段 解决了第一阶段大部分问题，但是价格昂贵</li>
<li>第三阶段 解决了价格问题，才能普及到大众</li>
</ul>


<h2>第18封信，期望值最大化原则和它在生活上的应用</h2>

<ol>
<li>高考中足球或百米成绩，就是前面说的收益函数，只要这个函数一确定，整个社会就变成了一个机器学习的系统，期望值最大化方法会自动优化全社会，让足球成绩达到最大值。</li>
<li>与其教育员工，不如设置一个好的收益函数</li>
<li>各物质之间的四种基本作用力：

<ul>
<li>质子和中子通过强核力形成原子核</li>
<li>弱核力保证原子核不要太大</li>
<li>电磁力保证原子核和电子能够形成原子，以及原子可以结合形成各种分子乃至万物</li>
<li>万有引力保证物质能够形成星球</li>
</ul>
</li>
</ol>


<h2>第19封信，有小聪明没有智慧的人</h2>

<p>即便耍小聪明不伤害到公司的利益，也是不要做为好，因为这让一个人变得胸无大志，鼠目寸光。</p>

<h2>第20封信，再谈谈2%和98%的问题</h2>

<ol>
<li>未来的智能时代，受益者可能只有2%的人。

<ul>
<li>很多人没有踏上新技术革命的大潮，落伍了</li>
<li>不同人的思维方式不同，这对个人最终的影响要远远高于智力、学历和家庭因素</li>
</ul>
</li>
<li>公司对干部的培训

<ul>
<li>所有的功劳要给下面的员工</li>
<li><strong>每一个人都要帮助你的老板成功</strong></li>
</ul>
</li>
</ol>


<h2>第21封信，西瓜与芝麻</h2>

<ol>
<li>生活中捡芝麻的行为：

<ol>
<li>为了拿免费的东西打破头</li>
<li>为了省一块钱的出租车钱，在路上多走10分钟</li>
<li>为了抢几块钱的红包，三五分钟就看看微信</li>
<li>为了挣几百块钱的外快，上班偷偷干私活</li>
<li>为了双十一抢货不睡觉</li>
<li>为了一点折扣在网上泡上两小时，或者跑五家店</li>
</ol>
</li>
<li>问题不仅在于时间利用得非常没有效率，还在于他们渐渐习惯于非常低的追求，人一旦心态变得非常低，就很难提升自己、让自己走到越来越高的层次上。</li>
<li>捡西瓜就不能为那些蝇头小利动心，他们需要目光放得长远。</li>
</ol>


<h2>第26封信，便宜的眼泪</h2>

<ol>
<li>松下幸之助：任何好的商业都必须是挣钱的，否则就是对人类的犯罪，因为有限的资源可以用于其它地方。因此，即便是良好的动机，也不能为负作用开脱，更何况动机的好坏是很难判定的</li>
<li>美国在建国之初，那一代国父们都非常担心没有判断力的底层民众的盲从会破坏了民主制度。</li>
</ol>


<h2>第28封信，在美国最有钱的人比什么，兼谈美国的慈善文化</h2>

<p>钱是为了让孩子做所喜欢的事情，而不是炫富和无所事事。</p>

<h2>第29封信，让你的父母成熟起来</h2>

<p>孩子需要和父母主动沟通，将新的思维方式和理念不断传递给父母。</p>

<h2>第30封信，再议林黛玉</h2>

<ol>
<li><p>人有两个天赋，是机器无法取代的。</p>

<ul>
<li>一个是艺术的创造力和想象力</li>
<li>一个是梦想和浪漫的情怀</li>
</ul>
</li>
<li><p>人生不仅要做人（薛宝钗），也要作诗（林黛玉）。</p></li>
</ol>


<h2>第31封信，美国私立中学如何教语文和历史</h2>

<ol>
<li>美国越有社会地位的家庭在孩子身上花的时间越多。</li>
<li>单比数理化，美国孩子是比不过中国的。但是如果看谁学的内容多，中国最好中学的学生就比不过美国同档次的中学生。 我的大女儿在高中不算是最好的学生，但是高中毕业时不仅学完了大学的微积分，而且连线性代数、复变函数和概率论都学了，在生物方面，她学完了大学的神经科学等课程。</li>
<li><strong>中美教育最大的差距在于语言、写作和人文科学上，美国孩子阅读、写作和表达能力要比中国好很多。</strong></li>
<li>历史课。孩子的历史老师强调的是学生必须掌握四个技能，历史问题研究、资料的理解和分析、论文写作，以及最后在台上的表述。美国的历史题常常没有标准答案，只有好的和不好的，符合逻辑的和不符合逻辑的。所谓好的答案，就是从事实出发、符合逻辑的结论。从这个教学方法来看，你会发现它很像自然科学的教学。</li>
<li>英语课。作文题目实际上向孩子们传递了一种价值观。在现代文明社会，需要以理服人，而这个本领，需要从小学起。</li>
<li>一种好的教育是能力和素质的教育。通过每一天的课程（和课外活动），不知不觉地把好的、适合我们当下社会的价值传递给孩子。同时，让孩子在学习每一门课程的时候，通过知识的学习掌握分析问题、独立思考、表达自己观点的能力。</li>
<li>MIT的学生有一个普遍的观点——学什么不重要，关键是跟谁学，因为学的东西早晚会过时，而分析问题，解决问题的本来却可以终身受用。这个类似于刘未鹏讲的重视思维过程，而非结果。</li>
</ol>


<h2>第35封信，硅谷高创会</h2>

<ol>
<li>大部分活动都是靠一些组织者的热情和志愿者无偿的服务举办的，因此一旦热情减退或者志愿者有更重要的事情要做，就很难持续下去
而这家的活动从一开始就。是本着盈利的目的，雇专职的工作人员全职工作，因此能够持久。</li>
<li>免费的事情常常搞不长，也很难保证质量。（这跟李笑来的观点一模一样）</li>
<li>在一个领域中，一个二流的人一辈子再努力，即便在自己的领域里可能也进不了一流的行列。相反，很多一流的人进入另一个领域常常还是一流。这里的差距不在于智力和努力程度，而在于做事情的思想方法。（例子——物理学家兼投资人张首晟）</li>
</ol>


<h2>第50封信，这个世界没有欠你什么</h2>

<ol>
<li>任何社会都是分层的。</li>
<li>对于那些试图在金字塔上爬几个台阶的人来讲，最需要具有的不是抱怨社会的不公平，而是需要付出足够的努力，同时把注意力放到最该关注的事情上去。</li>
<li>这个世界不欠我们任何东西。放弃掉不切实际的幻想，脚踏实地地做点事情，我们的生活才会更好。</li>
</ol>


<h2>第58封信，智能时代的产业特点</h2>

<p>未来时代商业的八字诀——分享、跟踪、合作、众筹</p>

<ul>
<li> 分享经济——滴滴、Uber、Airbnb。在未来分享经济时代，连接比拥有更重要。为什么洗脚不算是分享经济，因为市场规模固定。</li>
<li> 跟踪——IOT、大数据、机器智能以及区块链的广泛使用，未来能够做到跟踪每一次交易，每一个人每一时刻的活动，这会带来无限的商机</li>
<li> 合作——现有产业+新技术=新产业</li>
<li> 众筹经济——通过顾客参与的方式，改变了产品好服务设计、生产和销售的全过程。特斯拉的商业模式就是一个例子。而提前收点钱，到期给商品，不算真正意义上的众筹经济。</li>
</ul>


<h2>第67封信，阿拉斯加日记2：听书分享《做条狗》</h2>

<p><strong>很多时候，不是能力最强的人做成了事情，而是最善于和每一个人处好关系的人把事情办成了。</strong></p>

<h2>第104封信，赵小兰为什么能当上部长——谈谈讲理的方法</h2>

<ol>
<li>她的观点非常旗帜鲜明，没有那种“既要&hellip;&hellip;，又要&hellip;&hellip;”和稀泥的废话逻辑，在批判一些人和大学时毫不避讳。</li>
<li>其次，她一直在肯定和认同对方的观点，但是用事实说明你们的作为违背了你们的观点。</li>
<li>第三，批评别人总是非常委婉，从来没有用“不公”这个词，或者其他表示愤怒的词</li>
<li>第四，她在赞扬亚裔的贡献和所应得的利益时，却一直理直气壮。</li>
</ol>


<p>很多人讲话时的一个毛病：<strong>夸自己时不好意思，批评别人说得很难听而且缺乏根据。</strong></p>

<h2>第105封信，我们靠什么服人1：从日心说的公案说起</h2>

<p>我们的世界需要的不是像布鲁诺那样自认为掌握了真理，然后喋喋不休的批判者，而是需要像伽利略那样拿出证据的建设者。</p>

<h2>第118封信，做生意和管理的秘诀：不给选择</h2>

<ol>
<li>不给选择的一个直接的负面结果可能是永远得不到某些客户，或者在公司无法让100%的员工满意。但这其实没有太大的关系，因为我们都不是神，没有能力让所有人满意。对于那些在心里完全排斥你产品的人来说，他们从来不曾是潜在的客户。</li>
<li>如果一个产品设计者只会非常辛苦地迎合每一个顾客，他的顾客恐怕不会很忠诚。一个管理者如果试图通过给予员工更多的选择取悦于每一个人，效果可能适得其反。</li>
</ol>


<h2>第126封信，拉里佩奇的智慧3：谷歌为什么要拆分</h2>

<ol>
<li>世界上凡事有开始就有终结，有生就有死，生物如此，一个组织也是如此。硅谷公司特点之一就是，不介意公司的死亡，不会刻意去拯救一个衰老的公司，而是把目光往前看，努力寻找下一次机会。</li>
<li>公司真正能够传承的其实也只是基因而已。佩奇比很多企业家聪明的地方在，他首先认同公司最终死掉这件事是常态，在这个前提下，再去考虑如何传承公司的基因和文化，而不是试图维持一个不死的公司。</li>
</ol>


<h2>140.常识、科技和艺术</h2>

<p>什么事情做到50分靠常识，从50分做到90分靠技术，从90分做到100分靠艺术。每一个阶段是不能跳跃的。</p>

<h2>156.朴素是富豪的专利</h2>

<ol>
<li>朴素的穿着或者使用廉价的物品或许仅是富豪们的专利，而我们普通人反而要更在意一点自己的形象。</li>
<li>这些颇有涵养的超级富豪，虽然穿着很朴素，但是没有人会小瞧他们。甚至即便不知道他们是谁，那种难以言表的自信常常让人感到不简单。</li>
</ol>


<h2>160.哈佛和斯坦福商学院传授的精髓</h2>

<ol>
<li>说穿了就是两个词——“玩”和“骗钱”</li>
<li>哈佛要培养的是精英，精英和普通人的差别不完全在于知识的多少，而在于智慧和人脉。智慧需要要和大师们，和高水平的人在一起切磋才能获得。人脉更是需要一个好的同学圈子获得，这样将来你们可以互相提携。因此，来上课是成为精英的必由之路。至于考试，反而倒在其次。</li>
<li>如果在哈佛商学院不会玩，恐怕三分之二的学费是白交了。最好从小培养孩子的特长，否则挤不进那个圈子。</li>
<li>哈佛商学院教给大家的第二个精髓思想就是“用别人的钱挣钱”。老师们总是讲，你自己的钱是留给你安身立命的，你如果想做事情，那么就让别人来掏钱。当然，为了做到这一点，你需要会销售，会把你的产品、你的想法，卖给别人，让别人乐意掏钱。</li>
<li>说得更好听点，可以称为获取资源的能力。“好风凭借力，送我上青天”。</li>
</ol>


<h2>163.运气的重要性</h2>

<ol>
<li>人总是有运气好的时候和不好的时候。人在运气不好的时候，最需要的不是盲目的努力，而是耐心。时间是你的朋友，而时机不是，也就是说耐心是成功的第一要素。</li>
<li>如果一个人能反过来想，在成功时感谢帮助过自己的人，感谢上天安排的命运，在厄运中，坦然自若，认同自己原本的富运不旺，或许容易等到时来运转的时候。在我接触到的真正成功者中，绝大部分都会认同自己不过是运气好而已，而不是过分强调自己的能力和努力。有了对运气的认同，人就会少一些怨气，就能更平和地做事，也就更接近于成功。</li>
<li>既然我们认同了运气的重要性，就不必对自己太苛刻。如果我们有足够的耐心，有好的方法，有持之以恒的努力，或许运气会降临到我们头上。当然你会问，如果这样，运气依然没有来我们怎么办？我在这种情况下总是用约翰.肯尼迪的话安慰自己——“问心无愧是我们唯一稳得的报酬”。</li>
</ol>


<h2>168.对话庄子2：我们是否有自由意志？</h2>

<p>对于反主流观点的书籍，在阅读它们之前，一定要了解主流的观点，否则会误入歧途(走火入魔)。</p>

<h2>173.找一个长期对你好的人，从巴菲特购买苹果股票说起</h2>

<p>在人和人的关系上，本杰明.富兰克林讲过一句非常精辟而富有哲理的话：一个帮助过你的人，比一个你帮助过的人，更愿意帮助你。</p>

<h2>174.人生最重要的投资（上）</h2>

<ol>
<li>容貌靠遗传，而魅力则靠培养 4.永远离不开妈妈或者自己家庭的女生，将来会有问题。</li>
<li>在一个完美的婚姻中，双方都要明白关系的亲密程度和重要性依次是：夫妻>子女>双方父母。</li>
<li>对方的可塑性很重要。能够有一定的柔性，彼此妥协解决问题，相互适应，决定了一个关系能走多远。</li>
</ol>


<h2>180.未来商业的特点（1）：共享经济</h2>

<ol>
<li>商业的本质是为了让人多花钱，而不是省钱。</li>
<li>如果共享经济带来的结果是大家都不去买东西，那么经济一定是萎缩的，这样的生意就发展不起来了。</li>
<li>共享经济的本质是让更多的资源加入到经济活动中，利用新技术提高效率，带来方便，最终让大家多花钱，只有按照这个思路从事共享经济才能成功。</li>
</ol>


<h2>183.未来商业的特点（4）：合作经济</h2>

<ol>
<li>第一次工业革命：原有产业+蒸汽机=新产业</li>
<li>第二次工业革命：原有产业+电=新产业</li>
<li>信息革命：原有产业+计算机（半导体）=新产业</li>
<li>互联网时代：原有产业+互联网=新产业</li>
<li>大数据和机器智能时代：原有产业+机器智能=新产业</li>
</ol>


<h2>189.子女教育（2）：辛苦和痛苦</h2>

<ol>
<li>美国上层社会的父母，在孩子身上花的时间是一点都不少的，孩子读书和参加课外活动可能也会很辛苦，但是他们并不会让孩子很痛苦。辛苦和痛苦是两回事，一定要区分开。</li>
<li>我经常对她(二女儿)讲，不论在学校得了什么坏成绩，都没有关系，只要你告诉爸爸，就是好孩子。</li>
<li>每一个孩子都有好奇的天性，他们有强烈的求知欲望。教育的目的是激发他们的好奇心，引导他们内在欲望，让他们自己自觉地去学习进步。</li>
</ol>


<h2>190.子女教育（3）：兴趣的培养</h2>

<ol>
<li>做课外活动有两个目的：一个是让他们做一些自己喜欢的事情，将来能够热爱生活。另一个是在一些竞技中培养他们的勇气，获得名次，让他们能够有一些在竞争中成功的经验。</li>
<li>家长的任务，就是帮助孩子找到自己的特长。</li>
</ol>


<h2>192.小鲜肉和戏骨：橘子和苹果的对比</h2>

<p>我们相比我们的父辈已经很幸福了，即使有人比我们过得更好，我也不嫉妒，每次想到这里，我都会对生活充满感激，然后去做好自己的事情</p>

<h2>195.中国依然是一个大贾府，自给自足文化根深蒂固。</h2>

<ol>
<li>守诺、妥协、重利，这是商业文明的特点</li>
<li>世界文明有两条主线。一条是以古埃及、古印度和古代中国为轴线的农业文明，后来的法国、德国和前苏联都是沿袭这根主线。另一条是以美索不达米亚、古希腊为代表的商业文明，后来的意大利、荷兰、英国、美国和后来的日本则延续了这条线。</li>
<li>农业文明中，商品交换从来不是文明的主线，自给自足才是。</li>
<li>中国公司之间鲜有诚心诚意的合作，如果不得不合作，大家都希望是独家合作，因为这样就觉得自己有了控制权，有了控制权，就又有了自给自足的安全感。这不是谁好不好合作的问题，而是自给自足文化的结果。</li>
</ol>


<h2>197.晴雯的悲剧</h2>

<ol>
<li>几年前，马化腾和刘炽平有一次当面请教柳传志如何避免事业上的“坑”，柳老只讲了两个要注意的地方，一个是不要和政府作对，另一个是要善待下面的人</li>
<li>人要为自己的不懂事承担后果。年轻人要在大学里尽快成熟起来，成为一个社会人。</li>
</ol>


<h2>201.谷歌小时候的故事：给初创公司创始人的建议</h2>

<p>小公司的创始人应该做什么？</p>

<ol>
<li>第一件事就是招人。小公司招人的一个重要的原则，就是对方除了能力和品行能够胜任工作之外，还必须具有非常强的<strong>主动性</strong>。</li>
<li>第二件事是起到刹车的作用，而不是引擎的作用 一个管理有序的公司，动力应该来自于底层，刹车来自于高层。</li>
<li>第三件事情是确立公司的价值观和企业文化。</li>
</ol>


<h2>204.没有什么下半场</h2>

<p>当大家投资都不理性时，你的机会就来了，当大家都在做表明文章时，你晋升的机会就到了。同样，当大家都在炒作概念时，就给予你使用新思维改变一个现有产业的机会。</p>

<h2>205.香农第二定理：带宽决定生意大小</h2>

<ol>
<li>香农用熵的概念将信息量化后，也从理论上给出了无线电两个频率之间能够传输的信息速率上限，这个上限被称为带宽。香农指出，如果传输信息的速率不超过这个带宽，你总能找到一个方法，让这些信息都传出去而且不出错，但是如果传输的速率达到或者超过带宽，不论你用什么样的编码方法，信息传输的错误率一定是100%。这就是香农第二定理。</li>
<li>有多少人脉做多大生意，这个人脉其实就是带宽。</li>
<li>互联网思维，其本质就是控制带宽和利用带宽。</li>
<li>我们今天做任何事情，都要努力扩展带宽，因为根据香农的理论，带宽永远是通信量的瓶颈。</li>
</ol>


<h2>208.职场上的四个误区和四个做法</h2>

<ol>
<li>四个误区

<ol>
<li>把自己当做一个单位的过客，而不是主人。 人一旦觉得自己是过客，常常就对很多工作视而不见，也懒得维护与同事的关系。</li>
<li>被语言暴力所激怒，然后乱了章法。 语言暴力：总有一些同事包括上级，没缘由地责备你、批评你的工作，但却不给出具体的问题和由建设性的建议，更不是真心帮助你。 一旦判断清楚对方是语言暴力，我们不为所动，一方面继续我们的工作，另一方面要让施暴者有个交代（明确指出，要让他们知道自己做错了事）。对于老手，不要轻易反击，要化解，等事情过后，通过正常渠道让他们知道你已识破，让他今后做事有所顾忌。</li>
<li>疏于沟通。 大部分时候，提前打招呼总是一个好的、职业的做事方式。</li>
</ol>
</li>
<li>四个做法

<ol>
<li>首先，任何时候人都要谦卑 只有谦卑的时候自己才能更有效地沟通，也只有这样，当别人表达意见时，才能集中注意力在事情上，从各种角度去理解 不能因为态度谦卑就不发表意见和看法，<strong>一个谦卑却又能把事情分析得入木三分的人，最让人钦佩</strong>。</li>
<li>第二，要用正确的方法对待语言暴力和其它的不公平，这里我是指那些故意伤害你的人。在沟通中保持对别人的尊重，但是态度要坚决明确。 你要坚守住自己的正确的立场，不带个人色彩，聚焦事情本身来解决问题。</li>
<li>第三，永远要明确工作不是为了公司或者他人，而是<strong>为了自己职业发展这个大方向</strong>。</li>
</ol>
</li>
</ol>


<h2>209.职业员工和管理者要注意的两件事</h2>

<ol>
<li>作为开发（视频）这个产品的工程师，虽然老板没有要求他了解变现和广告的情况，但是作为这个行业的从业者，多少有一点销售上的知识是必须的。</li>
<li>最有效的沟通是在第一时间直接给出答案，然后补充解释。</li>
<li>基层的员工要抬头看，管理者要弯下腰。</li>
</ol>


<h2>211.面试的技巧（下）：让对方了解你的价值</h2>

<ol>
<li>谈薪酬: 对于有经验的求职者，要把重点放在谈判职级上，不要放在谈判薪酬上。</li>
<li>用市场的价格，而不是用人单位里锚定的价格作为谈判一句。</li>
</ol>


<h2>214.2017年十大科技突破点评</h2>

<p>个人比较看好:</p>

<ol>
<li>刷脸支付</li>
<li>基因疗法</li>
<li>强化学习</li>
<li>治疗瘫痪</li>
<li>细胞图谱</li>
<li>自动驾驶汽车</li>
</ol>


<p>不仅因为它们的技术相对成熟，更因为对世界的影响力巨大。</p>

<h2>215.最好是更好的敌人</h2>

<ol>
<li>虽然我们一直在说要追求卓越，要实现最后的10%，但是这并不意味着我们不可以接受部分的改进。很多时候，一个完美的结果需要很多的改进才能实现，而不是一步到位。</li>
<li>在信息时代，最有效的工作方式是<strong>保证每一次比先前更好，且能做到持续不断的进步，而不是为了追求最好，把工作的周期拖得无限长</strong>。</li>
<li><strong>这个世界本身就不是完美的</strong>，认识到这一点，我们在生活和工作就不会为了最后的一点点工作而永远无法将它们做完。</li>
<li>做事情不怕慢，就怕停。</li>
</ol>


<h2>216.有没有更好的办法？</h2>

<ol>
<li>著名的机器翻译和人工智能专家弗朗茨奥科博士。人类长寿公司、Grail（杰夫胡贝尔Jeff Huber）</li>
<li>2016，胡贝尔在母校伊利诺伊大学香槟分校毕业典礼上做了主题讲话。胡贝尔告诉所有的毕业生，不论遇到什么不尽人意的事情，不要抱怨，要主动去想是否有更好的方法，然后行动起来。</li>
<li>Grail公司的核心：大数据+机器智能+基因测序和分析</li>
<li>投资就是投人，一个公司的成败在很大程度上取决于里面的人做事情有多么地积极主动。</li>
</ol>


<h2>218.生命的无奈</h2>

<ol>
<li><p>很多时候，我们逃不出命运的安排。随着年龄的增长，我基本上从两个方面接受了命运的这种安排。</p>

<ul>
<li>首先，人生总是有不如意的事情。当我们能够坦然接受很多结果时，我们的心态就会变得平和，而不是焦虑。</li>
<li>其次，我们所能做的，就是把握当下，把今天的事情赶快完成。其实很多时候没有下一次，甚至明天也是靠不住的。</li>
</ul>
</li>
<li><p>我常常建议身边的朋友在繁忙的工作之余，偶尔停下脚步，看看风景。</p></li>
<li>为了尽可能少一些这样的烦恼，我才会专门放下手上的工作，花很多钱，跑到很远的地方去听一场音乐会，吃一顿饭，看一幅绘画，或者拍几张照片。我一直告诉自己，要过一种从容而优雅的生活。</li>
<li>工作总是没有终止的时候，很难静下心来看风景。其实这是一个心态，也是一个选择的问题，我们可能要选择放弃掉一些事情。</li>
</ol>


<h2>219.阅读的意义</h2>

<ol>
<li>一种恐惧：生怕自己错过什么。</li>
<li>阅读不仅仅是为了让我们在冷酷无情的科技时代获得喘息，让我们重启大脑<strong>深入思考</strong>的功能，也是抵抗狭隘、思想控制和舆论支配的方式。</li>
<li>牛津大学圣埃德蒙（13世纪的坎特伯雷大主教）的一句话：“Study as if you were to live forever, live as if you were to die tomorrow”</li>
</ol>


<h2>222.曼施坦因和专利</h2>

<ol>
<li>曼施坦因提出了一个新的战术思想，他认为只要进攻足够快，就不需要防御侧翼和后方，因为<strong>进攻是最好的防守</strong>，这就是闪电战的理论根据。</li>
<li>专利真正的作用：它其实不是进攻的工具，而是防守的工具。</li>
<li>当一个公司能够靠创造力快速发展时，它会比竞争对手更快地将技术变成产品，别人就算抄它的技术，也只能跟在屁股后面，这时它会懒得申请专利，甚至也顾不上申请专利。 当一个公司的业务发展开始出现停滞时，它就需要用专利保护它的侧翼和后翼了。</li>
<li>对于小公司，进攻是最好的防守，创造力和执行力才是最重要的。对于人，不要纠结于过去的得失，提高执行力，不断开拓新的事业才是正道。</li>
</ol>


<h2>225.没有悬念的比赛——柯洁对阵AlphaGo</h2>

<p>要用发展以及寻找机会的眼光来看待科技进步。当一个行业出现巨大的技术飞跃时，原来的平衡必将被打破，虽然我们很多人不愿意，但是比较明智的选择时<strong>接受这个现实，然后在新的常态下找到自己的位置</strong>。</p>

<h2>232.高考前给学生和家长们的建议</h2>

<ol>
<li>首先是“认命”。目前还有一周的时间，如果你高中三年都没有学会的东西，不要指望这一周能学会。最后这一周，不是你复习功课的时间。 这种抓紧搞懂一些不会内容的贪欲，会让自己产生不切实际的希望，以至于本来该得到的反而得不到了。</li>
<li>要保持热度。比赛和考试这类的事情是需要一些兴奋程度的。因此，最后几天该怎么过还怎么过，可以看书，但是心里要明白看书的目的不是长知识，而是维持一种自己习惯的生活方式。参加运动比赛应该也是一样的道理。</li>
</ol>


<h2>233.大学考试秘籍</h2>

<ol>
<li>平时的期末考试，特别是大学的考试，最后一周必须努力，非常重要。这是它们和高考最大的不同。</li>
<li>学会总结一门课程的支撑知识点和主线。

<ol>
<li>微积分：建立在无穷小、（函数的）连续性、极限等基础上的，没有它们整个微积分的大厦就坍塌了。 接下来，就是它的主线，基本上是导数、微分和积分三部分，当然，它们派生出一大堆东西。</li>
<li>计算机系统结构，它的基础是“3+1”。所谓3，不过是计算机的指令集和相应的实现方法，存储、中断和设备管理，1则是量化的性能评估。 主线就是所谓的处理器里面的流水线，今天又加了三个，即多线程的并行处理，以GPU为代表的矢量计算，以及云计算级别的并行计算。</li>
</ol>
</li>
<li>稍微聪明一点的老板都懂得，<strong>能够做到100分的人，和做到95分的人，水平差的可不是一点两点，而是很多</strong>。因为做到100分和考100分，是靠硬实力，而做到95分，是有很多技巧的，而且能够投机取巧。</li>
</ol>


<h2>236.我的投资原则</h2>

<ol>
<li>投资原则：

<ol>
<li>凡是靠政府补贴才能维持的行业我是不会投资的</li>
<li>挣钱效率低的不投资</li>
<li>参与者不能几方共赢的不投，因为这种事情不能持久。</li>
</ol>
</li>
<li>稍微变通一下，这些投资原则就是做事的原则了：

<ol>
<li>没有好处的事情不做</li>
<li>效率不高的事情不做</li>
<li>损人利己的事情不做。</li>
</ol>
</li>
</ol>


<h2>240.怎样看待富人的财富——聊聊社会的公平性</h2>

<ol>
<li>把富人的钱拿出一部分（甚至大部分）分给穷人，如果穷人没有发展的机会，他们的生活依然是没有前途的，是灰暗的。</li>
<li>富人钱哪里去了？除了少数给他和他的家人花掉了，大部分都是投入到了再生产。也就是<strong>富人钱，实际上是一种社会财富</strong>。总体来讲他们的投资效率更高。</li>
<li><strong>维护社会的公平性，关键在于给人平等的机会，而不是同样的收入。</strong>怎样给人平等机会呢？这个问题非常复杂，但是有一件事必须做，就是限制超级权力。</li>
<li>垄断最大的危害，是妨碍了社会的公平性，让大多数人没有了机会。 今天中国的一些大型的民营企业，其实已经扮演当年洛克菲勒的角色了，而大部分人对此浑然不知。</li>
<li>总结一下美国的经验就是，做到<strong>社会公平在于限制超级权力，而不是平分社会财富</strong>。 中国也在朝这份方向努力。</li>
</ol>


<h2>244.凡事都要专注——AlphaGo的核心芯片TPU解析</h2>

<ol>
<li>CPU的计算速度之所以不够快，是因为它被设计成能够适应所有的计算，里面很多晶体管都用来搭建控制电路。</li>
<li>GPU：有一种计算相对单一，就是控制显示器的图形计算，于是英伟达就为这一类计算专门设计了一种处理器，即GPU。</li>
<li>TPU：机器学习中的向量计算和通用的向量计算还是有所不同，能否让计算的内核功能再专一点，只做和一种特定的机器学习算法（即Google的人工神经网络算法）相关的向量计算。 Google提出了一种张量（Tensor）计算的概念。Google在英伟达等公司GPU的基础上，进一步让计算变得专注，设计了一种仅仅针对张量计算的处理器，即TPU（T就是张量Tensor）。</li>
<li>人在社会中，什么技能用的最多，要用的时间最长？

<ol>
<li>一个是和人打交道的技能，这个值得花时间练习好</li>
<li>一个好的思维方式，这个要用一辈子而且在各种场合都很重要，也值得好好培养</li>
</ol>
</li>
</ol>


<h2>247.做事前不要过分算概率</h2>

<ol>
<li>在丁肇中教授眼里，只有毫无希望和存在期望的事情，而不能以希望的概率去决定某件事情做还是不做。</li>
<li>世界上什么事情做到最好的前5%的人，都是兴趣使然，因为他们做事的时候能够不在乎失败，即使是很小的成功概率，也会去追求。做到前20%-%5的人，常常是利益驱动，因为他们会知难而退。</li>
<li><strong>人太精明了，就不聪明了</strong>。对于年轻人，千万不要过早地太精明</li>
</ol>


<h2>248.高中毕业生暑期可以做什么？</h2>

<p>高中这个阶段过去了，时光不会再回来。在这个时间点，要做的第一件事就是去对一些人表达感恩。在过去十七八年的时间里，很多人帮助过我们，没有他们，我们可能过得不如今天好，在离开过去的生活之前，先要及时明确地感谢他们，特别是对老师们。</p>

<p>现实生活中，“有机会”的真实含义是“没有机会”，“以后”这一天直到死可能也不会到来。 一个不知道感恩的人，上帝是不会垂青两次的。</p>

<h2>图书推荐</h2>

<h3>249.我给中学生的书单</h3>

<ol>
<li><p>文学类（18本）</p>

<ul>
<li>金庸和琼瑶各一本，长篇比短篇的好</li>
<li>鲁迅的《呐喊》</li>
<li>《红楼梦》</li>
<li>雨果《悲惨世界》</li>
<li>罗曼罗兰《贝多芬传》</li>
<li>乔治奥威尔《1984》</li>
<li>歌德《少年维特的烦恼》</li>
<li>贾平凹的小说。《秦腔》和《古炉》</li>
<li>夏洛蒂勃朗特《简爱》</li>
<li>司汤达《红与黑》</li>
<li>简奥斯丁《傲慢与偏见》</li>
<li>莎士比亚《哈姆雷特》</li>
<li>富兰克林《富兰克林自传》</li>
<li>木心《文学回忆录》</li>
<li>《古文观止》和《唐诗三百首》</li>
<li>菲茨杰拉德《伟大的盖茨比》，读英文原文</li>
<li>钱钟书《围城》</li>
</ul>
</li>
<li><p>历史类（4本）</p>

<ul>
<li>傅高义《邓小平时代》</li>
<li>基辛格《论中国》</li>
<li>房龙，任何书均可，比如《人类的故事》</li>
<li>茨威格《人类的群星闪耀时》</li>
</ul>
</li>
<li><p>哲学类（3本）</p>

<ul>
<li>培根《培根随笔》</li>
<li>罗素《西方哲学史》</li>
<li>叔本华《人生智慧录》</li>
</ul>
</li>
<li><p>思维类（1本）</p>

<ul>
<li>万维钢《万万没想到》</li>
</ul>
</li>
<li><p>科学类（3本）</p>

<ul>
<li>霍金《时间简史》</li>
<li>伽莫夫《从一到无穷大》</li>
<li>温伯格《给世界的答案》</li>
</ul>
</li>
<li><p>经济类（1本）</p>

<ul>
<li>戈登《伟大的博弈：华尔街金融帝国的崛起》</li>
</ul>
</li>
</ol>


<p>其实还有很多好书，甚至更好的书，它们或者不急于在上大学前读完，或者需要一些背景知识，比如《史记》、《神曲》、《领袖们》、《漫步华尔街》等，因此都没有列入。</p>

<h3>290.给大学生的书单（中、下）</h3>

<p>第三类、西方文学</p>

<ol>
<li>《莎士比亚悲剧四种》 《哈姆雷特》 《李尔王》——听信谗言的糊涂老爸的悲剧 《奥赛罗》——嫉妒心强的丈夫导致的夫妻悲剧 《麦克白》——贪图权利的邪恶女人犯罪直到自己疯狂</li>
<li>《浮士德》——德意志民族的史诗</li>
<li>《呼啸山庄》——用对比的手法揭示了美与丑，善与恶，爱情与复仇，生命与死亡的对立。</li>
<li>《远大前程》——报恩与阴谋的故事 狄更斯是批评现实主义的作家，他的很多小说都值得阅读，包括《大卫科波菲尔》、《双城记》、《雾都孤儿》</li>
<li>《名利场》——萨克雷讲述了原本出生经历相同的两个女子所选择的不同道路，不同的人生，和不同的结果。</li>
<li>《福尔摩斯探案集》</li>
<li>《巴黎圣母院》</li>
<li>《战争与和平》——俄罗斯民族的史诗</li>
<li>《永别了，武器》、《丧钟为谁而鸣》、《老人与海》 硬汉海明威的这三本书都应该读</li>
</ol>


<p>第四类、传记</p>

<ol>
<li>《领袖们》——尼克松所接触到的领袖们从丘吉尔开始，一直到李光耀、毛泽东等人。</li>
<li>《巨人三传》——罗曼罗兰</li>
<li>《昨日的世界》——茨威格</li>
<li>《西行漫记》——美国记者斯诺将长征之后到了陕北的那群革命者介绍给了世界</li>
<li>《梵高传》——欧文斯通的成名作</li>
</ol>


<p>第五类、经济</p>

<ol>
<li>《国富论》——经济学鼻祖亚当斯密告诉我们什么是资本主义，什么是市场经济。</li>
<li>《漫步华尔街》——应该作为投资的科普读物。，任何人进入股市之前都应该读。作者马尔基儿的观点是，股市的总体走势是向上的，而短期的走势却是难以预测的。因此，最好的投资方式就是选定好的指数基金定投。</li>
<li>《通往奴役之路》——自由派经济学家哈耶克。经济学上的奥地利经济学派和芝加哥经济学派，哈耶克是奥地利经济学派的代表人物。哈耶克认为计划经济，其无意识的后果必然是极权主义，必将带领人类通往奴役。<strong>哈耶克从理论上再次论证了尊重市场规律的必要性，而所谓的福利社会不过是一个伟大的乌托邦而已。</strong></li>
</ol>


<p>第六类、科普读物</p>

<ol>
<li>《自私的基因》——新达尔文主义者道金斯的代表作。作者认为，进化的本质是基因的进化，而物种的进化只是表象而已。生物的本能是维护基因的繁衍，因此我们其实都是基因的奴隶。</li>
<li>《人类基因的历史地图》</li>
<li>《数学之美》</li>
<li>《生命是什么》——物理学大师埃尔文薛定谔。既介绍了生命的物理学基础（作者对当时最新的物理学和生物学的理解），也介绍了生物系统和世界任何系统之间的贡献。</li>
</ol>


<p>第七类、思维</p>

<ol>
<li>《异类》——成功靠的不是智商，而是10000小时的努力，<strong>见识对孩子成长很重要</strong>。</li>
</ol>


<h2>255.填报高考志愿的建议（上）：考虑的因素</h2>

<ol>
<li>将要考虑的因素按照城市、学校和专业归类。而这三类因素中，城市 > 大学 > 专业。当然这个前提是考生无法兼顾这三者。</li>
<li>身处底层的人要完成到中产阶级的进阶，需要先掌握技能，就是这个道理。而中产阶级到精英阶层的进阶，则需要很多博雅教育。</li>
</ol>


<h2>256.填报高考志愿的建议（下）：选择专业的原则</h2>

<ol>
<li><p>选择专业要考虑的几个因素应该是：</p>

<ul>
<li>国家层面的大机会</li>
<li>个人的特长和兴趣</li>
<li>专业的变迁和未来行业的机会</li>
</ul>
</li>
<li><p>今天中国最大的机会在哪里？我认为是国际化。 资本输出，也就是说帮助其他国家富裕起来，让人家买得起我们的东西。 中国在这个时期提出“一带一路”，要搞亚投行，核心就是资本的输出和帮助全世界。这是当年英国、美国和日本都走通了的道路。 在这样的大背景下，中国需要什么人才呢？不再是只能在国内窝里横的人了，而是具有国际视野，能够为国家开拓海外市场的人。</p></li>
<li><p>专业选择原则</p>

<ul>
<li>要优先考虑高势能的专业。就是指那些相对难学，而又相对是其他专业的基础的专业。比如数学专业相对计算机专业和商学就是高势能。</li>
<li>不要一窝蜂地挤进那些过热的新兴专业，尤其是学校为了跟风刚刚开设的。</li>
<li>如果将来从事数学和物理学研究，是需要极高的天赋的。选这两个专业，打好基础后，将来是一定要转行的。在麻省理工，这些专业的毕业生大部分是进入医学院和法学院，而直接参加工作的毕业生，大部分去了华尔街，真正搞数学和物理的很少。 选择专业时，还要考虑未来产业的变迁，那些会不断萎缩的行业最好避免。今天人类已经到了智能时代，这是一个大趋势。</li>
</ul>
</li>
</ol>


<p>257.过度解读：英国靠老处女称霸世界
1.一个好的思维方式绝对可以有很多的帮助，而坏的思维方式总是会让人们陷入一种难以自拔的困境。 2.今天互联网时代，很多哗众取宠的人都本着一个语不惊人死不休的原则，一定要把毫不相干的东西，通过非常弱的联系，甚至再编造点事实联系起来，这样好让大家留下深刻印象。 3.好的思维方式都有一个共同点，就是“以正合，以奇胜”。 意思是排兵要以堂堂正正之师正规地交战，最后靠多余的军队取胜。 也即大部分时候要抓住根本，不要热衷于旁门左道。 比如对于一件事情，我们先要了解主流的观点，这样我们就有了做事情的根本，然后可以通过积累一步步前进。不要为了一开始就为了求新，求奇去接受那些非主流的看法，那样我们做事会有非常大的随意性，最后的结果就是狗熊掰棒子——掰一个扔一个。 4.《孙子兵法》，孙子是一个非常讲规矩的人，并不是贪巧求速的人。事实上，从《孙子兵法》诞生至今，那些靠所谓奇袭得胜的战例其实是很少的，就那么几例。</p>

<h2>258.训练好的<strong>思维方式</strong>——证伪比证实更重要</h2>

<ol>
<li>为什么在科学和现实生活里，证伪的思维总是比证实更重要呢？因为对于一个现象，我们总可以找到一个能自洽的理论解释它，然后找到几个例子证明我们的解释。</li>
<li>在生活和工作中，如果我们把错误的原因当成了真正的原因，我们就会走错路，倒霉的是我们自己。</li>
<li><strong>不能拿一个无法证伪的事情当做真理。</strong> 导致一件事情成功的原因非常多，可以有很多解释，不是任何一个能够自洽的解释我们都要相信。很多哗众取宠的人，故意找出很多与众不同，又能自洽的解释，以博得大家的关注，但是，它们未必是真正的原因。</li>
<li>常识很重要，因为它经过了很长时间被证实和证伪。 科学和技术很重要，因为它们有可重复性。 <strong>我在思维上，宁可相信常识和经过无数次检验的正统理论，也不轻易接受看似能够自洽的与众不同的解释。</strong>——“以正合，以奇胜”。</li>
</ol>


<h2>259-261 如何判断信息的真伪</h2>

<h3>259.如何判断一个人的观点——判定利益冲突</h3>

<p>从<strong>利益冲突</strong>的角度，很容易判断一些话的准确性。</p>

<h3>260.使用逻辑过滤信息和结论</h3>

<p>使用逻辑，就很容易判断一种说法是否靠谱。</p>

<h3>261.利用成本思维进行判断</h3>

<p><strong>成本</strong>是我们在做几乎任何事情时都难以避免的一个重要因素，因此，那它作为一把尺子考量人们想法和做法的初衷，是非常有效的。</p>

<h2>264.一位输在起跑线上的精神导师</h2>

<ol>
<li>如果说人工智能的成就都是在数据驱动这个方法的指导下取得的，而贾里尼克（Frederek Jelinek）就是提出这个方法的祖师爷。</li>
<li><p>几个观点</p>

<ul>
<li>小学生和中学生其实没有必要花那么多时间读书，而他们的社会经验、生活能力以及在那时树立起的志向将帮助他们一生。</li>
<li>中学阶段花很多时间比同班多读的课程，在大学以后用非常短的时间就可以读完，因为在大学阶段，人的理解能力要强得多。</li>
<li>学习（和教育）是一个人一辈子的过程，很多中学成绩好的亚裔学生进入名校后表现不如那些因为兴趣而读书的美国同学，因为前者不断读书的动力不足。</li>
<li>书本的内容可以早学，也可以晚学，但是错过了成长阶段却是无法弥补回来的。</li>
</ul>
</li>
</ol>


<h2>265.我的精神导师富兰克林</h2>

<p>富兰克林为自己指定的13条美德：</p>

<ol>
<li>节制：食不过饱，酒不过量</li>
<li>慎言：只讲对人对己有益之言，不说无聊琐碎的话</li>
<li>条理：让拥有的每件东西各有其位，让要做的每件事情都各有其时</li>
<li>坚毅：一旦决定做一件事，就马上义无反顾地去做</li>
<li>节俭：将钱用在于人于己有益的事情上，杜绝浪费</li>
<li>勤奋：不耽误任何事情，总是干有用的事情，终止不必要的行为</li>
<li>真诚：不采用任何有害的欺骗行为，想问题和说话都要公平公正</li>
<li>正直：绝对不做损人利己之事</li>
<li>适度：避免极端，避免别人对你产生怨恨</li>
<li>清洁：决不允许身体、服装和居所不洁</li>
<li>心静：不为琐碎之事、寻常之事，和不可避免之事萦绕</li>
<li>贞洁：不过度行房事，也不因男女关系损害和他人的关系</li>
<li>谦卑：以耶稣和苏格拉底为楷模。 富兰克林发现，那些抢功劳的人，虽然看上去抢到了一些功劳，但是他人常常自有看法，甚至他人的嫉妒也会让这些人倒霉。而他不抢功劳，反而成为受益者。</li>
</ol>


<p>把节制放在第一位，是因为节制有助于保持头脑清醒，这样可以帮助获得其他美德。</p>

<h2>267.我的精神导师富兰克林（3）——成功之道</h2>

<ol>
<li>巴菲特讲，<strong>钱是为了让人做想做的事情，而不是无所事事。</strong></li>
<li>保守主义者更关心我们周围的事情，而不是世界大事，同时保守主义者会用行动改变周围的环境，富兰克林就是这样的人。</li>
</ol>


<h2>268.我的几位恩师</h2>

<p>给年轻人的几个建议：</p>

<ol>
<li>选择一个好的学习和工作环境很重要，看看那个组织里的每一个人能够教给你什么。</li>
<li>除了专业，还有很多能力需要锻炼，如果能得到前辈在这些方面的指导，将受益终身。</li>
<li>大部分时候不会一帆风顺。有些时候，很多偶然性事件可以改变我们的命运，但是无论遇到什么事情，都不要抱怨。</li>
<li>很多努力，如果方向是对的，最终会得到补偿。在任何领域，如果没有最精深的了解和过人之处，就难以做到一流。做不到一流，最终是辛苦一辈子。</li>
</ol>


<h2>272.国民特性（1）——日本人（上）</h2>

<p><strong>今天会英语就如同会开车，只是一种简单的生活技能，而不是职业特长。</strong></p>

<h2>273.国民特性（3）——日本人（下）</h2>

<ol>
<li>日本国民特性：

<ol>
<li>极好面子。日本人虽然比较诚实，但是做错的事情也喜欢遮遮掩掩，这要是他们把面子看得极重。</li>
<li>“残忍”天性。 日本文化对弱者缺乏同情。</li>
<li>并不幸福的日本男人。日本女人结婚后通常不工作，就在家相夫教子。掌握家里一项大权，就是财权。</li>
<li>享受衰退。有了衰退，物价、房价不再上涨，生活压力小了。因为有了衰退，工作不再忙碌，大家可以比较悠闲地享受生活。因为有了衰退，外来人口减少，环境变得更好，社会比较安定。</li>
</ol>
</li>
<li>在很多方面，中国人其实和美国人比较相似，和日本人反而差别很大。</li>
</ol>


<h2>特别来信——重预测与重反应</h2>

<p>世界上很多事情其实是没法预测的，把希望寄托在正确预测上是缘木求鱼。因此，真正善于投资和办公司的人都是善于做出正确反应的人，而不是预言家。</p>

<h2>279.跨界浅析（下）</h2>

<ol>
<li>跨界是结果，并不是最初的目的。</li>
<li>跨界是有必要性的，特别是对于突破性的创新。这里面的原因有很多，但是最重要的有两条。

<ol>
<li>一个领域内的人常常囿于过去的思维定式，很难突破成功。</li>
<li>重大的突破常常需要引入外来的技术，因此只有跨界的人有这些优势。</li>
</ol>
</li>
<li>什么样的人适合跨界，或者说容易跨界成功？当然，这个人需要已经在某个领域甚至几个领域比较成功，而且比较有适应性等等，不过根据我自己的体会，还有四个不能忽略的细节常常被忽略掉。

<ol>
<li>跨界的人通常在原有的专业或行业已经获得了成功。</li>
<li>过硬的专业知识。</li>
<li>跨界成功的这些人常常有一些天赋，只是他们过去没有发现自己这方面的天赋而已。</li>
<li>跨界者的思想都是非常开放的，他们愿意接受新东西，新思维。</li>
</ol>
</li>
<li>除了上述主观因素，跨界成功还需要一些特定的条件。

<ol>
<li>贵人相助</li>
<li>契机</li>
</ol>
</li>
<li>怎么做比较容易跨界？

<ol>
<li>通常比较成功的跨界是<strong>艺术和技术的结合</strong></li>
<li><strong>高势能到低势能</strong>的跨界比较容易</li>
<li>想要跨界，最简单的办法就是<strong>系统地</strong>去学习新知识，不能像民间科学家那样自己摸索。</li>
</ol>
</li>
</ol>


<h2>280.专业和业余的区别</h2>

<ol>
<li>职业选手能很好地控制自己的情绪，不会因为打了一个坏球而输掉整场比赛，也不会因为打出一个好球而得意，而业余选手打坏一个球会怨天尤人，接连几个球都打不好。而打出一个好球，会得意忘形，接下来可能会放松，并失去领先的优势。</li>
<li>专业素养：

<ol>
<li>好的专业人士要在任何情况下为工作本身着想，他们不会因为看到患者是个瘾君子，态度就和对待一个社会名士有所不同，也不会因为最近自己的一些家庭变故影响自己的工作</li>
<li>专业素养意味着遵守流程和行业规范</li>
</ol>
</li>
<li>是否有专业素养体现在是否愿意花功夫寻找更好的答案，而不是交差了事。</li>
<li>专业人士常常有完整的领域知识，或者说掌握了成体系的知识，而业余人士只掌握了一些知识点。前者因此具有分析问题，解决未知问题的能力，后者常常只能应用所知的一些知识。</li>
<li>具有专业素养的人都是在动态中进步的。无论是工程师、医生还是会计师，一流的从业者都是不断学习和进步的。</li>
<li>跨界：首先在自己熟悉的领域培养好专业素养，有了好的习惯，就容易有好的结果；接下来，要在新的领域获得专业的知识和技能，并遵循专业的步骤去做事情。</li>
</ol>


<h2>281.美国的校园安全问题和个人安全防范</h2>

<ol>
<li>任何时候都要有防范心理。最大的危险是不知道危险的存在，而意识到危险，出事的可能性就已经小了很多。</li>
<li>关于安全防范的战术 遇到罪犯怎么办？

<ol>
<li>在美国的大学里，校警<strong>不建议反抗，建议逃跑</strong>，而且要蛇形逃跑，以防止对方开枪。</li>
<li><strong>能给钱消灾就给钱，不要舍不得东西</strong>。</li>
<li>遇到有车跟随，要将车开到警察局或者人多的购物中心，不要有侥幸心理，以为他会自己离开，更不要回家。</li>
</ol>
</li>
</ol>


<h2>285.对话班超：勇气和智慧</h2>

<p>一些人谈到勇敢，把它理解为爱冒险，甚至爱使用暴力，这和真正的勇敢其实是两回事。 “匹夫见辱，拔剑而起，挺身而斗，此不足为勇也。<strong>天下有大勇者，卒然临之而不惊，无故加之而不怒</strong>”。 所谓勇敢应该是不怕危险和困难，果敢行动，办成别人不能干也不敢干的事情。</p>

<h2>294.Google网页排名算法和传播效果</h2>

<ol>
<li><strong>在单位里，如果想让你的意见被重视，不仅要找很多人替你宣传，而且还要找在单位里有人望的人来做这件事，而不是简单找一大堆人。</strong></li>
<li>好的人缘是让那些在单位里最有影响力，以及最有信誉的人对你有一个高度的评价。根据网页排名的理论，这样做效果最好。当然，这个影响力和信誉未必和职位有关。</li>
<li>自己一定要成为一个被公认的有影响力和客观公正的人，也就是说，你给谁投票，你这一票都很起作用。 而这件事事要办好，需要一个比较长时间的努力，但最关键的是，要有意识地提高自己在单位里意见的重要性排名。这时，很多有损我们长期信誉的事情一定不要做。</li>
<li>要成为一个公认的，有主见的，以前的看法得到证实的人。要成为这样的人，就需要少说话，多观察周围同事和上下级做事情，看看他们的得失，自己把单位里的问题看得清清楚楚，而且相应的专业知识也是必须的。</li>
</ol>


<h2>295.如何在单位里进行有效的沟通</h2>

<ol>
<li>面对面的口头信息传递对人决策的影响力最大。</li>
<li>在一个跨国公司里，比较专业的人会遵守下面六个基本的沟通原则：

<ol>
<li>好消息要当面通知对方。</li>
<li>对于坏消息，视情况而定。如果自己有责任，需要解释的，依然不能用邮件通知，比如解雇一个下属。如果不是很重要的事，用邮件通知即可。</li>
<li>主观的事情要尽可能面对面沟通，客观的则可以用邮件。在单位里凡是涉及说服别人的事情，都属于主观这一类。</li>
<li>涉及到法律问题的事情，或者讲竞争对手坏话的言论，一定不能有文字记录，以免将来到了法庭上成为不利的证据。</li>
<li>公事和私事使用的邮箱不能混用。</li>
<li>约人说话的时间也很有讲究，作为下属，不妨约老板比较晚一点的时间，即使快下班也没有关系，因为老板通常会走得很晚，他也会觉得你工作得很晚。反过来，则不行。</li>
</ol>
</li>
</ol>


<h2>300.狗的会计问题：为什么有些公司做不成事</h2>

<ol>
<li>我们很多现有的大型企业，坐拥很多资源，却错失了很多机会，原因就在于自己用现在的规矩将自己锁死了。</li>
<li><strong>规矩是为了方便做成一件事情的，如果因为有了规矩不能做事了，需要修改的是规矩。</strong></li>
<li>当然，我并不是让你成为规矩的破坏者，而是希望你在做事情的时候能够不受规矩的约束，不忘初心。 就像前面讲到的养狗看护粮仓的故事，既然狗的存在具有合理性，就应该为它制定相应的财务制度，而不是拒绝这种好方法。</li>
</ol>


<h2>305.娱乐至死的时代</h2>

<ol>
<li>尼尔波兹曼在《娱乐至死》书中指出，今天美国的现实社会，一切观点都渐渐要通过娱乐的方式出现和传播才有效果，这不仅仅是一种技术手段，它已经成为一种文化，甚至是时代的精神产物。</li>
<li>乔治奥威尔的《1984》和阿道司赫胥黎的《美丽新世界》的区别：波兹曼认为奥威尔害怕真理被隐瞒，而赫胥黎则担心真理被淹没在无聊琐碎的世事中；奥威尔害怕人们无法获得信息，而赫胥黎则担心人们在庞大的信息中日益被动而丧失了判断力，甚至变得自私；<strong>奥威尔担心我们憎恨的东西会毁掉我们，而赫胥黎则担心我们所热爱的东西（新技术）毁掉我们。</strong></li>
<li>造成娱乐至死现象的根本原因有两个，一个是物质过剩，另一个是信息过剩。

<ol>
<li>当人类不需要工作就可以养活自己时，其实问题也就来了，因为人毕竟是有思想的动物，不会满足于吃饱饭就完事，因此，就必须想办法让他们把多余的精力和时间都消耗掉。娱乐至死就是一个很好的解决方案。</li>
<li>有了物质之后，接下来就是用大量的信息给每一个人的精神上自足的享受了。</li>
</ol>
</li>
<li>如何破除娱乐至死的局呢？其实也很简单，既然原因来自于太多低品质的物质和混杂的信息，我们不妨抛弃掉那些东西，追求一些高品质的物质和有用的信息。</li>
</ol>


<h2>310奢侈品的光泽（6）：传奇故事</h2>

<ol>
<li>研究奢侈品对我最大的帮助是如何做好一款产品，并且让人愿意付费购买。一款好的产品需要有其他人提供不了的独特的用途。因此，我告诉自己宁可不做事，这辈子也不做“Me too”（我也行）的事情。</li>
<li>第二个启示是永远不要为了多卖一份东西而降价，因为这对出高价的顾客不公平。一个好的商品应该配得上一个高价，让拥有它的人具有荣誉感，这是奢侈品行业销售的精髓所在。</li>
<li>第三个启示是，随着时代的变化，要永远能讲出新的故事。</li>
</ol>


<h2>315.比穷更可怕的是什么？</h2>

<p>比贫穷更可怕的是缺乏规矩。 缺乏规矩会踩到别人的脚趾而不自知，其结果是，轻则没有人愿意帮助他们，重则大家会和他们作对，而这个世界上没有人帮助是不行的。</p>

<h2>320.犹太人的教育方式Chavrusa和苏格拉底对勇气的看法</h2>

<ol>
<li>犹太民族是最善于教育的民族，虽然他们只占世界人口的0.2%，却出了很多思想家、科学家和商业巨子。</li>
<li><strong>犹太人的教育方式和中国式两个极端。中国比较强调知识的直接传授，也就是我们常说的灌输，这样成效快，而且考试成绩比较好。我们的教育总是教我们如何找到标准答案，或者正确答案。 犹太人则强调提问和辩论，强调知识内在的逻辑性，他们最典型的方法就是所谓的Chavrusa。</strong></li>
<li>Chavrusa原意是伙伴，后来指犹太教学习经典的特定方法。使用这种方法时，两个人一起研读经典，然后开始辩论，看谁能够辩论赢。在辩论中，观点不重要，重要的是逻辑。</li>
<li>Chavrusa中最关键的两点是提问和逻辑。

<ol>
<li>每个人都可以不断质疑对方的观点，这是通过提问完成。 能提出问题不仅说明自己对主题有所了解，而且能帮助自己养成一种对这种现象和观点保持独立思考的能力。</li>
<li>逻辑——在治学（做科研）中非常强调一点，就是不要带有太多的主观假设，一切从前提（前人现有的工作）出发，使用逻辑或者实验，得到什么结果都要尊重。 如果结果和想象的不同，可能是我们的想象错了，也可能是前提错了，也可能是实验没做好，但是逻辑是不会错的。找到任何一个错误的原因，就是进步。</li>
</ol>
</li>
<li>培养提问题的能力，一方面要鼓励孩子从小就不要怕问傻问题，另一方面靠有意识地引导。</li>
</ol>


<h2>321.和三位美国大学教授聊大学教育</h2>

<ol>
<li>在学校要学习校外很难获得的技能

<ul>
<li>例如那些很难自学的基础课和专业知识——数学、统计、法律、会计、工程理论等。</li>
</ul>
</li>
<li>学会写作也是三位教授强调必须完成的事

<ul>
<li>能够将复杂而头绪非常多的想法用简单、平实、生动的语言表达出来，这是非常有用的。</li>
</ul>
</li>
<li>尽可能晚地作硬性抉择

<ul>
<li>从信息论的角度讲，任何硬性的抉择都会失去信息，也就意味着失去机会。大多数大学生都不知道长大后想要什么，成为什么样的人。在这样的情况下，尽量不要断绝选择的可能性。</li>
</ul>
</li>
<li>注重授课老师而不是课程名字

<ul>
<li>从好的老师那里，你可以学到很多东西，它们不仅来自于课程本身，而且是一整套合乎逻辑的解决问题的思路，这些可以让你今后举一反三学习新东西。</li>
</ul>
</li>
<li>至少掌握好一门外语。</li>
<li>尽可能多地去旅行

<ol>
<li>了解不同的人和文化</li>
<li>到各个不同的单位去实习，了解自己将来想做什么，需要学习什么</li>
<li>走出舒适区</li>
</ol>
</li>
<li>尽可能上小班课，以便和教授沟通</li>
<li>多交流你的思想。

<ol>
<li>通过交流不断更新自己的想法</li>
<li>在校的年轻人有犯错的权利；走出校园后，可能就不会被别人原谅，甚至惹来大麻烦</li>
</ol>
</li>
</ol>


<h2>327.共赢和此消彼长（下）：迷失在全球化中的西方世界</h2>

<ol>
<li>欧洲衰落的原因有很多，其中最重要的有两条，一条是全球化和信息化，另一条则是左翼运动。</li>
<li>欧美国家过分讲究个人利益、不切实际的福利，以及非常短的工作时间，结果高端的竞争力也越来越弱。</li>
<li>在冷战结束后不到20年的时间，很多最初倡导全球化的发达国家和地区（包括绝大部分欧洲国家和美国部分地区），反而成为了全球化的牺牲品——它们原以为自己可以像当年英国和美国那样是受益者，但是忽略了力量的对比是此消彼长的。</li>
<li>个人发展：Google和微软的中层管理人员和高职级的专业人员，很容易养成欧洲国家的心态，他们不再会愿意去做那些看似低端的一线工作。然后他们通过分工将琐碎的脏活累活交给新的下属，然后自己享受工作和生活的平衡去了。<strong>开始的时候他们还因为有自己的专长可以指导下属，时间稍微一长，他们过去的专长就变得没有用处了。</strong></li>
<li>启发：

<ol>
<li>新人在单位里不要介意做脏活、累活，没有这个起点，就没有今后的发展；但是不能满足于一辈子做脏活累活。</li>
<li>改变自己的地位常常需要很长的时间，多思考欧洲的商人和亚洲国家是如何改变自己地位的</li>
<li><strong>如果你的老板不是一个能一直往上走的人，你只有两个选择，适当的时候换老板，或者找到机会取而代之。</strong></li>
<li>任何人的老本都吃不了太长时间，一旦开始工作，能力就比光环重要了。不断地进步才是最重要的。</li>
<li>欧洲衰落的一个原因在于今天工作不工作，干活多与少，结果都差不多，这种公平要不得。如果你在这样一个单位，不要觉得工作轻松是好事情，要趁早离开，因为这条船是要沉的。</li>
</ol>
</li>
</ol>


<h2>329.为什么很多人会相信水变油</h2>

<p>总结一下识破水变油的几个要点：</p>

<ol>
<li>对于不熟悉的、新的事物，切断脑子里的快捷方式。这是我们本身进化的弱点。</li>
<li>对于故意把简单问题复杂化的做法要格外小心。</li>
<li>对于那些别人似乎都懂了，就我不懂的新事物（或者新瓶装旧酒的事物），不要觉得因为我比别人聪明，不懂是件可耻的事情，因此装作懂。实际上，别人可能也是出于面子在不懂装懂。买乐视股票的人就属于这一种。</li>
<li>如果我们已经识破了骗术，千万不要觉得别人比我们更傻，会做接盘侠。</li>
</ol>


<h2>341.腐蚀者的作用</h2>

<ol>
<li>腐蚀者有三大特征

<ol>
<li>嗅觉特别灵敏</li>
<li>很少攻击健康的动物</li>
<li>他们的胃液酸性很大，不管吞下什么动物的肉都很快就消化了，这是它们不得病的原因</li>
</ol>
</li>
<li>现实生活中，如果没有腐蚀者，这个社会会充满不健康的东西。浑水和香橼这种空头机构的最终目的是盈利，但是它们的做法却在一定程度上对这类问题企业得到了揭露和威慑的作用，对股市的健康发展利大于弊。</li>
<li>美国不仅允许直接做空股票，甚至允许裸空股票，也就是说做空股票的数量甚至可以超过公司发行股票的总股数。被裸空的公司基本上只有一个结局，破产退市了事。相比之下，中国的股市一直在保护本该死掉的上市公司，以至于在股市上各种公司鱼龙混杂，最后倒霉的是投资者。</li>
<li>淘汰掉落伍的机构和个体，可以将社会的资源释放，有利于健康的机构和个体过得更好。</li>
</ol>


<h2>342.在单位里五种容易被腐蚀者盯上的人</h2>

<ol>
<li>老板的地位常常取决于他的团队规模。因此，除非万不得已，没有上面的命令，老板一般不会解雇自己手下的人。</li>
<li>今天在任何单位里，尤其是在公司里，几乎100%的业绩来自于极少数的人。</li>
<li>五类人

<ol>
<li>在老板心中本来就会被淘汰的人。</li>
<li>因为各种原因被照顾进来的人，他们的能力远达不到单位的要求。</li>
<li>一些职级和承担的责任不相称的资深人士</li>
<li>不能为老板带来价值的人，或者说既不能帮助老板成功，也不能给同事带来帮助的人</li>
<li>还没有证明自己价值的新人，这既包括刚入职的员工，也包括刚刚从其他部门换过来的人。</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Closure]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/06/04/on-swift-closure/"/>
    <updated>2019-06-04T17:24:47+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/06/04/on-swift-closure</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#function%E4%B8%8Eclosure%E7%9A%84%E5%85%B3%E7%B3%BB">Function与Closure的关系：</a></li>
<li><a href="#%E7%94%A8closure%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F">用Closure初始化一个变量</a></li>
<li><a href="#closure%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96">Closure的语法糖：</a></li>
<li><a href="#closure%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">Closure与内存管理、内存泄漏</a>

<ul>
<li><a href="#capture-list%E7%9A%84%E5%AE%9A%E4%B9%89">Capture List的定义</a></li>
<li><a href="#weak-and-unowned-references">Weak and Unowned References</a></li>
</ul>
</li>
<li><a href="#closure%E6%8D%95%E8%8E%B7%E5%8F%98%E9%87%8F">Closure捕获变量</a></li>
</ul>


<p><a href="https://medium.com/@abhimuralidharan/functional-swift-all-about-closures-310bc8af31dd">Functional swift: All about Closures</a></p>

<p>这篇全面详细易懂地介绍了Swift的Closure，包括</p>

<ul>
<li>Closure的语法，包括一些简化写法，如Trailing Closures</li>
<li>Closure与Function的区别</li>
<li>Closure与内存管理、内存泄漏，如capture list的使用，weak与unowned的区别</li>
<li>Functions和closures都是引用类型，不是值类型</li>
</ul>


<p>也可以看<a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>，但是官方文档没有上面的文章详细。</p>

<p>下面有选择地记录一下。</p>

<p><a id="markdown-function与closure的关系" name="function与closure的关系"></a></p>

<h2>Function与Closure的关系：</h2>

<p>参考<a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>里面的三句话理解一下：</p>

<blockquote><ul>
<li>Global functions are closures that have a name and do not capture any values.</li>
<li>Nested functions are closures that have a name and can capture values from their enclosing function.</li>
<li>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</li>
</ul>
</blockquote>

<p>还有一点很重要：<strong>Closures and functions are first class types in swift</strong>。</p>

<blockquote><p>Functions and closures are first-class citizens in Swift because you can treat then like a normal value. For example, you can：</p>

<ul>
<li>assign a function/closure to a local variable .</li>
<li>pass a function/closure as an argument .</li>
<li>return a function/closure .</li>
</ul>
</blockquote>

<p><a id="markdown-用closure初始化一个变量" name="用closure初始化一个变量"></a></p>

<h2>用Closure初始化一个变量</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">setupViewUsingClosure</span><span class="p">:</span> <span class="bp">UIView</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">view</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">()</span>
</span><span class='line'>    <span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">.</span><span class="n">green</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span><span class='line'><span class="p">}()</span> <span class="c1">//IMPORTANT!!! I have added () at the end.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-closure的语法糖" name="closure的语法糖"></a></p>

<h2>Closure的语法糖：</h2>

<p><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">官方文档Closures</a>有个总的说明：</p>

<blockquote><p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>

<ul>
<li>Inferring parameter and return value types from context</li>
<li>Implicit returns from single-expression closures</li>
<li>Shorthand argument names</li>
<li>Trailing closure syntax</li>
</ul>
</blockquote>

<p>当你第一次看到这个写法的时候肯定很疑惑：参数、类型、函数调用时的括号都跑哪去了？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>理解了上面几点，就可以明白为什么可以这么写，下面让我们一步步看清楚。</p>

<p>Closure的定义如下：</p>

<blockquote><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>

<pre><code class="swift">{ (params) -&gt; returnType in
    statements
}
</code></pre></blockquote>

<p>举个具体的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为：</p>

<blockquote><ul>
<li><strong>Inferring parameter and return value types from context</strong></li>
</ul>


<p>Because the sorting closure is passed as an argument to a method, Swift can infer the types of its parameters and the type of the value it returns.</p></blockquote>

<p>所以，上面的代码可以写为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Implicit returns from single-expression closures</strong></li>
</ul>


<p>Single-expression closures can implicitly return the result of their single expression by omitting the return keyword from their declaration.</p></blockquote>

<p>所以，代码继续改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">reversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Shorthand argument names</strong></li>
</ul>


<p>Swift automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure’s arguments by the names $0, $1, $2, and so on.</p></blockquote>

<p>代码继续改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再因为：</p>

<blockquote><ul>
<li><strong>Trailing closure syntax</strong></li>
</ul>


<p>If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a trailing closure instead. A trailing closure is written after the function call’s parentheses, even though it is still an argument to the function. When you use the trailing closure syntax, you don’t write the argument label for the closure as part of the function call.</p></blockquote>

<p>代码就可以写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Ewa&quot;</span><span class="p">,</span> <span class="s">&quot;Barry&quot;</span><span class="p">,</span> <span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">rreversedNames</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-closure与内存管理内存泄漏" name="closure与内存管理内存泄漏"></a></p>

<h2>Closure与内存管理、内存泄漏</h2>

<p>Closure带来的循环引用和内存泄漏，主要通过Capture List来解决：</p>

<blockquote><p>You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition. A capture list defines the rules to use when capturing one or more reference types within the closure’s body.</p></blockquote>

<p>详细内容参考<a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56">Resolving Strong Reference Cycles for Closures</a>。下面摘要一下。</p>

<p><a id="markdown-capture-list的定义" name="capture-list的定义"></a></p>

<h3>Capture List的定义</h3>

<blockquote><p>Each item in a capture list is a pairing of the weak or unowned keyword with a reference to a class instance (such as self) or a variable initialized with some value (such as delegate = self.delegate!). These pairings are written within a pair of square braces, separated by commas.</p></blockquote>

<p>Place the capture list before a closure’s parameter list and return type if they are provided:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">lazy</span> <span class="k">var</span> <span class="nl">someClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">,</span> <span class="k">weak</span> <span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="o">!</span><span class="p">]</span> <span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">stringToProcess</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// closure body goes here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-weak-and-unowned-references" name="weak-and-unowned-references"></a></p>

<h3>Weak and Unowned References</h3>

<blockquote><p>Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>

<p>Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated. This enables you to check for their existence within the closure’s body.</p>

<p>NOTE: If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.</p></blockquote>

<p>关于unowned的另一个解释更清楚：</p>

<blockquote><p>Like a weak reference, an unowned reference does not keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is used when the other instance has the same lifetime or a longer lifetime.</p></blockquote>

<p><a id="markdown-closure捕获变量" name="closure捕获变量"></a></p>

<h2>Closure捕获变量</h2>

<blockquote><p>Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as closing over those constants and variables.</p></blockquote>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// capturing values</span>
</span><span class='line'><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">var</span> <span class="n">closureArray</span> <span class="o">=</span> <span class="p">[()</span><span class="o">-&gt;</span><span class="p">()]()</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">closureArray</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// here i will be 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span><span class='line'><span class="n">closureArray</span><span class="p">[</span><span class="mi">4</span><span class="p">]()</span> <span class="c1">// prints 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The closure captures the current address of <code>i</code> and every time we access <code>i</code> , it . returns the current value.</p>

<p>If we want to prevent this behavior (capturing values) and print the value of i even if the properties change after their capturing inside the closure, we can explicitly capture the variable with a capture list like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">closureArray2</span> <span class="o">=</span> <span class="p">[()</span><span class="o">-&gt;</span><span class="p">()]()</span>
</span><span class='line'><span class="k">var</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">closureArray2</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// here i will be 5</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span> <span class="c1">// prints 0</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span> <span class="c1">// prints 1</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">2</span><span class="p">]()</span> <span class="c1">// prints 2</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">3</span><span class="p">]()</span> <span class="c1">// prints 3</span>
</span><span class='line'><span class="n">closureArray2</span><span class="p">[</span><span class="mi">4</span><span class="p">]()</span> <span class="c1">// prints 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way, we keep an immutable copy of the variable <code>j</code>. Thanks to this copy, further changes to <code>j</code>, outside the closure, will not affect the closure. <code>j</code> is a let constant here. It is not mutable.</p>

<p>We can add multiple values to the capture list :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">closure</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(j) \(k) \(l)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>also, you can have alias names for the values captured.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">closure</span><span class="p">.</span><span class="n">append</span> <span class="p">{</span> <span class="p">[</span><span class="n">a</span> <span class="o">=</span> <span class="n">j</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">l</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(a) \(b) \(c)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequece and Collection in Swift]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/06/03/sequece-and-collection-in-swift/"/>
    <updated>2019-06-03T16:22:33+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/06/03/sequece-and-collection-in-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#array-out-of-range-crash"><code>Array</code> out of Range Crash</a></li>
<li><a href="#homemade-collection">Homemade collection</a></li>
<li><a href="#sequences">Sequences</a>

<ul>
<li><a href="#how-to-conform-to-sequence-protocol">How to Conform to <code>Sequence</code> Protocol</a></li>
<li><a href="#make-our-section-conform-to-sequence-protocol">Make our <code>Section</code> Conform to <code>Sequence</code> Protocol</a></li>
<li><a href="#gifts">Gifts</a></li>
</ul>
</li>
<li><a href="#collections">Collections</a>

<ul>
<li><a href="#how-to-conform-to-collection-protocol">How to Conform to <code>Collection</code> Protocol</a></li>
<li><a href="#make-our-section-conform-to-collection-protocol">Make our <code>Section</code> Conform to <code>Collection</code> Protocol</a></li>
</ul>
</li>
<li><a href="#difference-between-array-and-collection">Difference between <code>Array</code> and <code>Collection</code></a></li>
<li><a href="#reference">Reference</a></li>
</ul>


<p>The content comes from the following posts:</p>

<ol>
<li><a href="https://medium.com/swift-programming/swift-sequences-ce22d76f120c">Swift Sequences</a></li>
<li><a href="https://medium.com/swift-programming/swift-collections-e5fff3cd6759">Swift Collections</a></li>
</ol>


<p>But some of the code inside is old and can&rsquo;t be compiled with swift 5.0. So rewritten the code using swift 5.0.</p>

<p><a id="markdown-array-out-of-range-crash" name="array-out-of-range-crash"></a></p>

<h2><code>Array</code> out of Range Crash</h2>

<p>Before diving into Swift Sequences, let’s see a strange behavior.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">array</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="err">😭</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="s">&quot;z&quot;</span><span class="p">]</span> <span class="err">😎</span>
</span><span class='line'>
</span><span class='line'><span class="err">🤔</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, when requesting an element that doesn’t exist, why arrays crash whereas dictionaries don’t?</p>

<p>Arrays and dictionaries are two base collections provided by the Swift standard library. We can access those collections elements through the [] notation, also known as subscript. Let’s see how those subscripts are defined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Element</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="nl">Key</span><span class="p">:</span> <span class="n">Hashable</span><span class="p">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">Key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Value</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What’s interesting is that arrays have a non optional return type. Subscript can’t throw errors so there are no alternatives other than a fatalError if we request an index that doesn’t exist.</p>

<p>For dictionaries, on the other hand, an optional Value is returned, which allows to gracefully return nil if the index doesn’t exist.</p>

<p>We can adopt dictionaries safer approach by overloading the arrays subscript — we can’t override them. Adding an external name to the parameter is enough.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Element</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">count</span> <span class="o">?</span> <span class="nb">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">:</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We saw how we can create a new accessor to the elements of an array, but can we do the same with a homemade collection?</p>

<p><a id="markdown-homemade-collection" name="homemade-collection"></a></p>

<h2>Homemade collection</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Internally, this ‘collection’ is based on an array. This is an implementation detail for the simplicity of the example. We could have used a linked list as in this <a href="http://austinzheng.com/2015/01/24/swift-seq/">excellent article</a> by <a href="https://twitter.com/austinzheng">Austin Zheng</a>.</p>

<p>Creating a subscript on our collection is very easy, we can even reuse the array’s extension we made earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example in practice :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">cars</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;911&quot;</span><span class="p">,</span> <span class="s">&quot;Cayman&quot;</span><span class="p">,</span> <span class="s">&quot;Cayenne&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">section</span> <span class="o">=</span> <span class="n">Section</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Porsche&quot;</span><span class="p">,</span> <span class="nl">elements</span><span class="p">:</span> <span class="n">cars</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">section</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Optional(&quot;Cayman&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! But does that make our type a collection, as Swift defines it?</p>

<p><a id="markdown-sequences" name="sequences"></a></p>

<h2>Sequences</h2>

<p>When it comes to manipulating sets, the most abstract notion given by the standard library is the Sequence, defined as</p>

<blockquote><p>A type that can be iterated with a <code>for…in</code> loop.</p></blockquote>

<p><a id="markdown-how-to-conform-to-sequence-protocol" name="how-to-conform-to-sequence-protocol"></a></p>

<h3>How to Conform to <code>Sequence</code> Protocol</h3>

<p>This section is from <a href="https://developer.apple.com/documentation/swift/sequence">Sequece official site</a>.</p>

<p>Making your own custom types conform to Sequence enables many useful operations, like for-in looping and the contains method, without much effort. To add Sequence conformance to your own custom type, add a makeIterator() method that returns an iterator.</p>

<p>Alternatively, if your type can act as its own iterator, implementing the requirements of the IteratorProtocol protocol and declaring conformance to both Sequence and IteratorProtocol are sufficient.</p>

<p>Here’s a definition of a Countdown sequence that serves as its own iterator. The makeIterator() method is provided as a default implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">Countdown</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">defer</span> <span class="p">{</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">count</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">threeToGo</span> <span class="o">=</span> <span class="n">Countdown</span><span class="p">(</span><span class="nl">count</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">threeToGo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Prints &quot;3&quot;</span>
</span><span class='line'><span class="c1">// Prints &quot;2&quot;</span>
</span><span class='line'><span class="c1">// Prints &quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-make-our-section-conform-to-sequence-protocol" name="make-our-section-conform-to-sequence-protocol"></a></p>

<h3>Make our <code>Section</code> Conform to <code>Sequence</code> Protocol</h3>

<p>The <code>Section</code> struct can&rsquo;t act as its own iterator, we need to define an iterator for it, and then return an instance of the defined iterator inside <code>func makeIterator() -&gt; Section&lt;T&gt;.Iterator</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span> <span class="n">Sequence</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">Iterator</span><span class="p">:</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">currentIndex</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span> <span class="p">(</span><span class="n">_</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">tempIndex</span> <span class="o">=</span> <span class="n">currentIndex</span>
</span><span class='line'>            <span class="n">currentIndex</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">array</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">tempIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">makeIterator</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Iterator</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Iterator</span><span class="p">(</span><span class="n">elements</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="markdown-gifts" name="gifts"></a></p>

<h3>Gifts</h3>

<p>Is that all? No! By conforming to SequenceType we also get methods for free, here is some of them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">min</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 911</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">max</span><span class="p">()</span>
</span><span class='line'><span class="c1">// Cayman</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span>
</span><span class='line'><span class="c1">// [&quot;911&quot;, &quot;Cayenne&quot;, &quot;Cayman&quot;]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&quot;911&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get the min, max &amp; sort methods because the elements of our sequence, String in our case, are Comparable. Contains is available thanks to our elements being Equatable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// [&quot;Cayman&quot;, &quot;Cayenne&quot;]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// [3, 6, 7]</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">+</span> <span class="err">$</span><span class="mf">1.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>And for functional programming fans, filter, map and reduce are also given.</p>

<p><a id="markdown-collections" name="collections"></a></p>

<h2>Collections</h2>

<p>Sequence is the most basic set notion given by the Swift standard library. There is a more evolved one.</p>

<p>A collection is defined as follow :</p>

<blockquote><p>A multi-pass <em>sequence</em> with addressable positions</p></blockquote>

<p>As we saw previously, a sequence is a type that can be iterated with a <code>for…in</code> loop. It doesn’t need that the elements might be iterated over several times. And it doesn’t need that we give a way to access directly an element.</p>

<p>Collections require those last two points. As a side effect, it no longer allows us to have an infinite number of elements.</p>

<p>To be a collection, a type must conform to the <code>Collection</code> protocol.</p>

<p><a id="markdown-how-to-conform-to-collection-protocol" name="how-to-conform-to-collection-protocol"></a></p>

<h3>How to Conform to <code>Collection</code> Protocol</h3>

<p>This section comes from <a href="https://developer.apple.com/documentation/swift/collection">Collection official site</a>.</p>

<p>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the Collection protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add Collection conformance to your type, you must declare at least the following requirements:</p>

<ol>
<li>The <code>startIndex</code> and <code>endIndex</code> properties</li>
<li>A subscript that provides at least read-only access to your type’s elements</li>
<li>The <code>index(after:)</code> method for advancing an index into your collection</li>
<li>Conform to <code>Sequece</code> Protocol, as <code>Collection</code> is inherited from <code>Sequence</code></li>
</ol>


<p><a id="markdown-make-our-section-conform-to-collection-protocol" name="make-our-section-conform-to-collection-protocol"></a></p>

<h3>Make our <code>Section</code> Conform to <code>Collection</code> Protocol</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span> <span class="n">Collection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">title</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">let</span> <span class="nl">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// begin: required for Collection</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">startIndex</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">endIndex</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">elements</span><span class="p">.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">index</span><span class="p">(</span><span class="n">after</span> <span class="nl">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// end: required for Collection</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">subscript</span><span class="p">(</span><span class="n">safe</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// begin: required for Sequence</span>
</span><span class='line'>    <span class="k">struct</span> <span class="nl">Iterator</span><span class="p">:</span> <span class="n">IteratorProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">currentIndex</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">init</span> <span class="p">(</span><span class="n">_</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kr">mutating</span> <span class="k">func</span> <span class="n">next</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">tempIndex</span> <span class="o">=</span> <span class="n">currentIndex</span>
</span><span class='line'>            <span class="n">currentIndex</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">array</span><span class="p">[</span><span class="nl">safe</span><span class="p">:</span> <span class="n">tempIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">makeIterator</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Section</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Iterator</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Iterator</span><span class="p">(</span><span class="n">elements</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// end: required for Sequence</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>endIndex</code> has to be after the last element. It allows to define an empty collection with <code>startIndex</code> = <code>endIndex</code>.</p>

<p>Like conforming to <code>Sequence</code>, we get some methods / properties for free:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">first</span>
</span><span class='line'><span class="c1">// 911</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">isEmpty</span>
</span><span class='line'><span class="c1">// false</span>
</span><span class='line'><span class="n">section</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">of</span><span class="p">:</span> <span class="s">&quot;911&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get indexOf thanks to our Elements being Equatable.</p>

<p><a id="markdown-difference-between-array-and-collection" name="difference-between-array-and-collection"></a></p>

<h2>Difference between <code>Array</code> and <code>Collection</code></h2>

<p>We created our own collection, which is great, but what about that difference of behavior between Arrays and Dictionaries we talked about at the beginning of the post? We saw that Array’s dangerous subscript was coming from the Indexable protocol, but what about Dictionaries?</p>

<p>Dictionaries, like Arrays, are a collection, as Swift defines it. They both conform to CollectionType. So Dictionaries are also required to provide an ‘unsafe’ subscript that takes an Index and returns a non optional Element. The one we’re used to is just a convenience subscript.</p>

<p>A simple example shows that it is also really easy to get a crash with Dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="o">:</span> <span class="s">&quot;bmw&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="o">:</span> <span class="s">&quot;audi&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="o">:</span> <span class="s">&quot;citroen&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">startIndex</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="c1">// (key: &quot;c&quot;, value: &quot;citroen&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'><span class="c1">// (key: &quot;b&quot;, value: &quot;audi&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="n">dic</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="nl">after</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Fatal error</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The last question that remains is why <code>Collection</code> requires a subscript that may crash? Simply for performance reason, it costs too much to check the validity of the given index. Crashing is faster :)</strong></p>

<p><a id="markdown-reference" name="reference"></a></p>

<h2>Reference</h2>

<ol>
<li><a href="https://medium.com/swift-programming/swift-sequences-ce22d76f120c">Swift Sequences</a></li>
<li><a href="https://medium.com/swift-programming/swift-collections-e5fff3cd6759">Swift Collections</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自然语言理解（NLU）综述]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/29/overview-of-nlp-and-nlu/"/>
    <updated>2019-05-29T17:27:58+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/29/overview-of-nlp-and-nlu</id>
    <content type="html"><![CDATA[<!-- more -->


<p>这篇总结有点乱，权当留作自己看。</p>

<ul>
<li><a href="#%E4%BA%BA%E6%9C%BA%E5%AF%B9%E8%AF%9D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%9E%8B">人机对话的两种模型</a></li>
<li><a href="#nlu%E4%B8%8Enlp">NLU与NLP</a>

<ul>
<li><a href="#stanford-corenlp">Stanford CoreNLP</a></li>
<li><a href="#ios-naturallanguage-framework">iOS <em>NaturalLanguage</em> framework</a>

<ul>
<li><a href="#custom-machine-learning-models">Custom Machine Learning Models</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%90%86%E8%A7%A3%E5%B9%B3%E5%8F%B0">自然语言理解平台</a></li>
<li><a href="#google%E7%9A%84dialogflow">Google的Dialogflow</a>

<ul>
<li><a href="#dialogflow%E7%9A%84%E5%8E%86%E5%8F%B2">Dialogflow的历史</a></li>
<li><a href="#dialogflow%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5">Dialogflow的一些概念</a></li>
<li><a href="#%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0intents%E4%B9%8B%E9%97%B4%E7%9A%84entities%E5%85%B1%E4%BA%AB">两种方法实现intents之间的entities共享</a></li>
<li><a href="#training-tab-in-dialogflow-platform">“Training” tab in Dialogflow platform</a></li>
<li><a href="#integrations-analytics-and-fulfillment">“Integrations”, “Analytics” and “Fulfillment”</a></li>
<li><a href="#prebuild-agent-and-small-talk">“Prebuild Agent” and “Small Talk”</a></li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8dialogflow%E7%9A%84%E4%BE%8B%E5%AD%90">一些使用Dialogflow的例子</a></li>
</ul>
</li>
<li><a href="#alexa-and-lex">Alexa and Lex</a></li>
<li><a href="#microsoft-luis-text-analytics-api">Microsoft LUIS Text Analytics API</a></li>
<li><a href="#facebook%E7%9A%84witai">Facebook的wit.ai</a></li>
<li><a href="#snips">Snips</a>

<ul>
<li><a href="#duckling">Duckling</a></li>
</ul>
</li>
<li><a href="#ibm%E7%9A%84watson">IBM的Watson</a></li>
<li><a href="#swiftnlc">SwiftNLC</a>

<ul>
<li><a href="#xunfei-command-recognition">Xunfei Command Recognition</a></li>
</ul>
</li>
<li><a href="#siri-and-sirikit">Siri and SiriKit</a>

<ul>
<li><a href="#sirikit-build-in-domain">SiriKit build-in domain</a></li>
<li><a href="#sirikit-custom-intent">SiriKit custom intent</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-人机对话的两种模型" name="人机对话的两种模型"></a></p>

<h2>人机对话的两种模型</h2>

<p>自然语言理解（NLU）的最终目的是让计算机能够理解人类的语言，实现人机对话。目前，人机对话模型基本上有两种：</p>

<ol>
<li>基于意图(Intent-based)的对话：这是当NLP算法使用intents和entities进行对话时，通过识别用户声明中的名词和动词，然后与它的dictionary交叉引用，让bot可以执行有效的操作。目前，大部分平台都是基于这种模式进行训练的，包括谷歌的Dialogflow。</li>
<li>基于流程(Flow-based)的对话：基于流程的对话是智能通信的下一个级别。在这里，我们会给予两个人之间对话的许多不同样本的RNN（循环神经网络），创建的机器人将根据你训练的ML模型进行响应。 wit.ai是在这个领域取得巨大进展的少数网站之一。但这个太超前，不是我们考虑使用的对象，接下来也不会讨论。</li>
</ol>


<p>详细讨论参考：<a href="https://chatbotsmagazine.com/bot-talks-intent-based-vs-flow-base-conversations-798788dc9cf6">Bot Talks: Intent-Based vs. Flow-Base Conversations</a>。</p>

<p><a id="markdown-nlu与nlp" name="nlu与nlp"></a></p>

<h2>NLU与NLP</h2>

<p>NLP（Natural Language Processing）是NLU（Natural Language Understanding）的一个前期步骤：NLP用于对文本或者语音进行机器学习训练和识别时的特征提取阶段。</p>

<p><a id="markdown-stanford-corenlp" name="stanford-corenlp"></a></p>

<h3>Stanford CoreNLP</h3>

<p>可以去<a href="http://nlp.stanford.edu:8080/corenlp/process">Stanford CoreNLP</a>试一下效果。使用界面可以看一下：</p>

<p><img src="http://hongchaozhang.github.io/images/NLU_Stanford_CoreNLP.png" alt="stanford CoreNLP" /></p>

<p><a id="markdown-ios-naturallanguage-framework" name="ios-naturallanguage-framework"></a></p>

<h3>iOS <em>NaturalLanguage</em> framework</h3>

<p>iOS的<em>NaturalLanguage</em>框架可以做的事情如下：</p>

<p><img src="http://hongchaozhang.github.io/images/NLU_AppleNLP.png" alt="Apple nlp framework" /></p>

<p><a id="markdown-custom-machine-learning-models" name="custom-machine-learning-models"></a></p>

<h4>Custom Machine Learning Models</h4>

<p>用户可以自己训练模型，用于下列事情：</p>

<p>NSLinguisticTagger:</p>

<ul>
<li>Language identification</li>
<li>Tokenization in Word/Sentence/Paragraph</li>
<li>Part of speech</li>
<li>Lemmatization</li>
<li>Named entity recognition</li>
</ul>


<p>With custom models:</p>

<ol>
<li>Text classification

<ul>
<li>Sentiment classification</li>
<li>Topic classification</li>
<li>Domain classification</li>
</ul>
</li>
<li>Word tagging

<ul>
<li>Part of speech</li>
<li>Named entity</li>
<li>Slot parsing

<ul>
<li>Chunking</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ol>


<p><a id="markdown-自然语言理解平台" name="自然语言理解平台"></a></p>

<h2>自然语言理解平台</h2>

<p>一些比较有名气的自然语言理解平台：</p>

<ul>
<li>Facebook’s Wit.ai,</li>
<li>IBM Watson’s Conversation Service,</li>
<li>Microsoft’s Language Understanding and Intelligence Service or</li>
<li>Google NLP API</li>
</ul>


<p>Wit.ai joined Facebook on 2015.1.5</p>

<p>一些常见产品及其背后的支撑技术：</p>

<ul>
<li>Amazon: Echo &lt;- Alexa &lt;- Lex</li>
<li>Apple: iPhone &lt;- Siri &lt;- SiriKit</li>
<li>Google: Android phone &lt;- Google Asistant &lt;- Dialogflow</li>
<li>Microsoft: Windows phone &lt;- Cortana &lt;- Luis</li>
</ul>


<p>下面选择一些平台做简单介绍。</p>

<p><a id="markdown-google的dialogflow" name="google的dialogflow"></a></p>

<h2>Google的Dialogflow</h2>

<blockquote><p><a href="https://dialogflow.com/">Google的Dialogflow</a>Give users new ways to interact with your product by building engaging voice and text-based conversational interfaces, such as voice apps and chatbots, powered by AI. Connect with users on your website, mobile app, the Google Assistant, Amazon Alexa, Facebook Messenger, and other popular platforms and devices.</p></blockquote>

<p><a id="markdown-dialogflow的历史" name="dialogflow的历史"></a></p>

<h3>Dialogflow的历史</h3>

<p>Dialogflow就是Speaktoit公司的api.ai。</p>

<ul>
<li>2011: Speaktoit developed an intelligent personal assistant for mobile phones</li>
<li>2014: Speaktoit released api.ai</li>
<li>2016: Google buys Speaktoit to power Google Assistant</li>
<li>2017: api.ai is renamed to Dialogflow</li>
</ul>


<p><a id="markdown-dialogflow的一些概念" name="dialogflow的一些概念"></a></p>

<h3>Dialogflow的一些概念</h3>

<ul>
<li>Agents: 一套module包含dialogflow及自然語言理解使用者的語義後，執行整個動作 action. Ex:如上圖 TestAgent</li>
<li>Intents: 使用者的意圖。意圖由開發人員配置。</li>
<li>Entities:重要的關鍵字眼(我真的不知道怎麼翻好，Google說這個字叫做實體?) 從用戶口中所提到的重要的關鍵字眼轉換成重要的資訊，籍此提供給Intent。例如：“訂飛機” ：這句話中還需要 城市 日期 等資訊，來能完成訂飛機這個動作，所以 城市 和 日期 就是Entities.</li>
<li>Fulfilment: 程式撰寫的地方。例如 訂飛機 還得串飛機公司的API才有可能完成訂購，所以程式邏緝就是寫在這裡。</li>
<li>Integrations: LINE, Google home etc..</li>
<li>Prebuilt Agents: dialogflow幫你預先訓練好的Agent，你可以拿來用。</li>
<li>Smalltalk: 也是dialogflow幫你預先訓練好的Agent，幫助你的chatbot對話更友善.</li>
</ul>


<p><a id="markdown-两种方法实现intents之间的entities共享" name="两种方法实现intents之间的entities共享"></a></p>

<h3>两种方法实现intents之间的entities共享</h3>

<ul>
<li>Context: 在线性对话中，完成讯息在Intent中的传送。</li>
<li>Followup Intent</li>
</ul>


<blockquote><p>对话生命周期，就是这个参数可以存多久。</p></blockquote>

<p><a id="markdown-training-tab-in-dialogflow-platform" name="training-tab-in-dialogflow-platform"></a></p>

<h3>“Training” tab in Dialogflow platform</h3>

<blockquote><p><a href="https://console.dialogflow.com/api-client/#/agent/dea6f73c-7c22-44b6-a1a8-45cdcd160bfc/training">官方关于Training的说明</a>：你将收到所有发送给agent的回覆讯息以及agent回覆的内容，如果你告诉你的agent一些回应文本，但它回应你不喜欢的输出，这就非常有用，若你稍后意识到忘记了某个关键字的同义词，并且用户正在使用这个关键字，那么也可能会有所帮助，可以去告诉你的代理在这种情况下应该做什么。</p></blockquote>

<p><a id="markdown-integrations-analytics-and-fulfillment" name="integrations-analytics-and-fulfillment"></a></p>

<h3>“Integrations”, “Analytics” and “Fulfillment”</h3>

<blockquote><p>在Training下方，你可以看到Integrations。在这里，可以管理你的agent去串接不同的服务，例如Google Assistant，Twitter，Slack，Messenger，Cortana，Alexa等等。 Integrations之后，还有Analytics，基本上用来显示建议名称，之后还有Fulfillment，如果你要调用一个API并实现一个webhook，这就是你会需要来的地方。</p></blockquote>

<p><a id="markdown-prebuild-agent-and-small-talk" name="prebuild-agent-and-small-talk"></a></p>

<h3>“Prebuild Agent” and “Small Talk”</h3>

<p>最后两个选项功能非常简单，但很有用。第一个是Prebuilt Agents，在这里，你可以import一个预先存在的代理框架，有很多例子，如食物传递机器人，音乐机器人，甚至（抱歉，但你真的需要知道这个）hotel预订机器人！最后一个选项是Small Talk，如果你将代理设计为像Siri或Google Assistant这样的每日伙伴(daily companion)，这个选项非常有用，Small Talk允许你添加常见问题的答案，我们都喜欢问我们的机器人，如”你几岁？”或”你住哪里？”，以及更热门的问题”你愿意嫁给我吗？”</p>

<p><a id="markdown-一些使用dialogflow的例子" name="一些使用dialogflow的例子"></a></p>

<h3>一些使用Dialogflow的例子</h3>

<ol>
<li>林建宏的7篇文章：如何使用Dialogflow建立Chatbot #1-#7</li>
<li><a href="https://medium.com/@wolkesau/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8dialogflow%E5%BB%BA%E7%AB%8Bchatbot-1-%E4%BB%8B%E7%B4%B9-62736bcdad95">用Dialogflow建立LINE Chatbot #1 介紹</a></li>
<li><a href="https://github.com/appcoda/ChatbotHotel">A Demo for booking hotel based on Dialogflow</a></li>
<li><a href="https://www.appcoda.com.tw/chatbot-dialogflow-ios/">聊天機器人教學：使用Dialogflow (API.AI)開發 iOS Chatbot App</a></li>
</ol>


<p><a id="markdown-alexa-and-lex" name="alexa-and-lex"></a></p>

<h2>Alexa and Lex</h2>

<blockquote><p>Echo to Alexa as iPhone to Siri
Lex is whats inside Alexa
Lex is part of AWS, but Alexa isn&rsquo;t</p>

<p>Alexa is more focusing on communication using voice. Hence it has some special requirements for utterances. For example, the number is not supported in the utterances. You need to use &lsquo;Show me three elements&rsquo; instead of &lsquo;Show me 3 elements&rsquo;. For acronym, we need to use &lsquo;n.b.a&rsquo; instead of &lsquo;NBA&rsquo;.</p>

<p>Lex is a platform which can power bot who accept text input.</p>

<p>Amazon Lex 让您可以将语音和文本聊天访问集成到现有应用程序中。Amazon Alexa 允许您使用 Amazon Echo 或任何启用 Alexa Voice Service 的设备为家庭或工作场所的用户提供免提语音接口。</p></blockquote>

<p><a id="markdown-microsoft-luis-text-analytics-api" name="microsoft-luis-text-analytics-api"></a></p>

<h2>Microsoft LUIS Text Analytics API</h2>

<ol>
<li>Detect language</li>
<li>Analyze sentiment</li>
<li>Extract key phrases

<ul>
<li>使用方法参考<a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/quickstarts/python">Python demo</a>。</li>
</ul>
</li>
<li>Identify entities

<ul>
<li>使用方法参考<a href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/quickstarts/python">Python demo</a>。</li>
</ul>
</li>
</ol>


<p><a id="markdown-facebook的witai" name="facebook的witai"></a></p>

<h2>Facebook的wit.ai</h2>

<p>参见<a href="https://wit.ai/">官方文档</a>。</p>

<p><a id="markdown-snips" name="snips"></a></p>

<h2>Snips</h2>

<p>Snips的设计流程还是非常好的 ，包含基于正则表达式的确定性识别和基于机器学习的可能性识别。一些资料：</p>

<ul>
<li><a href="https://medium.com/snips-ai/an-introduction-to-snips-nlu-the-open-source-library-behind-snips-embedded-voice-platform-b12b1a60a41a">Post</a></li>
<li><a href="https://snips-nlu.readthedocs.io/en/latest/index.html">Document</a></li>
<li><a href="https://github.com/snipsco/snips-platform-swift">GitHub for iOS app demo</a></li>
<li><a href="https://console.snips.ai/assistants/proj_ageaw4b4d83">Snips assistent generation</a></li>
</ul>


<p><a id="markdown-duckling" name="duckling"></a></p>

<h3>Duckling</h3>

<p>Snips使用<a href="https://github.com/facebook/duckling">Duckling</a>进行下面的理解：</p>

<p>输入："the first Tuesday of October"
输出：{&ldquo;value&rdquo;:&ldquo;2017-10-03T00:00:00.000-07:00&rdquo;,&ldquo;grain&rdquo;:&ldquo;day&rdquo;}</p>

<blockquote><p>Note:
* Spin your own Duckling server or using wit.ai’s build entities.
* <a href="https://medium.com/wit-ai/open-sourcing-duckling-our-probabilistic-date-parser-4351ee66c4ba">Open Sourcing Duckling, our probabilistic (date) parser</a></p></blockquote>

<p><a id="markdown-ibm的watson" name="ibm的watson"></a></p>

<h2>IBM的Watson</h2>

<p>参看<a href="https://www.ibm.com/watson/services/natural-language-classifier/">官方文档</a>。</p>

<p><a id="markdown-swiftnlc" name="swiftnlc"></a></p>

<h2>SwiftNLC</h2>

<ul>
<li><a href="https://chatbotsmagazine.com/coreml-nlc-with-keras-tensorflow-and-apple-nslinguistictagger-1659021ea8e5">Offline Intent Understanding: CoreML NLC with Keras/TensorFlow and Apple NSLinguisticTagger</a></li>
<li><a href="https://heartbeat.fritz.ai/implementing-a-natural-language-classifier-in-ios-with-keras-core-ml-358f114c0b51">Implementing a Natural Language Classifier in iOS with Keras + Core ML</a></li>
</ul>


<p><a id="markdown-xunfei-command-recognition" name="xunfei-command-recognition"></a></p>

<h3>Xunfei Command Recognition</h3>

<p>例如，开发一个简单的语音拨号应用，可定义如下语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;commands&gt;:(找一下|打电话给) &lt;name&gt;;
</span><span class='line'>&lt;name&gt;: 张三|李四;</span></code></pre></td></tr></table></div></figure>


<p>该语法使识别引擎可以支持以下说法：找一下张三 、打电话给张三 、找一下李四 、打电话给李四。
凡是用户说出这个范围中的任意一句话，均可以被识别系统识别。如果用户说的话不在上述范围中，识别系统可能拒绝识别。</p>

<p><a id="markdown-siri-and-sirikit" name="siri-and-sirikit"></a></p>

<h2>Siri and SiriKit</h2>

<p><a id="markdown-sirikit-build-in-domain" name="sirikit-build-in-domain"></a></p>

<h3>SiriKit build-in domain</h3>

<p>SiriKit支持的build-in的domain包括：</p>

<ul>
<li>Messaging</li>
<li>Lists and Notes</li>
<li>Workouts</li>
<li>Payments</li>
<li>VoIP Calling</li>
<li>Visual Codes</li>
<li>Photos</li>
<li>Ride Booking</li>
<li>Car Commands</li>
<li>CarPlay</li>
<li>Restaurant Reservations</li>
</ul>


<p>基于build-in的domain，可以不经过任何机器模型训练达到下面的效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>“Hey Siri, send a UnicornChat message”
</span><span class='line'>“To whom?”
</span><span class='line'>“Celestra”
</span><span class='line'>“What do you want to say to Celestra?”
</span><span class='line'>“Let’s add more sparkle transitions” </span></code></pre></td></tr></table></div></figure>


<p>当然也可以用机器学习模型做一些事情。</p>

<blockquote><p>Domain model can be trained and used through NLP framework.</p></blockquote>

<p>我们也可以帮助Siri识别自定义的词典（WWDC2017 228_making_great_sirikit_experiences)。可以支持两种自定义的词典：</p>

<ul>
<li>App vocabulary: known to all your users and unique to your app, supplied in the plist file.</li>
<li>User vocabulary: known only to some specific users, supplied at the runtime.</li>
</ul>


<p>但是，注意：</p>

<ul>
<li>Need to update the user vocabulary if some info changes.</li>
<li>Need to reset the user vocabulary if the user reset the app, or log out.</li>
</ul>


<p><a id="markdown-sirikit-custom-intent" name="sirikit-custom-intent"></a></p>

<h3>SiriKit custom intent</h3>

<p>SiriKit的custom intent只是用来实现Siri Shortcut的，不能携带参数。</p>

<blockquote><p>Custom intent can only be used as shortcut and NO parameters will be extracted from the voice command.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Natural Language Understanding Engine on iOS]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/22/offline-natural-language-understanding-engine-on-ios/"/>
    <updated>2019-05-22T16:04:28+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/22/offline-natural-language-understanding-engine-on-ios</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#objective">Objective</a>

<ul>
<li><a href="#what-is-a-good-nlu-engine">What is a good NLU engine</a>

<ul>
<li><a href="#deterministic-behavior">Deterministic behavior</a></li>
<li><a href="#generalization-power">Generalization power</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#design-and-workflow">Design and Workflow</a></li>
<li><a href="#deterministic-intent-parser">Deterministic Intent Parser</a></li>
<li><a href="#probabilistic-intent-parser">Probabilistic Intent Parser</a>

<ul>
<li><a href="#intent-classification">Intent Classification</a>

<ul>
<li><a href="#model-training">Model Training</a></li>
<li><a href="#model-usage">Model Usage</a></li>
</ul>
</li>
<li><a href="#slot-filling">Slot Filling</a>

<ul>
<li><a href="#model-training-1">Model Training</a></li>
<li><a href="#model-usage-1">Model Usage</a></li>
</ul>
</li>
<li><a href="#model-size">Model Size</a></li>
<li><a href="#problems-to-be-solved">Problems to Be Solved</a>

<ul>
<li><a href="#intent-classification-model-has-no-probability-output">Intent Classification Model Has No Probability Output</a></li>
<li><a href="#slot-filling-model-tagges-the-label-by-words-not-phrase">Slot Filling Model Tagges the Label by Words, not Phrase</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a id="markdown-objective" name="objective"></a></p>

<h2>Objective</h2>

<p><img src="http://hongchaozhang.github.io/images/NLUObjective.png" alt="nlu objective" /></p>

<p>We want an NLU Engine to understand the normal text command on Mobile. We hope the engine can know the command&rsquo;s intent and the info the command needs to execute.</p>

<p>Currently, there are many NLU related tools, like Google Dialogflow, Amazon Lex, Facebook Wit.ai, Microsoft Luis. However, they are all online tools. Considering the privacy problem, we are trying to build our own offline NLU Engine.</p>

<p><a id="markdown-what-is-a-good-nlu-engine" name="what-is-a-good-nlu-engine"></a></p>

<h3>What is a good NLU engine</h3>

<p>Let’s start by looking at a simple example, and see what you would expect from a good NLU engine.</p>

<p>First, we need some examples to train the NLU engine. Consider the following dataset, used to train a simple weather assistant with a few query examples:</p>

<ul>
<li>Give me the weather for [tomorrow](date)</li>
<li>Show me the [Paris](location) weather for [Sunday](date)</li>
</ul>


<p><a id="markdown-deterministic-behavior" name="deterministic-behavior"></a></p>

<h4>Deterministic behavior</h4>

<p>The first thing you want is that all the examples you give to train the model are correctly supported by the engine. This makes the system predictable and easy to use: if a query is not correctly parsed, then add it to the dataset and it will work right away.</p>

<p><a id="markdown-generalization-power" name="generalization-power"></a></p>

<h4>Generalization power</h4>

<p>Having this deterministic behavior is great for robustness and predictability, but a powerful NLU engine also needs to have some generalization power. You want the system not only to recognize patterns provided in the training set, but also all the possible variations that come from speaking naturally. If we go back to the previous dataset, it is reasonable to expect the NLU engine to parse a query like: “What’s the weather in Beijing right now?” even though it is not one of the training examples.</p>

<p><a id="markdown-design-and-workflow" name="design-and-workflow"></a></p>

<h2>Design and Workflow</h2>

<p><img src="http://hongchaozhang.github.io/images/NLUDesign.png" alt="nlu design" /></p>

<p>In order to satisfy these objectives: deterministic behavior and generalization power, we built the processing pipeline described in the figure above. It receives a text as input, and outputs a structured response containing the intent and the list of slots. The main processing unit of the pipeline is the NLU engine. It contains two intent parsers which are called successively: a deterministic intent parser and a probabilistic one.</p>

<p>The deterministic parser relies on regular expressions to match intent and slots, which results in perfect behavior on training examples but doesn’t generalize. This parser is the first to be used because of its strictness.</p>

<p>The probabilistic parser is used whenever the first parser fails to find a match. It uses machine learning to generalize beyond the set of sentences seen at train time, thus making our NLU engine be able to cope with examples which are not in the scope of the training data set. This parser involves two successive steps: intent classification and slot filling. These two steps rely on trained machine learning models to classify intent and extract slots.</p>

<p><a id="markdown-deterministic-intent-parser" name="deterministic-intent-parser"></a></p>

<h2>Deterministic Intent Parser</h2>

<p>The Deterministic Intent Parse is the first step to be used. This parser relies on some regular expressions to match the intent and slots. If the new input has the same structure with one of the training examples, we will find its intent and slots by comparing the input with the matched regular expression.</p>

<p>The regular expressions are built based on the training examples. For a training case:</p>

<ul>
<li>What is the weather in [Alaska](location)</li>
</ul>


<p>We will build a regular expression:</p>

<ul>
<li>(what is the weather in)(?&lt;location1&gt;.+)</li>
</ul>


<p><a id="markdown-probabilistic-intent-parser" name="probabilistic-intent-parser"></a></p>

<h2>Probabilistic Intent Parser</h2>

<p>If the Deterministic Intent Parser fails to find the intent and slots, the Probabilistic Intent Parser will be used.</p>

<p>The Probabilistic Intent Parser has two steps:</p>

<ul>
<li>Intent Classification</li>
<li>Slot Filling</li>
</ul>


<p>The Intent Classification is to find the intent of the input command text, and the Slot Filling is to extract all the slots needed by the intent. These two steps are both based on trained machine models.</p>

<p>Apple has released CreateML for training natural language models, which also integrates the powerful NatrualLanguage framework functions, like Tokenization, Part of Speech, Lemmatization, Name Entity Recognition, etc. This will make the training process very simple, and the trained model will be more accurate and smaller.</p>

<p><a id="markdown-intent-classification" name="intent-classification"></a></p>

<h3>Intent Classification</h3>

<p><a id="markdown-model-training" name="model-training"></a></p>

<h4>Model Training</h4>

<p>For Intent Classification model training, we prepare the data set as follows (The size of the training data is 3282 falling into four intents.):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;I would like the forecast in cupertino california  tomorrow&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecast&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Forecast in Maine USA next week&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecast&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Will I be able to wear open-toed shoes twenty three hours and seven minutes from now in Severn?&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecastItem&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Should I bring a raincoat to the Belgrade and Loreto areas of Oman at midnight?&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;searchWeatherForecastItem&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apple has release CreateML framework for training machine learning models easily inside Swift playground and the trained model can be saved as mlmodel type. And the MLTextClassifier class from CreateML will benefit from Apple&rsquo;s NatrualLanguage framework for Tokenization, Part of Speech, Lemmatization, etc.</p>

<p>The training script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">trainingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;intentClassificationFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/train&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span>  <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">trainingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the classifier with a training data.</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLTextClassifier</span><span class="p">(</span><span class="nl">trainingData</span><span class="p">:</span> <span class="n">trainingData</span><span class="p">,</span> <span class="nl">textColumn</span><span class="p">:</span> <span class="s">&quot;text&quot;</span><span class="p">,</span> <span class="nl">labelColumn</span><span class="p">:</span> <span class="s">&quot;label&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Evaluating training &amp; validation accuracies.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">trainingMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'><span class="k">let</span> <span class="n">validationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">validationMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the properly labeled testing data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;intentClassificationFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/test&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">testingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Counting the testing evaluation.</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationMetrics</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">evaluation</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">testingData</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">classificationError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Confusion matrix in order to see which labels were classified wrongly.</span>
</span><span class='line'><span class="k">let</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">confusion</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Confusion matrix: \(confusionMatrix)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Metadata for saving the model.</span>
</span><span class='line'><span class="k">let</span> <span class="n">metadata</span> <span class="o">=</span> <span class="n">MLModelMetadata</span><span class="p">(</span><span class="nl">author</span><span class="p">:</span> <span class="s">&quot;Hongchao Zhang&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">shortDescription</span><span class="p">:</span> <span class="s">&quot;A model trained to classify weather related commands.&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">version</span><span class="p">:</span> <span class="s">&quot;1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Saving the model. Remember to update the path.</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">classifier</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="s">&quot;/Users/hozhang/Downloads/textClassifier.mlmodel&quot;</span><span class="p">),</span>
</span><span class='line'>                    <span class="nl">metadata</span><span class="p">:</span> <span class="n">metadata</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get 99.23% training accuracy and 98.87% validation accuracy.</p>

<p><a id="markdown-model-usage" name="model-usage"></a></p>

<h4>Model Usage</h4>

<p>For the trained model of mlmodel type, we can use it in our iOS app through NLModel (from NatrualLanguage framework). The demo swift code may be like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">modelUrl</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;Data/text/textClassifier&quot;</span><span class="p">,</span> <span class="nl">withExtension</span><span class="p">:</span> <span class="s">&quot;mlmodel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compiledModelUrl</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLModel</span><span class="p">.</span><span class="n">compileModel</span><span class="p">(</span><span class="nl">at</span><span class="p">:</span> <span class="n">modelUrl</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">NLModel</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">compiledModelUrl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="n">requestText</span>
</span><span class='line'><span class="k">let</span> <span class="n">label</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">predictedLabel</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;text: \(text)</span><span class="se">\n</span><span class="s">label:\(label ?? &quot;</span><span class="n">Not</span> <span class="n">detected</span><span class="o">!</span><span class="s">&quot;)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>How to use .mlmodel file?</strong></p>

<p>.mlmodel file needs to be compiled before using. There are two ways to do this: offline and online:</p>

<ol>
<li>offline: drag the mlmodel into your project, xcode will compile the .mlmodel for you before you build you app.</li>
<li>online: use <code>MLModel.compileModel</code> to compile your .mlmodel file at runtime. This is especially useful when your are at swift playground, where you cannot get xcode&rsquo;s help for comipling.</li>
</ol>
</blockquote>

<p><a id="markdown-slot-filling" name="slot-filling"></a></p>

<h3>Slot Filling</h3>

<p><a id="markdown-model-training-1" name="model-training-1"></a></p>

<h4>Model Training</h4>

<p>For Slot Filling model training, we prepare the data set as follows (The size of the training data is: 3282.):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;would&quot;</span><span class="p">,</span> <span class="s2">&quot;like&quot;</span><span class="p">,</span> <span class="s2">&quot;the&quot;</span><span class="p">,</span> <span class="s2">&quot;forecast&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;california&quot;</span><span class="p">,</span> <span class="s2">&quot;tomorrow&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;location&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tokens&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Forecast&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;Maine&quot;</span><span class="p">,</span> <span class="s2">&quot;next week&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span> <span class="s2">&quot;location&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like Intent Classification model training, CreateML framework also makes it easy. Like MLTextClassifier, the MLWordTagger class from CreateML will also benefit from NatrualLanguage framework for Part of Speech, Lemmatization, Name Entity Recognition, etc.</p>

<p>The training script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Initializing the training data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;slotParsingFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/train&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span>  <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="n">trainingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the classifier with a training data.</span>
</span><span class='line'><span class="k">let</span> <span class="n">classifier</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLWordTagger</span><span class="p">(</span><span class="nl">trainingData</span><span class="p">:</span> <span class="n">trainingData</span><span class="p">,</span> <span class="nl">tokenColumn</span><span class="p">:</span> <span class="s">&quot;tokens&quot;</span><span class="p">,</span> <span class="nl">labelColumn</span><span class="p">:</span> <span class="s">&quot;labels&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Evaluating training &amp; validation accuracies.</span>
</span><span class='line'><span class="k">let</span> <span class="n">trainingAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">trainingMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'><span class="k">let</span> <span class="n">validationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">classifier</span><span class="p">.</span><span class="n">validationMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initializing the properly labeled testing data from Resources folder.</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingDataPath</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;slotParsingFile&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">,</span> <span class="nl">inDirectory</span><span class="p">:</span> <span class="s">&quot;Data/text/test&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'><span class="k">let</span> <span class="n">testingData</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLDataTable</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">testingDataPath</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Counting the testing evaluation.</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationMetrics</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">evaluation</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">testingData</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">evaluationAccuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">taggingError</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Confusion matrix in order to see which labels were classified wrongly.</span>
</span><span class='line'><span class="k">let</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">evaluationMetrics</span><span class="p">.</span><span class="n">confusion</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Confusion matrix: \(confusionMatrix)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Metadata for saving the model.</span>
</span><span class='line'><span class="k">let</span> <span class="n">metadata</span> <span class="o">=</span> <span class="n">MLModelMetadata</span><span class="p">(</span><span class="nl">author</span><span class="p">:</span> <span class="s">&quot;Hongchao Zhang&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="nl">shortDescription</span><span class="p">:</span> <span class="s">&quot;A model trained to parse slots from weather related commands.&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="nl">version</span><span class="p">:</span> <span class="s">&quot;1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Saving the model. Remember to update the path.</span>
</span><span class='line'><span class="n">try</span><span class="o">!</span> <span class="n">classifier</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="nl">fileURLWithPath</span><span class="p">:</span> <span class="s">&quot;/Users/hozhang/Downloads/slotParsing.mlmodel&quot;</span><span class="p">),</span>
</span><span class='line'>                        <span class="nl">metadata</span><span class="p">:</span> <span class="n">metadata</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can get 99.64% training accuracy and 98.38% validation accuracy.</p>

<p><a id="markdown-model-usage-1" name="model-usage-1"></a></p>

<h4>Model Usage</h4>

<p>We can load the mlmodel into an NLTagger (from NatrualLanguage framework), and use the NLTagger to tag labels for each word of the input command text. The demo swift script is like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">weatherTagSchema</span> <span class="o">=</span> <span class="n">NLTagScheme</span><span class="p">(</span><span class="s">&quot;Weather&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">modelUrl</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;Data/text/slotParsing&quot;</span><span class="p">,</span> <span class="nl">withExtension</span><span class="p">:</span> <span class="s">&quot;mlmodel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compiledModelUrl</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">MLModel</span><span class="p">.</span><span class="n">compileModel</span><span class="p">(</span><span class="nl">at</span><span class="p">:</span> <span class="n">modelUrl</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">taggerModel</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">NLModel</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">compiledModelUrl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">weatherTagger</span> <span class="o">=</span> <span class="n">NLTagger</span><span class="p">(</span><span class="nl">tagSchemes</span><span class="p">:</span> <span class="p">[</span><span class="n">weatherTagSchema</span><span class="p">])</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">setModels</span><span class="p">([</span><span class="n">taggerModel</span><span class="p">],</span> <span class="nl">forTagScheme</span><span class="p">:</span> <span class="n">weatherTagSchema</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">text</span> <span class="o">=</span> <span class="n">requestText</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">string</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'><span class="n">weatherTagger</span><span class="p">.</span><span class="n">enumerateTags</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">text</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..</span><span class="o">&lt;</span><span class="n">text</span><span class="p">.</span><span class="n">endIndex</span><span class="p">,</span> <span class="nl">unit</span><span class="p">:</span> <span class="p">.</span><span class="n">word</span><span class="p">,</span> <span class="nl">scheme</span><span class="p">:</span> <span class="n">weatherTagSchema</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[])</span> <span class="p">{</span> <span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">tokenRange</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">tag</span><span class="p">,</span> <span class="n">tag</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">!=</span> <span class="s">&quot;Whitespace&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(text[tokenRange]): \(tag.rawValue)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Reference </strong></p>

<ol>
<li><a href="https://developer.apple.com/documentation/createml/creating_a_text_classifier_model">Creating a Text Classifier Model</a>: Apple offical site for training and using machine learning models through CreateML framework.</li>
<li>WWDC video <a href="https://developer.apple.com/videos/play/wwdc2018/713/">Introducing Natural Language Framework</a>: This session introduces NLP framework and its relation with CreateML framework.</li>
</ol>


<p><a id="markdown-model-size" name="model-size"></a></p>

<h3>Model Size</h3>

<p>For the iOS app, we hope the machine learning model size is small enough. Apple&rsquo;s NatrualLanguage framework has done many optimizations on machine learning model size. The following data is from WWDC 2018 (session 713: Introducing NatrualLanguage Framework):</p>

<table>
<thead>
<tr>
<th>&ndash; </th>
<th> Open Source CRFSuite </th>
<th> Natural Language Framework</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name Entity Recognition </td>
<td> 70MB  </td>
<td> 1.4MB</td>
</tr>
<tr>
<td>Chunking </td>
<td> 30MB </td>
<td> 1.8MB</td>
</tr>
</tbody>
</table>


<p>We can see that the model will be much smaller than that trained from an open source platform.</p>

<p>The size of the two models we trained is (The training data size is: 3282):</p>

<table>
<thead>
<tr>
<th>Model </th>
<th> Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intent Classification </td>
<td> 41K</td>
</tr>
<tr>
<td>Slot Filling </td>
<td> 609K</td>
</tr>
</tbody>
</table>


<p>If your model is a neural network, you can reduce the size of your model by the following way:
<a href="https://developer.apple.com/documentation/coreml/reducing_the_size_of_your_core_ml_app">Reducing the Size of Your Core ML App</a>. You can control the precision of the neural network parameters, and thus the size of the trained model.</p>

<p>If still your model is large, you can
<a href="https://developer.apple.com/documentation/coreml/core_ml_api/downloading_and_compiling_a_model_on_the_user_s_device">Downloading and Compiling a Model on the User&rsquo;s Device</a> at runtime.</p>

<p><a id="markdown-problems-to-be-solved" name="problems-to-be-solved"></a></p>

<h3>Problems to Be Solved</h3>

<p>For Probabilistic Intent Parser, we still have some problems.</p>

<p><a id="markdown-intent-classification-model-has-no-probability-output" name="intent-classification-model-has-no-probability-output"></a></p>

<h4>Intent Classification Model Has No Probability Output</h4>

<p>We may need the probability to define the reliability of the estimated intent of an input command text.</p>

<p>However, the model trained through <code>MLTextClassifier</code> has no probability output API. If we really need the probability output, we can use other platforms to train the model, like tensorflow. That way, we will not benefit from NatrualLanguage framework and we need to consider these things by ourselves, like Tokenization, Part of Speech, Lemmatization, etc.</p>

<blockquote><p>Try other tools for training models with probability output, like Turi.</p></blockquote>

<p><a id="markdown-slot-filling-model-tagges-the-label-by-words-not-phrase" name="slot-filling-model-tagges-the-label-by-words-not-phrase"></a></p>

<h4>Slot Filling Model Tagges the Label by Words, not Phrase</h4>

<p>The NLTagger class only supply the following four tag level: word, sentence, paragraph, and document. There is no &ldquo;phrase&rdquo; tag level. For example, &ldquo;New York&rdquo; will be treated as &ldquo;New&rdquo; and &ldquo;York&rdquo;, and the tagged label will both be &ldquo;location&rdquo;. We need to compose them together manually.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何控制iOS应用的屏幕方向]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations/"/>
    <updated>2019-05-21T18:24:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/05/21/understand-ios-app-orientations</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>背景</h2>

<p>一个iOS应用默认都会支持所有的是个方向，当用户旋转屏幕的时候，应用会自动旋转。</p>

<p>有些时候，这可能不是我们想要的。比如你设计了一个只支持竖屏方向的应用，但是又想在某些时候支持Landscape模式，比如播放视频的时候。iOS应用有很多地方的设置会影响屏幕方向，iOS9之后，iPad又支持了split view，使得这个控制更加复杂。</p>

<h2>总起</h2>

<p>iPhone比较简单，因为其没有spit view的功能，iPad因为有了spilt view功能，在屏幕方向的控制上更复杂一些。</p>

<p>首先，需要明确：有哪些因素会影响到App的屏幕方向？</p>

<p><strong>1. Project设置（info.plist）</strong></p>

<p>有两个地方可以进行该项设置：</p>

<ul>
<li><p>Project->Target->General->Device Orientation</p>

<p><img src="http://hongchaozhang.github.io/images/ScreenOrientationProjectSetting.png" alt="screen orientation project setting" /></p></li>
<li><p>Project的info.plist配置文件</p>

<p><img src="http://hongchaozhang.github.io/images/ScreenOrientationInfoPlist.png" alt="screen orientation info plist" /></p></li>
</ul>


<p>这两个地方的设置是一致的：在一个地方改动，另一个地方会同步修改。其中：info.plist中的“Supported interface orientations (iPad)”属性对应于iPad的设置（Device选择iPad），info.plist中的“Supported interface orientations”属性对应于iPhone和Universal的设置（Device选择iPhone或者Universal，这两项的设置始终保持一致）。</p>

<p><strong>2. 在代码中设置应用支持的屏幕方向</strong></p>

<p>有两种方法可以在代码中设置应用支持的屏幕方向：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>每个<code>UIViewController</code>还可以通过<code>supportedInterfaceOrientations</code>方法设置自己支持的屏幕方向</li>
</ul>


<p>系统会自动将两种方法中支持的屏幕方向取交集，作为最终该view controller支持的屏幕方向。如果交集为空，那么应用将会Crash。</p>

<p><strong>3. <code>UIViewController</code>中的<code>shouldAutorotate</code>属性</strong></p>

<p>该属性是只读属性，用来控制该view controller可不可以旋转。可以在自己的view controller中将其override，返回自己的逻辑，甚至将其override为读写属性，可以在其它地方进行设置。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="n">public</span> <span class="k">var</span> <span class="nl">shouldAutorotate</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">shouldAutorotateVariable</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">set</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">shouldAutorotateVariable</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>shouldAutorotateVariable</code>为view controller中自定义的一私有变量。</p>

<h2>iPhone</h2>

<p>如果某个view controller中的<code>shouldAutorotate</code>被设置为<code>false</code>，那么系统将忽略下面的设置：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>系统只考虑用户在“Project设置（info.plist）”中的设置。</p>

<p>如果某个view controller中的<code>shouldAutorotate</code>未被重写（或者被重写为<code>true</code>），那么系统将优先考虑使用下面两个设置的交集：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li>该<code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>如果没有以上两个设置，再使用“Project设置（info.plist）”中的设置。</p>

<h2>iPad</h2>

<p>从iOS9开始，iPad开始支持split view功能。关于这个功能的设置说明，可以参考苹果官方文档：<a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a>。简单的说，就是：如果info.plist中的“Supported interface orientations (iPad)”属性对应的值包含了四个方向，同时<code>UIRequiresFullScreen</code>对应的值为<code>NO</code>，那么系统默认该应用支持split view属性，同时系统将忽略下面两处代码：</p>

<ul>
<li><code>UIApplicationDelegate</code>中的<code>supportedInterfaceOrientationsForWindow:</code>方法</li>
<li><code>UIViewController</code>通过<code>supportedInterfaceOrientations</code>方法设置的自己支持的屏幕方向</li>
</ul>


<p>以及<code>UIViewController</code>中<code>shouldAutorotate</code>的值。</p>

<p>也就是说：支持split view的应用将不能被禁止旋转，至少不能通过本文中的方法进行禁止旋转。</p>

<p>如果info.plist中的“Supported interface orientations (iPad)”属性对应的值未包含四个方向，或者“UIRequiresFullScreen”对应的值为<code>NO</code>，那么该应用不支持split view功能，其屏幕方向控制方法同iPhone相同。</p>

<blockquote><p>注意：对于“Project设置（info.plist）”设置，建议在info.plist中进行，直接设置一下三个属性的值：
* Supported interface orientations (iPad)
* Supported interface orientations
* UIRequiresFullScreen</p>

<p>在Project->Target->General->Device Orientation中进行设置，有点迷惑性：因为即使“Device”选的是“Universal”，“iPad”下面的设置也会起作用。</p></blockquote>

<h2>参考</h2>

<ol>
<li><a href="https://mobiarch.wordpress.com/2017/04/22/controlling-screen-orientation-of-ios-apps/">Controlling Screen Orientation of iOS Apps</a></li>
<li><a href="https://stackoverflow.com/questions/32782044/ios-9-supportedinterfaceorientations-not-working/32782517#32782517">iOS 9 supportedInterfaceOrientations not working</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">Slide Over and Split View Quick Start</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构整洁之道总结（The Clean Architecture）]]></title>
    <link href="http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture/"/>
    <updated>2019-02-12T17:55:48+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2019/02/12/reading-the-clean-architecture</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E6%84%9F%E6%83%B3">总体感想</a></li>
<li><a href="#%E7%AB%A0%E8%8A%82%E5%B0%8F%E7%BB%93">章节小结</a>

<ul>
<li><a href="#%E7%AC%AC2%E7%AB%A0-%E4%B8%A4%E4%B8%AA%E4%BB%B7%E5%80%BC%E7%BB%B4%E5%BA%A6">第2章 两个价值维度</a></li>
<li><a href="#%E7%AC%AC14%E7%AB%A0-%E7%BB%84%E4%BB%B6%E8%80%A6%E5%90%88">第14章 组件耦合</a></li>
<li><a href="#%E7%AC%AC15%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第15章 什么是软件架构</a></li>
<li><a href="#%E7%AC%AC17%E7%AB%A0-%E5%88%92%E5%88%86%E8%BE%B9%E7%95%8C">第17章 划分边界</a></li>
<li><a href="#%E7%AC%AC21%E7%AB%A0-%E5%B0%96%E5%8F%AB%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">第21章 尖叫的软件架构</a></li>
<li><a href="#%E7%AC%AC22%E7%AB%A0-%E6%95%B4%E6%B4%81%E6%9E%B6%E6%9E%84">第22章 整洁架构</a></li>
<li><a href="#%E7%AC%AC23%E7%AB%A0-%E5%B1%95%E7%A4%BA%E5%99%A8%E5%92%8C%E8%B0%A6%E5%8D%91%E5%AF%B9%E8%B1%A1">第23章 展示器和谦卑对象</a></li>
<li><a href="#%E7%AC%AC24%E7%AB%A0-%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%BE%B9%E7%95%8C">第24章 不完全边界</a></li>
<li><a href="#%E7%AC%AC25%E7%AB%A0-%E5%B1%82%E6%AC%A1%E4%B8%8E%E8%BE%B9%E7%95%8C">第25章 层次与边界</a></li>
<li><a href="#%E7%AC%AC28%E7%AB%A0-%E6%B5%8B%E8%AF%95%E8%BE%B9%E7%95%8C">第28章 测试边界</a></li>
<li><a href="#%E7%AC%AC34%E7%AB%A0-%E6%8B%BE%E9%81%97">第34章 拾遗</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93">其它人的一些读后总结</a>

<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%9B%BE">为什么说我们需要软件架构图？</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93">推荐《架构整洁之道》</a></li>
</ul>
</li>
</ul>


<p><a id="markdown-总体感想" name="总体感想"></a></p>

<h2>总体感想</h2>

<p>全书下来，印象最深、且最具有操作性的，就是：</p>

<p><strong>依赖反转</strong></p>

<p>源代码依赖方向永远是控制流方向的反转。
依赖关系必须要指向更稳定的方向：低层组件依赖高层组件，其中低层组件不稳定，高层组件稳定。
依赖关系应该指向更稳定的方向。</p>

<p>稳定抽象原则：一个组件的抽象程度应该与其稳定性保持一致。</p>

<p>系统的抽象程度和稳定性都可以量化，进而用来评测系统的质量。</p>

<p>系统在运行时的依赖关系与编译时的依赖关系是相反的：当高层组件的客户端需要调用低层组件中的服务时，我们就需要运用动态形式的多态来反转依赖关系。（第18章）</p>

<p>我们希望源码中的依赖关系与其数据流向脱钩，而与组件所在的层次挂钩。高层组件变更的原因具有“稀少而重大”的特点，低层组件变更的原因具有“频繁而不重大”的特点。（第19章）</p>

<p><a id="markdown-章节小结" name="章节小结"></a>
<a id="markdown-章节小结" name="章节小结"></a></p>

<h2>章节小结</h2>

<p><a id="markdown-第2章-两个价值维度" name="第2章-两个价值维度"></a></p>

<h3>第2章 两个价值维度</h3>

<p>系统行为，是紧急的。</p>

<p>系统架构，是重要的。</p>

<p>平衡系统架构的重要性与功能的紧急程度这件事，是软件研发人员自己的职责。因为业务部门本来就没有能力评估架构设计的重要程度。</p>

<p>请记住：如果忽视软件架构的价值，系统将会变得越来越难以维护，最终再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。</p>

<p><a id="markdown-第14章-组件耦合" name="第14章-组件耦合"></a></p>

<h3>第14章 组件耦合</h3>

<p>组件依赖关系图不是系统功能单元关系图，而是应用程序在构建性和维护性方面的一张地图。所以组件依赖关系图不能像系统功能单元关系图一样在设计之初就确定下来，而是随着开发进程中出现的维护性和构建性的需求而产生的。</p>

<p><a id="markdown-第15章-什么是软件架构" name="第15章-什么是软件架构"></a></p>

<h3>第15章 什么是软件架构</h3>

<p>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的选项。</p>

<p>如果在开发高层策略时有意识地让自己摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就拥有越多的信息来做出合理的决策。
另外，我们保留这些可选项的时间越长，实验的机会越多，我们做决策的时候就能拥有越充分的信息。</p>

<p><strong>一个优秀的软件架构师应该致力于最大化可选项数量。</strong></p>

<p><a id="markdown-第17章-划分边界" name="第17章-划分边界"></a></p>

<h3>第17章 划分边界</h3>

<p>软件架构设计本身就是一门划分边界的艺术。</p>

<p>一个系统的GUI与业务逻辑的变更原因、变更速率显然是不同的，所以二者中间应该有一条边界。同样的，一个系统的业务逻辑与依赖注入框架之间的变更原因和变更速率也会不同，它们之间也应该画边界线。</p>

<p>这其实就是单一指责原则（SRP）的具体实现。SRP的作用就是告诉我们应该在哪里画边界线。</p>

<p><strong>插件式架构</strong></p>

<p>事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。</p>

<p><a id="markdown-第21章-尖叫的软件架构" name="第21章-尖叫的软件架构"></a></p>

<h3>第21章 尖叫的软件架构</h3>

<p>架构设计的核心目标：</p>

<p>一个良好的架构设计应该围绕用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。</p>

<blockquote><p>这就好像一个住宅建筑设计的首要目的应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费很多精力来确保该架构的设计在满足用例需要的情况下，尽可能地允许用户能自由地选择建筑材料（砖头、石料或者木材）。</p></blockquote>

<p>而且，良好的架构设计应该尽可能地允许用户推迟和延后决定采用什么框架、数据库、Web服务以及其它与环境相关的工具。同时，良好的架构设计还应该让我们很容易改变这些决定。</p>

<p>总之，良好的架构设计应该只关注用例，并能将它们与其他的周边因素隔离。</p>

<p><a id="markdown-第22章-整洁架构" name="第22章-整洁架构"></a></p>

<h3>第22章 整洁架构</h3>

<p>整本书的核心总结。</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture22fig01.jpg" alt="clean architecture image" /></p>

<p>代码中的依赖关系必须指向同心圆的内层，即由低层机制指向高层机制。</p>

<p>比如下面这个例子就严格地遵守了依赖倒置原则，同时也就遵守了上面的设计原则：依赖关系指向同心圆的内层：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture22fig02.jpg" alt="clean architecture example" /></p>

<p><a id="markdown-第23章-展示器和谦卑对象" name="第23章-展示器和谦卑对象"></a></p>

<h3>第23章 展示器和谦卑对象</h3>

<p>应用程序所能控制的，要在屏幕上显示的一切东西，都应该在视图模型中以字符串、布尔值或者枚举类型的形式存在。然后，视图部分除了加载视图模型所需要的值，不应该再做任何其他事情。因此，我们才能说视图是谦卑对象。</p>

<blockquote><p>这里的视图有点像Redux模式下的View了：只负责忠实地将Model展现出来。</p></blockquote>

<p><a id="markdown-第24章-不完全边界" name="第24章-不完全边界"></a></p>

<h3>第24章 不完全边界</h3>

<p>用于管理输入输出数据结构的双向多态边界接口，以及依赖反转关系的管理都需要耗费资源。某些情况下可以采用一些折中方案，采用某种不完全边界：单向边界、门户模式、省掉最后一步…。</p>

<p><a id="markdown-第25章-层次与边界" name="第25章-层次与边界"></a></p>

<h3>第25章 层次与边界</h3>

<p>“中庸”之道：
过度设计边界不对，一点不设计也是不合理的，我们能做的就是不断观察系统演进，权衡各个位置设计边界的成本与收益。</p>

<p><a id="markdown-第28章-测试边界" name="第28章-测试边界"></a></p>

<h3>第28章 测试边界</h3>

<p>测试：
针对系统组成部分来设计的测试是紧耦合的，比如针对每个类的每个方法进行的测试。最终这些测试都会被抛弃。</p>

<p>不要依赖于多变的东西。比如GUI一般是多变的，通过GUI来验证系统的测试一定是脆弱的。因此，我们在系统设计与测试设计时，应该让业务逻辑不通过GUI也能被测试。
怎么做：让GUI成为“谦卑对象”，只是忠实地反应一些数据（Redux模式）。</p>

<p><a id="markdown-第34章-拾遗" name="第34章-拾遗"></a></p>

<h3>第34章 拾遗</h3>

<p>这一章中，作者提到了一个重要的实现细节问题：访问权限修饰符（public、private等），以及该细节对整体设计架构的影响。</p>

<p>以网上书店为例，作者按照四种方法试图对系统进行模块化：按层封装，按功能封装，端口和适配器封装，按组件封装。每种模式都有各自的优缺点，但是这不是问题的重点。重点是：如果你在实现各个模式的时候，不能严格确定每个变量和方法的访问权限，那么所有的设计都等于“没有设计”。</p>

<p>四种设计模式图应该是这个样子：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture34fig08.jpg" alt="model with access control attributes" /></p>

<p>其中虚化的部分代表只可在本包内可见的部分。</p>

<p>如果不能严格使用访问权限修饰符，那么理想中的模块化将会发生变化。极端一点，如果所有属性和方法都是public，那么这四种模式将变成下面的样子：</p>

<p><img src="http://hongchaozhang.github.io/images/CleanArchitecture34fig07.jpg" alt="model with access control attributes" /></p>

<p><strong>四种模式将完全一样！完全一样，只是由于我们没有严格地使用访问权限修饰符！</strong></p>

<p><a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a>
<a id="markdown-其它人的一些读后总结" name="其它人的一些读后总结"></a></p>

<h2>其它人的一些读后总结</h2>

<p><a id="markdown-为什么说我们需要软件架构图" name="为什么说我们需要软件架构图"></a>
<a id="markdown-为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph" name="为什么说我们需要软件架构图httpswwwinfoqcnarticleghprruloyyoqs8fr1ph"></a></p>

<h3><a href="https://www.infoq.cn/article/GhprrUlOYyOqS8*FR1pH">为什么说我们需要软件架构图？</a></h3>

<p>这篇文章中肯、实用，提出的一些观点具有很大的可操作性：
1. 我们常犯的最大的一个错误是为系统中具有高波动性的部分创建详细的架构图。除非是自动生成的，否则手动维护它们对我们来说就是一种负担。
2. 在实践中，大多数利益相关者对详细架构图不感兴趣，但会对一两个反映系统模块和边界的高级架构图感兴趣。除此之外，要深入理解系统，代码才是事实的来源。
3. 请停止为代码中自解释的内容创建详细的架构图，或者当没有真正受众时。
4. 直接询问利益相关者：你们希望从文档中获得什么信息？</p>

<p><a id="markdown-推荐架构整洁之道" name="推荐架构整洁之道"></a>
<a id="markdown-推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597" name="推荐架构整洁之道httpsblogcsdnnetcsdnsevennarticledetails83189597"></a></p>

<h3><a href="https://blog.csdn.net/csdnsevenn/article/details/83189597">推荐《架构整洁之道》</a></h3>

<p>简单vs.简陋、平衡vs.妥协、迭代vs.半成品</p>

<p>这些拥有工匠精神的工程师们还是难以解决某些问题，这些人渐渐地发现，这个世界上有很多问题就像翘翘板一样，只能要一边，这一边上去了，另一边就下来了。就像要么用空间换时间，要么用时间换空间一样，你很难找到同时满足空间和时间要求的“双利解”；就像CAP的三选二的理论一样，这个世界不存在完美的解决方案，无论什么方案都有好的一面和不好的一面。而且，这些工程师还渐渐发现，每当引入一个新的技术来解决一个已有的问题时，这个新的技术就会带来更多的问题，问题就像有一个生命体一样，它们会不断地繁殖和进化。渐渐地，他们发现，问题的多少和系统的复杂度呈正比，而且不仅是线性正比，还可能呈级数正比，此时就越来越难做技术决定。但是有一些资深的工程师开始站出来挑战这些问题，有的基于业务分析给出平衡的方案，有的开始尝试设计更高级的技术，有的开始设计更灵活的系统，有的则开始简化和轻量化整个系统……这些高智商、经验足、不怕难的工程师们引领着整个行业前行。他们就是架构师！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程中的SOLID原则]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming/"/>
    <updated>2018-12-04T11:31:35+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/12/04/solid-principles-while-programming</id>
    <content type="html"><![CDATA[<p>Robert C. Martin (Bob大叔)在《敏捷软件开发》中提出了编程过程中的五个原则，以适应敏捷开发（Agile）的特点：以微小增量的方式构建软件。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#solid%E5%8E%9F%E5%88%99">SOLID原则</a></li>
<li><a href="#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99the-single-responsibility-principle%E7%AE%80%E7%A7%B0srp">单一职责原则（The Single Responsibility Principle，简称SRP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%8C%E8%B4%A3">什么是职责</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li>
</ul>
</li>
<li><a href="#%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99the-open-close-principle%E7%AE%80%E7%A7%B0ocp">开放——封闭原则（The Open-Close Principle，简称OCP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E6%98%AF%E6%8A%BD%E8%B1%A1">关键是抽象</a>

<ul>
<li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
</ul>
</li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%9B%E8%A1%8C%E6%8A%BD%E8%B1%A1">什么时候进行抽象</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-1">结论</a></li>
</ul>
</li>
<li><a href="#liskov%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99the-liskov-substitution-priciple%E7%AE%80%E7%A7%B0lsp">Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">一个违反LSP的简单例子</a></li>
<li><a href="#%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%92%8C%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%85%B3%E7%B3%BB%E6%9B%B4%E5%BE%AE%E5%A6%99%E7%9A%84%E8%BF%9D%E8%A7%84">正方形和长方形的关系：更微妙的违规</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E5%AF%BC%E8%87%B4%E8%BF%9D%E5%8F%8Dlsp%E7%9A%84%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95">其它一些容易导致违反LSP的习惯用法</a>

<ul>
<li><a href="#%E5%AD%90%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%80%80%E5%8C%96%E5%87%BD%E6%95%B0">子类中的退化函数</a></li>
<li><a href="#%E5%AD%90%E7%B1%BB%E6%8A%9B%E5%87%BA%E5%9F%BA%E7%B1%BB%E6%B2%A1%E6%9C%89%E7%9A%84%E5%BC%82%E5%B8%B8">子类抛出基类没有的异常</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-2">结论</a></li>
</ul>
</li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99the-dependency-inversion-principle%E7%AE%80%E7%A7%B0dip">依赖倒置原则（The Dependency Inversion Principle，简称DIP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-3">定义</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E4%BA%8E%E6%8A%BD%E8%B1%A1">依赖于抽象</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90">一个例子</a></li>
<li><a href="#%E7%BB%93%E8%AE%BA-3">结论</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99the-interface-segregation-principle%E7%AE%80%E7%A7%B0isp">接口隔离原则（The Interface Segregation Principle，简称ISP）</a>

<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-4">定义</a></li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AE%9A%E6%97%B6%E9%97%A8">一个例子：定时门</a>

<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用委托对接口分组</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AF%B9%E6%8E%A5%E5%8F%A3%E5%88%86%E7%BB%84">使用多重继承对接口分组</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90atm%E7%95%8C%E9%9D%A2">一个例子：ATM界面</a>

<ul>
<li><a href="#%E5%A4%9A%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F%E4%B8%8E%E5%8D%95%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F">多参数形式与单参数形式</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E8%AE%BA-4">结论</a></li>
</ul>
</li>
</ul>


<p> <br></p>

<p><a id="markdown-solid原则" name="solid原则"></a></p>

<h2>SOLID原则</h2>

<p>SOLID是指我们编程时应该遵守的五个原则：</p>

<ol>
<li>单一职责原则（The Single Responsibility Principle，简称SRP）</li>
<li>开放——封闭原则（The Open-Close Principle，简称OCP）</li>
<li>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</li>
<li>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</li>
<li>接口隔离原则（The Interface Segregation Principle，简称ISP）</li>
</ol>


<p>每个原则取一个字母（<strong>S</strong>RP，<strong>O</strong>CP，<strong>L</strong>SP，<strong>I</strong>SP，<strong>D</strong>IP），合称SOLID原则。</p>

<p><a id="markdown-单一职责原则the-single-responsibility-principle简称srp" name="单一职责原则the-single-responsibility-principle简称srp"></a></p>

<h2>单一职责原则（The Single Responsibility Principle，简称SRP）</h2>

<p><a id="markdown-定义" name="定义"></a></p>

<h3>定义</h3>

<p><strong>就一个类而言，应该只有一个引起它变化的原因。</strong></p>

<p>一个类如果有多个职责，但是你只需要其中的一个职责，你也不得不将其它职责包括进来，还有其它职责所依赖的所有组件。</p>

<p><a id="markdown-什么是职责" name="什么是职责"></a></p>

<h3>什么是职责</h3>

<p>在SRP中，我们把职责定义为“变化的原因”（a reason for change）。如果能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p>

<p>比如Employee这个类如果同时包含了业务规则和对于持久化的控制，多数情况下，我们可以断定它们不应该放在一起：业务规则会频繁地变化，但是持久化的方式却不会如此频繁地变化，并且变化的原因也是完全不同的。</p>

<p><a id="markdown-结论" name="结论"></a></p>

<h3>结论</h3>

<p>SRP是所有原则中最简单的，也是最难运用的。软件设计很多时候要做的，就是发现职责，并把它分离出来。事实上，我们将要论述的其它原则都会以这样或者那样的方式回到这个问题上。</p>

<p><a id="markdown-开放封闭原则the-open-close-principle简称ocp" name="开放封闭原则the-open-close-principle简称ocp"></a></p>

<h2>开放——封闭原则（The Open-Close Principle，简称OCP）</h2>

<p><a id="markdown-定义-1" name="定义-1"></a></p>

<h3>定义</h3>

<p><strong>软件实体（类、模块、函数等）应该是可以扩展，但是不可修改的。</strong></p>

<p>OCP的定义，换个说法：</p>

<ul>
<li>对扩展开放（Open for extension）</li>
<li>对修改封闭（Close for modification）</li>
</ul>


<p>如果程序中的一处改动就会产生连锁反应，导致一系列相关模块的改动，OCP建议我们应该对程序进行重构。重构之后再进行同样的修改，就只需要添加新的功能模块，不需要对原有的代码进行修改。</p>

<p>如何在能在不改变模块原代码的情况下去更改它的行为或者为其添加功能呢？</p>

<p><a id="markdown-关键是抽象" name="关键是抽象"></a></p>

<h3>关键是抽象</h3>

<p>抽象一般有两种方式：
1. 接口
2. 继承</p>

<p><a id="markdown-接口" name="接口"></a></p>

<h4>接口</h4>

<p>用接口对需要的对象进行抽象，也就是所谓的“面向接口编程”。</p>

<p><img src="http://hongchaozhang.github.io/images/InterfaceProgramming.jpg" alt="interface programming" /></p>

<p>上面的a图是一个不遵循OCP的设计。Client和Server都是具体的类，Client要使用Server。如果我们希望Client使用另外一个不同的Server类，那么就需要把Client里面使用Server的地方都做响应的修改。</p>

<p>上面的b图是一个符合OCP的设计。如果需要使用一个不同的服务器类，只需要重新实现这个类，保证这个类也实现类ClientInterface接口，则Client这个类不需要做修改，同时扩展类Client的功能。</p>

<blockquote><p>这个接口为什么叫ClientInterface，而不叫ServerInterface或者AbstractServer之类？因为这个接口和Client的关系更密切。</p></blockquote>

<p><a id="markdown-继承" name="继承"></a></p>

<h4>继承</h4>

<p>继承一个抽象类（和接口类似）或者重写一个父类中的（虚）方法，也是OCP的惯用伎俩。典型的例子，就是那个图形的绘制的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">shape</span><span class="p">.</span><span class="n">draw</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想扩展drawAllShapes方法，使其可以绘制一种新的形状，只需要重新创建一个Shape类的子类，drawAllShapes函数不需要改变，即可实现功能的扩展。这就是OCP。</p>

<p><a id="markdown-什么时候进行抽象" name="什么时候进行抽象"></a></p>

<h3>什么时候进行抽象</h3>

<p>即使是上面的形状绘制的例子，也不是完全的“对扩展开放，对修改关闭。”比如，我要求所有的圆必须在正方形之前绘制，就没法在不修改drawAllShapes的情况下进行这个功能扩展。</p>

<p>我们无法准确预测未来的功能扩展需求，所以，理论上来说，我们也无法实现完全的“对扩展开放，对修改关闭。”</p>

<p>而且更重要的，遵循OCP进行抽象的代价也是昂贵的。创建正确的抽象需要花费开发时间和精力。同时，这些抽象也增加了软件的设计复杂度。开发人员有能力处理的抽象的数量也是有限的。</p>

<p>所以，不要试图在刚开始就实现OCP，可以试着遵循下面的准则：</p>

<ul>
<li>只受一次愚弄</li>
</ul>


<p>也就是说，在刚开始编写代码的时候，假设变化不会发生。当变化发生时，我们就创建抽象进行隔离，防止以后发生同类变化。</p>

<p><a id="markdown-结论-1" name="结论-1"></a></p>

<h3>结论</h3>

<p>在很多方面，OCP都是面向对象设计的核心所在。遵循这个原则，可以带来面向对象技术所声称的巨大好处（也就是，灵活性、可重用性以及可维护性）。但是，对程序的每个部分都肆意地进行抽象也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</p>

<p><a id="markdown-liskov替换原则the-liskov-substitution-priciple简称lsp" name="liskov替换原则the-liskov-substitution-priciple简称lsp"></a></p>

<h2>Liskov替换原则（The Liskov Substitution Priciple，简称LSP）</h2>

<p><a id="markdown-定义-2" name="定义-2"></a></p>

<h3>定义</h3>

<p><strong>子类型必须能够替换掉它们的基类型。</strong></p>

<p>假设一个函数f，它的参数是某个基类型B。如果将基类型B的子类D传给f，会导致f出现错误的行为，那么D就违反了LSP原则。</p>

<p>此时，f的编写者想在f内对D进行检测，以便在把D传给f时，可以使f具有正确的行为。这个行为又违反了OCP原则，因为此时f对于基类型B的所有子类都不在封闭。</p>

<p><a id="markdown-一个违反lsp的简单例子" name="一个违反lsp的简单例子"></a></p>

<h3>一个违反LSP的简单例子</h3>

<p>对于LSP的违反常常会导致以明显违反OCP的方式使用运行时类型检测。这种方式常常是使用一个显式的if语句去确定一个对象的类型，以便于能够选择针对该类型的正确行为。考虑下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawSquare</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw square</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Circle</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">drawCircle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// draw circle</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">drawAllShapes</span><span class="p">([</span><span class="n">Shape</span><span class="p">]</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Shape</span> <span class="n">shape</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Square</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawSquare</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">shape</span> <span class="kt">is</span> <span class="n">Circle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">shape</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很显然，上面的drawAllShapes违反了OCP原则，它必须知道所有的Shape的子类，并且，每创建一个子类，都需要修改drawAllShapes函数。</p>

<p>Square和Circle不能替换其基类型Shape就是违反了LSP原则，这又进一步导致了drawAllShapes违反了OCP原则。因而，对于LSP的违反也潜在违反了OCP原则。</p>

<p><a id="markdown-正方形和长方形的关系更微妙的违规" name="正方形和长方形的关系更微妙的违规"></a></p>

<h3>正方形和长方形的关系：更微妙的违规</h3>

<p>下面正方形继承长方形的例子，很微妙地违反了LSP原则。</p>

<p>长方形的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getWidth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getHeight</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">getArea</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="nb">self</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正方形IS-A长方形，按照面向对象分析的方法，正方形应该继承长方形。同时为了保证正方形的四个边长度一致，需要对<code>setWidth</code>和<code>setHeight</code>两个函数重写。</p>

<p>实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Square</span><span class="p">:</span> <span class="n">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setWidth</span><span class="p">(</span><span class="n">_</span> <span class="nl">width</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setHeight</span><span class="p">(</span><span class="n">_</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Square看起来工作不错，而且这个设计似乎也是自相容的，正确的。可是这个结论是错误的，一个自相容的程序未必就和所有的用户程序相容。考虑下面的函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">tempFunc</span><span class="p">(</span><span class="n">_</span> <span class="nl">rect</span><span class="p">:</span> <span class="n">Rectangle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setWidth</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rect</span><span class="p">.</span><span class="n">setHeight</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">getArea</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果传递一个Square的实例给<code>tempFunc</code>，那么程序就会报错。</p>

<p>有人可能对<code>tempFunc</code>存在的问题进行争辩，说函数<code>tempFunc</code>的编写者不应该假设宽和长是独立变化的。这时候<code>tempFunc</code>的编写者肯定不同意：函数以Rectangle为参数，长宽独立变化就是长方形的特性，为什么不能用？</p>

<p>这时候，我们应该反过来思考一下：IS-A是不是继承的唯一标准？</p>

<p><strong>IS-A不应该成为继承的准则，“可替换性”才是。</strong></p>

<p><a id="markdown-其它一些容易导致违反lsp的习惯用法" name="其它一些容易导致违反lsp的习惯用法"></a></p>

<h3>其它一些容易导致违反LSP的习惯用法</h3>

<p><a id="markdown-子类中的退化函数" name="子类中的退化函数"></a></p>

<h4>子类中的退化函数</h4>

<p>当子类在重写基类函数的时候，如果功能不如基类完备，即出现了退化，那么这个子类在某些情况下就不能替换基类，违反了LSP原则。</p>

<blockquote><p>这也许就是一些语言在子类重写基类函数的时候必须通过super调用基类函数，这就保证了重写不会退化。但是在Swift和Objective-C中可以不调用super。</p></blockquote>

<p><a id="markdown-子类抛出基类没有的异常" name="子类抛出基类没有的异常"></a></p>

<h4>子类抛出基类没有的异常</h4>

<p>此时要遵循LSP，要么改变使用者的期望，要么子类不抛出这个异常。</p>

<p><a id="markdown-结论-2" name="结论-2"></a></p>

<h3>结论</h3>

<p>OCP是很多说法的核心，而LSP是使OCP成为可能的主要原则之一。正是子类的可替换性才使得使用基类类型的模块在无需修改的情况下就可以扩展。这种可替换性必须是开发人员可以隐式依赖的东西。</p>

<p><a id="markdown-依赖倒置原则the-dependency-inversion-principle简称dip" name="依赖倒置原则the-dependency-inversion-principle简称dip"></a></p>

<h2>依赖倒置原则（The Dependency Inversion Principle，简称DIP）</h2>

<p><a id="markdown-定义-3" name="定义-3"></a></p>

<h3>定义</h3>

<ul>
<li><strong>高层模块不应该依赖于低级模块。二者都应该依赖于抽象。</strong></li>
<li><strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></li>
</ul>


<blockquote><p>这里的“抽象”是指接口或者抽象类。</p>

<p>为什么用”倒置“：这是相对于传统的软件开发，比如结构化分析和设计。在这些设计中，倾向于创建一些高层模块依赖于低层模块的模块，策略（Policy）依赖于细节的软件结构。而DIP要求大家都依赖于抽象，而且这个抽象绝对不会放在低层模块中，而是放在高层模块中（或者独立出来一个模块），所以，不再是高层模块依赖低层模块，而是低层模块依赖高层模块（中的抽象）。</p></blockquote>

<p>传统软件开发可能会设计出下面这样的程序结构：</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_bad_design.jpg" alt="DIP bad design" /></p>

<p>在这个设计中，高层模块依赖于低层模块，如果要重用，必须同时引入低层模块。如果高层模块能够独立于低层模块，那么，高层模块就可以非常容易地被重用。该原则是框架（framework）设计的核心原则。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_good_design.jpg" alt="DIP good design" /></p>

<p>上图展示了一个更为合适的模型。每个高层模块都为它所需要的服务声明一个独立的接口，较低的层次实现这些抽象接口，每个高层模块都通过接口使用低层模块。这样，高层模块就不依赖于低层模块，低层模块反而依赖于高层模块中定义的抽象服务接口。</p>

<blockquote><p>其实，低层模块也有重用的问题，也不应该直接依赖于高层模块。这里，应该将高层模块抽象出来的接口独立成一个模块，大家都依赖这个模块。</p></blockquote>

<p><strong>这里的倒置不仅仅是依赖关系的倒置，也是接口所有权的倒置。</strong>我们通常认为工具库应该拥有自己的接口，但是当应用了DIP之后，我们发现往往是客户拥有抽象接口，而它们的服务者则从这些抽象接口派生。</p>

<p><a id="markdown-依赖于抽象" name="依赖于抽象"></a></p>

<h3>依赖于抽象</h3>

<p>“依赖于抽象”这一启发式规则与DIP要求类似，要求我们不应该依赖具体的类，也就是说，程序中所有的依赖关系都应该终止于抽象（抽象类或者接口）。根据这一规则，可知：</p>

<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用。</li>
<li>任何类都不应该从具体类派生。</li>
<li>任何方法都不应该重写它的任何基类中的已经实现了的方法。</li>
</ul>


<p>要完全遵守这个规则几乎是不可能的。对于一些具体的类，如果比较稳定，还是可以依赖的。比如Java或者Swift中的String类型，String比较稳定，不太会变化，依赖于它不会造成损害。</p>

<p>但是如果一个类不稳定，我们最好不要直接依赖它，而要用一个抽象接口隔离这个类的不稳定性，直接使用接口，而不是这个类。</p>

<p><a id="markdown-一个例子" name="一个例子"></a></p>

<h3>一个例子</h3>

<p>依赖倒置可以应用于任何存在一个类向另一个类发送消息的地方。例如Button对Lamp的控制。</p>

<p><img src="http://hongchaozhang.github.io/images/DIP_button_lamp_design.jpg" alt="DIP button lamp design" /></p>

<p>上图中的a设计是不成熟的：Button类依赖于Lamp类，当Lamp类改变时，Button类会受到影响。此外，想要重用Button来控制另外一种对象（比如Motor）是不可能的。Button控制着Lamp对象，并且也只能控制Lamp对象。</p>

<p>这个设计违反类DIP原则：应用程序的高层策略没有和低层的实现分离，抽象没有和具体细节分离。也可以说，高层策略依赖于低层模块，抽象自动依赖于细节。</p>

<p>什么是高层策略呢？它是应用背后的抽象，是那些不随具体细节的改变而改变的真理，它是系统内部的系统——它是隐喻（metaphore）。在Button/Lamp这个例子中，背后的抽象是检测用户的开/关指令并将指令传给目标对象。用什么机制检测用户的指令呢？是直接按下GUI上的一个按钮，还是一个实体按钮，或者一个安全系统中的运动监测器？无关紧要！目标对象是什么呢？无关紧要！这些都是不会影响到抽象的具体细节。</p>

<p>改进之后的b设计则是一个遵守DIP的设计。而且，接口本身没有所有者，可以独立放在一个不同于Button，也不同于Lamp的地方。</p>

<p><a id="markdown-结论-3" name="结论-3"></a></p>

<h3>结论</h3>

<p>传统程序设计，策略依赖于细节。面向对象设计倒置了这种依赖关系，使得细节和策略都依赖于抽象，并且常常是客户拥有服务接口。</p>

<p>事实上，这种依赖关系的倒置正好是面向对象的标志所在。如果依赖关系是倒置的，就是面向对象设计；否则，就是过程化设计。</p>

<p>依赖倒置关系是实现许多面向对象技术所宣称的好处的基本底层机制。它的正确应用对于创建可重用的框架来说是必要的。同时它对于构建在变化面前富有弹性的代码也是非常重要的。</p>

<p><a id="markdown-接口隔离原则the-interface-segregation-principle简称isp" name="接口隔离原则the-interface-segregation-principle简称isp"></a></p>

<h2>接口隔离原则（The Interface Segregation Principle，简称ISP）</h2>

<p><a id="markdown-定义-4" name="定义-4"></a></p>

<h3>定义</h3>

<p><strong>不应该强迫客户依赖于它们不用的方法。</strong></p>

<p>这个原则是用来处理“胖”接口所具有的缺点。如果类的接口不是内聚（cohesive）的，就表示该类具有“胖”的接口。换句话说，类的“胖”接口可以分解成多组方法，每一组方法都服务于不同的客户程序。</p>

<p>如果客户程序依赖于一个具有“胖”接口的类，就相当于强迫客户程序依赖它们不使用的方法，那么这些客户程序就面临着由于这些未使用的方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。</p>

<p><a id="markdown-一个例子定时门" name="一个例子定时门"></a></p>

<h3>一个例子：定时门</h3>

<p><strong>问题描述：</strong></p>

<p>现在有一个Door的类，现在需要实现一个TimerDoor，如果门开的时间过长，就发出警报。为了做到这一点，TimerDoor需要跟另一个名为Timer的对象进行交互。如果一个对象希望得到超时通知，它可以调用Timer的register函数，该函数有两个参数，一个是超时时间，另一个是TimerClient对象，该对象的<code>timeout</code>函数会在超时时被Timer调用。</p>

<p>一个容易想到的实现如下图：</p>

<p><img src="http://hongchaozhang.github.io/images/door_bad_design.jpg" alt="timer door bad design" /></p>

<p>现在Door依赖TimerClient了，可是并不是所有种类的Door都需要定时功能。如果要创建无需定时功能的Door的子类，那么在子类中就必须要提供<code>timeout</code>方法的退化实现，这就有可能违反LSP原则，使得子类不能够替换父类。而且，这些子类的应用程中中也必须引入TimerClient的定义。使Door变“胖”，只是为了给其某个子类带来需要的功能，这就是接口污染。</p>

<p>下面应用接口隔离原则ISP重新设计这个TimerDoor。</p>

<p>TimerDoor应该“具有”两组接口，一组供Timer使用，一组供Door使用。如何将这两组接口分开呢？该问题的答案基于这样的事实：一个对象的客户不是必须通过该对象才能访问其接口，也可以通过委托或者该对象的基类来访问它。</p>

<p><a id="markdown-使用委托对接口分组" name="使用委托对接口分组"></a></p>

<h4>使用委托对接口分组</h4>

<p>该方案如下图所示，当TimerDoor需要向Timer对象注册一个超时请求时，它就创建一个DoorTimerAdaper，并把它注册给Timer。当Timer对象发送<code>timeout</code>消息给DoorTimerAdapter时，DoorTimerAdapter把这个消息委托给TimerDoor的<code>doorTimeout</code>方法。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_1.jpg" alt="timer door good design 1" /></p>

<p>这个设计是个比较通用的设计，在其他地方，也叫做“使用组合而非继承（Prefer Composition to Extension）”。但是这个设计略显复杂。下面基于多重继承的实现更加简洁。</p>

<p><a id="markdown-使用多重继承对接口分组" name="使用多重继承对接口分组"></a></p>

<h4>使用多重继承对接口分组</h4>

<p>不同语言的多重继承的实现是不一样的。倾向于使用Interface或者Protocol实现这一功能。</p>

<p><img src="http://hongchaozhang.github.io/images/door_good_design_2.jpg" alt="timer door good design 2" /></p>

<p>TimerDoor继承Door和TimerClient。尽管这两个基类的客户程序都可以使用TimerDoor，但是实际上都不需要依赖TimerDoor类。这样，它们就通过分离的接口使用同一个对象。</p>

<p>通常情况下，我们都会优先选择多重继承方法，只有当DoorTimerAdapter所做的转换是必须的时候，才考虑使用委托方案。</p>

<blockquote><p>DoorTimerAdapter将<code>timeout</code>接口转换成TimerDoor里面的<code>doorTimeout</code>接口，如果需要，在这个转换过程中还可以做些其它事情。</p></blockquote>

<p><a id="markdown-一个例子atm界面" name="一个例子atm界面"></a></p>

<h3>一个例子：ATM界面</h3>

<p>现在让我们考虑一个更有意义的例子：自动取款机ATM问题。对于ATM上面可执行的不同操作封装一个抽象接口Transaction，三种具体的操作（Deposit，Withdrawal，Transfer）都实现这个接口。每种操作对应的类都可以调用UI抽象接口中的不同方法，但是<strong>每个操作只调用自己对应的方法</strong>。</p>

<p>一个简单直接的实现如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_bad_design.jpg" width="400" alt="atm bad design" /></p>

<p>对于任何Transaction的子类的改动都有可能迫使对UI的相应改动，从而影响其它所有Transaction的子类以及所有依赖UI的类。如果要增加一种操作PayGasBillTransaction，为了处理该操作想要显示的特定消息，就必须要在UI中加入新的方法。这就导致所有其它Transaction都必须重新编译部署。</p>

<p>通过将UI接口分解成三个对应于不同操作的接口，可以避免这种耦合。设计如下：</p>

<p><img src="http://hongchaozhang.github.io/images/ATM_good_design.jpg" width="600" alt="atm good design" /></p>

<p>当我们需要增加一种新的Transaction时，其它Transaction都不需要重新编译部署。</p>

<p><a id="markdown-多参数形式与单参数形式" name="多参数形式与单参数形式"></a></p>

<h4>多参数形式与单参数形式</h4>

<p>考虑一个既要访问TransferUI又要访问DepositUI的函数。假设我们想把这两个UI传入该函数，是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">depositeUI</span><span class="p">:</span> <span class="n">DepositUI</span><span class="p">,</span> <span class="n">_</span> <span class="nl">transferUI</span><span class="p">:</span> <span class="n">TransferUI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="n">tempFund</span><span class="p">(</span><span class="n">_</span> <span class="nl">ui</span><span class="p">:</span> <span class="n">UI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以第二种方法编写函数的诱惑是很强的。毕竟，在第一种多参数形式中，两个参数应用的是同一个对象，调用起来是这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">tempFunc</span><span class="p">(</span><span class="n">ui</span><span class="p">,</span> <span class="n">ui</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上面的调用看起来有悖常理，但是我们还是应该倾向于多参数形式。单参数形式的函数依赖于UI中包含的每一个接口，如果WithDrawalUI发生了改变，那么函数及其所有客户程序都会受到影响。这更悖常理。此外，我们也不能保证传入函数的两个参数一直是同一个对象。也许以后，接口对象会因为某些原因而分离，此时，函数并不需要关注接口对象是合并还是分拆这一事实。</p>

<p><a id="markdown-结论-4" name="结论-4"></a></p>

<h3>结论</h3>

<p>“胖”类会导致其客户程序之间的耦合。当一个客户程序要求该“胖”类进行一个改动时，其它客户程序都会受到影响。因此客户程序应该仅仅依赖于它调用的方法，而不应该直接依赖于一个“胖”类。通过把“胖”类的接口分解为多个特定程序的接口，每个针对特定客户程序的接口只声明其对应客户程序需要的接口。接着，该“胖”类就可以继承所有分离出来的接口，并实现它们。这就解除了客户程序和其没有调用的方法间的依赖关系，并使客户程序之间互不依赖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在swift和Objc之间转换的一些想法]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift/"/>
    <updated>2018-11-13T10:50:18+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/13/some-ideas-on-converting-between-objc-and-swift</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在工作中我们有时候需要在swift和objc之间进行转换，这时候有没有一些工具可以帮助我们呢？</p>

<blockquote><p>当然，大部分时候，我们不需要转换，因为swift和objc的类和方法可以互相暴露给对方。</p></blockquote>

<h2>objc转换成swfit</h2>

<p>搜索了一下，找到了两个工具可以做这个事情：</p>

<h3><a href="https://github.com/yahoojapan/objc2swift">objc2swift</a></h3>

<p>objc2swift是雅虎日本的一个工具，支持在线转换。<a href="https://github.com/dzenbot/XCSwiftr/blob/master/README.md">XCSwiftr</a>就是一个基于objc2swift的xcode插件，通过<a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>进行管理安装，可以在Xcode里面进行objc到swift的转换。但是xcode自从8.0开始就不支持插件了。</p>

<blockquote><p>插件(plugin)只在xcode 8.0之前的版本才支持。从8.0开始，插件就不再支持，但是引入了扩展(extension)。扩展和插件不同的一点是：扩展在独立的进程里面运行，所以扩展的崩溃不会影响到xcode，但是插件的崩溃，则会导致xcode也崩溃。估计插件崩溃导致的xcode崩溃的锅都是Apple来背，Apple很不爽，就让xcode跟插件分开在不同的进程中运行。</p></blockquote>

<p>objc2swift的转换效果很一般。</p>

<p>objc源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>: <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHelloTo:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">([</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Hello, %@.&quot;</span><span class="p">,</span> <span class="n">person</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换之后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHelloTo</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello, \(person).&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">performSelector</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>几个问题：</p>

<ol>
<li>方法名称没有按照swift的习惯改写：应该为<code>sayHello(to person: String)</code>，而不是<code>sayHelloTo(person: String)</code>。</li>
<li><code>performSelector:</code>方法完全转换错误：方法名称错误，应该为<code>perform(_ aSelector: Selector!)</code>，而且参数也错误，不应该为<code>String</code>类型，应该为<code>Selector</code>类型。</li>
<li><code>test</code>方法前面没有加上<code>@objc</code>，所以不能作为<code>#selector</code>的参数。</li>
</ol>


<h3><a href="https://objectivec2swift.com/#/home">Swiftify</a></h3>

<p>swiftify也支持在线转换，而且转换效果明显好于objc2swift。如果愿意花钱，swiftify还可以支持很多功能，包括xcode扩展（注意，这里是“扩展extension”，不是“插件plugin”）、finder扩展、整个工程的转换、离线转换等。</p>

<p>同样用上述objc源代码，转换之后为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="n">to</span> <span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello Swift, Goodbye Obj-C!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">perform</span><span class="p">(</span><span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">MyClass</span><span class="p">.</span><span class="n">test</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">objc</span> <span class="k">func</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>swift转换成objc</h2>

<p><a href="https://objectivec2swift.com/#/home">Swiftify</a>的作者写了一篇博客<a href="https://www.quora.com/How-can-you-convert-Swift-to-Objective-C">How can you convert Swift to Objective-C?</a>，说明了这个问题：</p>

<p>原文是：</p>

<blockquote><p>When speaking about idiomatic Swift, converting method implementations from Swift to Objective-C is the task that cannot be solved for all cases. As you might imagine, many “modern” Swift features do not have any counterparts in Objective-C and thus cannot be converted without a human brain :)</p></blockquote>

<p>结论就是：由于swift有很多objc没有的语言特性，所以swift到objc无法完成自动转换。</p>

<p>但是转换之后的objc的头文件可以从build in “Generated Interface” ([ProjectName]-Swift.h)里面找到，拷贝出来，稍作修改即可。但是仅限于swift暴漏给objc的接口和属性。那些没有暴漏给objc的接口和属性，就需要手动去转换啦。</p>

<blockquote><p>[ProjectName]-Swift.h如果不能通过cmd+shift+O找到，可以从引用这个头文件的objc文件中通过“go to declaration"找到。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读朱光潜《谈修养》]]></title>
    <link href="http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang/"/>
    <updated>2018-11-05T12:44:57+08:00</updated>
    <id>http://hongchaozhang.github.io/blog/2018/11/05/du-zhu-guang-qian-tan-xiu-yang</id>
    <content type="html"><![CDATA[<p>《谈修养》的一点读书杂想和摘抄。</p>

<!-- more -->


<p><br></p>

<ul>
<li><a href="#%E8%B0%88%E5%A4%84%E7%BE%A4%E4%B8%8A%E4%B8%AD%E4%B8%8B">谈处群（上、中、下）</a></li>
<li><a href="#%E8%B0%88%E5%AD%A6%E9%97%AE">谈学问</a></li>
<li><a href="#%E8%B0%88%E8%AF%BB%E4%B9%A6">谈读书</a>

<ul>
<li><a href="#%E5%A5%BD%E4%B9%A6%E4%B8%8D%E5%8E%8C%E7%99%BE%E5%9B%9E%E8%AF%BB">好书不厌百回读</a></li>
<li><a href="#%E7%9F%A5%E8%AF%86%E7%B3%BB%E7%BB%9F%E5%8C%96">知识系统化</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E8%8B%B1%E9%9B%84%E5%B4%87%E6%8B%9C">谈英雄崇拜</a>

<ul>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E5%8E%86%E5%8F%B2">英雄与历史</a></li>
<li><a href="#%E8%8B%B1%E9%9B%84%E4%B8%8E%E4%BA%BA%E6%A0%BC%E6%8F%90%E5%8D%87">英雄与人格提升</a></li>
</ul>
</li>
<li><a href="#%E8%B0%88%E4%BA%A4%E5%8F%8B">谈交友</a></li>
<li><a href="#%E8%B0%88%E9%9D%92%E5%B9%B4%E4%B8%8E%E6%81%8B%E7%88%B1%E7%BB%93%E5%A9%9A">谈青年与恋爱结婚</a></li>
<li><a href="#%E8%B0%88%E4%BC%91%E6%81%AF">谈休息</a></li>
<li><a href="#%E8%B0%88%E6%B6%88%E9%81%A3">谈消遣</a></li>
<li><a href="#%E8%B0%88%E4%BD%93%E8%82%B2">谈体育</a></li>
<li><a href="#%E8%B0%88%E7%BE%8E%E6%84%9F%E6%95%99%E8%82%B2">谈美感教育</a>

<ul>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E6%9C%AC%E8%83%BD%E5%86%B2%E5%8A%A8%E5%92%8C%E6%83%85%E6%84%9F%E7%9A%84%E8%A7%A3%E6%94%BE">美育是本能冲动和情感的解放。</a></li>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E7%9C%BC%E7%95%8C%E7%9A%84%E8%A7%A3%E6%94%BE">美育是眼界的解放。</a></li>
<li><a href="#%E7%BE%8E%E8%82%B2%E6%98%AF%E8%87%AA%E7%84%B6%E9%99%90%E5%88%B6%E7%9A%84%E8%A7%A3%E6%94%BE">美育是自然限制的解放。</a></li>
<li><a href="#%E7%88%B1%E7%BE%8E%E7%9A%84%E5%A4%A9%E6%80%A7%E9%9C%80%E8%A6%81%E5%9F%B9%E5%85%BB">爱美的天性需要培养</a></li>
</ul>
</li>
<li><a href="#%E7%BB%99%E7%94%B3%E6%8A%A5%E9%9D%92%E5%B9%B4%E7%9A%84%E9%9D%92%E5%B9%B4%E8%AF%BB%E8%80%85">给《申报青年》的青年读者</a></li>
</ul>


<p><br></p>

<p><a id="markdown-谈处群上中下" name="谈处群上中下"></a></p>

<h2>谈处群（上、中、下）</h2>

<p>说了很多，也颇有感触，但是没能总结出来。</p>

<p><a id="markdown-谈学问" name="谈学问"></a></p>

<h2>谈学问</h2>

<p>做学问不等同于“读书”。读书只是做学问的一种方式。</p>

<p>孔子那句“学而不思则罔，思而不学则怠”道出了学问的真谛。不能空想，也不能死读书。</p>

<p>学校教育的两个作用应该是：</p>

<ul>
<li>启发兴趣</li>
<li>指点门径</li>
</ul>


<p>而现在的学校不在这两个方面努力，只尽量在灌输知识。这种教育对于学问不仅无裨益，而且是障碍。</p>

<p><a id="markdown-谈读书" name="谈读书"></a></p>

<h2>谈读书</h2>

<p><a id="markdown-好书不厌百回读" name="好书不厌百回读"></a></p>

<h3>好书不厌百回读</h3>

<p>“好书不厌百回读，熟读深思子自知。”</p>

<p>多读不能算作荣誉，少读也不能算是耻辱。少读如果彻底，必能养成深思熟虑的习惯，涵泳优游，以至于变化气质；多读而不求甚解，则如驰骋十里洋场，虽珍奇满目，徒惹得心花意乱，空手而归。世间许多读书人只为装点门面，如暴发户炫耀家私，以多为贵。这在治学方面是自欺欺人，在做人方面是趣味低劣。</p>

<p><a id="markdown-知识系统化" name="知识系统化"></a></p>

<h3>知识系统化</h3>

<p>一书做几遍看，每一遍只着重某一方面。也就是说读书要有中心，有中心才易有系统组织。</p>

<p>一个人心中可以有多个系统中心，将看到的知识归到不同的系统框架中去。大凡零星片段的知识，不但易忘，而且无用。每次所得的新知识必须与旧有的知识联络贯穿，这就是说，必须围绕一个中心归聚到一个系统里去，才会生根，才会开花结果。</p>

<p><a id="markdown-谈英雄崇拜" name="谈英雄崇拜"></a></p>

<h2>谈英雄崇拜</h2>

<p><a id="markdown-英雄与历史" name="英雄与历史"></a></p>

<h3>英雄与历史</h3>

<p><strong>英雄造时势</strong></p>

<p>卡莱尔在《英雄崇拜》中说“人类在这世界上所成就的事业的历史，骨子里就是在当中工作的几个伟大任务的历史。”
尼采的超人主义，也是为英雄崇拜涂上了哲学色彩。</p>

<p><strong>时势造英雄</strong></p>

<p>托尔斯泰的《战争与和平》在传达“时势造英雄”的理念。</p>

<p><a id="markdown-英雄与人格提升" name="英雄与人格提升"></a></p>

<h3>英雄与人格提升</h3>

<p>撇开英雄和历史的关系不说，但是对人的教育感化的作用，就不能否定英雄崇拜。正所谓“高山仰止，景行行止。虽不能至，然心向往之。”</p>

<p>尤其在青少年时代，意向的力量大于概念，与其向他们说仁义道德，不如指点几个有血有肉的具有仁义道德的人给他们看。教育重人格感化，必须是一个具体的人格才真正有感化力。</p>

<p><a id="markdown-谈交友" name="谈交友"></a></p>

<h2>谈交友</h2>

<p>近朱者赤近墨者黑</p>

<p>与善人交，如入芝兰之室，久而不闻其香；与恶人交，如入鲍鱼之市，久而不闻其臭。</p>

<p>诤友难得</p>

<p><a id="markdown-谈青年与恋爱结婚" name="谈青年与恋爱结婚"></a></p>

<h2>谈青年与恋爱结婚</h2>

<p>青年人不宜过早恋爱和结婚，需要自然的方法引导，而非暴力禁止。自然的方法包括：</p>

<ol>
<li>精力有所发挥，精神有所委托。青年人精力旺盛，要他闲着，难免泛滥横流。假如他在工作里发生兴趣，在文艺里发生兴趣，甚至在游戏运动里发生兴趣，这就可以垄断他的心神，不叫它旁迁他涉。</li>
<li>改善社交生活，使同情心得到滋养。青年最需要的是同情，最怕的是寂寞，愈寂寞就愈感觉异性需要的迫切。一般青年追求异性，与其说是迫于性的冲动，毋宁说是迫于同情的需要。要满足这需要，社会生活如果丰富也就够了。一个青年如果有亲热的家庭生活，加上温暖的团体生活，不感觉到孤寂，他虽然还有“遇”恋爱的可能，却无“谋”恋爱的必要。交谊愈广泛，发生恋爱的可能性也就愈少。一个青年最危险的遭遇莫过于向来没有和一个女子有较深的接触，一碰见第一个女子就爱上了她。</li>
</ol>


<p><a id="markdown-谈休息" name="谈休息"></a></p>

<h2>谈休息</h2>

<p>节奏，优游涵泳</p>

<p>休息不仅为蓄力，也为整理酝酿，让筋肉技巧在潜意识中酝酿凝固。</p>

<p>我（朱光潜）生平最爱陶渊明在自祭文里所说的两句话：“勤靡余劳，心有常闲”，这是修养的极境，人事算尽了，而神仙福分也就在尽人事中享着。现代人的毛病是“勤有余劳，心无偶闲”。这使人心地驳杂，缺乏冲和弘毅的气象，日日困于名缰利锁，叫整个世界日趋于干枯黑暗。</p>

<p><a id="markdown-谈消遣" name="谈消遣"></a></p>

<h2>谈消遣</h2>

<p>身和心到活动都有有节奏到周期。此所谓“一张一弛文武之道”。</p>

<p>更番瓜代：脑力工作者要时不时地做些体力活动。</p>

<p>儒家六艺：诗书礼乐射御，其中后四项都带有消遣娱乐到意味。孔子谈修养，“局于人”之后即继以“游于艺”。</p>

<p>世间欢喜消遣的人，无论他们到嗜好如何不同，都有一个共同点，就是他们必都有强旺的生活力，运动家和艺术家如此，嫖客赌徒乃至于烟鬼也是如此。他们到生活力强旺，发泄到需求也就急迫。他们所不同者只在发泄方式。这有如大水，可以灌田、发电或推动机器，也可以泛滥横流，淹毙人畜草木。同是强旺到生活力，用在运动可以健身，用在艺术可以怡情养性，用在吃喝嫖赌就可以劳民伤财，为非作歹。“浪子回头是个宝”，也是这个道理。浪子必是生活力强旺到人，如果可以用于正道，也必是人上之人。</p>

<p><a id="markdown-谈体育" name="谈体育"></a></p>

<h2>谈体育</h2>

<p>德、智、体、美均衡发展。</p>

<p>健康有先天因素，也有后天因素。先天因素我们能做的就是优生优育，母亲的体格康健比父亲更重要。后天健康要注意三个方面。一是营养适宜，二是生活规律，三是心境要宽和冲淡，少动气，少存杂念。</p>

<blockquote><p>我国古代特别看中上述的第三点。“养生莫善于寡欲。”近代社会复杂，刺激特多，愈近于文明，愈远于自然，处处都是扰乱心智的事物，就是处处逼我们打消耗战。我们必须淡泊宁静，以逸待劳。这不但可以养生，也可以使学问事业得到较大的成就。</p></blockquote>

<p>要训练互助、尊重纪律的精神，最好的运动场所是运动场。</p>

<p><a id="markdown-谈美感教育" name="谈美感教育"></a></p>

<h2>谈美感教育</h2>

<p>朱子诗云：“半亩方塘一鉴开，天光云影共徘徊。问渠哪得清如许？为有源头活水来。”这诗所写的是一种修养的胜境。美感教育给我们的是“源头活水”。</p>

<p><a id="markdown-美育是本能冲动和情感的解放" name="美育是本能冲动和情感的解放"></a></p>

<h4>美育是本能冲动和情感的解放。</h4>

<p>宗教、法律、道德约束下的欲望，可以在美育中得到解放。</p>

<p><a id="markdown-美育是眼界的解放" name="美育是眼界的解放"></a></p>

<h4>美育是眼界的解放。</h4>

<p>美育可以培养发现生活美的眼睛。</p>

<p><a id="markdown-美育是自然限制的解放" name="美育是自然限制的解放"></a></p>

<h4>美育是自然限制的解放。</h4>

<p>这是德国唯心派哲学家康德、席勒、叔本华、尼采诸人所最看重的一点，现在我们用浅近语来说明它。</p>

<p>自然世界是有限的，受因果律支配的，其中毫末细故都有他的必然性。社会由历史铸就，人由遗传和环境造成。人的活动 寸步离不开物质生存条件的支配，没有翅膀就不能飞，绝饮食就会饿死。由此类推，人在自然中是极不自由的。动植物和非生物一味顺从自然，接受它的限制，没有过分希冀，也就没有失望和痛苦。人却不同，他有心灵，有不可压制的欲望。人可以说是两重奴隶，第一服从自然的限制，其次要受自己的欲望驱使。<strong>以无穷欲望处有限自然，人便觉得处处不如意，不自由，烦闷苦恼都由此起。</strong></p>

<p>专就物质说，人在自然面前是十分渺小的。但在精神方面，人可以跳开自然的圈套而征服自然，他可以在自然世界之外另在想象中造出较能合理慰情的世界。这就是艺术的创造。</p>

<p>多接受美感教育，就是多学会如何从自然限制中解放出来，由奴隶变成上帝，充分地感觉人的尊严。</p>

<p><a id="markdown-爱美的天性需要培养" name="爱美的天性需要培养"></a></p>

<h3>爱美的天性需要培养</h3>

<p>爱美是人的天性，虽是天性，仍需要培养，否则，便会凋零。</p>

<p>美育必须从年轻时入手，年纪愈大，外务愈纷繁，习惯的牢笼愈坚固，感觉愈迟钝，心里愈复杂，欣赏艺术力也就愈薄弱。</p>

<p>我时常想，无论学哪一科专门学问，干哪一行职业，每个人都应该会听音乐，不断地读文学作品，偶尔有欣赏图画、雕刻的机会。</p>

<p>从历史看，一个民族在最兴旺的时候，艺术成就必伟大，美育必发达。史诗悲剧时代的希腊、文艺复兴时代的意大利、莎士比亚时代的英国、歌德和贝多芬时代的德国都可以作证。现在我们要想复兴民族，必须恢复周以前歌乐舞的盛况，这就是说，必须提倡普及的美感教育。</p>

<p><a id="markdown-给申报青年的青年读者" name="给申报青年的青年读者"></a></p>

<h2>给《申报青年》的青年读者</h2>

<p>我很佩服英国人，他们总是事到头来，才想办法。事没有来到头来，他们总是冷静地等待着，观察着，今天决不打明天的计算。但是他们也决不肯放弃现在的机会，觉得一件事应该去做，就马上去做，不张皇也不迟疑。他们的国家内政外交如此，个人经营的事业也是如此。他们不幻想未来，他们的老谋深算都费在抓住现在和认清现在上面。他们出死力抓住现在，事到头来时，他们总是不慌不忙地处理的很妥当。这种冷静沉着的态度就是值得我们观摩的。</p>

<p>“三此”：此身，此时，此地。</p>
]]></content>
  </entry>
  
</feed>
